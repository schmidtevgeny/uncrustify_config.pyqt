from PyQt5 import QtWidgets, QtGui
import textwrap

def wrap(s):
   my_wrap = textwrap.TextWrapper(width = 80)
   wrap_list = my_wrap.wrap(text=s)
   s = ""
   for line in wrap_list:
      s += "\n# "+line
   return s
class Widget(QtWidgets.QToolBox):

    def __init__(self):
        super(Widget, self).__init__()
        self.setWindowTitle('Uncrustify_d-0.71.0_f')
        self.widget1 = QtWidgets.QWidget()
        self.addItem(self.widget1, self.tr("General options"))
        self.lt1 = QtWidgets.QGridLayout(self.widget1)
        label = QtWidgets.QLabel(self.tr("The type of line endings. ")+self.tr("Default: auto. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 0, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_newlines")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("newlines")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 2, 0)
        self.newlines = QtWidgets.QComboBox()
        self.newlines.addItems(['lf','crlf','cr','auto'])
        self.newlines.setCurrentText('auto')
        self.lt1.addWidget(self.newlines, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The original size of tabs in the input. ")+self.tr("Default: 8. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 3, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_input_tab_size")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("input_tab_size")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 5, 0)
        self.input_tab_size = QtWidgets.QSpinBox()
        self.input_tab_size.setMinimum(0)
        self.input_tab_size.setMaximum(100)
        self.input_tab_size.setValue(8)
        self.lt1.addWidget(self.input_tab_size, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The size of tabs in the output (only used if align_with_tabs=true). ")+self.tr("Default: 8. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 6, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_output_tab_size")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("output_tab_size")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 8, 0)
        self.output_tab_size = QtWidgets.QSpinBox()
        self.output_tab_size.setMinimum(0)
        self.output_tab_size.setMaximum(100)
        self.output_tab_size.setValue(8)
        self.lt1.addWidget(self.output_tab_size, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The ASCII value of the string escape char, usually 92 (\) or (Pawn) 94 (^). ")+self.tr("Default: 92. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 9, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_string_escape_char")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("string_escape_char")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 11, 0)
        self.string_escape_char = QtWidgets.QSpinBox()
        self.string_escape_char.setMinimum(0)
        self.string_escape_char.setMaximum(100)
        self.string_escape_char.setValue(92)
        self.lt1.addWidget(self.string_escape_char, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Alternate string escape char (usually only used for Pawn). ")+self.tr("Only works right before the quote char. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 12, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_string_escape_char2")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("string_escape_char2")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 14, 0)
        self.string_escape_char2 = QtWidgets.QSpinBox()
        self.string_escape_char2.setMinimum(0)
        self.string_escape_char2.setMaximum(100)
        self.string_escape_char2.setValue(0)
        self.lt1.addWidget(self.string_escape_char2, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Replace tab characters found in string literals with the escape sequence \t instead. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 15, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_string_replace_tab_chars")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("string_replace_tab_chars")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 17, 0)
        self.string_replace_tab_chars = QtWidgets.QComboBox()
        self.string_replace_tab_chars.addItems(['true','false'])
        self.string_replace_tab_chars.setCurrentText('false')
        self.lt1.addWidget(self.string_replace_tab_chars, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Allow interpreting '>=' and '>>=' as part of a template in code like 'void f(list<list<B>>=val);'. ")+self.tr("If true, 'assert(x<0 && y>=3)' will be broken. ")+self.tr("Improvements to template detection may make this option obsolete. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 18, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_tok_split_gte")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("tok_split_gte")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 20, 0)
        self.tok_split_gte = QtWidgets.QComboBox()
        self.tok_split_gte.addItems(['true','false'])
        self.tok_split_gte.setCurrentText('false')
        self.lt1.addWidget(self.tok_split_gte, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Disable formatting of NL_CONT ('\\n') ended lines (e.g. ")+self.tr("multiline macros). "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 21, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_disable_processing_nl_cont")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("disable_processing_nl_cont")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 23, 0)
        self.disable_processing_nl_cont = QtWidgets.QComboBox()
        self.disable_processing_nl_cont.addItems(['true','false'])
        self.disable_processing_nl_cont.setCurrentText('false')
        self.lt1.addWidget(self.disable_processing_nl_cont, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Specify the marker used in comments to disable processing of part of the file. ")+self.tr("The comment should be used alone in one line. ")+self.tr("Default:  *INDENT-OFF*. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 24, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_disable_processing_cmt")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("disable_processing_cmt")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 26, 0)
        self.disable_processing_cmt = QtWidgets.QLineEdit()
        self.disable_processing_cmt.setText(" *INDENT-OFF*")
        self.lt1.addWidget(self.disable_processing_cmt, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Specify the marker used in comments to (re)enable processing in a file. ")+self.tr("The comment should be used alone in one line. ")+self.tr("Default:  *INDENT-ON*. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 27, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_enable_processing_cmt")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("enable_processing_cmt")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 29, 0)
        self.enable_processing_cmt = QtWidgets.QLineEdit()
        self.enable_processing_cmt.setText(" *INDENT-ON*")
        self.lt1.addWidget(self.enable_processing_cmt, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Enable parsing of digraphs. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 30, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_enable_digraphs")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("enable_digraphs")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 32, 0)
        self.enable_digraphs = QtWidgets.QComboBox()
        self.enable_digraphs.addItems(['true','false'])
        self.enable_digraphs.setCurrentText('false')
        self.lt1.addWidget(self.enable_digraphs, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove the UTF-8 BOM (recommend 'remove'). "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 33, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_utf8_bom")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("utf8_bom")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 35, 0)
        self.utf8_bom = QtWidgets.QComboBox()
        self.utf8_bom.addItems(['ignore','add','remove','force'])
        self.utf8_bom.setCurrentText('ignore')
        self.lt1.addWidget(self.utf8_bom, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If the file contains bytes with values between 128 and 255, but is not UTF-8, then output as UTF-8. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 36, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_utf8_byte")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("utf8_byte")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 38, 0)
        self.utf8_byte = QtWidgets.QComboBox()
        self.utf8_byte.addItems(['true','false'])
        self.utf8_byte.setCurrentText('false')
        self.lt1.addWidget(self.utf8_byte, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Force the output encoding to UTF-8. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 39, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_utf8_force")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("utf8_force")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 41, 0)
        self.utf8_force = QtWidgets.QComboBox()
        self.utf8_force.addItems(['true','false'])
        self.utf8_force.setCurrentText('false')
        self.lt1.addWidget(self.utf8_force, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'do' and '{'. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 42, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_sp_do_brace_open")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("sp_do_brace_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 44, 0)
        self.sp_do_brace_open = QtWidgets.QComboBox()
        self.sp_do_brace_open.addItems(['ignore','add','remove','force'])
        self.sp_do_brace_open.setCurrentText('ignore')
        self.lt1.addWidget(self.sp_do_brace_open, 44, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '}' and 'while'. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 45, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_sp_brace_close_while")), 46, 0, 1, 5)
        label = QtWidgets.QLabel("sp_brace_close_while")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 47, 0)
        self.sp_brace_close_while = QtWidgets.QComboBox()
        self.sp_brace_close_while.addItems(['ignore','add','remove','force'])
        self.sp_brace_close_while.setCurrentText('ignore')
        self.lt1.addWidget(self.sp_brace_close_while, 47, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'while' and '('. "))
        label.setWordWrap(True)
        self.lt1.addWidget(label, 48, 0, 1, 5)
        self.lt1.addWidget(QtWidgets.QLabel(self.tr("code_sp_while_paren_open")), 49, 0, 1, 5)
        label = QtWidgets.QLabel("sp_while_paren_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(label, 50, 0)
        self.sp_while_paren_open = QtWidgets.QComboBox()
        self.sp_while_paren_open.addItems(['ignore','add','remove','force'])
        self.sp_while_paren_open.setCurrentText('ignore')
        self.lt1.addWidget(self.sp_while_paren_open, 50, 1, 1, 4)
        self.widget2 = QtWidgets.QWidget()
        self.addItem(self.widget2, self.tr("Spacing options"))
        self.lt2 = QtWidgets.QGridLayout(self.widget2)
        label = QtWidgets.QLabel(self.tr("Add or remove space around non-assignment symbolic operators ('+', '/', '%', '<<', and so forth). "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 0, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_arith")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("sp_arith")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 2, 0)
        self.sp_arith = QtWidgets.QComboBox()
        self.sp_arith.addItems(['ignore','add','remove','force'])
        self.sp_arith.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_arith, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around arithmetic operators '+' and '-'. ")+self.tr("Overrides sp_arith. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 3, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_arith_additive")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("sp_arith_additive")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 5, 0)
        self.sp_arith_additive = QtWidgets.QComboBox()
        self.sp_arith_additive.addItems(['ignore','add','remove','force'])
        self.sp_arith_additive.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_arith_additive, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around assignment operator '=', '+=', etc. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 6, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_assign")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("sp_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 8, 0)
        self.sp_assign = QtWidgets.QComboBox()
        self.sp_assign.addItems(['ignore','add','remove','force'])
        self.sp_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_assign, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around '=' in C++11 lambda capture specifications. ")+self.tr("Overrides sp_assign. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 9, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_assign")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cpp_lambda_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 11, 0)
        self.sp_cpp_lambda_assign = QtWidgets.QComboBox()
        self.sp_cpp_lambda_assign.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_assign, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the capture specification of a C++11 lambda when an argument list is present, as in '[] <here> (int x){ ... ")+self.tr("}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 12, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_square_paren")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cpp_lambda_square_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 14, 0)
        self.sp_cpp_lambda_square_paren = QtWidgets.QComboBox()
        self.sp_cpp_lambda_square_paren.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_square_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_square_paren, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the capture specification of a C++11 lambda with no argument list is present, as in '[] <here> { ... ")+self.tr("}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 15, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_square_brace")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cpp_lambda_square_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 17, 0)
        self.sp_cpp_lambda_square_brace = QtWidgets.QComboBox()
        self.sp_cpp_lambda_square_brace.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_square_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_square_brace, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the argument list of a C++11 lambda, as in '[](int x) <here> { ... ")+self.tr("}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 18, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_paren_brace")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cpp_lambda_paren_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 20, 0)
        self.sp_cpp_lambda_paren_brace = QtWidgets.QComboBox()
        self.sp_cpp_lambda_paren_brace.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_paren_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_paren_brace, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between a lambda body and its call operator of an immediately invoked lambda, as in '[]( ... ")+self.tr("){ ... ")+self.tr("} <here> ( ... ")+self.tr(")'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 21, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_fparen")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cpp_lambda_fparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 23, 0)
        self.sp_cpp_lambda_fparen = QtWidgets.QComboBox()
        self.sp_cpp_lambda_fparen.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_fparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_fparen, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around assignment operator '=' in a prototype. ")+self.tr("If set to ignore, use sp_assign. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 24, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_assign_default")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("sp_assign_default")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 26, 0)
        self.sp_assign_default = QtWidgets.QComboBox()
        self.sp_assign_default.addItems(['ignore','add','remove','force'])
        self.sp_assign_default.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_assign_default, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before assignment operator '=', '+=', etc. ")+self.tr("Overrides sp_assign. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 27, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_assign")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 29, 0)
        self.sp_before_assign = QtWidgets.QComboBox()
        self.sp_before_assign.addItems(['ignore','add','remove','force'])
        self.sp_before_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_assign, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after assignment operator '=', '+=', etc. ")+self.tr("Overrides sp_assign. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 30, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_assign")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 32, 0)
        self.sp_after_assign = QtWidgets.QComboBox()
        self.sp_after_assign.addItems(['ignore','add','remove','force'])
        self.sp_after_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_assign, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space in 'NS_ENUM ('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 33, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_enum_paren")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("sp_enum_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 35, 0)
        self.sp_enum_paren = QtWidgets.QComboBox()
        self.sp_enum_paren.addItems(['ignore','add','remove','force'])
        self.sp_enum_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_paren, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around assignment '=' in enum. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 36, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_enum_assign")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("sp_enum_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 38, 0)
        self.sp_enum_assign = QtWidgets.QComboBox()
        self.sp_enum_assign.addItems(['ignore','add','remove','force'])
        self.sp_enum_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_assign, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before assignment '=' in enum. ")+self.tr("Overrides sp_enum_assign. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 39, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_enum_before_assign")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("sp_enum_before_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 41, 0)
        self.sp_enum_before_assign = QtWidgets.QComboBox()
        self.sp_enum_before_assign.addItems(['ignore','add','remove','force'])
        self.sp_enum_before_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_before_assign, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after assignment '=' in enum. ")+self.tr("Overrides sp_enum_assign. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 42, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_enum_after_assign")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("sp_enum_after_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 44, 0)
        self.sp_enum_after_assign = QtWidgets.QComboBox()
        self.sp_enum_after_assign.addItems(['ignore','add','remove','force'])
        self.sp_enum_after_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_after_assign, 44, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around assignment ':' in enum. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 45, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_enum_colon")), 46, 0, 1, 5)
        label = QtWidgets.QLabel("sp_enum_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 47, 0)
        self.sp_enum_colon = QtWidgets.QComboBox()
        self.sp_enum_colon.addItems(['ignore','add','remove','force'])
        self.sp_enum_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_colon, 47, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around preprocessor '##' concatenation operator. ")+self.tr("Default: add. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 48, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_pp_concat")), 49, 0, 1, 5)
        label = QtWidgets.QLabel("sp_pp_concat")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 50, 0)
        self.sp_pp_concat = QtWidgets.QComboBox()
        self.sp_pp_concat.addItems(['ignore','add','remove','force'])
        self.sp_pp_concat.setCurrentText('add')
        self.lt2.addWidget(self.sp_pp_concat, 50, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after preprocessor '#' stringify operator. ")+self.tr("Also affects the '#@' charizing operator. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 51, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_pp_stringify")), 52, 0, 1, 5)
        label = QtWidgets.QLabel("sp_pp_stringify")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 53, 0)
        self.sp_pp_stringify = QtWidgets.QComboBox()
        self.sp_pp_stringify.addItems(['ignore','add','remove','force'])
        self.sp_pp_stringify.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_pp_stringify, 53, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before preprocessor '#' stringify operator as in '#define x(y) L#y'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 54, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_pp_stringify")), 55, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_pp_stringify")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 56, 0)
        self.sp_before_pp_stringify = QtWidgets.QComboBox()
        self.sp_before_pp_stringify.addItems(['ignore','add','remove','force'])
        self.sp_before_pp_stringify.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_pp_stringify, 56, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around boolean operators '&&' and '||'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 57, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_bool")), 58, 0, 1, 5)
        label = QtWidgets.QLabel("sp_bool")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 59, 0)
        self.sp_bool = QtWidgets.QComboBox()
        self.sp_bool.addItems(['ignore','add','remove','force'])
        self.sp_bool.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_bool, 59, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around compare operator '<', '>', '==', etc. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 60, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_compare")), 61, 0, 1, 5)
        label = QtWidgets.QLabel("sp_compare")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 62, 0)
        self.sp_compare = QtWidgets.QComboBox()
        self.sp_compare.addItems(['ignore','add','remove','force'])
        self.sp_compare.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_compare, 62, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside '(' and ')'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 63, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_paren")), 64, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 65, 0)
        self.sp_inside_paren = QtWidgets.QComboBox()
        self.sp_inside_paren.addItems(['ignore','add','remove','force'])
        self.sp_inside_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_paren, 65, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between nested parentheses, ie '((' vs. ")+self.tr("') )'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 66, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_paren_paren")), 67, 0, 1, 5)
        label = QtWidgets.QLabel("sp_paren_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 68, 0)
        self.sp_paren_paren = QtWidgets.QComboBox()
        self.sp_paren_paren.addItems(['ignore','add','remove','force'])
        self.sp_paren_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_paren, 68, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between back-to-back parentheses, ie ')(' vs. ")+self.tr("') ('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 69, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cparen_oparen")), 70, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cparen_oparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 71, 0)
        self.sp_cparen_oparen = QtWidgets.QComboBox()
        self.sp_cparen_oparen.addItems(['ignore','add','remove','force'])
        self.sp_cparen_oparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cparen_oparen, 71, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to balance spaces inside nested parentheses. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 72, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_balance_nested_parens")), 73, 0, 1, 5)
        label = QtWidgets.QLabel("sp_balance_nested_parens")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 74, 0)
        self.sp_balance_nested_parens = QtWidgets.QComboBox()
        self.sp_balance_nested_parens.addItems(['true','false'])
        self.sp_balance_nested_parens.setCurrentText('false')
        self.lt2.addWidget(self.sp_balance_nested_parens, 74, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '{'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 75, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_paren_brace")), 76, 0, 1, 5)
        label = QtWidgets.QLabel("sp_paren_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 77, 0)
        self.sp_paren_brace = QtWidgets.QComboBox()
        self.sp_paren_brace.addItems(['ignore','add','remove','force'])
        self.sp_paren_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_brace, 77, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between nested braces, ie '{{' vs '{ {'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 78, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_brace_brace")), 79, 0, 1, 5)
        label = QtWidgets.QLabel("sp_brace_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 80, 0)
        self.sp_brace_brace = QtWidgets.QComboBox()
        self.sp_brace_brace.addItems(['ignore','add','remove','force'])
        self.sp_brace_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_brace, 80, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before pointer star '*'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 81, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_ptr_star")), 82, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_ptr_star")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 83, 0)
        self.sp_before_ptr_star = QtWidgets.QComboBox()
        self.sp_before_ptr_star.addItems(['ignore','add','remove','force'])
        self.sp_before_ptr_star.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_ptr_star, 83, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before pointer star '*' that isn't followed by a variable name. ")+self.tr("If set to ignore, sp_before_ptr_star is used instead. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 84, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_unnamed_ptr_star")), 85, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_unnamed_ptr_star")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 86, 0)
        self.sp_before_unnamed_ptr_star = QtWidgets.QComboBox()
        self.sp_before_unnamed_ptr_star.addItems(['ignore','add','remove','force'])
        self.sp_before_unnamed_ptr_star.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_unnamed_ptr_star, 86, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between pointer stars '*'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 87, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_between_ptr_star")), 88, 0, 1, 5)
        label = QtWidgets.QLabel("sp_between_ptr_star")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 89, 0)
        self.sp_between_ptr_star = QtWidgets.QComboBox()
        self.sp_between_ptr_star.addItems(['ignore','add','remove','force'])
        self.sp_between_ptr_star.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_between_ptr_star, 89, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after pointer star '*', if followed by a word. ")+self.tr("Overrides sp_type_func. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 90, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_ptr_star")), 91, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_ptr_star")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 92, 0)
        self.sp_after_ptr_star = QtWidgets.QComboBox()
        self.sp_after_ptr_star.addItems(['ignore','add','remove','force'])
        self.sp_after_ptr_star.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_ptr_star, 92, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after pointer caret '^', if followed by a word. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 93, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_ptr_block_caret")), 94, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_ptr_block_caret")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 95, 0)
        self.sp_after_ptr_block_caret = QtWidgets.QComboBox()
        self.sp_after_ptr_block_caret.addItems(['ignore','add','remove','force'])
        self.sp_after_ptr_block_caret.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_ptr_block_caret, 95, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after pointer star '*', if followed by a qualifier. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 96, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_ptr_star_qualifier")), 97, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_ptr_star_qualifier")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 98, 0)
        self.sp_after_ptr_star_qualifier = QtWidgets.QComboBox()
        self.sp_after_ptr_star_qualifier.addItems(['ignore','add','remove','force'])
        self.sp_after_ptr_star_qualifier.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_ptr_star_qualifier, 98, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after a pointer star '*', if followed by a function prototype or function definition. ")+self.tr("Overrides sp_after_ptr_star and sp_type_func. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 99, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_ptr_star_func")), 100, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_ptr_star_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 101, 0)
        self.sp_after_ptr_star_func = QtWidgets.QComboBox()
        self.sp_after_ptr_star_func.addItems(['ignore','add','remove','force'])
        self.sp_after_ptr_star_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_ptr_star_func, 101, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after a pointer star '*', if followed by an open parenthesis, as in 'void* (*)(). "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 102, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_ptr_star_paren")), 103, 0, 1, 5)
        label = QtWidgets.QLabel("sp_ptr_star_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 104, 0)
        self.sp_ptr_star_paren = QtWidgets.QComboBox()
        self.sp_ptr_star_paren.addItems(['ignore','add','remove','force'])
        self.sp_ptr_star_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_ptr_star_paren, 104, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before a pointer star '*', if followed by a function prototype or function definition. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 105, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_ptr_star_func")), 106, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_ptr_star_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 107, 0)
        self.sp_before_ptr_star_func = QtWidgets.QComboBox()
        self.sp_before_ptr_star_func.addItems(['ignore','add','remove','force'])
        self.sp_before_ptr_star_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_ptr_star_func, 107, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before a reference sign '&'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 108, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_byref")), 109, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_byref")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 110, 0)
        self.sp_before_byref = QtWidgets.QComboBox()
        self.sp_before_byref.addItems(['ignore','add','remove','force'])
        self.sp_before_byref.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_byref, 110, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before a reference sign '&' that isn't followed by a variable name. ")+self.tr("If set to ignore, sp_before_byref is used instead. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 111, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_unnamed_byref")), 112, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_unnamed_byref")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 113, 0)
        self.sp_before_unnamed_byref = QtWidgets.QComboBox()
        self.sp_before_unnamed_byref.addItems(['ignore','add','remove','force'])
        self.sp_before_unnamed_byref.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_unnamed_byref, 113, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after reference sign '&', if followed by a word. ")+self.tr("Overrides sp_type_func. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 114, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_byref")), 115, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_byref")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 116, 0)
        self.sp_after_byref = QtWidgets.QComboBox()
        self.sp_after_byref.addItems(['ignore','add','remove','force'])
        self.sp_after_byref.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_byref, 116, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after a reference sign '&', if followed by a function prototype or function definition. ")+self.tr("Overrides sp_after_byref and sp_type_func. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 117, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_byref_func")), 118, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_byref_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 119, 0)
        self.sp_after_byref_func = QtWidgets.QComboBox()
        self.sp_after_byref_func.addItems(['ignore','add','remove','force'])
        self.sp_after_byref_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_byref_func, 119, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before a reference sign '&', if followed by a function prototype or function definition. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 120, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_byref_func")), 121, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_byref_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 122, 0)
        self.sp_before_byref_func = QtWidgets.QComboBox()
        self.sp_before_byref_func.addItems(['ignore','add','remove','force'])
        self.sp_before_byref_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_byref_func, 122, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between type and word. ")+self.tr("Default: force. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 123, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_type")), 124, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_type")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 125, 0)
        self.sp_after_type = QtWidgets.QComboBox()
        self.sp_after_type.addItems(['ignore','add','remove','force'])
        self.sp_after_type.setCurrentText('force')
        self.lt2.addWidget(self.sp_after_type, 125, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'decltype(...)' and word. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 126, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_decltype")), 127, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_decltype")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 128, 0)
        self.sp_after_decltype = QtWidgets.QComboBox()
        self.sp_after_decltype.addItems(['ignore','add','remove','force'])
        self.sp_after_decltype.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_decltype, 128, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove space before the parenthesis in the D constructs 'template Foo(' and 'class Foo('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 129, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_template_paren")), 130, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_template_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 131, 0)
        self.sp_before_template_paren = QtWidgets.QComboBox()
        self.sp_before_template_paren.addItems(['ignore','add','remove','force'])
        self.sp_before_template_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_template_paren, 131, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'template' and '<'. ")+self.tr("If set to ignore, sp_before_angle is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 132, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_template_angle")), 133, 0, 1, 5)
        label = QtWidgets.QLabel("sp_template_angle")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 134, 0)
        self.sp_template_angle = QtWidgets.QComboBox()
        self.sp_template_angle.addItems(['ignore','add','remove','force'])
        self.sp_template_angle.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_template_angle, 134, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before '<'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 135, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_angle")), 136, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_angle")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 137, 0)
        self.sp_before_angle = QtWidgets.QComboBox()
        self.sp_before_angle.addItems(['ignore','add','remove','force'])
        self.sp_before_angle.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_angle, 137, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside '<' and '>'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 138, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_angle")), 139, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_angle")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 140, 0)
        self.sp_inside_angle = QtWidgets.QComboBox()
        self.sp_inside_angle.addItems(['ignore','add','remove','force'])
        self.sp_inside_angle.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_angle, 140, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside '<>'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 141, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_angle_empty")), 142, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_angle_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 143, 0)
        self.sp_inside_angle_empty = QtWidgets.QComboBox()
        self.sp_inside_angle_empty.addItems(['ignore','add','remove','force'])
        self.sp_inside_angle_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_angle_empty, 143, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '>' and ':'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 144, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_angle_colon")), 145, 0, 1, 5)
        label = QtWidgets.QLabel("sp_angle_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 146, 0)
        self.sp_angle_colon = QtWidgets.QComboBox()
        self.sp_angle_colon.addItems(['ignore','add','remove','force'])
        self.sp_angle_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_angle_colon, 146, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after '>'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 147, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_angle")), 148, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_angle")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 149, 0)
        self.sp_after_angle = QtWidgets.QComboBox()
        self.sp_after_angle.addItems(['ignore','add','remove','force'])
        self.sp_after_angle.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_angle, 149, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '>' and '(' as found in 'new List<byte>(foo);'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 150, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_angle_paren")), 151, 0, 1, 5)
        label = QtWidgets.QLabel("sp_angle_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 152, 0)
        self.sp_angle_paren = QtWidgets.QComboBox()
        self.sp_angle_paren.addItems(['ignore','add','remove','force'])
        self.sp_angle_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_angle_paren, 152, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '>' and '()' as found in 'new List<byte>();'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 153, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_angle_paren_empty")), 154, 0, 1, 5)
        label = QtWidgets.QLabel("sp_angle_paren_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 155, 0)
        self.sp_angle_paren_empty = QtWidgets.QComboBox()
        self.sp_angle_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_angle_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_angle_paren_empty, 155, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '>' and a word as in 'List<byte> m;' or 'template <typename T> static ...'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 156, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_angle_word")), 157, 0, 1, 5)
        label = QtWidgets.QLabel("sp_angle_word")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 158, 0)
        self.sp_angle_word = QtWidgets.QComboBox()
        self.sp_angle_word.addItems(['ignore','add','remove','force'])
        self.sp_angle_word.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_angle_word, 158, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '>' and '>' in '>>' (template stuff). ")+self.tr("Default: add. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 159, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_angle_shift")), 160, 0, 1, 5)
        label = QtWidgets.QLabel("sp_angle_shift")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 161, 0)
        self.sp_angle_shift = QtWidgets.QComboBox()
        self.sp_angle_shift.addItems(['ignore','add','remove','force'])
        self.sp_angle_shift.setCurrentText('add')
        self.lt2.addWidget(self.sp_angle_shift, 161, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C++11) Permit removal of the space between '>>' in 'foo<bar<int> >'. ")+self.tr("Note that sp_angle_shift cannot remove the space without this option. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 162, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_permit_cpp11_shift")), 163, 0, 1, 5)
        label = QtWidgets.QLabel("sp_permit_cpp11_shift")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 164, 0)
        self.sp_permit_cpp11_shift = QtWidgets.QComboBox()
        self.sp_permit_cpp11_shift.addItems(['true','false'])
        self.sp_permit_cpp11_shift.setCurrentText('false')
        self.lt2.addWidget(self.sp_permit_cpp11_shift, 164, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before '(' of control statements ('if', 'for', 'switch', 'while', etc.). "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 165, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_sparen")), 166, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_sparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 167, 0)
        self.sp_before_sparen = QtWidgets.QComboBox()
        self.sp_before_sparen.addItems(['ignore','add','remove','force'])
        self.sp_before_sparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_sparen, 167, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside '(' and ')' of control statements. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 168, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_sparen")), 169, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_sparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 170, 0)
        self.sp_inside_sparen = QtWidgets.QComboBox()
        self.sp_inside_sparen.addItems(['ignore','add','remove','force'])
        self.sp_inside_sparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_sparen, 170, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after '(' of control statements. ")+self.tr("Overrides sp_inside_sparen. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 171, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_sparen_open")), 172, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_sparen_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 173, 0)
        self.sp_inside_sparen_open = QtWidgets.QComboBox()
        self.sp_inside_sparen_open.addItems(['ignore','add','remove','force'])
        self.sp_inside_sparen_open.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_sparen_open, 173, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before ')' of control statements. ")+self.tr("Overrides sp_inside_sparen. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 174, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_sparen_close")), 175, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_sparen_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 176, 0)
        self.sp_inside_sparen_close = QtWidgets.QComboBox()
        self.sp_inside_sparen_close.addItems(['ignore','add','remove','force'])
        self.sp_inside_sparen_close.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_sparen_close, 176, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after ')' of control statements. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 177, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_sparen")), 178, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_sparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 179, 0)
        self.sp_after_sparen = QtWidgets.QComboBox()
        self.sp_after_sparen.addItems(['ignore','add','remove','force'])
        self.sp_after_sparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_sparen, 179, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '{' of of control statements. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 180, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_sparen_brace")), 181, 0, 1, 5)
        label = QtWidgets.QLabel("sp_sparen_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 182, 0)
        self.sp_sparen_brace = QtWidgets.QComboBox()
        self.sp_sparen_brace.addItems(['ignore','add','remove','force'])
        self.sp_sparen_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_sparen_brace, 182, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove space between 'invariant' and '('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 183, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_invariant_paren")), 184, 0, 1, 5)
        label = QtWidgets.QLabel("sp_invariant_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 185, 0)
        self.sp_invariant_paren = QtWidgets.QComboBox()
        self.sp_invariant_paren.addItems(['ignore','add','remove','force'])
        self.sp_invariant_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_invariant_paren, 185, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove space after the ')' in 'invariant (C) c'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 186, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_invariant_paren")), 187, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_invariant_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 188, 0)
        self.sp_after_invariant_paren = QtWidgets.QComboBox()
        self.sp_after_invariant_paren.addItems(['ignore','add','remove','force'])
        self.sp_after_invariant_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_invariant_paren, 188, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before empty statement ';' on 'if', 'for' and 'while'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 189, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_special_semi")), 190, 0, 1, 5)
        label = QtWidgets.QLabel("sp_special_semi")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 191, 0)
        self.sp_special_semi = QtWidgets.QComboBox()
        self.sp_special_semi.addItems(['ignore','add','remove','force'])
        self.sp_special_semi.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_special_semi, 191, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before ';'. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 192, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_semi")), 193, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_semi")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 194, 0)
        self.sp_before_semi = QtWidgets.QComboBox()
        self.sp_before_semi.addItems(['ignore','add','remove','force'])
        self.sp_before_semi.setCurrentText('remove')
        self.lt2.addWidget(self.sp_before_semi, 194, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before ';' in non-empty 'for' statements. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 195, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_semi_for")), 196, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_semi_for")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 197, 0)
        self.sp_before_semi_for = QtWidgets.QComboBox()
        self.sp_before_semi_for.addItems(['ignore','add','remove','force'])
        self.sp_before_semi_for.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_semi_for, 197, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before a semicolon of an empty part of a for statement. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 198, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_semi_for_empty")), 199, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_semi_for_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 200, 0)
        self.sp_before_semi_for_empty = QtWidgets.QComboBox()
        self.sp_before_semi_for_empty.addItems(['ignore','add','remove','force'])
        self.sp_before_semi_for_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_semi_for_empty, 200, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after ';', except when followed by a comment. ")+self.tr("Default: add. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 201, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_semi")), 202, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_semi")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 203, 0)
        self.sp_after_semi = QtWidgets.QComboBox()
        self.sp_after_semi.addItems(['ignore','add','remove','force'])
        self.sp_after_semi.setCurrentText('add')
        self.lt2.addWidget(self.sp_after_semi, 203, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after ';' in non-empty 'for' statements. ")+self.tr("Default: force. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 204, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_semi_for")), 205, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_semi_for")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 206, 0)
        self.sp_after_semi_for = QtWidgets.QComboBox()
        self.sp_after_semi_for.addItems(['ignore','add','remove','force'])
        self.sp_after_semi_for.setCurrentText('force')
        self.lt2.addWidget(self.sp_after_semi_for, 206, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the final semicolon of an empty part of a for statement, as in 'for ( ; ; <here> )'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 207, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_semi_for_empty")), 208, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_semi_for_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 209, 0)
        self.sp_after_semi_for_empty = QtWidgets.QComboBox()
        self.sp_after_semi_for_empty.addItems(['ignore','add','remove','force'])
        self.sp_after_semi_for_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_semi_for_empty, 209, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before '[' (except '[]'). "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 210, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_square")), 211, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_square")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 212, 0)
        self.sp_before_square = QtWidgets.QComboBox()
        self.sp_before_square.addItems(['ignore','add','remove','force'])
        self.sp_before_square.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_square, 212, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before '[' for a variable definition. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 213, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_vardef_square")), 214, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_vardef_square")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 215, 0)
        self.sp_before_vardef_square = QtWidgets.QComboBox()
        self.sp_before_vardef_square.addItems(['ignore','add','remove','force'])
        self.sp_before_vardef_square.setCurrentText('remove')
        self.lt2.addWidget(self.sp_before_vardef_square, 215, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before '[' for asm block. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 216, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_square_asm_block")), 217, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_square_asm_block")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 218, 0)
        self.sp_before_square_asm_block = QtWidgets.QComboBox()
        self.sp_before_square_asm_block.addItems(['ignore','add','remove','force'])
        self.sp_before_square_asm_block.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_square_asm_block, 218, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before '[]'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 219, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_squares")), 220, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_squares")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 221, 0)
        self.sp_before_squares = QtWidgets.QComboBox()
        self.sp_before_squares.addItems(['ignore','add','remove','force'])
        self.sp_before_squares.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_squares, 221, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before C++17 structured bindings. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 222, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cpp_before_struct_binding")), 223, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cpp_before_struct_binding")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 224, 0)
        self.sp_cpp_before_struct_binding = QtWidgets.QComboBox()
        self.sp_cpp_before_struct_binding.addItems(['ignore','add','remove','force'])
        self.sp_cpp_before_struct_binding.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_before_struct_binding, 224, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside a non-empty '[' and ']'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 225, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_square")), 226, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_square")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 227, 0)
        self.sp_inside_square = QtWidgets.QComboBox()
        self.sp_inside_square.addItems(['ignore','add','remove','force'])
        self.sp_inside_square.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_square, 227, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space inside a non-empty Objective-C boxed array '@[' and ']'. ")+self.tr("If set to ignore, sp_inside_square is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 228, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_square_oc_array")), 229, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_square_oc_array")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 230, 0)
        self.sp_inside_square_oc_array = QtWidgets.QComboBox()
        self.sp_inside_square_oc_array.addItems(['ignore','add','remove','force'])
        self.sp_inside_square_oc_array.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_square_oc_array, 230, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after ',', ie 'a,b' vs. ")+self.tr("'a, b'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 231, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_comma")), 232, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_comma")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 233, 0)
        self.sp_after_comma = QtWidgets.QComboBox()
        self.sp_after_comma.addItems(['ignore','add','remove','force'])
        self.sp_after_comma.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_comma, 233, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before ','. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 234, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_comma")), 235, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_comma")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 236, 0)
        self.sp_before_comma = QtWidgets.QComboBox()
        self.sp_before_comma.addItems(['ignore','add','remove','force'])
        self.sp_before_comma.setCurrentText('remove')
        self.lt2.addWidget(self.sp_before_comma, 236, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Add or remove space between ',' and ']' in multidimensional array type like 'int[,,]'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 237, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_mdatype_commas")), 238, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_mdatype_commas")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 239, 0)
        self.sp_after_mdatype_commas = QtWidgets.QComboBox()
        self.sp_after_mdatype_commas.addItems(['ignore','add','remove','force'])
        self.sp_after_mdatype_commas.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_mdatype_commas, 239, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Add or remove space between '[' and ',' in multidimensional array type like 'int[,,]'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 240, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_mdatype_commas")), 241, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_mdatype_commas")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 242, 0)
        self.sp_before_mdatype_commas = QtWidgets.QComboBox()
        self.sp_before_mdatype_commas.addItems(['ignore','add','remove','force'])
        self.sp_before_mdatype_commas.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_mdatype_commas, 242, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Add or remove space between ',' in multidimensional array type like 'int[,,]'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 243, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_between_mdatype_commas")), 244, 0, 1, 5)
        label = QtWidgets.QLabel("sp_between_mdatype_commas")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 245, 0)
        self.sp_between_mdatype_commas = QtWidgets.QComboBox()
        self.sp_between_mdatype_commas.addItems(['ignore','add','remove','force'])
        self.sp_between_mdatype_commas.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_between_mdatype_commas, 245, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between an open parenthesis and comma, ie '(,' vs. ")+self.tr("'( ,'. ")+self.tr("Default: force. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 246, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_paren_comma")), 247, 0, 1, 5)
        label = QtWidgets.QLabel("sp_paren_comma")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 248, 0)
        self.sp_paren_comma = QtWidgets.QComboBox()
        self.sp_paren_comma.addItems(['ignore','add','remove','force'])
        self.sp_paren_comma.setCurrentText('force')
        self.lt2.addWidget(self.sp_paren_comma, 248, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before the variadic '...' when preceded by a non-punctuator. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 249, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_ellipsis")), 250, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_ellipsis")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 251, 0)
        self.sp_before_ellipsis = QtWidgets.QComboBox()
        self.sp_before_ellipsis.addItems(['ignore','add','remove','force'])
        self.sp_before_ellipsis.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_ellipsis, 251, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between a type and '...'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 252, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_type_ellipsis")), 253, 0, 1, 5)
        label = QtWidgets.QLabel("sp_type_ellipsis")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 254, 0)
        self.sp_type_ellipsis = QtWidgets.QComboBox()
        self.sp_type_ellipsis.addItems(['ignore','add','remove','force'])
        self.sp_type_ellipsis.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_type_ellipsis, 254, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove space between a type and '?'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 255, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_type_question")), 256, 0, 1, 5)
        label = QtWidgets.QLabel("sp_type_question")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 257, 0)
        self.sp_type_question = QtWidgets.QComboBox()
        self.sp_type_question.addItems(['ignore','add','remove','force'])
        self.sp_type_question.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_type_question, 257, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '...'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 258, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_paren_ellipsis")), 259, 0, 1, 5)
        label = QtWidgets.QLabel("sp_paren_ellipsis")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 260, 0)
        self.sp_paren_ellipsis = QtWidgets.QComboBox()
        self.sp_paren_ellipsis.addItems(['ignore','add','remove','force'])
        self.sp_paren_ellipsis.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_ellipsis, 260, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ')' and a qualifier such as 'const'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 261, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_paren_qualifier")), 262, 0, 1, 5)
        label = QtWidgets.QLabel("sp_paren_qualifier")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 263, 0)
        self.sp_paren_qualifier = QtWidgets.QComboBox()
        self.sp_paren_qualifier.addItems(['ignore','add','remove','force'])
        self.sp_paren_qualifier.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_qualifier, 263, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ')' and 'noexcept'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 264, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_paren_noexcept")), 265, 0, 1, 5)
        label = QtWidgets.QLabel("sp_paren_noexcept")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 266, 0)
        self.sp_paren_noexcept = QtWidgets.QComboBox()
        self.sp_paren_noexcept.addItems(['ignore','add','remove','force'])
        self.sp_paren_noexcept.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_noexcept, 266, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after class ':'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 267, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_class_colon")), 268, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_class_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 269, 0)
        self.sp_after_class_colon = QtWidgets.QComboBox()
        self.sp_after_class_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_class_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_class_colon, 269, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before class ':'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 270, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_class_colon")), 271, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_class_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 272, 0)
        self.sp_before_class_colon = QtWidgets.QComboBox()
        self.sp_before_class_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_class_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_class_colon, 272, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after class constructor ':'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 273, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_constr_colon")), 274, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_constr_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 275, 0)
        self.sp_after_constr_colon = QtWidgets.QComboBox()
        self.sp_after_constr_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_constr_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_constr_colon, 275, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before class constructor ':'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 276, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_constr_colon")), 277, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_constr_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 278, 0)
        self.sp_before_constr_colon = QtWidgets.QComboBox()
        self.sp_before_constr_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_constr_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_constr_colon, 278, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before case ':'. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 279, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_case_colon")), 280, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_case_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 281, 0)
        self.sp_before_case_colon = QtWidgets.QComboBox()
        self.sp_before_case_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_case_colon.setCurrentText('remove')
        self.lt2.addWidget(self.sp_before_case_colon, 281, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'operator' and operator sign. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 282, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_operator")), 283, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_operator")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 284, 0)
        self.sp_after_operator = QtWidgets.QComboBox()
        self.sp_after_operator.addItems(['ignore','add','remove','force'])
        self.sp_after_operator.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_operator, 284, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between the operator symbol and the open parenthesis, as in 'operator ++('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 285, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_operator_sym")), 286, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_operator_sym")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 287, 0)
        self.sp_after_operator_sym = QtWidgets.QComboBox()
        self.sp_after_operator_sym.addItems(['ignore','add','remove','force'])
        self.sp_after_operator_sym.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_operator_sym, 287, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Overrides sp_after_operator_sym when the operator has no arguments, as in 'operator *()'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 288, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_operator_sym_empty")), 289, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_operator_sym_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 290, 0)
        self.sp_after_operator_sym_empty = QtWidgets.QComboBox()
        self.sp_after_operator_sym_empty.addItems(['ignore','add','remove','force'])
        self.sp_after_operator_sym_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_operator_sym_empty, 290, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after C/D cast, ie 'cast(int)a' vs. ")+self.tr("'cast(int) a' or '(int)a' vs. ")+self.tr("'(int) a'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 291, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_cast")), 292, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_cast")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 293, 0)
        self.sp_after_cast = QtWidgets.QComboBox()
        self.sp_after_cast.addItems(['ignore','add','remove','force'])
        self.sp_after_cast.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_cast, 293, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove spaces inside cast parentheses. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 294, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_paren_cast")), 295, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_paren_cast")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 296, 0)
        self.sp_inside_paren_cast = QtWidgets.QComboBox()
        self.sp_inside_paren_cast.addItems(['ignore','add','remove','force'])
        self.sp_inside_paren_cast.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_paren_cast, 296, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between the type and open parenthesis in a C++ cast, ie 'int(exp)' vs. ")+self.tr("'int (exp)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 297, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cpp_cast_paren")), 298, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cpp_cast_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 299, 0)
        self.sp_cpp_cast_paren = QtWidgets.QComboBox()
        self.sp_cpp_cast_paren.addItems(['ignore','add','remove','force'])
        self.sp_cpp_cast_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_cast_paren, 299, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'sizeof' and '('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 300, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_sizeof_paren")), 301, 0, 1, 5)
        label = QtWidgets.QLabel("sp_sizeof_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 302, 0)
        self.sp_sizeof_paren = QtWidgets.QComboBox()
        self.sp_sizeof_paren.addItems(['ignore','add','remove','force'])
        self.sp_sizeof_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_sizeof_paren, 302, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'sizeof' and '...'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 303, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_sizeof_ellipsis")), 304, 0, 1, 5)
        label = QtWidgets.QLabel("sp_sizeof_ellipsis")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 305, 0)
        self.sp_sizeof_ellipsis = QtWidgets.QComboBox()
        self.sp_sizeof_ellipsis.addItems(['ignore','add','remove','force'])
        self.sp_sizeof_ellipsis.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_sizeof_ellipsis, 305, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'sizeof...' and '('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 306, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_sizeof_ellipsis_paren")), 307, 0, 1, 5)
        label = QtWidgets.QLabel("sp_sizeof_ellipsis_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 308, 0)
        self.sp_sizeof_ellipsis_paren = QtWidgets.QComboBox()
        self.sp_sizeof_ellipsis_paren.addItems(['ignore','add','remove','force'])
        self.sp_sizeof_ellipsis_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_sizeof_ellipsis_paren, 308, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'decltype' and '('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 309, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_decltype_paren")), 310, 0, 1, 5)
        label = QtWidgets.QLabel("sp_decltype_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 311, 0)
        self.sp_decltype_paren = QtWidgets.QComboBox()
        self.sp_decltype_paren.addItems(['ignore','add','remove','force'])
        self.sp_decltype_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_decltype_paren, 311, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Pawn) Add or remove space after the tag keyword. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 312, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_tag")), 313, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_tag")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 314, 0)
        self.sp_after_tag = QtWidgets.QComboBox()
        self.sp_after_tag.addItems(['ignore','add','remove','force'])
        self.sp_after_tag.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_tag, 314, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside enum '{' and '}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 315, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_braces_enum")), 316, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_braces_enum")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 317, 0)
        self.sp_inside_braces_enum = QtWidgets.QComboBox()
        self.sp_inside_braces_enum.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces_enum.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces_enum, 317, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside struct/union '{' and '}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 318, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_braces_struct")), 319, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_braces_struct")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 320, 0)
        self.sp_inside_braces_struct = QtWidgets.QComboBox()
        self.sp_inside_braces_struct.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces_struct.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces_struct, 320, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space inside Objective-C boxed dictionary '{' and '}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 321, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_braces_oc_dict")), 322, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_braces_oc_dict")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 323, 0)
        self.sp_inside_braces_oc_dict = QtWidgets.QComboBox()
        self.sp_inside_braces_oc_dict.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces_oc_dict.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces_oc_dict, 323, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after open brace in an unnamed temporary direct-list-initialization. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 324, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_type_brace_init_lst_open")), 325, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_type_brace_init_lst_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 326, 0)
        self.sp_after_type_brace_init_lst_open = QtWidgets.QComboBox()
        self.sp_after_type_brace_init_lst_open.addItems(['ignore','add','remove','force'])
        self.sp_after_type_brace_init_lst_open.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_type_brace_init_lst_open, 326, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before close brace in an unnamed temporary direct-list-initialization. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 327, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_type_brace_init_lst_close")), 328, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_type_brace_init_lst_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 329, 0)
        self.sp_before_type_brace_init_lst_close = QtWidgets.QComboBox()
        self.sp_before_type_brace_init_lst_close.addItems(['ignore','add','remove','force'])
        self.sp_before_type_brace_init_lst_close.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_type_brace_init_lst_close, 329, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside an unnamed temporary direct-list-initialization. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 330, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_type_brace_init_lst")), 331, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_type_brace_init_lst")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 332, 0)
        self.sp_inside_type_brace_init_lst = QtWidgets.QComboBox()
        self.sp_inside_type_brace_init_lst.addItems(['ignore','add','remove','force'])
        self.sp_inside_type_brace_init_lst.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_type_brace_init_lst, 332, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside '{' and '}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 333, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_braces")), 334, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_braces")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 335, 0)
        self.sp_inside_braces = QtWidgets.QComboBox()
        self.sp_inside_braces.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces, 335, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside '{}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 336, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_braces_empty")), 337, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_braces_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 338, 0)
        self.sp_inside_braces_empty = QtWidgets.QComboBox()
        self.sp_inside_braces_empty.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces_empty, 338, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around trailing return operator '->'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 339, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_trailing_return")), 340, 0, 1, 5)
        label = QtWidgets.QLabel("sp_trailing_return")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 341, 0)
        self.sp_trailing_return = QtWidgets.QComboBox()
        self.sp_trailing_return.addItems(['ignore','add','remove','force'])
        self.sp_trailing_return.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_trailing_return, 341, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between return type and function name. ")+self.tr("A minimum of 1 is forced except for pointer return types. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 342, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_type_func")), 343, 0, 1, 5)
        label = QtWidgets.QLabel("sp_type_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 344, 0)
        self.sp_type_func = QtWidgets.QComboBox()
        self.sp_type_func.addItems(['ignore','add','remove','force'])
        self.sp_type_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_type_func, 344, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between type and open brace of an unnamed temporary direct-list-initialization. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 345, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_type_brace_init_lst")), 346, 0, 1, 5)
        label = QtWidgets.QLabel("sp_type_brace_init_lst")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 347, 0)
        self.sp_type_brace_init_lst = QtWidgets.QComboBox()
        self.sp_type_brace_init_lst.addItems(['ignore','add','remove','force'])
        self.sp_type_brace_init_lst.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_type_brace_init_lst, 347, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between function name and '(' on function declaration. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 348, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_proto_paren")), 349, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_proto_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 350, 0)
        self.sp_func_proto_paren = QtWidgets.QComboBox()
        self.sp_func_proto_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_proto_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_proto_paren, 350, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between function name and '()' on function declaration without parameters. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 351, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_proto_paren_empty")), 352, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_proto_paren_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 353, 0)
        self.sp_func_proto_paren_empty = QtWidgets.QComboBox()
        self.sp_func_proto_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_func_proto_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_proto_paren_empty, 353, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between function name and '(' with a typedef specifier. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 354, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_type_paren")), 355, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_type_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 356, 0)
        self.sp_func_type_paren = QtWidgets.QComboBox()
        self.sp_func_type_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_type_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_type_paren, 356, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between alias name and '(' of a non-pointer function type typedef. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 357, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_def_paren")), 358, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_def_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 359, 0)
        self.sp_func_def_paren = QtWidgets.QComboBox()
        self.sp_func_def_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_def_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_def_paren, 359, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between function name and '()' on function definition without parameters. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 360, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_def_paren_empty")), 361, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_def_paren_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 362, 0)
        self.sp_func_def_paren_empty = QtWidgets.QComboBox()
        self.sp_func_def_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_func_def_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_def_paren_empty, 362, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside empty function '()'. ")+self.tr("Overrides sp_after_angle unless use_sp_after_angle_always is set to true. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 363, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_fparens")), 364, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_fparens")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 365, 0)
        self.sp_inside_fparens = QtWidgets.QComboBox()
        self.sp_inside_fparens.addItems(['ignore','add','remove','force'])
        self.sp_inside_fparens.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_fparens, 365, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside function '(' and ')'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 366, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_fparen")), 367, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_fparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 368, 0)
        self.sp_inside_fparen = QtWidgets.QComboBox()
        self.sp_inside_fparen.addItems(['ignore','add','remove','force'])
        self.sp_inside_fparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_fparen, 368, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside the first parentheses in a function type, as in 'void (*x)(...)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 369, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_tparen")), 370, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_tparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 371, 0)
        self.sp_inside_tparen = QtWidgets.QComboBox()
        self.sp_inside_tparen.addItems(['ignore','add','remove','force'])
        self.sp_inside_tparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_tparen, 371, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between the ')' and '(' in a function type, as in 'void (*x)(...)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 372, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_tparen_close")), 373, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_tparen_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 374, 0)
        self.sp_after_tparen_close = QtWidgets.QComboBox()
        self.sp_after_tparen_close.addItems(['ignore','add','remove','force'])
        self.sp_after_tparen_close.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_tparen_close, 374, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ']' and '(' when part of a function call. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 375, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_square_fparen")), 376, 0, 1, 5)
        label = QtWidgets.QLabel("sp_square_fparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 377, 0)
        self.sp_square_fparen = QtWidgets.QComboBox()
        self.sp_square_fparen.addItems(['ignore','add','remove','force'])
        self.sp_square_fparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_square_fparen, 377, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '{' of function. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 378, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_fparen_brace")), 379, 0, 1, 5)
        label = QtWidgets.QLabel("sp_fparen_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 380, 0)
        self.sp_fparen_brace = QtWidgets.QComboBox()
        self.sp_fparen_brace.addItems(['ignore','add','remove','force'])
        self.sp_fparen_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_fparen_brace, 380, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '{' of s function call in object initialization. ")+self.tr("Overrides sp_fparen_brace. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 381, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_fparen_brace_initializer")), 382, 0, 1, 5)
        label = QtWidgets.QLabel("sp_fparen_brace_initializer")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 383, 0)
        self.sp_fparen_brace_initializer = QtWidgets.QComboBox()
        self.sp_fparen_brace_initializer.addItems(['ignore','add','remove','force'])
        self.sp_fparen_brace_initializer.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_fparen_brace_initializer, 383, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Java) Add or remove space between ')' and '{{' of double brace initializer. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 384, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_fparen_dbrace")), 385, 0, 1, 5)
        label = QtWidgets.QLabel("sp_fparen_dbrace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 386, 0)
        self.sp_fparen_dbrace = QtWidgets.QComboBox()
        self.sp_fparen_dbrace.addItems(['ignore','add','remove','force'])
        self.sp_fparen_dbrace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_fparen_dbrace, 386, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between function name and '(' on function calls. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 387, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_call_paren")), 388, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_call_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 389, 0)
        self.sp_func_call_paren = QtWidgets.QComboBox()
        self.sp_func_call_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_call_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_paren, 389, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between function name and '()' on function calls without parameters. ")+self.tr("If set to ignore (the default), sp_func_call_paren is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 390, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_call_paren_empty")), 391, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_call_paren_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 392, 0)
        self.sp_func_call_paren_empty = QtWidgets.QComboBox()
        self.sp_func_call_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_func_call_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_paren_empty, 392, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between the user function name and '(' on function calls. ")+self.tr("You need to set a keyword to be a user function in the config file, like:   set func_call_user tr _ i18n. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 393, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_call_user_paren")), 394, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_call_user_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 395, 0)
        self.sp_func_call_user_paren = QtWidgets.QComboBox()
        self.sp_func_call_user_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_call_user_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_user_paren, 395, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside user function '(' and ')'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 396, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_call_user_inside_fparen")), 397, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_call_user_inside_fparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 398, 0)
        self.sp_func_call_user_inside_fparen = QtWidgets.QComboBox()
        self.sp_func_call_user_inside_fparen.addItems(['ignore','add','remove','force'])
        self.sp_func_call_user_inside_fparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_user_inside_fparen, 398, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between nested parentheses with user functions, ie '((' vs. ")+self.tr("'( ('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 399, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_call_user_paren_paren")), 400, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_call_user_paren_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 401, 0)
        self.sp_func_call_user_paren_paren = QtWidgets.QComboBox()
        self.sp_func_call_user_paren_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_call_user_paren_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_user_paren_paren, 401, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between a constructor/destructor and the open parenthesis. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 402, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_class_paren")), 403, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_class_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 404, 0)
        self.sp_func_class_paren = QtWidgets.QComboBox()
        self.sp_func_class_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_class_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_class_paren, 404, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between a constructor without parameters or destructor and '()'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 405, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_func_class_paren_empty")), 406, 0, 1, 5)
        label = QtWidgets.QLabel("sp_func_class_paren_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 407, 0)
        self.sp_func_class_paren_empty = QtWidgets.QComboBox()
        self.sp_func_class_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_func_class_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_class_paren_empty, 407, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'return' and '('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 408, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_return_paren")), 409, 0, 1, 5)
        label = QtWidgets.QLabel("sp_return_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 410, 0)
        self.sp_return_paren = QtWidgets.QComboBox()
        self.sp_return_paren.addItems(['ignore','add','remove','force'])
        self.sp_return_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_return_paren, 410, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'return' and '{'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 411, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_return_brace")), 412, 0, 1, 5)
        label = QtWidgets.QLabel("sp_return_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 413, 0)
        self.sp_return_brace = QtWidgets.QComboBox()
        self.sp_return_brace.addItems(['ignore','add','remove','force'])
        self.sp_return_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_return_brace, 413, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '__attribute__' and '('. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 414, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_attribute_paren")), 415, 0, 1, 5)
        label = QtWidgets.QLabel("sp_attribute_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 416, 0)
        self.sp_attribute_paren = QtWidgets.QComboBox()
        self.sp_attribute_paren.addItems(['ignore','add','remove','force'])
        self.sp_attribute_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_attribute_paren, 416, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'defined' and '(' in '#if defined (FOO)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 417, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_defined_paren")), 418, 0, 1, 5)
        label = QtWidgets.QLabel("sp_defined_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 419, 0)
        self.sp_defined_paren = QtWidgets.QComboBox()
        self.sp_defined_paren.addItems(['ignore','add','remove','force'])
        self.sp_defined_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_defined_paren, 419, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'throw' and '(' in 'throw (something)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 420, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_throw_paren")), 421, 0, 1, 5)
        label = QtWidgets.QLabel("sp_throw_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 422, 0)
        self.sp_throw_paren = QtWidgets.QComboBox()
        self.sp_throw_paren.addItems(['ignore','add','remove','force'])
        self.sp_throw_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_throw_paren, 422, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'throw' and anything other than '(' as in '@throw [...];'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 423, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_throw")), 424, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_throw")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 425, 0)
        self.sp_after_throw = QtWidgets.QComboBox()
        self.sp_after_throw.addItems(['ignore','add','remove','force'])
        self.sp_after_throw.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_throw, 425, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'catch' and '(' in 'catch (something) { }'. ")+self.tr("If set to ignore, sp_before_sparen is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 426, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_catch_paren")), 427, 0, 1, 5)
        label = QtWidgets.QLabel("sp_catch_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 428, 0)
        self.sp_catch_paren = QtWidgets.QComboBox()
        self.sp_catch_paren.addItems(['ignore','add','remove','force'])
        self.sp_catch_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_catch_paren, 428, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '@catch' and '(' in '@catch (something) { }'. ")+self.tr("If set to ignore, sp_catch_paren is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 429, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_oc_catch_paren")), 430, 0, 1, 5)
        label = QtWidgets.QLabel("sp_oc_catch_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 431, 0)
        self.sp_oc_catch_paren = QtWidgets.QComboBox()
        self.sp_oc_catch_paren.addItems(['ignore','add','remove','force'])
        self.sp_oc_catch_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_oc_catch_paren, 431, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space before Objective-C protocol list as in '@protocol Protocol<here><Protocol_A>' or '@interface MyClass : NSObject<here><MyProtocol>'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 432, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_oc_proto_list")), 433, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_oc_proto_list")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 434, 0)
        self.sp_before_oc_proto_list = QtWidgets.QComboBox()
        self.sp_before_oc_proto_list.addItems(['ignore','add','remove','force'])
        self.sp_before_oc_proto_list.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_oc_proto_list, 434, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space between class name and '(' in '@interface className(categoryName)<ProtocolName>:BaseClass'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 435, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_oc_classname_paren")), 436, 0, 1, 5)
        label = QtWidgets.QLabel("sp_oc_classname_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 437, 0)
        self.sp_oc_classname_paren = QtWidgets.QComboBox()
        self.sp_oc_classname_paren.addItems(['ignore','add','remove','force'])
        self.sp_oc_classname_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_oc_classname_paren, 437, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove space between 'version' and '(' in 'version (something) { }'. ")+self.tr("If set to ignore, sp_before_sparen is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 438, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_version_paren")), 439, 0, 1, 5)
        label = QtWidgets.QLabel("sp_version_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 440, 0)
        self.sp_version_paren = QtWidgets.QComboBox()
        self.sp_version_paren.addItems(['ignore','add','remove','force'])
        self.sp_version_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_version_paren, 440, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove space between 'scope' and '(' in 'scope (something) { }'. ")+self.tr("If set to ignore, sp_before_sparen is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 441, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_scope_paren")), 442, 0, 1, 5)
        label = QtWidgets.QLabel("sp_scope_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 443, 0)
        self.sp_scope_paren = QtWidgets.QComboBox()
        self.sp_scope_paren.addItems(['ignore','add','remove','force'])
        self.sp_scope_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_scope_paren, 443, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'super' and '(' in 'super (something)'. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 444, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_super_paren")), 445, 0, 1, 5)
        label = QtWidgets.QLabel("sp_super_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 446, 0)
        self.sp_super_paren = QtWidgets.QComboBox()
        self.sp_super_paren.addItems(['ignore','add','remove','force'])
        self.sp_super_paren.setCurrentText('remove')
        self.lt2.addWidget(self.sp_super_paren, 446, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'this' and '(' in 'this (something)'. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 447, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_this_paren")), 448, 0, 1, 5)
        label = QtWidgets.QLabel("sp_this_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 449, 0)
        self.sp_this_paren = QtWidgets.QComboBox()
        self.sp_this_paren.addItems(['ignore','add','remove','force'])
        self.sp_this_paren.setCurrentText('remove')
        self.lt2.addWidget(self.sp_this_paren, 449, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between a macro name and its definition. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 450, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_macro")), 451, 0, 1, 5)
        label = QtWidgets.QLabel("sp_macro")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 452, 0)
        self.sp_macro = QtWidgets.QComboBox()
        self.sp_macro.addItems(['ignore','add','remove','force'])
        self.sp_macro.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_macro, 452, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between a macro function ')' and its definition. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 453, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_macro_func")), 454, 0, 1, 5)
        label = QtWidgets.QLabel("sp_macro_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 455, 0)
        self.sp_macro_func = QtWidgets.QComboBox()
        self.sp_macro_func.addItems(['ignore','add','remove','force'])
        self.sp_macro_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_macro_func, 455, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'else' and '{' if on the same line. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 456, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_else_brace")), 457, 0, 1, 5)
        label = QtWidgets.QLabel("sp_else_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 458, 0)
        self.sp_else_brace = QtWidgets.QComboBox()
        self.sp_else_brace.addItems(['ignore','add','remove','force'])
        self.sp_else_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_else_brace, 458, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '}' and 'else' if on the same line. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 459, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_brace_else")), 460, 0, 1, 5)
        label = QtWidgets.QLabel("sp_brace_else")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 461, 0)
        self.sp_brace_else = QtWidgets.QComboBox()
        self.sp_brace_else.addItems(['ignore','add','remove','force'])
        self.sp_brace_else.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_else, 461, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '}' and the name of a typedef on the same line. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 462, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_brace_typedef")), 463, 0, 1, 5)
        label = QtWidgets.QLabel("sp_brace_typedef")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 464, 0)
        self.sp_brace_typedef = QtWidgets.QComboBox()
        self.sp_brace_typedef.addItems(['ignore','add','remove','force'])
        self.sp_brace_typedef.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_typedef, 464, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before the '{' of a 'catch' statement, if the '{' and 'catch' are on the same line, as in 'catch (decl) <here> {'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 465, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_catch_brace")), 466, 0, 1, 5)
        label = QtWidgets.QLabel("sp_catch_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 467, 0)
        self.sp_catch_brace = QtWidgets.QComboBox()
        self.sp_catch_brace.addItems(['ignore','add','remove','force'])
        self.sp_catch_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_catch_brace, 467, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space before the '{' of a '@catch' statement, if the '{' and '@catch' are on the same line, as in '@catch (decl) <here> {'. ")+self.tr("If set to ignore, sp_catch_brace is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 468, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_oc_catch_brace")), 469, 0, 1, 5)
        label = QtWidgets.QLabel("sp_oc_catch_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 470, 0)
        self.sp_oc_catch_brace = QtWidgets.QComboBox()
        self.sp_oc_catch_brace.addItems(['ignore','add','remove','force'])
        self.sp_oc_catch_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_oc_catch_brace, 470, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '}' and 'catch' if on the same line. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 471, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_brace_catch")), 472, 0, 1, 5)
        label = QtWidgets.QLabel("sp_brace_catch")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 473, 0)
        self.sp_brace_catch = QtWidgets.QComboBox()
        self.sp_brace_catch.addItems(['ignore','add','remove','force'])
        self.sp_brace_catch.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_catch, 473, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '}' and '@catch' if on the same line. ")+self.tr("If set to ignore, sp_brace_catch is used. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 474, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_oc_brace_catch")), 475, 0, 1, 5)
        label = QtWidgets.QLabel("sp_oc_brace_catch")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 476, 0)
        self.sp_oc_brace_catch = QtWidgets.QComboBox()
        self.sp_oc_brace_catch.addItems(['ignore','add','remove','force'])
        self.sp_oc_brace_catch.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_oc_brace_catch, 476, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'finally' and '{' if on the same line. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 477, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_finally_brace")), 478, 0, 1, 5)
        label = QtWidgets.QLabel("sp_finally_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 479, 0)
        self.sp_finally_brace = QtWidgets.QComboBox()
        self.sp_finally_brace.addItems(['ignore','add','remove','force'])
        self.sp_finally_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_finally_brace, 479, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '}' and 'finally' if on the same line. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 480, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_brace_finally")), 481, 0, 1, 5)
        label = QtWidgets.QLabel("sp_brace_finally")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 482, 0)
        self.sp_brace_finally = QtWidgets.QComboBox()
        self.sp_brace_finally.addItems(['ignore','add','remove','force'])
        self.sp_brace_finally.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_finally, 482, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'try' and '{' if on the same line. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 483, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_try_brace")), 484, 0, 1, 5)
        label = QtWidgets.QLabel("sp_try_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 485, 0)
        self.sp_try_brace = QtWidgets.QComboBox()
        self.sp_try_brace.addItems(['ignore','add','remove','force'])
        self.sp_try_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_try_brace, 485, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between get/set and '{' if on the same line. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 486, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_getset_brace")), 487, 0, 1, 5)
        label = QtWidgets.QLabel("sp_getset_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 488, 0)
        self.sp_getset_brace = QtWidgets.QComboBox()
        self.sp_getset_brace.addItems(['ignore','add','remove','force'])
        self.sp_getset_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_getset_brace, 488, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between a variable and '{' for C++ uniform initialization. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 489, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_word_brace_init_lst")), 490, 0, 1, 5)
        label = QtWidgets.QLabel("sp_word_brace_init_lst")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 491, 0)
        self.sp_word_brace_init_lst = QtWidgets.QComboBox()
        self.sp_word_brace_init_lst.addItems(['ignore','add','remove','force'])
        self.sp_word_brace_init_lst.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_word_brace_init_lst, 491, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between a variable and '{' for a namespace. ")+self.tr("Default: add. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 492, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_word_brace_ns")), 493, 0, 1, 5)
        label = QtWidgets.QLabel("sp_word_brace_ns")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 494, 0)
        self.sp_word_brace_ns = QtWidgets.QComboBox()
        self.sp_word_brace_ns.addItems(['ignore','add','remove','force'])
        self.sp_word_brace_ns.setCurrentText('add')
        self.lt2.addWidget(self.sp_word_brace_ns, 494, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before the '::' operator. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 495, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_dc")), 496, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_dc")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 497, 0)
        self.sp_before_dc = QtWidgets.QComboBox()
        self.sp_before_dc.addItems(['ignore','add','remove','force'])
        self.sp_before_dc.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_dc, 497, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the '::' operator. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 498, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_dc")), 499, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_dc")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 500, 0)
        self.sp_after_dc = QtWidgets.QComboBox()
        self.sp_after_dc.addItems(['ignore','add','remove','force'])
        self.sp_after_dc.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_dc, 500, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove around the D named array initializer ':' operator. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 501, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_d_array_colon")), 502, 0, 1, 5)
        label = QtWidgets.QLabel("sp_d_array_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 503, 0)
        self.sp_d_array_colon = QtWidgets.QComboBox()
        self.sp_d_array_colon.addItems(['ignore','add','remove','force'])
        self.sp_d_array_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_d_array_colon, 503, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the '!' (not) unary operator. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 504, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_not")), 505, 0, 1, 5)
        label = QtWidgets.QLabel("sp_not")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 506, 0)
        self.sp_not = QtWidgets.QComboBox()
        self.sp_not.addItems(['ignore','add','remove','force'])
        self.sp_not.setCurrentText('remove')
        self.lt2.addWidget(self.sp_not, 506, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the '~' (invert) unary operator. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 507, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inv")), 508, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inv")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 509, 0)
        self.sp_inv = QtWidgets.QComboBox()
        self.sp_inv.addItems(['ignore','add','remove','force'])
        self.sp_inv.setCurrentText('remove')
        self.lt2.addWidget(self.sp_inv, 509, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the '&' (address-of) unary operator. ")+self.tr("This does not affect the spacing after a '&' that is part of a type. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 510, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_addr")), 511, 0, 1, 5)
        label = QtWidgets.QLabel("sp_addr")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 512, 0)
        self.sp_addr = QtWidgets.QComboBox()
        self.sp_addr.addItems(['ignore','add','remove','force'])
        self.sp_addr.setCurrentText('remove')
        self.lt2.addWidget(self.sp_addr, 512, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around the '.' or '->' operators. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 513, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_member")), 514, 0, 1, 5)
        label = QtWidgets.QLabel("sp_member")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 515, 0)
        self.sp_member = QtWidgets.QComboBox()
        self.sp_member.addItems(['ignore','add','remove','force'])
        self.sp_member.setCurrentText('remove')
        self.lt2.addWidget(self.sp_member, 515, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the '*' (dereference) unary operator. ")+self.tr("This does not affect the spacing after a '*' that is part of a type. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 516, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_deref")), 517, 0, 1, 5)
        label = QtWidgets.QLabel("sp_deref")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 518, 0)
        self.sp_deref = QtWidgets.QComboBox()
        self.sp_deref.addItems(['ignore','add','remove','force'])
        self.sp_deref.setCurrentText('remove')
        self.lt2.addWidget(self.sp_deref, 518, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 519, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_sign")), 520, 0, 1, 5)
        label = QtWidgets.QLabel("sp_sign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 521, 0)
        self.sp_sign = QtWidgets.QComboBox()
        self.sp_sign.addItems(['ignore','add','remove','force'])
        self.sp_sign.setCurrentText('remove')
        self.lt2.addWidget(self.sp_sign, 521, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between '++' and '--' the word to which it is being applied, as in '(--x)' or 'y++;'. ")+self.tr("Default: remove. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 522, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_incdec")), 523, 0, 1, 5)
        label = QtWidgets.QLabel("sp_incdec")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 524, 0)
        self.sp_incdec = QtWidgets.QComboBox()
        self.sp_incdec.addItems(['ignore','add','remove','force'])
        self.sp_incdec.setCurrentText('remove')
        self.lt2.addWidget(self.sp_incdec, 524, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before a backslash-newline at the end of a line. ")+self.tr("Default: add. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 525, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_nl_cont")), 526, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_nl_cont")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 527, 0)
        self.sp_before_nl_cont = QtWidgets.QComboBox()
        self.sp_before_nl_cont.addItems(['ignore','add','remove','force'])
        self.sp_before_nl_cont.setCurrentText('add')
        self.lt2.addWidget(self.sp_before_nl_cont, 527, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 528, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_scope")), 529, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_scope")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 530, 0)
        self.sp_after_oc_scope = QtWidgets.QComboBox()
        self.sp_after_oc_scope.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_scope.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_scope, 530, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the colon in message specs, ie '-(int) f:(int) x;' vs. ")+self.tr("'-(int) f: (int) x;'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 531, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_colon")), 532, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 533, 0)
        self.sp_after_oc_colon = QtWidgets.QComboBox()
        self.sp_after_oc_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_colon, 533, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space before the colon in message specs, ie '-(int) f: (int) x;' vs. ")+self.tr("'-(int) f : (int) x;'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 534, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_oc_colon")), 535, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_oc_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 536, 0)
        self.sp_before_oc_colon = QtWidgets.QComboBox()
        self.sp_before_oc_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_oc_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_oc_colon, 536, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the colon in immutable dictionary expression 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 537, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_dict_colon")), 538, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_dict_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 539, 0)
        self.sp_after_oc_dict_colon = QtWidgets.QComboBox()
        self.sp_after_oc_dict_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_dict_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_dict_colon, 539, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space before the colon in immutable dictionary expression 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 540, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_oc_dict_colon")), 541, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_oc_dict_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 542, 0)
        self.sp_before_oc_dict_colon = QtWidgets.QComboBox()
        self.sp_before_oc_dict_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_oc_dict_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_oc_dict_colon, 542, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the colon in message specs, ie '[object setValue:1];' vs. ")+self.tr("'[object setValue: 1];'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 543, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_send_oc_colon")), 544, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_send_oc_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 545, 0)
        self.sp_after_send_oc_colon = QtWidgets.QComboBox()
        self.sp_after_send_oc_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_send_oc_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_send_oc_colon, 545, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space before the colon in message specs, ie '[object setValue:1];' vs. ")+self.tr("'[object setValue :1];'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 546, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_send_oc_colon")), 547, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_send_oc_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 548, 0)
        self.sp_before_send_oc_colon = QtWidgets.QComboBox()
        self.sp_before_send_oc_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_send_oc_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_send_oc_colon, 548, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the (type) in message specs, ie '-(int)f: (int) x;' vs. ")+self.tr("'-(int)f: (int)x;'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 549, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_type")), 550, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_type")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 551, 0)
        self.sp_after_oc_type = QtWidgets.QComboBox()
        self.sp_after_oc_type.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_type.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_type, 551, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the first (type) in message specs, ie '-(int) f:(int)x;' vs. ")+self.tr("'-(int)f:(int)x;'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 552, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_return_type")), 553, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_return_type")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 554, 0)
        self.sp_after_oc_return_type = QtWidgets.QComboBox()
        self.sp_after_oc_return_type.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_return_type.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_return_type, 554, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '@selector' and '(', ie '@selector(msgName)' vs. ")+self.tr("'@selector (msgName)'. ")+self.tr("Also applies to '@protocol()' constructs. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 555, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_at_sel")), 556, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_at_sel")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 557, 0)
        self.sp_after_oc_at_sel = QtWidgets.QComboBox()
        self.sp_after_oc_at_sel.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_at_sel.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_at_sel, 557, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '@selector(x)' and the following word, ie '@selector(foo) a:' vs. ")+self.tr("'@selector(foo)a:'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 558, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_at_sel_parens")), 559, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_at_sel_parens")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 560, 0)
        self.sp_after_oc_at_sel_parens = QtWidgets.QComboBox()
        self.sp_after_oc_at_sel_parens.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_at_sel_parens.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_at_sel_parens, 560, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space inside '@selector' parentheses, ie '@selector(foo)' vs. ")+self.tr("'@selector( foo )'. ")+self.tr("Also applies to '@protocol()' constructs. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 561, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_oc_at_sel_parens")), 562, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_oc_at_sel_parens")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 563, 0)
        self.sp_inside_oc_at_sel_parens = QtWidgets.QComboBox()
        self.sp_inside_oc_at_sel_parens.addItems(['ignore','add','remove','force'])
        self.sp_inside_oc_at_sel_parens.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_oc_at_sel_parens, 563, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space before a block pointer caret, ie '^int (int arg){...}' vs. ")+self.tr("' ^int (int arg){...}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 564, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_oc_block_caret")), 565, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_oc_block_caret")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 566, 0)
        self.sp_before_oc_block_caret = QtWidgets.QComboBox()
        self.sp_before_oc_block_caret.addItems(['ignore','add','remove','force'])
        self.sp_before_oc_block_caret.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_oc_block_caret, 566, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space after a block pointer caret, ie '^int (int arg){...}' vs. ")+self.tr("'^ int (int arg){...}'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 567, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_block_caret")), 568, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_block_caret")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 569, 0)
        self.sp_after_oc_block_caret = QtWidgets.QComboBox()
        self.sp_after_oc_block_caret.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_block_caret.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_block_caret, 569, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space between the receiver and selector in a message, as in '[receiver selector ...]'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 570, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_msg_receiver")), 571, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_msg_receiver")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 572, 0)
        self.sp_after_oc_msg_receiver = QtWidgets.QComboBox()
        self.sp_after_oc_msg_receiver.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_msg_receiver.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_msg_receiver, 572, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space after '@property'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 573, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_property")), 574, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_property")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 575, 0)
        self.sp_after_oc_property = QtWidgets.QComboBox()
        self.sp_after_oc_property.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_property.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_property, 575, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '@synchronized' and the open parenthesis, ie '@synchronized(foo)' vs. ")+self.tr("'@synchronized (foo)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 576, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_oc_synchronized")), 577, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_oc_synchronized")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 578, 0)
        self.sp_after_oc_synchronized = QtWidgets.QComboBox()
        self.sp_after_oc_synchronized.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_synchronized.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_synchronized, 578, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around the ':' in 'b ? t : f'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 579, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cond_colon")), 580, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cond_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 581, 0)
        self.sp_cond_colon = QtWidgets.QComboBox()
        self.sp_cond_colon.addItems(['ignore','add','remove','force'])
        self.sp_cond_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_colon, 581, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before the ':' in 'b ? t : f'. ")+self.tr("Overrides sp_cond_colon. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 582, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cond_colon_before")), 583, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cond_colon_before")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 584, 0)
        self.sp_cond_colon_before = QtWidgets.QComboBox()
        self.sp_cond_colon_before.addItems(['ignore','add','remove','force'])
        self.sp_cond_colon_before.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_colon_before, 584, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the ':' in 'b ? t : f'. ")+self.tr("Overrides sp_cond_colon. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 585, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cond_colon_after")), 586, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cond_colon_after")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 587, 0)
        self.sp_cond_colon_after = QtWidgets.QComboBox()
        self.sp_cond_colon_after.addItems(['ignore','add','remove','force'])
        self.sp_cond_colon_after.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_colon_after, 587, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space around the '?' in 'b ? t : f'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 588, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cond_question")), 589, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cond_question")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 590, 0)
        self.sp_cond_question = QtWidgets.QComboBox()
        self.sp_cond_question.addItems(['ignore','add','remove','force'])
        self.sp_cond_question.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_question, 590, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before the '?' in 'b ? t : f'. ")+self.tr("Overrides sp_cond_question. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 591, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cond_question_before")), 592, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cond_question_before")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 593, 0)
        self.sp_cond_question_before = QtWidgets.QComboBox()
        self.sp_cond_question_before.addItems(['ignore','add','remove','force'])
        self.sp_cond_question_before.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_question_before, 593, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the '?' in 'b ? t : f'. ")+self.tr("Overrides sp_cond_question. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 594, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cond_question_after")), 595, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cond_question_after")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 596, 0)
        self.sp_cond_question_after = QtWidgets.QComboBox()
        self.sp_cond_question_after.addItems(['ignore','add','remove','force'])
        self.sp_cond_question_after.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_question_after, 596, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("In the abbreviated ternary form '(a ?: b)', add or remove space between '?' and ':'. ")+self.tr("Overrides all other sp_cond_* options. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 597, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cond_ternary_short")), 598, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cond_ternary_short")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 599, 0)
        self.sp_cond_ternary_short = QtWidgets.QComboBox()
        self.sp_cond_ternary_short.addItems(['ignore','add','remove','force'])
        self.sp_cond_ternary_short.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_ternary_short, 599, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Fix the spacing between 'case' and the label. ")+self.tr("Only 'ignore' and 'force' make sense here. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 600, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_case_label")), 601, 0, 1, 5)
        label = QtWidgets.QLabel("sp_case_label")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 602, 0)
        self.sp_case_label = QtWidgets.QComboBox()
        self.sp_case_label.addItems(['ignore','add','remove','force'])
        self.sp_case_label.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_case_label, 602, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove space around the D '..' operator. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 603, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_range")), 604, 0, 1, 5)
        label = QtWidgets.QLabel("sp_range")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 605, 0)
        self.sp_range = QtWidgets.QComboBox()
        self.sp_range.addItems(['ignore','add','remove','force'])
        self.sp_range.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_range, 605, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after ':' in a Java/C++11 range-based 'for', as in 'for (Type var : expr)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 606, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_for_colon")), 607, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_for_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 608, 0)
        self.sp_after_for_colon = QtWidgets.QComboBox()
        self.sp_after_for_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_for_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_for_colon, 608, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before ':' in a Java/C++11 range-based 'for', as in 'for (Type var : expr)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 609, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_for_colon")), 610, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_for_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 611, 0)
        self.sp_before_for_colon = QtWidgets.QComboBox()
        self.sp_before_for_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_for_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_for_colon, 611, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove space between 'extern' and '(' as in 'extern (C)'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 612, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_extern_paren")), 613, 0, 1, 5)
        label = QtWidgets.QLabel("sp_extern_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 614, 0)
        self.sp_extern_paren = QtWidgets.QComboBox()
        self.sp_extern_paren.addItems(['ignore','add','remove','force'])
        self.sp_extern_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_extern_paren, 614, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the opening of a C++ comment, ie '// A' vs. ")+self.tr("'//A'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 615, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cmt_cpp_start")), 616, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cmt_cpp_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 617, 0)
        self.sp_cmt_cpp_start = QtWidgets.QComboBox()
        self.sp_cmt_cpp_start.addItems(['ignore','add','remove','force'])
        self.sp_cmt_cpp_start.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cmt_cpp_start, 617, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true, space is added with sp_cmt_cpp_start will be added after doxygen sequences like '///', '///<', '//!' and '//!<'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 618, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cmt_cpp_doxygen")), 619, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cmt_cpp_doxygen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 620, 0)
        self.sp_cmt_cpp_doxygen = QtWidgets.QComboBox()
        self.sp_cmt_cpp_doxygen.addItems(['true','false'])
        self.sp_cmt_cpp_doxygen.setCurrentText('false')
        self.lt2.addWidget(self.sp_cmt_cpp_doxygen, 620, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true, space is added with sp_cmt_cpp_start will be added after Qt translator or meta-data comments like '//:', '//=', and '//~'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 621, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_cmt_cpp_qttr")), 622, 0, 1, 5)
        label = QtWidgets.QLabel("sp_cmt_cpp_qttr")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 623, 0)
        self.sp_cmt_cpp_qttr = QtWidgets.QComboBox()
        self.sp_cmt_cpp_qttr.addItems(['true','false'])
        self.sp_cmt_cpp_qttr.setCurrentText('false')
        self.lt2.addWidget(self.sp_cmt_cpp_qttr, 623, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between #else or #endif and a trailing comment. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 624, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_endif_cmt")), 625, 0, 1, 5)
        label = QtWidgets.QLabel("sp_endif_cmt")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 626, 0)
        self.sp_endif_cmt = QtWidgets.QComboBox()
        self.sp_endif_cmt.addItems(['ignore','add','remove','force'])
        self.sp_endif_cmt.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_endif_cmt, 626, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after 'new', 'delete' and 'delete[]'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 627, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_new")), 628, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_new")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 629, 0)
        self.sp_after_new = QtWidgets.QComboBox()
        self.sp_after_new.addItems(['ignore','add','remove','force'])
        self.sp_after_new.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_new, 629, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between 'new' and '(' in 'new()'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 630, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_between_new_paren")), 631, 0, 1, 5)
        label = QtWidgets.QLabel("sp_between_new_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 632, 0)
        self.sp_between_new_paren = QtWidgets.QComboBox()
        self.sp_between_new_paren.addItems(['ignore','add','remove','force'])
        self.sp_between_new_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_between_new_paren, 632, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space between ')' and type in 'new(foo) BAR'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 633, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_newop_paren")), 634, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_newop_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 635, 0)
        self.sp_after_newop_paren = QtWidgets.QComboBox()
        self.sp_after_newop_paren.addItems(['ignore','add','remove','force'])
        self.sp_after_newop_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_newop_paren, 635, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space inside parenthesis of the new operator as in 'new(foo) BAR'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 636, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_newop_paren")), 637, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_newop_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 638, 0)
        self.sp_inside_newop_paren = QtWidgets.QComboBox()
        self.sp_inside_newop_paren.addItems(['ignore','add','remove','force'])
        self.sp_inside_newop_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_newop_paren, 638, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after the open parenthesis of the new operator, as in 'new(foo) BAR'. ")+self.tr("Overrides sp_inside_newop_paren. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 639, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_newop_paren_open")), 640, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_newop_paren_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 641, 0)
        self.sp_inside_newop_paren_open = QtWidgets.QComboBox()
        self.sp_inside_newop_paren_open.addItems(['ignore','add','remove','force'])
        self.sp_inside_newop_paren_open.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_newop_paren_open, 641, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before the close parenthesis of the new operator, as in 'new(foo) BAR'. ")+self.tr("Overrides sp_inside_newop_paren. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 642, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_inside_newop_paren_close")), 643, 0, 1, 5)
        label = QtWidgets.QLabel("sp_inside_newop_paren_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 644, 0)
        self.sp_inside_newop_paren_close = QtWidgets.QComboBox()
        self.sp_inside_newop_paren_close.addItems(['ignore','add','remove','force'])
        self.sp_inside_newop_paren_close.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_newop_paren_close, 644, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space before a trailing or embedded comment. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 645, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_before_tr_emb_cmt")), 646, 0, 1, 5)
        label = QtWidgets.QLabel("sp_before_tr_emb_cmt")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 647, 0)
        self.sp_before_tr_emb_cmt = QtWidgets.QComboBox()
        self.sp_before_tr_emb_cmt.addItems(['ignore','add','remove','force'])
        self.sp_before_tr_emb_cmt.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_tr_emb_cmt, 647, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Number of spaces before a trailing or embedded comment. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 648, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_num_before_tr_emb_cmt")), 649, 0, 1, 5)
        label = QtWidgets.QLabel("sp_num_before_tr_emb_cmt")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 650, 0)
        self.sp_num_before_tr_emb_cmt = QtWidgets.QSpinBox()
        self.sp_num_before_tr_emb_cmt.setMinimum(0)
        self.sp_num_before_tr_emb_cmt.setMaximum(100)
        self.sp_num_before_tr_emb_cmt.setValue(0)
        self.lt2.addWidget(self.sp_num_before_tr_emb_cmt, 650, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Java) Add or remove space between an annotation and the open parenthesis. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 651, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_annotation_paren")), 652, 0, 1, 5)
        label = QtWidgets.QLabel("sp_annotation_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 653, 0)
        self.sp_annotation_paren = QtWidgets.QComboBox()
        self.sp_annotation_paren.addItems(['ignore','add','remove','force'])
        self.sp_annotation_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_annotation_paren, 653, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true, vbrace tokens are dropped to the previous token and skipped. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 654, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_skip_vbrace_tokens")), 655, 0, 1, 5)
        label = QtWidgets.QLabel("sp_skip_vbrace_tokens")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 656, 0)
        self.sp_skip_vbrace_tokens = QtWidgets.QComboBox()
        self.sp_skip_vbrace_tokens.addItems(['true','false'])
        self.sp_skip_vbrace_tokens.setCurrentText('false')
        self.lt2.addWidget(self.sp_skip_vbrace_tokens, 656, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after 'noexcept'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 657, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_after_noexcept")), 658, 0, 1, 5)
        label = QtWidgets.QLabel("sp_after_noexcept")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 659, 0)
        self.sp_after_noexcept = QtWidgets.QComboBox()
        self.sp_after_noexcept.addItems(['ignore','add','remove','force'])
        self.sp_after_noexcept.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_noexcept, 659, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after '_'. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 660, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_sp_vala_after_translation")), 661, 0, 1, 5)
        label = QtWidgets.QLabel("sp_vala_after_translation")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 662, 0)
        self.sp_vala_after_translation = QtWidgets.QComboBox()
        self.sp_vala_after_translation.addItems(['ignore','add','remove','force'])
        self.sp_vala_after_translation.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_vala_after_translation, 662, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true, a <TAB> is inserted after #define. "))
        label.setWordWrap(True)
        self.lt2.addWidget(label, 663, 0, 1, 5)
        self.lt2.addWidget(QtWidgets.QLabel(self.tr("code_force_tab_after_define")), 664, 0, 1, 5)
        label = QtWidgets.QLabel("force_tab_after_define")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(label, 665, 0)
        self.force_tab_after_define = QtWidgets.QComboBox()
        self.force_tab_after_define.addItems(['true','false'])
        self.force_tab_after_define.setCurrentText('false')
        self.lt2.addWidget(self.force_tab_after_define, 665, 1, 1, 4)
        self.widget3 = QtWidgets.QWidget()
        self.addItem(self.widget3, self.tr("Indenting options"))
        self.lt3 = QtWidgets.QGridLayout(self.widget3)
        label = QtWidgets.QLabel(self.tr("The number of columns to indent per level. ")+self.tr("Usually 2, 3, 4, or 8. ")+self.tr("Default: 8. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 0, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_columns")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("indent_columns")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 2, 0)
        self.indent_columns = QtWidgets.QSpinBox()
        self.indent_columns.setMinimum(0)
        self.indent_columns.setMaximum(100)
        self.indent_columns.setValue(8)
        self.lt3.addWidget(self.indent_columns, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The continuation indent. ")+self.tr("If non-zero, this overrides the indent of '(', '[' and '=' continuation indents. ")+self.tr("Negative values are OK; negative value is absolute and not increased for each '(' or '[' level. ")+self.tr("For FreeBSD, this is set to 4. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 3, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_continue")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("indent_continue")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 5, 0)
        self.indent_continue = QtWidgets.QSpinBox()
        self.indent_continue.setMinimum(-100)
        self.indent_continue.setMaximum(100)
        self.indent_continue.setValue(0)
        self.lt3.addWidget(self.indent_continue, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The continuation indent, only for class header line(s). ")+self.tr("If non-zero, this overrides the indent of 'class' continuation indents. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 6, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_continue_class_head")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("indent_continue_class_head")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 8, 0)
        self.indent_continue_class_head = QtWidgets.QSpinBox()
        self.indent_continue_class_head.setMinimum(0)
        self.indent_continue_class_head.setMaximum(100)
        self.indent_continue_class_head.setValue(0)
        self.lt3.addWidget(self.indent_continue_class_head, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent empty lines (ie lines which contain only spaces before the newline character). "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 9, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_single_newlines")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("indent_single_newlines")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 11, 0)
        self.indent_single_newlines = QtWidgets.QComboBox()
        self.indent_single_newlines.addItems(['true','false'])
        self.indent_single_newlines.setCurrentText('false')
        self.lt3.addWidget(self.indent_single_newlines, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The continuation indent for func_*_param if they are true. ")+self.tr("If non-zero, this overrides the indent. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 12, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_param")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("indent_param")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 14, 0)
        self.indent_param = QtWidgets.QSpinBox()
        self.indent_param.setMinimum(0)
        self.indent_param.setMaximum(100)
        self.indent_param.setValue(0)
        self.lt3.addWidget(self.indent_param, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to use tabs when indenting code. ")+self.tr("0: Spaces only 1: Indent with tabs to brace level, align with spaces (default) 2: Indent and align with tabs, using spaces when not on a tabstop. ")+self.tr("Default: 1. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 15, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_with_tabs")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("indent_with_tabs")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 17, 0)
        self.indent_with_tabs = QtWidgets.QSpinBox()
        self.indent_with_tabs.setMinimum(0)
        self.indent_with_tabs.setMaximum(100)
        self.indent_with_tabs.setValue(1)
        self.lt3.addWidget(self.indent_with_tabs, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent comments that are not at a brace level with tabs on a tabstop. ")+self.tr("Requires indent_with_tabs=2. ")+self.tr("If false, will use spaces. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 18, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_cmt_with_tabs")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("indent_cmt_with_tabs")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 20, 0)
        self.indent_cmt_with_tabs = QtWidgets.QComboBox()
        self.indent_cmt_with_tabs.addItems(['true','false'])
        self.indent_cmt_with_tabs.setCurrentText('false')
        self.lt3.addWidget(self.indent_cmt_with_tabs, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent strings broken by '\' so that they line up. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 21, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_align_string")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("indent_align_string")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 23, 0)
        self.indent_align_string = QtWidgets.QComboBox()
        self.indent_align_string.addItems(['true','false'])
        self.indent_align_string.setCurrentText('false')
        self.lt3.addWidget(self.indent_align_string, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of spaces to indent multi-line XML strings. ")+self.tr("Requires indent_align_string=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 24, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_xml_string")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("indent_xml_string")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 26, 0)
        self.indent_xml_string = QtWidgets.QSpinBox()
        self.indent_xml_string.setMinimum(0)
        self.indent_xml_string.setMaximum(100)
        self.indent_xml_string.setValue(0)
        self.lt3.addWidget(self.indent_xml_string, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Spaces to indent '{' from level. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 27, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_brace")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("indent_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 29, 0)
        self.indent_brace = QtWidgets.QSpinBox()
        self.indent_brace.setMinimum(0)
        self.indent_brace.setMaximum(100)
        self.indent_brace.setValue(0)
        self.lt3.addWidget(self.indent_brace, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether braces are indented to the body level. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 30, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_braces")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("indent_braces")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 32, 0)
        self.indent_braces = QtWidgets.QComboBox()
        self.indent_braces.addItems(['true','false'])
        self.indent_braces.setCurrentText('false')
        self.lt3.addWidget(self.indent_braces, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to disable indenting function braces if indent_braces=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 33, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_braces_no_func")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("indent_braces_no_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 35, 0)
        self.indent_braces_no_func = QtWidgets.QComboBox()
        self.indent_braces_no_func.addItems(['true','false'])
        self.indent_braces_no_func.setCurrentText('false')
        self.lt3.addWidget(self.indent_braces_no_func, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to disable indenting class braces if indent_braces=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 36, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_braces_no_class")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("indent_braces_no_class")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 38, 0)
        self.indent_braces_no_class = QtWidgets.QComboBox()
        self.indent_braces_no_class.addItems(['true','false'])
        self.indent_braces_no_class.setCurrentText('false')
        self.lt3.addWidget(self.indent_braces_no_class, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to disable indenting struct braces if indent_braces=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 39, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_braces_no_struct")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("indent_braces_no_struct")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 41, 0)
        self.indent_braces_no_struct = QtWidgets.QComboBox()
        self.indent_braces_no_struct.addItems(['true','false'])
        self.indent_braces_no_struct.setCurrentText('false')
        self.lt3.addWidget(self.indent_braces_no_struct, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent based on the size of the brace parent, ie 'if' => 3 spaces, 'for' => 4 spaces, etc. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 42, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_brace_parent")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("indent_brace_parent")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 44, 0)
        self.indent_brace_parent = QtWidgets.QComboBox()
        self.indent_brace_parent.addItems(['true','false'])
        self.indent_brace_parent.setCurrentText('false')
        self.lt3.addWidget(self.indent_brace_parent, 44, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent based on the open parenthesis instead of the open brace in '({\n'. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 45, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_paren_open_brace")), 46, 0, 1, 5)
        label = QtWidgets.QLabel("indent_paren_open_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 47, 0)
        self.indent_paren_open_brace = QtWidgets.QComboBox()
        self.indent_paren_open_brace.addItems(['true','false'])
        self.indent_paren_open_brace.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_open_brace, 47, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Whether to indent the brace of a C# delegate by another level. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 48, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_cs_delegate_brace")), 49, 0, 1, 5)
        label = QtWidgets.QLabel("indent_cs_delegate_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 50, 0)
        self.indent_cs_delegate_brace = QtWidgets.QComboBox()
        self.indent_cs_delegate_brace.addItems(['true','false'])
        self.indent_cs_delegate_brace.setCurrentText('false')
        self.lt3.addWidget(self.indent_cs_delegate_brace, 50, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Whether to indent a C# delegate (to handle delegates with no brace) by another level. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 51, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_cs_delegate_body")), 52, 0, 1, 5)
        label = QtWidgets.QLabel("indent_cs_delegate_body")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 53, 0)
        self.indent_cs_delegate_body = QtWidgets.QComboBox()
        self.indent_cs_delegate_body.addItems(['true','false'])
        self.indent_cs_delegate_body.setCurrentText('false')
        self.lt3.addWidget(self.indent_cs_delegate_body, 53, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the body of a 'namespace'. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 54, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_namespace")), 55, 0, 1, 5)
        label = QtWidgets.QLabel("indent_namespace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 56, 0)
        self.indent_namespace = QtWidgets.QComboBox()
        self.indent_namespace.addItems(['true','false'])
        self.indent_namespace.setCurrentText('false')
        self.lt3.addWidget(self.indent_namespace, 56, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent only the first namespace, and not any nested namespaces. ")+self.tr("Requires indent_namespace=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 57, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_namespace_single_indent")), 58, 0, 1, 5)
        label = QtWidgets.QLabel("indent_namespace_single_indent")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 59, 0)
        self.indent_namespace_single_indent = QtWidgets.QComboBox()
        self.indent_namespace_single_indent.addItems(['true','false'])
        self.indent_namespace_single_indent.setCurrentText('false')
        self.lt3.addWidget(self.indent_namespace_single_indent, 59, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of spaces to indent a namespace block. ")+self.tr("If set to zero, use the value indent_columns. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 60, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_namespace_level")), 61, 0, 1, 5)
        label = QtWidgets.QLabel("indent_namespace_level")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 62, 0)
        self.indent_namespace_level = QtWidgets.QSpinBox()
        self.indent_namespace_level.setMinimum(0)
        self.indent_namespace_level.setMaximum(100)
        self.indent_namespace_level.setValue(0)
        self.lt3.addWidget(self.indent_namespace_level, 62, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If the body of the namespace is longer than this number, it won't be indented. ")+self.tr("Requires indent_namespace=true. ")+self.tr("0 means no limit. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 63, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_namespace_limit")), 64, 0, 1, 5)
        label = QtWidgets.QLabel("indent_namespace_limit")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 65, 0)
        self.indent_namespace_limit = QtWidgets.QSpinBox()
        self.indent_namespace_limit.setMinimum(0)
        self.indent_namespace_limit.setMaximum(100)
        self.indent_namespace_limit.setValue(0)
        self.lt3.addWidget(self.indent_namespace_limit, 65, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether the 'extern \"C\"' body is indented. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 66, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_extern")), 67, 0, 1, 5)
        label = QtWidgets.QLabel("indent_extern")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 68, 0)
        self.indent_extern = QtWidgets.QComboBox()
        self.indent_extern.addItems(['true','false'])
        self.indent_extern.setCurrentText('false')
        self.lt3.addWidget(self.indent_extern, 68, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether the 'class' body is indented. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 69, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_class")), 70, 0, 1, 5)
        label = QtWidgets.QLabel("indent_class")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 71, 0)
        self.indent_class = QtWidgets.QComboBox()
        self.indent_class.addItems(['true','false'])
        self.indent_class.setCurrentText('false')
        self.lt3.addWidget(self.indent_class, 71, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the stuff after a leading base class colon. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 72, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_class_colon")), 73, 0, 1, 5)
        label = QtWidgets.QLabel("indent_class_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 74, 0)
        self.indent_class_colon = QtWidgets.QComboBox()
        self.indent_class_colon.addItems(['true','false'])
        self.indent_class_colon.setCurrentText('false')
        self.lt3.addWidget(self.indent_class_colon, 74, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent based on a class colon instead of the stuff after the colon. ")+self.tr("Requires indent_class_colon=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 75, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_class_on_colon")), 76, 0, 1, 5)
        label = QtWidgets.QLabel("indent_class_on_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 77, 0)
        self.indent_class_on_colon = QtWidgets.QComboBox()
        self.indent_class_on_colon.addItems(['true','false'])
        self.indent_class_on_colon.setCurrentText('false')
        self.lt3.addWidget(self.indent_class_on_colon, 77, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the stuff after a leading class initializer colon. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 78, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_constr_colon")), 79, 0, 1, 5)
        label = QtWidgets.QLabel("indent_constr_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 80, 0)
        self.indent_constr_colon = QtWidgets.QComboBox()
        self.indent_constr_colon.addItems(['true','false'])
        self.indent_constr_colon.setCurrentText('false')
        self.lt3.addWidget(self.indent_constr_colon, 80, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Virtual indent from the ':' for member initializers. ")+self.tr("Default: 2. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 81, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_ctor_init_leading")), 82, 0, 1, 5)
        label = QtWidgets.QLabel("indent_ctor_init_leading")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 83, 0)
        self.indent_ctor_init_leading = QtWidgets.QSpinBox()
        self.indent_ctor_init_leading.setMinimum(0)
        self.indent_ctor_init_leading.setMaximum(100)
        self.indent_ctor_init_leading.setValue(2)
        self.lt3.addWidget(self.indent_ctor_init_leading, 83, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Additional indent for constructor initializer list. ")+self.tr("Negative values decrease indent down to the first column. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 84, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_ctor_init")), 85, 0, 1, 5)
        label = QtWidgets.QLabel("indent_ctor_init")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 86, 0)
        self.indent_ctor_init = QtWidgets.QSpinBox()
        self.indent_ctor_init.setMinimum(-100)
        self.indent_ctor_init.setMaximum(100)
        self.indent_ctor_init.setValue(0)
        self.lt3.addWidget(self.indent_ctor_init, 86, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent 'if' following 'else' as a new block under the 'else'. ")+self.tr("If false, 'else\nif' is treated as 'else if' for indenting purposes. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 87, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_else_if")), 88, 0, 1, 5)
        label = QtWidgets.QLabel("indent_else_if")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 89, 0)
        self.indent_else_if = QtWidgets.QComboBox()
        self.indent_else_if.addItems(['true','false'])
        self.indent_else_if.setCurrentText('false')
        self.lt3.addWidget(self.indent_else_if, 89, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Amount to indent variable declarations after a open brace. ")+self.tr("<0: Relative >=0: Absolute. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 90, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_var_def_blk")), 91, 0, 1, 5)
        label = QtWidgets.QLabel("indent_var_def_blk")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 92, 0)
        self.indent_var_def_blk = QtWidgets.QSpinBox()
        self.indent_var_def_blk.setMinimum(-100)
        self.indent_var_def_blk.setMaximum(100)
        self.indent_var_def_blk.setValue(0)
        self.lt3.addWidget(self.indent_var_def_blk, 92, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent continued variable declarations instead of aligning. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 93, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_var_def_cont")), 94, 0, 1, 5)
        label = QtWidgets.QLabel("indent_var_def_cont")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 95, 0)
        self.indent_var_def_cont = QtWidgets.QComboBox()
        self.indent_var_def_cont.addItems(['true','false'])
        self.indent_var_def_cont.setCurrentText('false')
        self.lt3.addWidget(self.indent_var_def_cont, 95, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent continued shift expressions ('<<' and '>>') instead of aligning. ")+self.tr("Set align_left_shift=false when enabling this. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 96, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_shift")), 97, 0, 1, 5)
        label = QtWidgets.QLabel("indent_shift")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 98, 0)
        self.indent_shift = QtWidgets.QComboBox()
        self.indent_shift.addItems(['true','false'])
        self.indent_shift.setCurrentText('false')
        self.lt3.addWidget(self.indent_shift, 98, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to force indentation of function definitions to start in column 1. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 99, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_def_force_col1")), 100, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_def_force_col1")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 101, 0)
        self.indent_func_def_force_col1 = QtWidgets.QComboBox()
        self.indent_func_def_force_col1.addItems(['true','false'])
        self.indent_func_def_force_col1.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_def_force_col1, 101, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 102, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_call_param")), 103, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_call_param")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 104, 0)
        self.indent_func_call_param = QtWidgets.QComboBox()
        self.indent_func_call_param.addItems(['true','false'])
        self.indent_func_call_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_call_param, 104, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent continued function definition parameters one indent level, rather than aligning parameters under the open parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 105, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_def_param")), 106, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_def_param")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 107, 0)
        self.indent_func_def_param = QtWidgets.QComboBox()
        self.indent_func_def_param.addItems(['true','false'])
        self.indent_func_def_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_def_param, 107, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("for function definitions, only if indent_func_def_param is false Allows to align params when appropriate and indent them when not behave as if it was true if paren position is more than this value if paren position is more than the option value. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 108, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_def_param_paren_pos_threshold")), 109, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_def_param_paren_pos_threshold")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 110, 0)
        self.indent_func_def_param_paren_pos_threshold = QtWidgets.QSpinBox()
        self.indent_func_def_param_paren_pos_threshold.setMinimum(0)
        self.indent_func_def_param_paren_pos_threshold.setMaximum(100)
        self.indent_func_def_param_paren_pos_threshold.setValue(0)
        self.lt3.addWidget(self.indent_func_def_param_paren_pos_threshold, 110, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent continued function call prototype one indent level, rather than aligning parameters under the open parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 111, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_proto_param")), 112, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_proto_param")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 113, 0)
        self.indent_func_proto_param = QtWidgets.QComboBox()
        self.indent_func_proto_param.addItems(['true','false'])
        self.indent_func_proto_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_proto_param, 113, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent continued function call declaration one indent level, rather than aligning parameters under the open parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 114, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_class_param")), 115, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_class_param")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 116, 0)
        self.indent_func_class_param = QtWidgets.QComboBox()
        self.indent_func_class_param.addItems(['true','false'])
        self.indent_func_class_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_class_param, 116, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent continued class variable constructors one indent level, rather than aligning parameters under the open parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 117, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_ctor_var_param")), 118, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_ctor_var_param")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 119, 0)
        self.indent_func_ctor_var_param = QtWidgets.QComboBox()
        self.indent_func_ctor_var_param.addItems(['true','false'])
        self.indent_func_ctor_var_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_ctor_var_param, 119, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent continued template parameter list one indent level, rather than aligning parameters under the open parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 120, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_template_param")), 121, 0, 1, 5)
        label = QtWidgets.QLabel("indent_template_param")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 122, 0)
        self.indent_template_param = QtWidgets.QComboBox()
        self.indent_template_param.addItems(['true','false'])
        self.indent_template_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_template_param, 122, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Double the indent for indent_func_xxx_param options. ")+self.tr("Use both values of the options indent_columns and indent_param. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 123, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_param_double")), 124, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_param_double")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 125, 0)
        self.indent_func_param_double = QtWidgets.QComboBox()
        self.indent_func_param_double.addItems(['true','false'])
        self.indent_func_param_double.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_param_double, 125, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Indentation column for standalone 'const' qualifier on a function prototype. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 126, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_const")), 127, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_const")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 128, 0)
        self.indent_func_const = QtWidgets.QSpinBox()
        self.indent_func_const.setMinimum(0)
        self.indent_func_const.setMaximum(100)
        self.indent_func_const.setValue(0)
        self.lt3.addWidget(self.indent_func_const, 128, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Indentation column for standalone 'throw' qualifier on a function prototype. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 129, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_func_throw")), 130, 0, 1, 5)
        label = QtWidgets.QLabel("indent_func_throw")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 131, 0)
        self.indent_func_throw = QtWidgets.QSpinBox()
        self.indent_func_throw.setMinimum(0)
        self.indent_func_throw.setMaximum(100)
        self.indent_func_throw.setValue(0)
        self.lt3.addWidget(self.indent_func_throw, 131, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to indent within a macro followed by a brace on the same line This allows reducing the indent in macros that have (for example) `do { ... ")+self.tr("} while (0)` blocks bracketing them. ")+self.tr("true:  add an indent for the brace on the same line as the macro false: do not add an indent for the brace on the same line as the macro. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 132, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_macro_brace")), 133, 0, 1, 5)
        label = QtWidgets.QLabel("indent_macro_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 134, 0)
        self.indent_macro_brace = QtWidgets.QComboBox()
        self.indent_macro_brace.addItems(['true','false'])
        self.indent_macro_brace.setCurrentText('true')
        self.lt3.addWidget(self.indent_macro_brace, 134, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of spaces to indent a continued '->' or '.'. ")+self.tr("Usually set to 0, 1, or indent_columns. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 135, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_member")), 136, 0, 1, 5)
        label = QtWidgets.QLabel("indent_member")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 137, 0)
        self.indent_member = QtWidgets.QSpinBox()
        self.indent_member.setMinimum(0)
        self.indent_member.setMaximum(100)
        self.indent_member.setValue(0)
        self.lt3.addWidget(self.indent_member, 137, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether lines broken at '.' or '->' should be indented by a single indent. ")+self.tr("The indent_member option will not be effective if this is set to true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 138, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_member_single")), 139, 0, 1, 5)
        label = QtWidgets.QLabel("indent_member_single")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 140, 0)
        self.indent_member_single = QtWidgets.QComboBox()
        self.indent_member_single.addItems(['true','false'])
        self.indent_member_single.setCurrentText('false')
        self.lt3.addWidget(self.indent_member_single, 140, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Spaces to indent single line ('//') comments on lines before code. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 141, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_sing_line_comments")), 142, 0, 1, 5)
        label = QtWidgets.QLabel("indent_sing_line_comments")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 143, 0)
        self.indent_sing_line_comments = QtWidgets.QSpinBox()
        self.indent_sing_line_comments.setMinimum(0)
        self.indent_sing_line_comments.setMaximum(100)
        self.indent_sing_line_comments.setValue(0)
        self.lt3.addWidget(self.indent_sing_line_comments, 143, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("When opening a paren for a control statement (if, for, while, etc), increase the indent level by this value. ")+self.tr("Negative values decrease the indent level. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 144, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_sparen_extra")), 145, 0, 1, 5)
        label = QtWidgets.QLabel("indent_sparen_extra")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 146, 0)
        self.indent_sparen_extra = QtWidgets.QSpinBox()
        self.indent_sparen_extra.setMinimum(-100)
        self.indent_sparen_extra.setMaximum(100)
        self.indent_sparen_extra.setValue(0)
        self.lt3.addWidget(self.indent_sparen_extra, 146, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 147, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_relative_single_line_comments")), 148, 0, 1, 5)
        label = QtWidgets.QLabel("indent_relative_single_line_comments")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 149, 0)
        self.indent_relative_single_line_comments = QtWidgets.QComboBox()
        self.indent_relative_single_line_comments.addItems(['true','false'])
        self.indent_relative_single_line_comments.setCurrentText('false')
        self.lt3.addWidget(self.indent_relative_single_line_comments, 149, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Spaces to indent 'case' from 'switch'. ")+self.tr("Usually 0 or indent_columns. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 150, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_switch_case")), 151, 0, 1, 5)
        label = QtWidgets.QLabel("indent_switch_case")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 152, 0)
        self.indent_switch_case = QtWidgets.QSpinBox()
        self.indent_switch_case.setMinimum(0)
        self.indent_switch_case.setMaximum(100)
        self.indent_switch_case.setValue(0)
        self.lt3.addWidget(self.indent_switch_case, 152, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("indent 'break' with 'case' from 'switch'. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 153, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_switch_break_with_case")), 154, 0, 1, 5)
        label = QtWidgets.QLabel("indent_switch_break_with_case")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 155, 0)
        self.indent_switch_break_with_case = QtWidgets.QComboBox()
        self.indent_switch_break_with_case.addItems(['true','false'])
        self.indent_switch_break_with_case.setCurrentText('false')
        self.lt3.addWidget(self.indent_switch_break_with_case, 155, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent preprocessor statements inside of switch statements. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 156, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_switch_pp")), 157, 0, 1, 5)
        label = QtWidgets.QLabel("indent_switch_pp")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 158, 0)
        self.indent_switch_pp = QtWidgets.QComboBox()
        self.indent_switch_pp.addItems(['true','false'])
        self.indent_switch_pp.setCurrentText('true')
        self.lt3.addWidget(self.indent_switch_pp, 158, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Spaces to shift the 'case' line, without affecting any other lines. ")+self.tr("Usually 0. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 159, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_case_shift")), 160, 0, 1, 5)
        label = QtWidgets.QLabel("indent_case_shift")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 161, 0)
        self.indent_case_shift = QtWidgets.QSpinBox()
        self.indent_case_shift.setMinimum(0)
        self.indent_case_shift.setMaximum(100)
        self.indent_case_shift.setValue(0)
        self.lt3.addWidget(self.indent_case_shift, 161, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Spaces to indent '{' from 'case'. ")+self.tr("By default, the brace will appear under the 'c' in case. ")+self.tr("Usually set to 0 or indent_columns. ")+self.tr("Negative values are OK. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 162, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_case_brace")), 163, 0, 1, 5)
        label = QtWidgets.QLabel("indent_case_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 164, 0)
        self.indent_case_brace = QtWidgets.QSpinBox()
        self.indent_case_brace.setMinimum(-100)
        self.indent_case_brace.setMaximum(100)
        self.indent_case_brace.setValue(0)
        self.lt3.addWidget(self.indent_case_brace, 164, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent comments found in first column. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 165, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_col1_comment")), 166, 0, 1, 5)
        label = QtWidgets.QLabel("indent_col1_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 167, 0)
        self.indent_col1_comment = QtWidgets.QComboBox()
        self.indent_col1_comment.addItems(['true','false'])
        self.indent_col1_comment.setCurrentText('false')
        self.lt3.addWidget(self.indent_col1_comment, 167, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent multi string literal in first column. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 168, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_col1_multi_string_literal")), 169, 0, 1, 5)
        label = QtWidgets.QLabel("indent_col1_multi_string_literal")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 170, 0)
        self.indent_col1_multi_string_literal = QtWidgets.QComboBox()
        self.indent_col1_multi_string_literal.addItems(['true','false'])
        self.indent_col1_multi_string_literal.setCurrentText('false')
        self.lt3.addWidget(self.indent_col1_multi_string_literal, 170, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to indent goto labels. ")+self.tr(">0: Absolute column where 1 is the leftmost column <=0: Subtract from brace indent. ")+self.tr("Default: 1. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 171, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_label")), 172, 0, 1, 5)
        label = QtWidgets.QLabel("indent_label")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 173, 0)
        self.indent_label = QtWidgets.QSpinBox()
        self.indent_label.setMinimum(-100)
        self.indent_label.setMaximum(100)
        self.indent_label.setValue(1)
        self.lt3.addWidget(self.indent_label, 173, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to indent access specifiers that are followed by a colon. ")+self.tr(">0: Absolute column where 1 is the leftmost column <=0: Subtract from brace indent. ")+self.tr("Default: 1. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 174, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_access_spec")), 175, 0, 1, 5)
        label = QtWidgets.QLabel("indent_access_spec")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 176, 0)
        self.indent_access_spec = QtWidgets.QSpinBox()
        self.indent_access_spec.setMinimum(-100)
        self.indent_access_spec.setMaximum(100)
        self.indent_access_spec.setValue(1)
        self.lt3.addWidget(self.indent_access_spec, 176, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the code after an access specifier by one level. ")+self.tr("If true, this option forces 'indent_access_spec=0'. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 177, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_access_spec_body")), 178, 0, 1, 5)
        label = QtWidgets.QLabel("indent_access_spec_body")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 179, 0)
        self.indent_access_spec_body = QtWidgets.QComboBox()
        self.indent_access_spec_body.addItems(['true','false'])
        self.indent_access_spec_body.setCurrentText('false')
        self.lt3.addWidget(self.indent_access_spec_body, 179, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis (not recommended). "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 180, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_paren_nl")), 181, 0, 1, 5)
        label = QtWidgets.QLabel("indent_paren_nl")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 182, 0)
        self.indent_paren_nl = QtWidgets.QComboBox()
        self.indent_paren_nl.addItems(['true','false'])
        self.indent_paren_nl.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_nl, 182, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to indent a close parenthesis after a newline. ")+self.tr("0: Indent to body level (default) 1: Align under the open parenthesis 2: Indent to the brace level. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 183, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_paren_close")), 184, 0, 1, 5)
        label = QtWidgets.QLabel("indent_paren_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 185, 0)
        self.indent_paren_close = QtWidgets.QSpinBox()
        self.indent_paren_close.setMinimum(0)
        self.indent_paren_close.setMaximum(100)
        self.indent_paren_close.setValue(0)
        self.lt3.addWidget(self.indent_paren_close, 185, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the open parenthesis of a function definition, if the parenthesis is on its own line. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 186, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_paren_after_func_def")), 187, 0, 1, 5)
        label = QtWidgets.QLabel("indent_paren_after_func_def")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 188, 0)
        self.indent_paren_after_func_def = QtWidgets.QComboBox()
        self.indent_paren_after_func_def.addItems(['true','false'])
        self.indent_paren_after_func_def.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_after_func_def, 188, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the open parenthesis of a function declaration, if the parenthesis is on its own line. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 189, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_paren_after_func_decl")), 190, 0, 1, 5)
        label = QtWidgets.QLabel("indent_paren_after_func_decl")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 191, 0)
        self.indent_paren_after_func_decl = QtWidgets.QComboBox()
        self.indent_paren_after_func_decl.addItems(['true','false'])
        self.indent_paren_after_func_decl.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_after_func_decl, 191, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the open parenthesis of a function call, if the parenthesis is on its own line. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 192, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_paren_after_func_call")), 193, 0, 1, 5)
        label = QtWidgets.QLabel("indent_paren_after_func_call")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 194, 0)
        self.indent_paren_after_func_call = QtWidgets.QComboBox()
        self.indent_paren_after_func_call.addItems(['true','false'])
        self.indent_paren_after_func_call.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_after_func_call, 194, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent a comma when inside a parenthesis. ")+self.tr("If true, aligns under the open parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 195, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_comma_paren")), 196, 0, 1, 5)
        label = QtWidgets.QLabel("indent_comma_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 197, 0)
        self.indent_comma_paren = QtWidgets.QComboBox()
        self.indent_comma_paren.addItems(['true','false'])
        self.indent_comma_paren.setCurrentText('false')
        self.lt3.addWidget(self.indent_comma_paren, 197, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent a Boolean operator when inside a parenthesis. ")+self.tr("If true, aligns under the open parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 198, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_bool_paren")), 199, 0, 1, 5)
        label = QtWidgets.QLabel("indent_bool_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 200, 0)
        self.indent_bool_paren = QtWidgets.QComboBox()
        self.indent_bool_paren.addItems(['true','false'])
        self.indent_bool_paren.setCurrentText('false')
        self.lt3.addWidget(self.indent_bool_paren, 200, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent a semicolon when inside a for parenthesis. ")+self.tr("If true, aligns under the open for parenthesis. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 201, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_semicolon_for_paren")), 202, 0, 1, 5)
        label = QtWidgets.QLabel("indent_semicolon_for_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 203, 0)
        self.indent_semicolon_for_paren = QtWidgets.QComboBox()
        self.indent_semicolon_for_paren.addItems(['true','false'])
        self.indent_semicolon_for_paren.setCurrentText('false')
        self.lt3.addWidget(self.indent_semicolon_for_paren, 203, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align the first expression to following ones if indent_bool_paren=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 204, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_first_bool_expr")), 205, 0, 1, 5)
        label = QtWidgets.QLabel("indent_first_bool_expr")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 206, 0)
        self.indent_first_bool_expr = QtWidgets.QComboBox()
        self.indent_first_bool_expr.addItems(['true','false'])
        self.indent_first_bool_expr.setCurrentText('false')
        self.lt3.addWidget(self.indent_first_bool_expr, 206, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align the first expression to following ones if indent_semicolon_for_paren=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 207, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_first_for_expr")), 208, 0, 1, 5)
        label = QtWidgets.QLabel("indent_first_for_expr")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 209, 0)
        self.indent_first_for_expr = QtWidgets.QComboBox()
        self.indent_first_for_expr.addItems(['true','false'])
        self.indent_first_for_expr.setCurrentText('false')
        self.lt3.addWidget(self.indent_first_for_expr, 209, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If an open square is followed by a newline, whether to indent the next line so that it lines up after the open square (not recommended). "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 210, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_square_nl")), 211, 0, 1, 5)
        label = QtWidgets.QLabel("indent_square_nl")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 212, 0)
        self.indent_square_nl = QtWidgets.QComboBox()
        self.indent_square_nl.addItems(['true','false'])
        self.indent_square_nl.setCurrentText('false')
        self.lt3.addWidget(self.indent_square_nl, 212, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(ESQL/C) Whether to preserve the relative indent of 'EXEC SQL' bodies. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 213, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_preserve_sql")), 214, 0, 1, 5)
        label = QtWidgets.QLabel("indent_preserve_sql")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 215, 0)
        self.indent_preserve_sql = QtWidgets.QComboBox()
        self.indent_preserve_sql.addItems(['true','false'])
        self.indent_preserve_sql.setCurrentText('false')
        self.lt3.addWidget(self.indent_preserve_sql, 215, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align continued statements at the '='. ")+self.tr("If false or if the '=' is followed by a newline, the next line is indent one tab. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 216, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_align_assign")), 217, 0, 1, 5)
        label = QtWidgets.QLabel("indent_align_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 218, 0)
        self.indent_align_assign = QtWidgets.QComboBox()
        self.indent_align_assign.addItems(['true','false'])
        self.indent_align_assign.setCurrentText('true')
        self.lt3.addWidget(self.indent_align_assign, 218, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true, the indentation of the chunks after a '=' sequence will be set at LHS token indentation column before '='. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 219, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_off_after_assign")), 220, 0, 1, 5)
        label = QtWidgets.QLabel("indent_off_after_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 221, 0)
        self.indent_off_after_assign = QtWidgets.QComboBox()
        self.indent_off_after_assign.addItems(['true','false'])
        self.indent_off_after_assign.setCurrentText('false')
        self.lt3.addWidget(self.indent_off_after_assign, 221, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align continued statements at the '('. ")+self.tr("If false or the '(' is followed by a newline, the next line indent is one tab. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 222, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_align_paren")), 223, 0, 1, 5)
        label = QtWidgets.QLabel("indent_align_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 224, 0)
        self.indent_align_paren = QtWidgets.QComboBox()
        self.indent_align_paren.addItems(['true','false'])
        self.indent_align_paren.setCurrentText('true')
        self.lt3.addWidget(self.indent_align_paren, 224, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to indent Objective-C code inside message selectors. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 225, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_inside_msg_sel")), 226, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_inside_msg_sel")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 227, 0)
        self.indent_oc_inside_msg_sel = QtWidgets.QComboBox()
        self.indent_oc_inside_msg_sel.addItems(['true','false'])
        self.indent_oc_inside_msg_sel.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_inside_msg_sel, 227, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to indent Objective-C blocks at brace level instead of usual rules. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 228, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_block")), 229, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_block")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 230, 0)
        self.indent_oc_block = QtWidgets.QComboBox()
        self.indent_oc_block.addItems(['true','false'])
        self.indent_oc_block.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block, 230, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Indent for Objective-C blocks in a message relative to the parameter name. ")+self.tr("=0: Use indent_oc_block rules >0: Use specified number of spaces to indent. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 231, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_block_msg")), 232, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_block_msg")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 233, 0)
        self.indent_oc_block_msg = QtWidgets.QSpinBox()
        self.indent_oc_block_msg.setMinimum(0)
        self.indent_oc_block_msg.setMaximum(100)
        self.indent_oc_block_msg.setValue(0)
        self.lt3.addWidget(self.indent_oc_block_msg, 233, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Minimum indent for subsequent parameters. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 234, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_msg_colon")), 235, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_msg_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 236, 0)
        self.indent_oc_msg_colon = QtWidgets.QSpinBox()
        self.indent_oc_msg_colon.setMinimum(0)
        self.indent_oc_msg_colon.setMaximum(100)
        self.indent_oc_msg_colon.setValue(0)
        self.lt3.addWidget(self.indent_oc_msg_colon, 236, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to prioritize aligning with initial colon (and stripping spaces from lines, if necessary). ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 237, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_msg_prioritize_first_colon")), 238, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_msg_prioritize_first_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 239, 0)
        self.indent_oc_msg_prioritize_first_colon = QtWidgets.QComboBox()
        self.indent_oc_msg_prioritize_first_colon.addItems(['true','false'])
        self.indent_oc_msg_prioritize_first_colon.setCurrentText('true')
        self.lt3.addWidget(self.indent_oc_msg_prioritize_first_colon, 239, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks the way that Xcode does by default (from the keyword if the parameter is on its own line; otherwise, from the previous indentation level). ")+self.tr("Requires indent_oc_block_msg=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 240, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_xcode_style")), 241, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_block_msg_xcode_style")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 242, 0)
        self.indent_oc_block_msg_xcode_style = QtWidgets.QComboBox()
        self.indent_oc_block_msg_xcode_style.addItems(['true','false'])
        self.indent_oc_block_msg_xcode_style.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_xcode_style, 242, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks from where the brace is, relative to a message keyword. ")+self.tr("Requires indent_oc_block_msg=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 243, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_from_keyword")), 244, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_block_msg_from_keyword")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 245, 0)
        self.indent_oc_block_msg_from_keyword = QtWidgets.QComboBox()
        self.indent_oc_block_msg_from_keyword.addItems(['true','false'])
        self.indent_oc_block_msg_from_keyword.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_from_keyword, 245, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks from where the brace is, relative to a message colon. ")+self.tr("Requires indent_oc_block_msg=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 246, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_from_colon")), 247, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_block_msg_from_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 248, 0)
        self.indent_oc_block_msg_from_colon = QtWidgets.QComboBox()
        self.indent_oc_block_msg_from_colon.addItems(['true','false'])
        self.indent_oc_block_msg_from_colon.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_from_colon, 248, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks from where the block caret is. ")+self.tr("Requires indent_oc_block_msg=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 249, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_from_caret")), 250, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_block_msg_from_caret")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 251, 0)
        self.indent_oc_block_msg_from_caret = QtWidgets.QComboBox()
        self.indent_oc_block_msg_from_caret.addItems(['true','false'])
        self.indent_oc_block_msg_from_caret.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_from_caret, 251, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks from where the brace caret is. ")+self.tr("Requires indent_oc_block_msg=true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 252, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_from_brace")), 253, 0, 1, 5)
        label = QtWidgets.QLabel("indent_oc_block_msg_from_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 254, 0)
        self.indent_oc_block_msg_from_brace = QtWidgets.QComboBox()
        self.indent_oc_block_msg_from_brace.addItems(['true','false'])
        self.indent_oc_block_msg_from_brace.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_from_brace, 254, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("When indenting after virtual brace open and newline add further spaces to reach this minimum indent. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 255, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_min_vbrace_open")), 256, 0, 1, 5)
        label = QtWidgets.QLabel("indent_min_vbrace_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 257, 0)
        self.indent_min_vbrace_open = QtWidgets.QSpinBox()
        self.indent_min_vbrace_open.setMinimum(0)
        self.indent_min_vbrace_open.setMaximum(100)
        self.indent_min_vbrace_open.setValue(0)
        self.lt3.addWidget(self.indent_min_vbrace_open, 257, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add further spaces after regular indent to reach next tabstop when identing after virtual brace open and newline. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 258, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_vbrace_open_on_tabstop")), 259, 0, 1, 5)
        label = QtWidgets.QLabel("indent_vbrace_open_on_tabstop")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 260, 0)
        self.indent_vbrace_open_on_tabstop = QtWidgets.QComboBox()
        self.indent_vbrace_open_on_tabstop.addItems(['true','false'])
        self.indent_vbrace_open_on_tabstop.setCurrentText('false')
        self.lt3.addWidget(self.indent_vbrace_open_on_tabstop, 260, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to indent after a brace followed by another token (not a newline). ")+self.tr("true:  indent all contained lines to match the token false: indent all contained lines to match the brace. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 261, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_token_after_brace")), 262, 0, 1, 5)
        label = QtWidgets.QLabel("indent_token_after_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 263, 0)
        self.indent_token_after_brace = QtWidgets.QComboBox()
        self.indent_token_after_brace.addItems(['true','false'])
        self.indent_token_after_brace.setCurrentText('true')
        self.lt3.addWidget(self.indent_token_after_brace, 263, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the body of a C++11 lambda. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 264, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_cpp_lambda_body")), 265, 0, 1, 5)
        label = QtWidgets.QLabel("indent_cpp_lambda_body")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 266, 0)
        self.indent_cpp_lambda_body = QtWidgets.QComboBox()
        self.indent_cpp_lambda_body.addItems(['true','false'])
        self.indent_cpp_lambda_body.setCurrentText('false')
        self.lt3.addWidget(self.indent_cpp_lambda_body, 266, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to indent compound literals that are being returned. ")+self.tr("true: add both the indent from return & the compound literal open brace (ie:       2 indent levels) false: only indent 1 level, don't add the indent for the open brace, only add        the indent for the return. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 267, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_compound_literal_return")), 268, 0, 1, 5)
        label = QtWidgets.QLabel("indent_compound_literal_return")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 269, 0)
        self.indent_compound_literal_return = QtWidgets.QComboBox()
        self.indent_compound_literal_return.addItems(['true','false'])
        self.indent_compound_literal_return.setCurrentText('true')
        self.lt3.addWidget(self.indent_compound_literal_return, 269, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Whether to indent a 'using' block if no braces are used. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 270, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_using_block")), 271, 0, 1, 5)
        label = QtWidgets.QLabel("indent_using_block")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 272, 0)
        self.indent_using_block = QtWidgets.QComboBox()
        self.indent_using_block.addItems(['true','false'])
        self.indent_using_block.setCurrentText('true')
        self.lt3.addWidget(self.indent_using_block, 272, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to indent the continuation of ternary operator. ")+self.tr("0: Off (default) 1: When the `if_false` is a continuation, indent it under `if_false` 2: When the `:` is a continuation, indent it under `?`. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 273, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_ternary_operator")), 274, 0, 1, 5)
        label = QtWidgets.QLabel("indent_ternary_operator")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 275, 0)
        self.indent_ternary_operator = QtWidgets.QSpinBox()
        self.indent_ternary_operator.setMinimum(0)
        self.indent_ternary_operator.setMaximum(100)
        self.indent_ternary_operator.setValue(0)
        self.lt3.addWidget(self.indent_ternary_operator, 275, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the statments inside ternary operator. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 276, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_inside_ternary_operator")), 277, 0, 1, 5)
        label = QtWidgets.QLabel("indent_inside_ternary_operator")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 278, 0)
        self.indent_inside_ternary_operator = QtWidgets.QComboBox()
        self.indent_inside_ternary_operator.addItems(['true','false'])
        self.indent_inside_ternary_operator.setCurrentText('false')
        self.lt3.addWidget(self.indent_inside_ternary_operator, 278, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true, the indentation of the chunks after a `return` sequence will be set at return indentation column. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 279, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_off_after_return")), 280, 0, 1, 5)
        label = QtWidgets.QLabel("indent_off_after_return")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 281, 0)
        self.indent_off_after_return = QtWidgets.QComboBox()
        self.indent_off_after_return.addItems(['true','false'])
        self.indent_off_after_return.setCurrentText('false')
        self.lt3.addWidget(self.indent_off_after_return, 281, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true, the indentation of the chunks after a `return new` sequence will be set at return indentation column. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 282, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_off_after_return_new")), 283, 0, 1, 5)
        label = QtWidgets.QLabel("indent_off_after_return_new")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 284, 0)
        self.indent_off_after_return_new = QtWidgets.QComboBox()
        self.indent_off_after_return_new.addItems(['true','false'])
        self.indent_off_after_return_new.setCurrentText('false')
        self.lt3.addWidget(self.indent_off_after_return_new, 284, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true, the tokens after return are indented with regular single indentation. ")+self.tr("By default (false) the indentation is after the return token. "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 285, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_single_after_return")), 286, 0, 1, 5)
        label = QtWidgets.QLabel("indent_single_after_return")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 287, 0)
        self.indent_single_after_return = QtWidgets.QComboBox()
        self.indent_single_after_return.addItems(['true','false'])
        self.indent_single_after_return.setCurrentText('false')
        self.lt3.addWidget(self.indent_single_after_return, 287, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to ignore indent and alignment for 'asm' blocks (ie assume they have their own indentation). "))
        label.setWordWrap(True)
        self.lt3.addWidget(label, 288, 0, 1, 5)
        self.lt3.addWidget(QtWidgets.QLabel(self.tr("code_indent_ignore_asm_block")), 289, 0, 1, 5)
        label = QtWidgets.QLabel("indent_ignore_asm_block")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(label, 290, 0)
        self.indent_ignore_asm_block = QtWidgets.QComboBox()
        self.indent_ignore_asm_block.addItems(['true','false'])
        self.indent_ignore_asm_block.setCurrentText('false')
        self.lt3.addWidget(self.indent_ignore_asm_block, 290, 1, 1, 4)
        self.widget4 = QtWidgets.QWidget()
        self.addItem(self.widget4, self.tr("Newline adding and removing options"))
        self.lt4 = QtWidgets.QGridLayout(self.widget4)
        label = QtWidgets.QLabel(self.tr("Whether to collapse empty blocks between '{' and '}'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 0, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_collapse_empty_body")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("nl_collapse_empty_body")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 2, 0)
        self.nl_collapse_empty_body = QtWidgets.QComboBox()
        self.nl_collapse_empty_body.addItems(['true','false'])
        self.nl_collapse_empty_body.setCurrentText('false')
        self.lt4.addWidget(self.nl_collapse_empty_body, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 3, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_assign_leave_one_liners")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("nl_assign_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 5, 0)
        self.nl_assign_leave_one_liners = QtWidgets.QComboBox()
        self.nl_assign_leave_one_liners.addItems(['true','false'])
        self.nl_assign_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_assign_leave_one_liners, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line braced statements inside a 'class xx { }' body. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 6, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_class_leave_one_liners")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("nl_class_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 8, 0)
        self.nl_class_leave_one_liners = QtWidgets.QComboBox()
        self.nl_class_leave_one_liners.addItems(['true','false'])
        self.nl_class_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_class_leave_one_liners, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line enums, as in 'enum foo { BAR = 15 };'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 9, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_enum_leave_one_liners")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("nl_enum_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 11, 0)
        self.nl_enum_leave_one_liners = QtWidgets.QComboBox()
        self.nl_enum_leave_one_liners.addItems(['true','false'])
        self.nl_enum_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_enum_leave_one_liners, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line get or set functions. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 12, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_getset_leave_one_liners")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("nl_getset_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 14, 0)
        self.nl_getset_leave_one_liners = QtWidgets.QComboBox()
        self.nl_getset_leave_one_liners.addItems(['true','false'])
        self.nl_getset_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_getset_leave_one_liners, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Don't split one-line property get or set functions. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 15, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_cs_property_leave_one_liners")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("nl_cs_property_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 17, 0)
        self.nl_cs_property_leave_one_liners = QtWidgets.QComboBox()
        self.nl_cs_property_leave_one_liners.addItems(['true','false'])
        self.nl_cs_property_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_cs_property_leave_one_liners, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line function definitions, as in 'int foo() { return 0; }'. ")+self.tr("might modify nl_func_type_name. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 18, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_leave_one_liners")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 20, 0)
        self.nl_func_leave_one_liners = QtWidgets.QComboBox()
        self.nl_func_leave_one_liners.addItems(['true','false'])
        self.nl_func_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_leave_one_liners, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line C++11 lambdas, as in '[]() { return 0; }'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 21, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_cpp_lambda_leave_one_liners")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("nl_cpp_lambda_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 23, 0)
        self.nl_cpp_lambda_leave_one_liners = QtWidgets.QComboBox()
        self.nl_cpp_lambda_leave_one_liners.addItems(['true','false'])
        self.nl_cpp_lambda_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_cpp_lambda_leave_one_liners, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line if/else statements, as in 'if(...) b++;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 24, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_if_leave_one_liners")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("nl_if_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 26, 0)
        self.nl_if_leave_one_liners = QtWidgets.QComboBox()
        self.nl_if_leave_one_liners.addItems(['true','false'])
        self.nl_if_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_if_leave_one_liners, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line while statements, as in 'while(...) b++;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 27, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_while_leave_one_liners")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("nl_while_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 29, 0)
        self.nl_while_leave_one_liners = QtWidgets.QComboBox()
        self.nl_while_leave_one_liners.addItems(['true','false'])
        self.nl_while_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_while_leave_one_liners, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't split one-line for statements, as in 'for(...) b++;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 30, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_for_leave_one_liners")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("nl_for_leave_one_liners")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 32, 0)
        self.nl_for_leave_one_liners = QtWidgets.QComboBox()
        self.nl_for_leave_one_liners.addItems(['true','false'])
        self.nl_for_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_for_leave_one_liners, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Don't split one-line Objective-C messages. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 33, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_msg_leave_one_liner")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_msg_leave_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 35, 0)
        self.nl_oc_msg_leave_one_liner = QtWidgets.QComboBox()
        self.nl_oc_msg_leave_one_liner.addItems(['true','false'])
        self.nl_oc_msg_leave_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_oc_msg_leave_one_liner, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between method declaration and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 36, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_mdef_brace")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_mdef_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 38, 0)
        self.nl_oc_mdef_brace = QtWidgets.QComboBox()
        self.nl_oc_mdef_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_mdef_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_mdef_brace, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between Objective-C block signature and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 39, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_block_brace")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_block_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 41, 0)
        self.nl_oc_block_brace = QtWidgets.QComboBox()
        self.nl_oc_block_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_block_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_block_brace, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove blank line before '@interface' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 42, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_before_interface")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_before_interface")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 44, 0)
        self.nl_oc_before_interface = QtWidgets.QComboBox()
        self.nl_oc_before_interface.addItems(['ignore','add','remove','force'])
        self.nl_oc_before_interface.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_before_interface, 44, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove blank line before '@implementation' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 45, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_before_implementation")), 46, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_before_implementation")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 47, 0)
        self.nl_oc_before_implementation = QtWidgets.QComboBox()
        self.nl_oc_before_implementation.addItems(['ignore','add','remove','force'])
        self.nl_oc_before_implementation.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_before_implementation, 47, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove blank line before '@end' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 48, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_before_end")), 49, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_before_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 50, 0)
        self.nl_oc_before_end = QtWidgets.QComboBox()
        self.nl_oc_before_end.addItems(['ignore','add','remove','force'])
        self.nl_oc_before_end.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_before_end, 50, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between '@interface' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 51, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_interface_brace")), 52, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_interface_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 53, 0)
        self.nl_oc_interface_brace = QtWidgets.QComboBox()
        self.nl_oc_interface_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_interface_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_interface_brace, 53, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between '@implementation' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 54, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_implementation_brace")), 55, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_implementation_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 56, 0)
        self.nl_oc_implementation_brace = QtWidgets.QComboBox()
        self.nl_oc_implementation_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_implementation_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_implementation_brace, 56, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newlines at the start of the file. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 57, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_start_of_file")), 58, 0, 1, 5)
        label = QtWidgets.QLabel("nl_start_of_file")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 59, 0)
        self.nl_start_of_file = QtWidgets.QComboBox()
        self.nl_start_of_file.addItems(['ignore','add','remove','force'])
        self.nl_start_of_file.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_start_of_file, 59, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The minimum number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force'). "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 60, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_start_of_file_min")), 61, 0, 1, 5)
        label = QtWidgets.QLabel("nl_start_of_file_min")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 62, 0)
        self.nl_start_of_file_min = QtWidgets.QSpinBox()
        self.nl_start_of_file_min.setMinimum(0)
        self.nl_start_of_file_min.setMaximum(100)
        self.nl_start_of_file_min.setValue(0)
        self.lt4.addWidget(self.nl_start_of_file_min, 62, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline at the end of the file. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 63, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_end_of_file")), 64, 0, 1, 5)
        label = QtWidgets.QLabel("nl_end_of_file")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 65, 0)
        self.nl_end_of_file = QtWidgets.QComboBox()
        self.nl_end_of_file.addItems(['ignore','add','remove','force'])
        self.nl_end_of_file.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_end_of_file, 65, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The minimum number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force'). "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 66, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_end_of_file_min")), 67, 0, 1, 5)
        label = QtWidgets.QLabel("nl_end_of_file_min")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 68, 0)
        self.nl_end_of_file_min = QtWidgets.QSpinBox()
        self.nl_end_of_file_min.setMinimum(0)
        self.nl_end_of_file_min.setMaximum(100)
        self.nl_end_of_file_min.setValue(0)
        self.lt4.addWidget(self.nl_end_of_file_min, 68, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '=' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 69, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_assign_brace")), 70, 0, 1, 5)
        label = QtWidgets.QLabel("nl_assign_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 71, 0)
        self.nl_assign_brace = QtWidgets.QComboBox()
        self.nl_assign_brace.addItems(['ignore','add','remove','force'])
        self.nl_assign_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_assign_brace, 71, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove newline between '=' and '['. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 72, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_assign_square")), 73, 0, 1, 5)
        label = QtWidgets.QLabel("nl_assign_square")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 74, 0)
        self.nl_assign_square = QtWidgets.QComboBox()
        self.nl_assign_square.addItems(['ignore','add','remove','force'])
        self.nl_assign_square.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_assign_square, 74, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '[]' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 75, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_tsquare_brace")), 76, 0, 1, 5)
        label = QtWidgets.QLabel("nl_tsquare_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 77, 0)
        self.nl_tsquare_brace = QtWidgets.QComboBox()
        self.nl_tsquare_brace.addItems(['ignore','add','remove','force'])
        self.nl_tsquare_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_tsquare_brace, 77, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove newline after '= ['. ")+self.tr("Will also affect the newline before the ']'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 78, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_square_assign")), 79, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_square_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 80, 0)
        self.nl_after_square_assign = QtWidgets.QComboBox()
        self.nl_after_square_assign.addItems(['ignore','add','remove','force'])
        self.nl_after_square_assign.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_square_assign, 80, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between a function call's ')' and '{', as in 'list_for_each(item, &list) { }'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 81, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_fcall_brace")), 82, 0, 1, 5)
        label = QtWidgets.QLabel("nl_fcall_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 83, 0)
        self.nl_fcall_brace = QtWidgets.QComboBox()
        self.nl_fcall_brace.addItems(['ignore','add','remove','force'])
        self.nl_fcall_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_fcall_brace, 83, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 84, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_enum_brace")), 85, 0, 1, 5)
        label = QtWidgets.QLabel("nl_enum_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 86, 0)
        self.nl_enum_brace = QtWidgets.QComboBox()
        self.nl_enum_brace.addItems(['ignore','add','remove','force'])
        self.nl_enum_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_brace, 86, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum' and 'class'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 87, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_enum_class")), 88, 0, 1, 5)
        label = QtWidgets.QLabel("nl_enum_class")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 89, 0)
        self.nl_enum_class = QtWidgets.QComboBox()
        self.nl_enum_class.addItems(['ignore','add','remove','force'])
        self.nl_enum_class.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_class, 89, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum class' and the identifier. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 90, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_enum_class_identifier")), 91, 0, 1, 5)
        label = QtWidgets.QLabel("nl_enum_class_identifier")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 92, 0)
        self.nl_enum_class_identifier = QtWidgets.QComboBox()
        self.nl_enum_class_identifier.addItems(['ignore','add','remove','force'])
        self.nl_enum_class_identifier.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_class_identifier, 92, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum class' type and ':'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 93, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_enum_identifier_colon")), 94, 0, 1, 5)
        label = QtWidgets.QLabel("nl_enum_identifier_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 95, 0)
        self.nl_enum_identifier_colon = QtWidgets.QComboBox()
        self.nl_enum_identifier_colon.addItems(['ignore','add','remove','force'])
        self.nl_enum_identifier_colon.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_identifier_colon, 95, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum class identifier :' and type. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 96, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_enum_colon_type")), 97, 0, 1, 5)
        label = QtWidgets.QLabel("nl_enum_colon_type")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 98, 0)
        self.nl_enum_colon_type = QtWidgets.QComboBox()
        self.nl_enum_colon_type.addItems(['ignore','add','remove','force'])
        self.nl_enum_colon_type.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_colon_type, 98, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'struct and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 99, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_struct_brace")), 100, 0, 1, 5)
        label = QtWidgets.QLabel("nl_struct_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 101, 0)
        self.nl_struct_brace = QtWidgets.QComboBox()
        self.nl_struct_brace.addItems(['ignore','add','remove','force'])
        self.nl_struct_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_struct_brace, 101, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'union' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 102, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_union_brace")), 103, 0, 1, 5)
        label = QtWidgets.QLabel("nl_union_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 104, 0)
        self.nl_union_brace = QtWidgets.QComboBox()
        self.nl_union_brace.addItems(['ignore','add','remove','force'])
        self.nl_union_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_union_brace, 104, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'if' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 105, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_if_brace")), 106, 0, 1, 5)
        label = QtWidgets.QLabel("nl_if_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 107, 0)
        self.nl_if_brace = QtWidgets.QComboBox()
        self.nl_if_brace.addItems(['ignore','add','remove','force'])
        self.nl_if_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_if_brace, 107, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and 'else'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 108, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_brace_else")), 109, 0, 1, 5)
        label = QtWidgets.QLabel("nl_brace_else")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 110, 0)
        self.nl_brace_else = QtWidgets.QComboBox()
        self.nl_brace_else.addItems(['ignore','add','remove','force'])
        self.nl_brace_else.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_else, 110, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'else if' and '{'. ")+self.tr("If set to ignore, nl_if_brace is used instead. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 111, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_elseif_brace")), 112, 0, 1, 5)
        label = QtWidgets.QLabel("nl_elseif_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 113, 0)
        self.nl_elseif_brace = QtWidgets.QComboBox()
        self.nl_elseif_brace.addItems(['ignore','add','remove','force'])
        self.nl_elseif_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_elseif_brace, 113, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'else' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 114, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_else_brace")), 115, 0, 1, 5)
        label = QtWidgets.QLabel("nl_else_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 116, 0)
        self.nl_else_brace = QtWidgets.QComboBox()
        self.nl_else_brace.addItems(['ignore','add','remove','force'])
        self.nl_else_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_else_brace, 116, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'else' and 'if'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 117, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_else_if")), 118, 0, 1, 5)
        label = QtWidgets.QLabel("nl_else_if")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 119, 0)
        self.nl_else_if = QtWidgets.QComboBox()
        self.nl_else_if.addItems(['ignore','add','remove','force'])
        self.nl_else_if.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_else_if, 119, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline before '{' opening brace. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 120, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_opening_brace_func_class_def")), 121, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_opening_brace_func_class_def")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 122, 0)
        self.nl_before_opening_brace_func_class_def = QtWidgets.QComboBox()
        self.nl_before_opening_brace_func_class_def.addItems(['ignore','add','remove','force'])
        self.nl_before_opening_brace_func_class_def.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_opening_brace_func_class_def, 122, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline before 'if'/'else if' closing parenthesis. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 123, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_if_closing_paren")), 124, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_if_closing_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 125, 0)
        self.nl_before_if_closing_paren = QtWidgets.QComboBox()
        self.nl_before_if_closing_paren.addItems(['ignore','add','remove','force'])
        self.nl_before_if_closing_paren.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_if_closing_paren, 125, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and 'finally'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 126, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_brace_finally")), 127, 0, 1, 5)
        label = QtWidgets.QLabel("nl_brace_finally")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 128, 0)
        self.nl_brace_finally = QtWidgets.QComboBox()
        self.nl_brace_finally.addItems(['ignore','add','remove','force'])
        self.nl_brace_finally.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_finally, 128, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'finally' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 129, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_finally_brace")), 130, 0, 1, 5)
        label = QtWidgets.QLabel("nl_finally_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 131, 0)
        self.nl_finally_brace = QtWidgets.QComboBox()
        self.nl_finally_brace.addItems(['ignore','add','remove','force'])
        self.nl_finally_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_finally_brace, 131, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'try' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 132, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_try_brace")), 133, 0, 1, 5)
        label = QtWidgets.QLabel("nl_try_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 134, 0)
        self.nl_try_brace = QtWidgets.QComboBox()
        self.nl_try_brace.addItems(['ignore','add','remove','force'])
        self.nl_try_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_try_brace, 134, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between get/set and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 135, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_getset_brace")), 136, 0, 1, 5)
        label = QtWidgets.QLabel("nl_getset_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 137, 0)
        self.nl_getset_brace = QtWidgets.QComboBox()
        self.nl_getset_brace.addItems(['ignore','add','remove','force'])
        self.nl_getset_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_getset_brace, 137, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'for' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 138, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_for_brace")), 139, 0, 1, 5)
        label = QtWidgets.QLabel("nl_for_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 140, 0)
        self.nl_for_brace = QtWidgets.QComboBox()
        self.nl_for_brace.addItems(['ignore','add','remove','force'])
        self.nl_for_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_for_brace, 140, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline before the '{' of a 'catch' statement, as in 'catch (decl) <here> {'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 141, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_catch_brace")), 142, 0, 1, 5)
        label = QtWidgets.QLabel("nl_catch_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 143, 0)
        self.nl_catch_brace = QtWidgets.QComboBox()
        self.nl_catch_brace.addItems(['ignore','add','remove','force'])
        self.nl_catch_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_catch_brace, 143, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove newline before the '{' of a '@catch' statement, as in '@catch (decl) <here> {'. ")+self.tr("If set to ignore, nl_catch_brace is used. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 144, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_catch_brace")), 145, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_catch_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 146, 0)
        self.nl_oc_catch_brace = QtWidgets.QComboBox()
        self.nl_oc_catch_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_catch_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_catch_brace, 146, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and 'catch'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 147, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_brace_catch")), 148, 0, 1, 5)
        label = QtWidgets.QLabel("nl_brace_catch")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 149, 0)
        self.nl_brace_catch = QtWidgets.QComboBox()
        self.nl_brace_catch.addItems(['ignore','add','remove','force'])
        self.nl_brace_catch.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_catch, 149, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between '}' and '@catch'. ")+self.tr("If set to ignore, nl_brace_catch is used. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 150, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_brace_catch")), 151, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_brace_catch")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 152, 0)
        self.nl_oc_brace_catch = QtWidgets.QComboBox()
        self.nl_oc_brace_catch.addItems(['ignore','add','remove','force'])
        self.nl_oc_brace_catch.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_brace_catch, 152, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and ']'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 153, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_brace_square")), 154, 0, 1, 5)
        label = QtWidgets.QLabel("nl_brace_square")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 155, 0)
        self.nl_brace_square = QtWidgets.QComboBox()
        self.nl_brace_square.addItems(['ignore','add','remove','force'])
        self.nl_brace_square.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_square, 155, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and ')' in a function invocation. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 156, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_brace_fparen")), 157, 0, 1, 5)
        label = QtWidgets.QLabel("nl_brace_fparen")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 158, 0)
        self.nl_brace_fparen = QtWidgets.QComboBox()
        self.nl_brace_fparen.addItems(['ignore','add','remove','force'])
        self.nl_brace_fparen.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_fparen, 158, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'while' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 159, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_while_brace")), 160, 0, 1, 5)
        label = QtWidgets.QLabel("nl_while_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 161, 0)
        self.nl_while_brace = QtWidgets.QComboBox()
        self.nl_while_brace.addItems(['ignore','add','remove','force'])
        self.nl_while_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_while_brace, 161, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove newline between 'scope (x)' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 162, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_scope_brace")), 163, 0, 1, 5)
        label = QtWidgets.QLabel("nl_scope_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 164, 0)
        self.nl_scope_brace = QtWidgets.QComboBox()
        self.nl_scope_brace.addItems(['ignore','add','remove','force'])
        self.nl_scope_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_scope_brace, 164, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove newline between 'unittest' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 165, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_unittest_brace")), 166, 0, 1, 5)
        label = QtWidgets.QLabel("nl_unittest_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 167, 0)
        self.nl_unittest_brace = QtWidgets.QComboBox()
        self.nl_unittest_brace.addItems(['ignore','add','remove','force'])
        self.nl_unittest_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_unittest_brace, 167, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(D) Add or remove newline between 'version (x)' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 168, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_version_brace")), 169, 0, 1, 5)
        label = QtWidgets.QLabel("nl_version_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 170, 0)
        self.nl_version_brace = QtWidgets.QComboBox()
        self.nl_version_brace.addItems(['ignore','add','remove','force'])
        self.nl_version_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_version_brace, 170, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Add or remove newline between 'using' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 171, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_using_brace")), 172, 0, 1, 5)
        label = QtWidgets.QLabel("nl_using_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 173, 0)
        self.nl_using_brace = QtWidgets.QComboBox()
        self.nl_using_brace.addItems(['ignore','add','remove','force'])
        self.nl_using_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_using_brace, 173, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between two open or close braces. ")+self.tr("Due to general newline/brace handling, REMOVE may not work. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 174, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_brace_brace")), 175, 0, 1, 5)
        label = QtWidgets.QLabel("nl_brace_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 176, 0)
        self.nl_brace_brace = QtWidgets.QComboBox()
        self.nl_brace_brace.addItems(['ignore','add','remove','force'])
        self.nl_brace_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_brace, 176, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'do' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 177, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_do_brace")), 178, 0, 1, 5)
        label = QtWidgets.QLabel("nl_do_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 179, 0)
        self.nl_do_brace = QtWidgets.QComboBox()
        self.nl_do_brace.addItems(['ignore','add','remove','force'])
        self.nl_do_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_do_brace, 179, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and 'while' of 'do' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 180, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_brace_while")), 181, 0, 1, 5)
        label = QtWidgets.QLabel("nl_brace_while")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 182, 0)
        self.nl_brace_while = QtWidgets.QComboBox()
        self.nl_brace_while.addItems(['ignore','add','remove','force'])
        self.nl_brace_while.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_while, 182, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'switch' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 183, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_switch_brace")), 184, 0, 1, 5)
        label = QtWidgets.QLabel("nl_switch_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 185, 0)
        self.nl_switch_brace = QtWidgets.QComboBox()
        self.nl_switch_brace.addItems(['ignore','add','remove','force'])
        self.nl_switch_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_switch_brace, 185, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'synchronized' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 186, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_synchronized_brace")), 187, 0, 1, 5)
        label = QtWidgets.QLabel("nl_synchronized_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 188, 0)
        self.nl_synchronized_brace = QtWidgets.QComboBox()
        self.nl_synchronized_brace.addItems(['ignore','add','remove','force'])
        self.nl_synchronized_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_synchronized_brace, 188, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add a newline between ')' and '{' if the ')' is on a different line than the if/for/etc. ")+self.tr("Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch and nl_catch_brace. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 189, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_multi_line_cond")), 190, 0, 1, 5)
        label = QtWidgets.QLabel("nl_multi_line_cond")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 191, 0)
        self.nl_multi_line_cond = QtWidgets.QComboBox()
        self.nl_multi_line_cond.addItems(['true','false'])
        self.nl_multi_line_cond.setCurrentText('false')
        self.lt4.addWidget(self.nl_multi_line_cond, 191, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add a newline after '(' if an if/for/while/switch condition spans multiple lines. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 192, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_multi_line_sparen_open")), 193, 0, 1, 5)
        label = QtWidgets.QLabel("nl_multi_line_sparen_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 194, 0)
        self.nl_multi_line_sparen_open = QtWidgets.QComboBox()
        self.nl_multi_line_sparen_open.addItems(['ignore','add','remove','force'])
        self.nl_multi_line_sparen_open.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_multi_line_sparen_open, 194, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add a newline before ')' if an if/for/while/switch condition spans multiple lines. ")+self.tr("Overrides nl_before_if_closing_paren if both are specified. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 195, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_multi_line_sparen_close")), 196, 0, 1, 5)
        label = QtWidgets.QLabel("nl_multi_line_sparen_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 197, 0)
        self.nl_multi_line_sparen_close = QtWidgets.QComboBox()
        self.nl_multi_line_sparen_close.addItems(['ignore','add','remove','force'])
        self.nl_multi_line_sparen_close.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_multi_line_sparen_close, 197, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Force a newline in a define after the macro name for multi-line defines. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 198, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_multi_line_define")), 199, 0, 1, 5)
        label = QtWidgets.QLabel("nl_multi_line_define")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 200, 0)
        self.nl_multi_line_define = QtWidgets.QComboBox()
        self.nl_multi_line_define.addItems(['true','false'])
        self.nl_multi_line_define.setCurrentText('false')
        self.lt4.addWidget(self.nl_multi_line_define, 200, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before 'case', and a blank line before a 'case' statement that follows a ';' or '}'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 201, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_case")), 202, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_case")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 203, 0)
        self.nl_before_case = QtWidgets.QComboBox()
        self.nl_before_case.addItems(['true','false'])
        self.nl_before_case.setCurrentText('false')
        self.lt4.addWidget(self.nl_before_case, 203, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after a 'case' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 204, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_case")), 205, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_case")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 206, 0)
        self.nl_after_case = QtWidgets.QComboBox()
        self.nl_after_case.addItems(['true','false'])
        self.nl_after_case.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_case, 206, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between a case ':' and '{'. ")+self.tr("Overrides nl_after_case. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 207, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_case_colon_brace")), 208, 0, 1, 5)
        label = QtWidgets.QLabel("nl_case_colon_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 209, 0)
        self.nl_case_colon_brace = QtWidgets.QComboBox()
        self.nl_case_colon_brace.addItems(['ignore','add','remove','force'])
        self.nl_case_colon_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_case_colon_brace, 209, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between ')' and 'throw'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 210, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_throw")), 211, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_throw")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 212, 0)
        self.nl_before_throw = QtWidgets.QComboBox()
        self.nl_before_throw.addItems(['ignore','add','remove','force'])
        self.nl_before_throw.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_throw, 212, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'namespace' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 213, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_namespace_brace")), 214, 0, 1, 5)
        label = QtWidgets.QLabel("nl_namespace_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 215, 0)
        self.nl_namespace_brace = QtWidgets.QComboBox()
        self.nl_namespace_brace.addItems(['ignore','add','remove','force'])
        self.nl_namespace_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_namespace_brace, 215, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template class. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 216, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_class")), 217, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_class")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 218, 0)
        self.nl_template_class = QtWidgets.QComboBox()
        self.nl_template_class.addItems(['ignore','add','remove','force'])
        self.nl_template_class.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class, 218, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template class declaration. ")+self.tr("Overrides nl_template_class. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 219, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_class_decl")), 220, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_class_decl")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 221, 0)
        self.nl_template_class_decl = QtWidgets.QComboBox()
        self.nl_template_class_decl.addItems(['ignore','add','remove','force'])
        self.nl_template_class_decl.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class_decl, 221, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<>' of a specialized class declaration. ")+self.tr("Overrides nl_template_class_decl. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 222, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_class_decl_special")), 223, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_class_decl_special")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 224, 0)
        self.nl_template_class_decl_special = QtWidgets.QComboBox()
        self.nl_template_class_decl_special.addItems(['ignore','add','remove','force'])
        self.nl_template_class_decl_special.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class_decl_special, 224, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template class definition. ")+self.tr("Overrides nl_template_class. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 225, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_class_def")), 226, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_class_def")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 227, 0)
        self.nl_template_class_def = QtWidgets.QComboBox()
        self.nl_template_class_def.addItems(['ignore','add','remove','force'])
        self.nl_template_class_def.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class_def, 227, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<>' of a specialized class definition. ")+self.tr("Overrides nl_template_class_def. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 228, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_class_def_special")), 229, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_class_def_special")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 230, 0)
        self.nl_template_class_def_special = QtWidgets.QComboBox()
        self.nl_template_class_def_special.addItems(['ignore','add','remove','force'])
        self.nl_template_class_def_special.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class_def_special, 230, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template function. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 231, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_func")), 232, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 233, 0)
        self.nl_template_func = QtWidgets.QComboBox()
        self.nl_template_func.addItems(['ignore','add','remove','force'])
        self.nl_template_func.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func, 233, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template function declaration. ")+self.tr("Overrides nl_template_func. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 234, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_func_decl")), 235, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_func_decl")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 236, 0)
        self.nl_template_func_decl = QtWidgets.QComboBox()
        self.nl_template_func_decl.addItems(['ignore','add','remove','force'])
        self.nl_template_func_decl.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func_decl, 236, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<>' of a specialized function declaration. ")+self.tr("Overrides nl_template_func_decl. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 237, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_func_decl_special")), 238, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_func_decl_special")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 239, 0)
        self.nl_template_func_decl_special = QtWidgets.QComboBox()
        self.nl_template_func_decl_special.addItems(['ignore','add','remove','force'])
        self.nl_template_func_decl_special.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func_decl_special, 239, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template function definition. ")+self.tr("Overrides nl_template_func. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 240, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_func_def")), 241, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_func_def")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 242, 0)
        self.nl_template_func_def = QtWidgets.QComboBox()
        self.nl_template_func_def.addItems(['ignore','add','remove','force'])
        self.nl_template_func_def.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func_def, 242, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<>' of a specialized function definition. ")+self.tr("Overrides nl_template_func_def. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 243, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_func_def_special")), 244, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_func_def_special")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 245, 0)
        self.nl_template_func_def_special = QtWidgets.QComboBox()
        self.nl_template_func_def_special.addItems(['ignore','add','remove','force'])
        self.nl_template_func_def_special.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func_def_special, 245, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template variable. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 246, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_var")), 247, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_var")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 248, 0)
        self.nl_template_var = QtWidgets.QComboBox()
        self.nl_template_var.addItems(['ignore','add','remove','force'])
        self.nl_template_var.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_var, 248, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'template<...>' and 'using' of a templated type alias. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 249, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_using")), 250, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_using")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 251, 0)
        self.nl_template_using = QtWidgets.QComboBox()
        self.nl_template_using.addItems(['ignore','add','remove','force'])
        self.nl_template_using.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_using, 251, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'class' and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 252, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_class_brace")), 253, 0, 1, 5)
        label = QtWidgets.QLabel("nl_class_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 254, 0)
        self.nl_class_brace = QtWidgets.QComboBox()
        self.nl_class_brace.addItems(['ignore','add','remove','force'])
        self.nl_class_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_class_brace, 254, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline before or after (depending on pos_class_comma, may not be IGNORE) each',' in the base class list. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 255, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_class_init_args")), 256, 0, 1, 5)
        label = QtWidgets.QLabel("nl_class_init_args")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 257, 0)
        self.nl_class_init_args = QtWidgets.QComboBox()
        self.nl_class_init_args.addItems(['ignore','add','remove','force'])
        self.nl_class_init_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_class_init_args, 257, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after each ',' in the constructor member initialization. ")+self.tr("Related to nl_constr_colon, pos_constr_colon and pos_constr_comma. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 258, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_constr_init_args")), 259, 0, 1, 5)
        label = QtWidgets.QLabel("nl_constr_init_args")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 260, 0)
        self.nl_constr_init_args = QtWidgets.QComboBox()
        self.nl_constr_init_args.addItems(['ignore','add','remove','force'])
        self.nl_constr_init_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_constr_init_args, 260, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline before first element, after comma, and after last element, in 'enum'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 261, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_enum_own_lines")), 262, 0, 1, 5)
        label = QtWidgets.QLabel("nl_enum_own_lines")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 263, 0)
        self.nl_enum_own_lines = QtWidgets.QComboBox()
        self.nl_enum_own_lines.addItems(['ignore','add','remove','force'])
        self.nl_enum_own_lines.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_own_lines, 263, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between return type and function name in a function definition. ")+self.tr("might be modified by nl_func_leave_one_liners. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 264, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_type_name")), 265, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_type_name")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 266, 0)
        self.nl_func_type_name = QtWidgets.QComboBox()
        self.nl_func_type_name.addItems(['ignore','add','remove','force'])
        self.nl_func_type_name.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_type_name, 266, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between return type and function name inside a class definition. ")+self.tr("If set to ignore, nl_func_type_name or nl_func_proto_type_name is used instead. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 267, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_type_name_class")), 268, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_type_name_class")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 269, 0)
        self.nl_func_type_name_class = QtWidgets.QComboBox()
        self.nl_func_type_name_class.addItems(['ignore','add','remove','force'])
        self.nl_func_type_name_class.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_type_name_class, 269, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between class specification and '::' in 'void A::f() { }'. ")+self.tr("Only appears in separate member implementation (does not appear with in-line implementation). "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 270, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_class_scope")), 271, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_class_scope")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 272, 0)
        self.nl_func_class_scope = QtWidgets.QComboBox()
        self.nl_func_class_scope.addItems(['ignore','add','remove','force'])
        self.nl_func_class_scope.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_class_scope, 272, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between function scope and name, as in 'void A :: <here> f() { }'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 273, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_scope_name")), 274, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_scope_name")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 275, 0)
        self.nl_func_scope_name = QtWidgets.QComboBox()
        self.nl_func_scope_name.addItems(['ignore','add','remove','force'])
        self.nl_func_scope_name.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_scope_name, 275, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between return type and function name in a prototype. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 276, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_proto_type_name")), 277, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_proto_type_name")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 278, 0)
        self.nl_func_proto_type_name = QtWidgets.QComboBox()
        self.nl_func_proto_type_name.addItems(['ignore','add','remove','force'])
        self.nl_func_proto_type_name.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_proto_type_name, 278, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between a function name and the opening '(' in the declaration. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 279, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_paren")), 280, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 281, 0)
        self.nl_func_paren = QtWidgets.QComboBox()
        self.nl_func_paren.addItems(['ignore','add','remove','force'])
        self.nl_func_paren.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_paren, 281, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Overrides nl_func_paren for functions with no parameters. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 282, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_paren_empty")), 283, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_paren_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 284, 0)
        self.nl_func_paren_empty = QtWidgets.QComboBox()
        self.nl_func_paren_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_paren_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_paren_empty, 284, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between a function name and the opening '(' in the definition. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 285, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_paren")), 286, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 287, 0)
        self.nl_func_def_paren = QtWidgets.QComboBox()
        self.nl_func_def_paren.addItems(['ignore','add','remove','force'])
        self.nl_func_def_paren.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_paren, 287, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Overrides nl_func_def_paren for functions with no parameters. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 288, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_paren_empty")), 289, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_paren_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 290, 0)
        self.nl_func_def_paren_empty = QtWidgets.QComboBox()
        self.nl_func_def_paren_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_def_paren_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_paren_empty, 290, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between a function name and the opening '(' in the call. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 291, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_paren")), 292, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_paren")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 293, 0)
        self.nl_func_call_paren = QtWidgets.QComboBox()
        self.nl_func_call_paren.addItems(['ignore','add','remove','force'])
        self.nl_func_call_paren.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_paren, 293, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Overrides nl_func_call_paren for functions with no parameters. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 294, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_paren_empty")), 295, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_paren_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 296, 0)
        self.nl_func_call_paren_empty = QtWidgets.QComboBox()
        self.nl_func_call_paren_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_call_paren_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_paren_empty, 296, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after '(' in a function declaration. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 297, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_start")), 298, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 299, 0)
        self.nl_func_decl_start = QtWidgets.QComboBox()
        self.nl_func_decl_start.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_start.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_start, 299, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after '(' in a function definition. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 300, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_start")), 301, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 302, 0)
        self.nl_func_def_start = QtWidgets.QComboBox()
        self.nl_func_def_start.addItems(['ignore','add','remove','force'])
        self.nl_func_def_start.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_start, 302, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Overrides nl_func_decl_start when there is only one parameter. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 303, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_start_single")), 304, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_start_single")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 305, 0)
        self.nl_func_decl_start_single = QtWidgets.QComboBox()
        self.nl_func_decl_start_single.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_start_single.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_start_single, 305, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Overrides nl_func_def_start when there is only one parameter. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 306, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_start_single")), 307, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_start_single")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 308, 0)
        self.nl_func_def_start_single = QtWidgets.QComboBox()
        self.nl_func_def_start_single.addItems(['ignore','add','remove','force'])
        self.nl_func_def_start_single.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_start_single, 308, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after '(' in a function declaration if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_decl_start is used instead. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 309, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_start_multi_line")), 310, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_start_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 311, 0)
        self.nl_func_decl_start_multi_line = QtWidgets.QComboBox()
        self.nl_func_decl_start_multi_line.addItems(['true','false'])
        self.nl_func_decl_start_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_decl_start_multi_line, 311, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after '(' in a function definition if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_def_start is used instead. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 312, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_start_multi_line")), 313, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_start_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 314, 0)
        self.nl_func_def_start_multi_line = QtWidgets.QComboBox()
        self.nl_func_def_start_multi_line.addItems(['true','false'])
        self.nl_func_def_start_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_def_start_multi_line, 314, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after each ',' in a function declaration. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 315, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_args")), 316, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_args")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 317, 0)
        self.nl_func_decl_args = QtWidgets.QComboBox()
        self.nl_func_decl_args.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_args, 317, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after each ',' in a function definition. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 318, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_args")), 319, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_args")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 320, 0)
        self.nl_func_def_args = QtWidgets.QComboBox()
        self.nl_func_def_args.addItems(['ignore','add','remove','force'])
        self.nl_func_def_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_args, 320, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline after each ',' in a function call. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 321, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_args")), 322, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_args")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 323, 0)
        self.nl_func_call_args = QtWidgets.QComboBox()
        self.nl_func_call_args.addItems(['ignore','add','remove','force'])
        self.nl_func_call_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_args, 323, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after each ',' in a function declaration if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_decl_args is used instead. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 324, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_args_multi_line")), 325, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_args_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 326, 0)
        self.nl_func_decl_args_multi_line = QtWidgets.QComboBox()
        self.nl_func_decl_args_multi_line.addItems(['true','false'])
        self.nl_func_decl_args_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_decl_args_multi_line, 326, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after each ',' in a function definition if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_def_args is used instead. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 327, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_args_multi_line")), 328, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_args_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 329, 0)
        self.nl_func_def_args_multi_line = QtWidgets.QComboBox()
        self.nl_func_def_args_multi_line.addItems(['true','false'])
        self.nl_func_def_args_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_def_args_multi_line, 329, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline before the ')' in a function declaration. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 330, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_end")), 331, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 332, 0)
        self.nl_func_decl_end = QtWidgets.QComboBox()
        self.nl_func_decl_end.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_end.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_end, 332, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline before the ')' in a function definition. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 333, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_end")), 334, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 335, 0)
        self.nl_func_def_end = QtWidgets.QComboBox()
        self.nl_func_def_end.addItems(['ignore','add','remove','force'])
        self.nl_func_def_end.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_end, 335, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Overrides nl_func_decl_end when there is only one parameter. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 336, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_end_single")), 337, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_end_single")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 338, 0)
        self.nl_func_decl_end_single = QtWidgets.QComboBox()
        self.nl_func_decl_end_single.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_end_single.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_end_single, 338, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Overrides nl_func_def_end when there is only one parameter. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 339, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_end_single")), 340, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_end_single")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 341, 0)
        self.nl_func_def_end_single = QtWidgets.QComboBox()
        self.nl_func_def_end_single.addItems(['ignore','add','remove','force'])
        self.nl_func_def_end_single.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_end_single, 341, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before ')' in a function declaration if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_decl_end is used instead. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 342, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_end_multi_line")), 343, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_end_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 344, 0)
        self.nl_func_decl_end_multi_line = QtWidgets.QComboBox()
        self.nl_func_decl_end_multi_line.addItems(['true','false'])
        self.nl_func_decl_end_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_decl_end_multi_line, 344, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before ')' in a function definition if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_def_end is used instead. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 345, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_end_multi_line")), 346, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_end_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 347, 0)
        self.nl_func_def_end_multi_line = QtWidgets.QComboBox()
        self.nl_func_def_end_multi_line.addItems(['true','false'])
        self.nl_func_def_end_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_def_end_multi_line, 347, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '()' in a function declaration. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 348, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_decl_empty")), 349, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_decl_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 350, 0)
        self.nl_func_decl_empty = QtWidgets.QComboBox()
        self.nl_func_decl_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_empty, 350, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '()' in a function definition. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 351, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_def_empty")), 352, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_def_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 353, 0)
        self.nl_func_def_empty = QtWidgets.QComboBox()
        self.nl_func_def_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_def_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_empty, 353, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between '()' in a function call. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 354, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_empty")), 355, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 356, 0)
        self.nl_func_call_empty = QtWidgets.QComboBox()
        self.nl_func_call_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_call_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_empty, 356, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after '(' in a function call, has preference over nl_func_call_start_multi_line. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 357, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_start")), 358, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 359, 0)
        self.nl_func_call_start = QtWidgets.QComboBox()
        self.nl_func_call_start.addItems(['ignore','add','remove','force'])
        self.nl_func_call_start.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_start, 359, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before ')' in a function call. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 360, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_end")), 361, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 362, 0)
        self.nl_func_call_end = QtWidgets.QComboBox()
        self.nl_func_call_end.addItems(['ignore','add','remove','force'])
        self.nl_func_call_end.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_end, 362, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after '(' in a function call if '(' and ')' are in different lines. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 363, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_start_multi_line")), 364, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_start_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 365, 0)
        self.nl_func_call_start_multi_line = QtWidgets.QComboBox()
        self.nl_func_call_start_multi_line.addItems(['true','false'])
        self.nl_func_call_start_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_call_start_multi_line, 365, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after each ',' in a function call if '(' and ')' are in different lines. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 366, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_args_multi_line")), 367, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_args_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 368, 0)
        self.nl_func_call_args_multi_line = QtWidgets.QComboBox()
        self.nl_func_call_args_multi_line.addItems(['true','false'])
        self.nl_func_call_args_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_call_args_multi_line, 368, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before ')' in a function call if '(' and ')' are in different lines. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 369, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_end_multi_line")), 370, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_end_multi_line")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 371, 0)
        self.nl_func_call_end_multi_line = QtWidgets.QComboBox()
        self.nl_func_call_end_multi_line.addItems(['true','false'])
        self.nl_func_call_end_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_call_end_multi_line, 371, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to respect nl_func_call_XXX option incase of closure args. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 372, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_call_args_multi_line_ignore_closures")), 373, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_call_args_multi_line_ignore_closures")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 374, 0)
        self.nl_func_call_args_multi_line_ignore_closures = QtWidgets.QComboBox()
        self.nl_func_call_args_multi_line_ignore_closures.addItems(['true','false'])
        self.nl_func_call_args_multi_line_ignore_closures.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_call_args_multi_line_ignore_closures, 374, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after '<' of a template parameter list. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 375, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_start")), 376, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 377, 0)
        self.nl_template_start = QtWidgets.QComboBox()
        self.nl_template_start.addItems(['true','false'])
        self.nl_template_start.setCurrentText('false')
        self.lt4.addWidget(self.nl_template_start, 377, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after each ',' in a template parameter list. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 378, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_args")), 379, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_args")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 380, 0)
        self.nl_template_args = QtWidgets.QComboBox()
        self.nl_template_args.addItems(['true','false'])
        self.nl_template_args.setCurrentText('false')
        self.lt4.addWidget(self.nl_template_args, 380, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before '>' of a template parameter list. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 381, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_template_end")), 382, 0, 1, 5)
        label = QtWidgets.QLabel("nl_template_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 383, 0)
        self.nl_template_end = QtWidgets.QComboBox()
        self.nl_template_end.addItems(['true','false'])
        self.nl_template_end.setCurrentText('false')
        self.lt4.addWidget(self.nl_template_end, 383, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to put each Objective-C message parameter on a separate line. ")+self.tr("See nl_oc_msg_leave_one_liner. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 384, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_oc_msg_args")), 385, 0, 1, 5)
        label = QtWidgets.QLabel("nl_oc_msg_args")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 386, 0)
        self.nl_oc_msg_args = QtWidgets.QComboBox()
        self.nl_oc_msg_args.addItems(['true','false'])
        self.nl_oc_msg_args.setCurrentText('false')
        self.lt4.addWidget(self.nl_oc_msg_args, 386, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between function signature and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 387, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_fdef_brace")), 388, 0, 1, 5)
        label = QtWidgets.QLabel("nl_fdef_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 389, 0)
        self.nl_fdef_brace = QtWidgets.QComboBox()
        self.nl_fdef_brace.addItems(['ignore','add','remove','force'])
        self.nl_fdef_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_fdef_brace, 389, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between function signature and '{', if signature ends with ')'. ")+self.tr("Overrides nl_fdef_brace. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 390, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_fdef_brace_cond")), 391, 0, 1, 5)
        label = QtWidgets.QLabel("nl_fdef_brace_cond")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 392, 0)
        self.nl_fdef_brace_cond = QtWidgets.QComboBox()
        self.nl_fdef_brace_cond.addItems(['ignore','add','remove','force'])
        self.nl_fdef_brace_cond.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_fdef_brace_cond, 392, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between C++11 lambda signature and '{'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 393, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_cpp_ldef_brace")), 394, 0, 1, 5)
        label = QtWidgets.QLabel("nl_cpp_ldef_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 395, 0)
        self.nl_cpp_ldef_brace = QtWidgets.QComboBox()
        self.nl_cpp_ldef_brace.addItems(['ignore','add','remove','force'])
        self.nl_cpp_ldef_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_cpp_ldef_brace, 395, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between 'return' and the return expression. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 396, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_return_expr")), 397, 0, 1, 5)
        label = QtWidgets.QLabel("nl_return_expr")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 398, 0)
        self.nl_return_expr = QtWidgets.QComboBox()
        self.nl_return_expr.addItems(['ignore','add','remove','force'])
        self.nl_return_expr.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_return_expr, 398, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after semicolons, except in 'for' statements. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 399, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_semicolon")), 400, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_semicolon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 401, 0)
        self.nl_after_semicolon = QtWidgets.QComboBox()
        self.nl_after_semicolon.addItems(['true','false'])
        self.nl_after_semicolon.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_semicolon, 401, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Java) Add or remove newline between the ')' and '{{' of the double brace initializer. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 402, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_paren_dbrace_open")), 403, 0, 1, 5)
        label = QtWidgets.QLabel("nl_paren_dbrace_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 404, 0)
        self.nl_paren_dbrace_open = QtWidgets.QComboBox()
        self.nl_paren_dbrace_open.addItems(['ignore','add','remove','force'])
        self.nl_paren_dbrace_open.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_paren_dbrace_open, 404, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after the type in an unnamed temporary direct-list-initialization. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 405, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_type_brace_init_lst")), 406, 0, 1, 5)
        label = QtWidgets.QLabel("nl_type_brace_init_lst")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 407, 0)
        self.nl_type_brace_init_lst = QtWidgets.QComboBox()
        self.nl_type_brace_init_lst.addItems(['ignore','add','remove','force'])
        self.nl_type_brace_init_lst.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_type_brace_init_lst, 407, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after the open brace in an unnamed temporary direct-list-initialization. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 408, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_type_brace_init_lst_open")), 409, 0, 1, 5)
        label = QtWidgets.QLabel("nl_type_brace_init_lst_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 410, 0)
        self.nl_type_brace_init_lst_open = QtWidgets.QComboBox()
        self.nl_type_brace_init_lst_open.addItems(['ignore','add','remove','force'])
        self.nl_type_brace_init_lst_open.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_type_brace_init_lst_open, 410, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before the close brace in an unnamed temporary direct-list-initialization. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 411, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_type_brace_init_lst_close")), 412, 0, 1, 5)
        label = QtWidgets.QLabel("nl_type_brace_init_lst_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 413, 0)
        self.nl_type_brace_init_lst_close = QtWidgets.QComboBox()
        self.nl_type_brace_init_lst_close.addItems(['ignore','add','remove','force'])
        self.nl_type_brace_init_lst_close.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_type_brace_init_lst_close, 413, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after '{'. ")+self.tr("This also adds a newline before the matching '}'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 414, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_brace_open")), 415, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_brace_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 416, 0)
        self.nl_after_brace_open = QtWidgets.QComboBox()
        self.nl_after_brace_open.addItems(['true','false'])
        self.nl_after_brace_open.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_brace_open, 416, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline between the open brace and a trailing single-line comment. ")+self.tr("Requires nl_after_brace_open=true. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 417, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_brace_open_cmt")), 418, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_brace_open_cmt")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 419, 0)
        self.nl_after_brace_open_cmt = QtWidgets.QComboBox()
        self.nl_after_brace_open_cmt.addItems(['true','false'])
        self.nl_after_brace_open_cmt.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_brace_open_cmt, 419, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after a virtual brace open with a non-empty body. ")+self.tr("These occur in un-braced if/while/do/for statement bodies. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 420, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_vbrace_open")), 421, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_vbrace_open")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 422, 0)
        self.nl_after_vbrace_open = QtWidgets.QComboBox()
        self.nl_after_vbrace_open.addItems(['true','false'])
        self.nl_after_vbrace_open.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_vbrace_open, 422, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after a virtual brace open with an empty body. ")+self.tr("These occur in un-braced if/while/do/for statement bodies. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 423, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_vbrace_open_empty")), 424, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_vbrace_open_empty")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 425, 0)
        self.nl_after_vbrace_open_empty = QtWidgets.QComboBox()
        self.nl_after_vbrace_open_empty.addItems(['true','false'])
        self.nl_after_vbrace_open_empty.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_vbrace_open_empty, 425, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after '}'. ")+self.tr("Does not apply if followed by a necessary ';'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 426, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_brace_close")), 427, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_brace_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 428, 0)
        self.nl_after_brace_close = QtWidgets.QComboBox()
        self.nl_after_brace_close.addItems(['true','false'])
        self.nl_after_brace_close.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_brace_close, 428, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline after a virtual brace close, as in 'if (foo) a++; <here> return;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 429, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_vbrace_close")), 430, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_vbrace_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 431, 0)
        self.nl_after_vbrace_close = QtWidgets.QComboBox()
        self.nl_after_vbrace_close.addItems(['true','false'])
        self.nl_after_vbrace_close.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_vbrace_close, 431, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline between the close brace and identifier, as in 'struct { int a; } <here> b;'. ")+self.tr("Affects enumerations, unions and structures. ")+self.tr("If set to ignore, uses nl_after_brace_close. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 432, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_brace_struct_var")), 433, 0, 1, 5)
        label = QtWidgets.QLabel("nl_brace_struct_var")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 434, 0)
        self.nl_brace_struct_var = QtWidgets.QComboBox()
        self.nl_brace_struct_var.addItems(['ignore','add','remove','force'])
        self.nl_brace_struct_var.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_struct_var, 434, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to alter newlines in '#define' macros. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 435, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_define_macro")), 436, 0, 1, 5)
        label = QtWidgets.QLabel("nl_define_macro")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 437, 0)
        self.nl_define_macro = QtWidgets.QComboBox()
        self.nl_define_macro.addItems(['true','false'])
        self.nl_define_macro.setCurrentText('false')
        self.lt4.addWidget(self.nl_define_macro, 437, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to alter newlines between consecutive parenthesis closes. ")+self.tr("The number of closing parentheses in a line will depend on respective open parenthesis lines. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 438, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_squeeze_paren_close")), 439, 0, 1, 5)
        label = QtWidgets.QLabel("nl_squeeze_paren_close")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 440, 0)
        self.nl_squeeze_paren_close = QtWidgets.QComboBox()
        self.nl_squeeze_paren_close.addItems(['true','false'])
        self.nl_squeeze_paren_close.setCurrentText('false')
        self.lt4.addWidget(self.nl_squeeze_paren_close, 440, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and '#endif'. ")+self.tr("Does not affect top-level #ifdefs. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 441, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_squeeze_ifdef")), 442, 0, 1, 5)
        label = QtWidgets.QLabel("nl_squeeze_ifdef")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 443, 0)
        self.nl_squeeze_ifdef = QtWidgets.QComboBox()
        self.nl_squeeze_ifdef.addItems(['true','false'])
        self.nl_squeeze_ifdef.setCurrentText('false')
        self.lt4.addWidget(self.nl_squeeze_ifdef, 443, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Makes the nl_squeeze_ifdef option affect the top-level #ifdefs as well. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 444, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_squeeze_ifdef_top_level")), 445, 0, 1, 5)
        label = QtWidgets.QLabel("nl_squeeze_ifdef_top_level")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 446, 0)
        self.nl_squeeze_ifdef_top_level = QtWidgets.QComboBox()
        self.nl_squeeze_ifdef_top_level.addItems(['true','false'])
        self.nl_squeeze_ifdef_top_level.setCurrentText('false')
        self.lt4.addWidget(self.nl_squeeze_ifdef_top_level, 446, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line before 'if'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 447, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_if")), 448, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_if")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 449, 0)
        self.nl_before_if = QtWidgets.QComboBox()
        self.nl_before_if.addItems(['ignore','add','remove','force'])
        self.nl_before_if.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_if, 449, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line after 'if' statement. ")+self.tr("Add/Force work only if the next token is not a closing brace. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 450, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_if")), 451, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_if")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 452, 0)
        self.nl_after_if = QtWidgets.QComboBox()
        self.nl_after_if.addItems(['ignore','add','remove','force'])
        self.nl_after_if.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_if, 452, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line before 'for'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 453, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_for")), 454, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_for")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 455, 0)
        self.nl_before_for = QtWidgets.QComboBox()
        self.nl_before_for.addItems(['ignore','add','remove','force'])
        self.nl_before_for.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_for, 455, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line after 'for' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 456, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_for")), 457, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_for")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 458, 0)
        self.nl_after_for = QtWidgets.QComboBox()
        self.nl_after_for.addItems(['ignore','add','remove','force'])
        self.nl_after_for.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_for, 458, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line before 'while'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 459, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_while")), 460, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_while")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 461, 0)
        self.nl_before_while = QtWidgets.QComboBox()
        self.nl_before_while.addItems(['ignore','add','remove','force'])
        self.nl_before_while.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_while, 461, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line after 'while' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 462, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_while")), 463, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_while")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 464, 0)
        self.nl_after_while = QtWidgets.QComboBox()
        self.nl_after_while.addItems(['ignore','add','remove','force'])
        self.nl_after_while.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_while, 464, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line before 'switch'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 465, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_switch")), 466, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_switch")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 467, 0)
        self.nl_before_switch = QtWidgets.QComboBox()
        self.nl_before_switch.addItems(['ignore','add','remove','force'])
        self.nl_before_switch.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_switch, 467, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line after 'switch' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 468, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_switch")), 469, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_switch")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 470, 0)
        self.nl_after_switch = QtWidgets.QComboBox()
        self.nl_after_switch.addItems(['ignore','add','remove','force'])
        self.nl_after_switch.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_switch, 470, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line before 'synchronized'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 471, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_synchronized")), 472, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_synchronized")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 473, 0)
        self.nl_before_synchronized = QtWidgets.QComboBox()
        self.nl_before_synchronized.addItems(['ignore','add','remove','force'])
        self.nl_before_synchronized.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_synchronized, 473, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line after 'synchronized' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 474, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_synchronized")), 475, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_synchronized")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 476, 0)
        self.nl_after_synchronized = QtWidgets.QComboBox()
        self.nl_after_synchronized.addItems(['ignore','add','remove','force'])
        self.nl_after_synchronized.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_synchronized, 476, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line before 'do'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 477, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_do")), 478, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_do")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 479, 0)
        self.nl_before_do = QtWidgets.QComboBox()
        self.nl_before_do.addItems(['ignore','add','remove','force'])
        self.nl_before_do.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_do, 479, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove blank line after 'do/while' statement. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 480, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_do")), 481, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_do")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 482, 0)
        self.nl_after_do = QtWidgets.QComboBox()
        self.nl_after_do.addItems(['ignore','add','remove','force'])
        self.nl_after_do.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_do, 482, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to put a blank line before 'return' statements, unless after an open brace. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 483, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_return")), 484, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_return")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 485, 0)
        self.nl_before_return = QtWidgets.QComboBox()
        self.nl_before_return.addItems(['true','false'])
        self.nl_before_return.setCurrentText('false')
        self.lt4.addWidget(self.nl_before_return, 485, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to put a blank line after 'return' statements, unless followed by a close brace. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 486, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_return")), 487, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_return")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 488, 0)
        self.nl_after_return = QtWidgets.QComboBox()
        self.nl_after_return.addItems(['true','false'])
        self.nl_after_return.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_return, 488, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to put a blank line before a member '.' or '->' operators. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 489, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_member")), 490, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_member")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 491, 0)
        self.nl_before_member = QtWidgets.QComboBox()
        self.nl_before_member.addItems(['ignore','add','remove','force'])
        self.nl_before_member.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_member, 491, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Java) Whether to put a blank line after a member '.' or '->' operators. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 492, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_member")), 493, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_member")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 494, 0)
        self.nl_after_member = QtWidgets.QComboBox()
        self.nl_after_member.addItems(['ignore','add','remove','force'])
        self.nl_after_member.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_member, 494, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to double-space commented-entries in 'struct'/'union'/'enum'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 495, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_ds_struct_enum_cmt")), 496, 0, 1, 5)
        label = QtWidgets.QLabel("nl_ds_struct_enum_cmt")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 497, 0)
        self.nl_ds_struct_enum_cmt = QtWidgets.QComboBox()
        self.nl_ds_struct_enum_cmt.addItems(['true','false'])
        self.nl_ds_struct_enum_cmt.setCurrentText('false')
        self.lt4.addWidget(self.nl_ds_struct_enum_cmt, 497, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to force a newline before '}' of a 'struct'/'union'/'enum'. ")+self.tr("(Lower priority than eat_blanks_before_close_brace.). "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 498, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_ds_struct_enum_close_brace")), 499, 0, 1, 5)
        label = QtWidgets.QLabel("nl_ds_struct_enum_close_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 500, 0)
        self.nl_ds_struct_enum_close_brace = QtWidgets.QComboBox()
        self.nl_ds_struct_enum_close_brace.addItems(['true','false'])
        self.nl_ds_struct_enum_close_brace.setCurrentText('false')
        self.lt4.addWidget(self.nl_ds_struct_enum_close_brace, 500, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline before or after (depending on pos_class_colon) a class colon, as in 'class Foo <here> : <or here> public Bar'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 501, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_class_colon")), 502, 0, 1, 5)
        label = QtWidgets.QLabel("nl_class_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 503, 0)
        self.nl_class_colon = QtWidgets.QComboBox()
        self.nl_class_colon.addItems(['ignore','add','remove','force'])
        self.nl_class_colon.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_class_colon, 503, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove newline around a class constructor colon. ")+self.tr("The exact position depends on nl_constr_init_args, pos_constr_colon and pos_constr_comma. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 504, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_constr_colon")), 505, 0, 1, 5)
        label = QtWidgets.QLabel("nl_constr_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 506, 0)
        self.nl_constr_colon = QtWidgets.QComboBox()
        self.nl_constr_colon.addItems(['ignore','add','remove','force'])
        self.nl_constr_colon.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_constr_colon, 506, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to collapse a two-line namespace, like 'namespace foo\n{ decl; }' into a single line. ")+self.tr("If true, prevents other brace newline rules from turning such code into four lines. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 507, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_namespace_two_to_one_liner")), 508, 0, 1, 5)
        label = QtWidgets.QLabel("nl_namespace_two_to_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 509, 0)
        self.nl_namespace_two_to_one_liner = QtWidgets.QComboBox()
        self.nl_namespace_two_to_one_liner.addItems(['true','false'])
        self.nl_namespace_two_to_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_namespace_two_to_one_liner, 509, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to remove a newline in simple unbraced if statements, turning them into one-liners, as in 'if(b)\n i++;' => 'if(b) i++;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 510, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_create_if_one_liner")), 511, 0, 1, 5)
        label = QtWidgets.QLabel("nl_create_if_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 512, 0)
        self.nl_create_if_one_liner = QtWidgets.QComboBox()
        self.nl_create_if_one_liner.addItems(['true','false'])
        self.nl_create_if_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_if_one_liner, 512, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to remove a newline in simple unbraced for statements, turning them into one-liners, as in 'for (...)\n stmt;' => 'for (...) stmt;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 513, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_create_for_one_liner")), 514, 0, 1, 5)
        label = QtWidgets.QLabel("nl_create_for_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 515, 0)
        self.nl_create_for_one_liner = QtWidgets.QComboBox()
        self.nl_create_for_one_liner.addItems(['true','false'])
        self.nl_create_for_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_for_one_liner, 515, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to remove a newline in simple unbraced while statements, turning them into one-liners, as in 'while (expr)\n stmt;' => 'while (expr) stmt;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 516, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_create_while_one_liner")), 517, 0, 1, 5)
        label = QtWidgets.QLabel("nl_create_while_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 518, 0)
        self.nl_create_while_one_liner = QtWidgets.QComboBox()
        self.nl_create_while_one_liner.addItems(['true','false'])
        self.nl_create_while_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_while_one_liner, 518, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to collapse a function definition whose body (not counting braces) is only one line so that the entire definition (prototype, braces, body) is a single line. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 519, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_create_func_def_one_liner")), 520, 0, 1, 5)
        label = QtWidgets.QLabel("nl_create_func_def_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 521, 0)
        self.nl_create_func_def_one_liner = QtWidgets.QComboBox()
        self.nl_create_func_def_one_liner.addItems(['true','false'])
        self.nl_create_func_def_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_func_def_one_liner, 521, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to collapse a function definition whose body (not counting braces) is only one line so that the entire definition (prototype, braces, body) is a single line. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 522, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_create_list_one_liner")), 523, 0, 1, 5)
        label = QtWidgets.QLabel("nl_create_list_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 524, 0)
        self.nl_create_list_one_liner = QtWidgets.QComboBox()
        self.nl_create_list_one_liner.addItems(['true','false'])
        self.nl_create_list_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_list_one_liner, 524, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to split one-line simple unbraced if statements into two lines by adding a newline, as in 'if(b) <here> i++;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 525, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_split_if_one_liner")), 526, 0, 1, 5)
        label = QtWidgets.QLabel("nl_split_if_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 527, 0)
        self.nl_split_if_one_liner = QtWidgets.QComboBox()
        self.nl_split_if_one_liner.addItems(['true','false'])
        self.nl_split_if_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_split_if_one_liner, 527, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to split one-line simple unbraced for statements into two lines by adding a newline, as in 'for (...) <here> stmt;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 528, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_split_for_one_liner")), 529, 0, 1, 5)
        label = QtWidgets.QLabel("nl_split_for_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 530, 0)
        self.nl_split_for_one_liner = QtWidgets.QComboBox()
        self.nl_split_for_one_liner.addItems(['true','false'])
        self.nl_split_for_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_split_for_one_liner, 530, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to split one-line simple unbraced while statements into two lines by adding a newline, as in 'while (expr) <here> stmt;'. "))
        label.setWordWrap(True)
        self.lt4.addWidget(label, 531, 0, 1, 5)
        self.lt4.addWidget(QtWidgets.QLabel(self.tr("code_nl_split_while_one_liner")), 532, 0, 1, 5)
        label = QtWidgets.QLabel("nl_split_while_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(label, 533, 0)
        self.nl_split_while_one_liner = QtWidgets.QComboBox()
        self.nl_split_while_one_liner.addItems(['true','false'])
        self.nl_split_while_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_split_while_one_liner, 533, 1, 1, 4)
        self.widget5 = QtWidgets.QWidget()
        self.addItem(self.widget5, self.tr("Blank line options"))
        self.lt5 = QtWidgets.QGridLayout(self.widget5)
        label = QtWidgets.QLabel(self.tr("The maximum number of consecutive newlines (3 = 2 blank lines). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 0, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_max")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("nl_max")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 2, 0)
        self.nl_max = QtWidgets.QSpinBox()
        self.nl_max.setMinimum(0)
        self.nl_max.setMaximum(100)
        self.nl_max.setValue(0)
        self.lt5.addWidget(self.nl_max, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The maximum number of consecutive newlines in a function. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 3, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_max_blank_in_func")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("nl_max_blank_in_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 5, 0)
        self.nl_max_blank_in_func = QtWidgets.QSpinBox()
        self.nl_max_blank_in_func.setMinimum(0)
        self.nl_max_blank_in_func.setMaximum(100)
        self.nl_max_blank_in_func.setValue(0)
        self.lt5.addWidget(self.nl_max_blank_in_func, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a function prototype. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 6, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_func_body_proto")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_func_body_proto")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 8, 0)
        self.nl_before_func_body_proto = QtWidgets.QSpinBox()
        self.nl_before_func_body_proto.setMinimum(0)
        self.nl_before_func_body_proto.setMaximum(100)
        self.nl_before_func_body_proto.setValue(0)
        self.lt5.addWidget(self.nl_before_func_body_proto, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a multi-line function definition. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 9, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_func_body_def")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_func_body_def")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 11, 0)
        self.nl_before_func_body_def = QtWidgets.QSpinBox()
        self.nl_before_func_body_def.setMinimum(0)
        self.nl_before_func_body_def.setMaximum(100)
        self.nl_before_func_body_def.setValue(0)
        self.lt5.addWidget(self.nl_before_func_body_def, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a class constructor/destructor prototype. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 12, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_func_class_proto")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_func_class_proto")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 14, 0)
        self.nl_before_func_class_proto = QtWidgets.QSpinBox()
        self.nl_before_func_class_proto.setMinimum(0)
        self.nl_before_func_class_proto.setMaximum(100)
        self.nl_before_func_class_proto.setValue(0)
        self.lt5.addWidget(self.nl_before_func_class_proto, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a class constructor/destructor definition. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 15, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_func_class_def")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_func_class_def")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 17, 0)
        self.nl_before_func_class_def = QtWidgets.QSpinBox()
        self.nl_before_func_class_def.setMinimum(0)
        self.nl_before_func_class_def.setMaximum(100)
        self.nl_before_func_class_def.setValue(0)
        self.lt5.addWidget(self.nl_before_func_class_def, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a function prototype. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 18, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_func_proto")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_func_proto")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 20, 0)
        self.nl_after_func_proto = QtWidgets.QSpinBox()
        self.nl_after_func_proto.setMinimum(0)
        self.nl_after_func_proto.setMaximum(100)
        self.nl_after_func_proto.setValue(0)
        self.lt5.addWidget(self.nl_after_func_proto, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a function prototype, if not followed by another function prototype. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 21, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_func_proto_group")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_func_proto_group")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 23, 0)
        self.nl_after_func_proto_group = QtWidgets.QSpinBox()
        self.nl_after_func_proto_group.setMinimum(0)
        self.nl_after_func_proto_group.setMaximum(100)
        self.nl_after_func_proto_group.setValue(0)
        self.lt5.addWidget(self.nl_after_func_proto_group, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a class constructor/destructor prototype. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 24, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_func_class_proto")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_func_class_proto")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 26, 0)
        self.nl_after_func_class_proto = QtWidgets.QSpinBox()
        self.nl_after_func_class_proto.setMinimum(0)
        self.nl_after_func_class_proto.setMaximum(100)
        self.nl_after_func_class_proto.setValue(0)
        self.lt5.addWidget(self.nl_after_func_class_proto, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a class constructor/destructor prototype, if not followed by another constructor/destructor prototype. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 27, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_func_class_proto_group")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_func_class_proto_group")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 29, 0)
        self.nl_after_func_class_proto_group = QtWidgets.QSpinBox()
        self.nl_after_func_class_proto_group.setMinimum(0)
        self.nl_after_func_class_proto_group.setMaximum(100)
        self.nl_after_func_class_proto_group.setValue(0)
        self.lt5.addWidget(self.nl_after_func_class_proto_group, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether one-line method definitions inside a class body should be treated as if they were prototypes for the purposes of adding newlines. ")+self.tr("Requires nl_class_leave_one_liners=true. ")+self.tr("Overrides nl_before_func_body_def and nl_before_func_class_def for one-liners. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 30, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_class_leave_one_liner_groups")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("nl_class_leave_one_liner_groups")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 32, 0)
        self.nl_class_leave_one_liner_groups = QtWidgets.QComboBox()
        self.nl_class_leave_one_liner_groups.addItems(['true','false'])
        self.nl_class_leave_one_liner_groups.setCurrentText('false')
        self.lt5.addWidget(self.nl_class_leave_one_liner_groups, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after '}' of a multi-line function body. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 33, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_func_body")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_func_body")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 35, 0)
        self.nl_after_func_body = QtWidgets.QSpinBox()
        self.nl_after_func_body.setMinimum(0)
        self.nl_after_func_body.setMaximum(100)
        self.nl_after_func_body.setValue(0)
        self.lt5.addWidget(self.nl_after_func_body, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after '}' of a multi-line function body in a class declaration. ")+self.tr("Also affects class constructors/destructors. ")+self.tr("Overrides nl_after_func_body. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 36, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_func_body_class")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_func_body_class")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 38, 0)
        self.nl_after_func_body_class = QtWidgets.QSpinBox()
        self.nl_after_func_body_class.setMinimum(0)
        self.nl_after_func_body_class.setMaximum(100)
        self.nl_after_func_body_class.setValue(0)
        self.lt5.addWidget(self.nl_after_func_body_class, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after '}' of a single line function body. ")+self.tr("Also affects class constructors/destructors. ")+self.tr("Overrides nl_after_func_body and nl_after_func_body_class. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 39, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_func_body_one_liner")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_func_body_one_liner")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 41, 0)
        self.nl_after_func_body_one_liner = QtWidgets.QSpinBox()
        self.nl_after_func_body_one_liner.setMinimum(0)
        self.nl_after_func_body_one_liner.setMaximum(100)
        self.nl_after_func_body_one_liner.setValue(0)
        self.lt5.addWidget(self.nl_after_func_body_one_liner, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of blank lines after a block of variable definitions at the top of a function body. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 42, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_func_var_def_blk")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("nl_func_var_def_blk")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 44, 0)
        self.nl_func_var_def_blk = QtWidgets.QSpinBox()
        self.nl_func_var_def_blk.setMinimum(0)
        self.nl_func_var_def_blk.setMaximum(100)
        self.nl_func_var_def_blk.setValue(0)
        self.lt5.addWidget(self.nl_func_var_def_blk, 44, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a block of typedefs. ")+self.tr("If nl_after_access_spec is non-zero, that option takes precedence. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 45, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_typedef_blk_start")), 46, 0, 1, 5)
        label = QtWidgets.QLabel("nl_typedef_blk_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 47, 0)
        self.nl_typedef_blk_start = QtWidgets.QSpinBox()
        self.nl_typedef_blk_start.setMinimum(0)
        self.nl_typedef_blk_start.setMaximum(100)
        self.nl_typedef_blk_start.setValue(0)
        self.lt5.addWidget(self.nl_typedef_blk_start, 47, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a block of typedefs. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 48, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_typedef_blk_end")), 49, 0, 1, 5)
        label = QtWidgets.QLabel("nl_typedef_blk_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 50, 0)
        self.nl_typedef_blk_end = QtWidgets.QSpinBox()
        self.nl_typedef_blk_end.setMinimum(0)
        self.nl_typedef_blk_end.setMaximum(100)
        self.nl_typedef_blk_end.setValue(0)
        self.lt5.addWidget(self.nl_typedef_blk_end, 50, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The maximum number of consecutive newlines within a block of typedefs. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 51, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_typedef_blk_in")), 52, 0, 1, 5)
        label = QtWidgets.QLabel("nl_typedef_blk_in")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 53, 0)
        self.nl_typedef_blk_in = QtWidgets.QSpinBox()
        self.nl_typedef_blk_in.setMinimum(0)
        self.nl_typedef_blk_in.setMaximum(100)
        self.nl_typedef_blk_in.setValue(0)
        self.lt5.addWidget(self.nl_typedef_blk_in, 53, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a block of variable definitions not at the top of a function body. ")+self.tr("If nl_after_access_spec is non-zero, that option takes precedence. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 54, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_var_def_blk_start")), 55, 0, 1, 5)
        label = QtWidgets.QLabel("nl_var_def_blk_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 56, 0)
        self.nl_var_def_blk_start = QtWidgets.QSpinBox()
        self.nl_var_def_blk_start.setMinimum(0)
        self.nl_var_def_blk_start.setMaximum(100)
        self.nl_var_def_blk_start.setValue(0)
        self.lt5.addWidget(self.nl_var_def_blk_start, 56, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a block of variable definitions not at the top of a function body. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 57, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_var_def_blk_end")), 58, 0, 1, 5)
        label = QtWidgets.QLabel("nl_var_def_blk_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 59, 0)
        self.nl_var_def_blk_end = QtWidgets.QSpinBox()
        self.nl_var_def_blk_end.setMinimum(0)
        self.nl_var_def_blk_end.setMaximum(100)
        self.nl_var_def_blk_end.setValue(0)
        self.lt5.addWidget(self.nl_var_def_blk_end, 59, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The maximum number of consecutive newlines within a block of variable definitions. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 60, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_var_def_blk_in")), 61, 0, 1, 5)
        label = QtWidgets.QLabel("nl_var_def_blk_in")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 62, 0)
        self.nl_var_def_blk_in = QtWidgets.QSpinBox()
        self.nl_var_def_blk_in.setMinimum(0)
        self.nl_var_def_blk_in.setMaximum(100)
        self.nl_var_def_blk_in.setValue(0)
        self.lt5.addWidget(self.nl_var_def_blk_in, 62, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The minimum number of newlines before a multi-line comment. ")+self.tr("Doesn't apply if after a brace open or another multi-line comment. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 63, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_block_comment")), 64, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_block_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 65, 0)
        self.nl_before_block_comment = QtWidgets.QSpinBox()
        self.nl_before_block_comment.setMinimum(0)
        self.nl_before_block_comment.setMaximum(100)
        self.nl_before_block_comment.setValue(0)
        self.lt5.addWidget(self.nl_before_block_comment, 65, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The minimum number of newlines before a single-line C comment. ")+self.tr("Doesn't apply if after a brace open or other single-line C comments. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 66, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_c_comment")), 67, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_c_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 68, 0)
        self.nl_before_c_comment = QtWidgets.QSpinBox()
        self.nl_before_c_comment.setMinimum(0)
        self.nl_before_c_comment.setMaximum(100)
        self.nl_before_c_comment.setValue(0)
        self.lt5.addWidget(self.nl_before_c_comment, 68, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The minimum number of newlines before a CPP comment. ")+self.tr("Doesn't apply if after a brace open or other CPP comments. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 69, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_cpp_comment")), 70, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_cpp_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 71, 0)
        self.nl_before_cpp_comment = QtWidgets.QSpinBox()
        self.nl_before_cpp_comment.setMinimum(0)
        self.nl_before_cpp_comment.setMaximum(100)
        self.nl_before_cpp_comment.setValue(0)
        self.lt5.addWidget(self.nl_before_cpp_comment, 71, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to force a newline after a multi-line comment. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 72, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_multiline_comment")), 73, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_multiline_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 74, 0)
        self.nl_after_multiline_comment = QtWidgets.QComboBox()
        self.nl_after_multiline_comment.addItems(['true','false'])
        self.nl_after_multiline_comment.setCurrentText('false')
        self.lt5.addWidget(self.nl_after_multiline_comment, 74, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to force a newline after a label's colon. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 75, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_label_colon")), 76, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_label_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 77, 0)
        self.nl_after_label_colon = QtWidgets.QComboBox()
        self.nl_after_label_colon.addItems(['true','false'])
        self.nl_after_label_colon.setCurrentText('false')
        self.lt5.addWidget(self.nl_after_label_colon, 77, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after '}' or ';' of a struct/enum/union definition. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 78, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_struct")), 79, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_struct")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 80, 0)
        self.nl_after_struct = QtWidgets.QSpinBox()
        self.nl_after_struct.setMinimum(0)
        self.nl_after_struct.setMaximum(100)
        self.nl_after_struct.setValue(0)
        self.lt5.addWidget(self.nl_after_struct, 80, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a class definition. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 81, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_class")), 82, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_class")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 83, 0)
        self.nl_before_class = QtWidgets.QSpinBox()
        self.nl_before_class.setMinimum(0)
        self.nl_before_class.setMaximum(100)
        self.nl_before_class.setValue(0)
        self.lt5.addWidget(self.nl_before_class, 83, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after '}' or ';' of a class definition. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 84, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_class")), 85, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_class")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 86, 0)
        self.nl_after_class = QtWidgets.QSpinBox()
        self.nl_after_class.setMinimum(0)
        self.nl_after_class.setMaximum(100)
        self.nl_after_class.setValue(0)
        self.lt5.addWidget(self.nl_after_class, 86, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a namespace. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 87, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_namespace")), 88, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_namespace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 89, 0)
        self.nl_before_namespace = QtWidgets.QSpinBox()
        self.nl_before_namespace.setMinimum(0)
        self.nl_before_namespace.setMaximum(100)
        self.nl_before_namespace.setValue(0)
        self.lt5.addWidget(self.nl_before_namespace, 89, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after '{' of a namespace. ")+self.tr("This also adds newlines before the matching '}'. ")+self.tr("0: Apply eat_blanks_after_open_brace or eat_blanks_before_close_brace if     applicable, otherwise no change. ")+self.tr("Overrides eat_blanks_after_open_brace and eat_blanks_before_close_brace. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 90, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_inside_namespace")), 91, 0, 1, 5)
        label = QtWidgets.QLabel("nl_inside_namespace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 92, 0)
        self.nl_inside_namespace = QtWidgets.QSpinBox()
        self.nl_inside_namespace.setMinimum(0)
        self.nl_inside_namespace.setMaximum(100)
        self.nl_inside_namespace.setValue(0)
        self.lt5.addWidget(self.nl_inside_namespace, 92, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after '}' of a namespace. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 93, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_namespace")), 94, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_namespace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 95, 0)
        self.nl_after_namespace = QtWidgets.QSpinBox()
        self.nl_after_namespace.setMinimum(0)
        self.nl_after_namespace.setMaximum(100)
        self.nl_after_namespace.setValue(0)
        self.lt5.addWidget(self.nl_after_namespace, 95, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before an access specifier label. ")+self.tr("This also includes the Qt-specific 'signals:' and 'slots:'. ")+self.tr("Will not change the newline count if after a brace open. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 96, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_access_spec")), 97, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_access_spec")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 98, 0)
        self.nl_before_access_spec = QtWidgets.QSpinBox()
        self.nl_before_access_spec.setMinimum(0)
        self.nl_before_access_spec.setMaximum(100)
        self.nl_before_access_spec.setValue(0)
        self.lt5.addWidget(self.nl_before_access_spec, 98, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after an access specifier label. ")+self.tr("This also includes the Qt-specific 'signals:' and 'slots:'. ")+self.tr("Will not change the newline count if after a brace open. ")+self.tr("0: No change (default). ")+self.tr("Overrides nl_typedef_blk_start and nl_var_def_blk_start. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 99, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_access_spec")), 100, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_access_spec")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 101, 0)
        self.nl_after_access_spec = QtWidgets.QSpinBox()
        self.nl_after_access_spec.setMinimum(0)
        self.nl_after_access_spec.setMaximum(100)
        self.nl_after_access_spec.setValue(0)
        self.lt5.addWidget(self.nl_after_access_spec, 101, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines between a function definition and the function comment, as in '// comment\n <here> void foo() {...}'. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 102, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_comment_func_def")), 103, 0, 1, 5)
        label = QtWidgets.QLabel("nl_comment_func_def")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 104, 0)
        self.nl_comment_func_def = QtWidgets.QSpinBox()
        self.nl_comment_func_def.setMinimum(0)
        self.nl_comment_func_def.setMaximum(100)
        self.nl_comment_func_def.setValue(0)
        self.lt5.addWidget(self.nl_comment_func_def, 104, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a try-catch-finally block that isn't followed by a brace close. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 105, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_try_catch_finally")), 106, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_try_catch_finally")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 107, 0)
        self.nl_after_try_catch_finally = QtWidgets.QSpinBox()
        self.nl_after_try_catch_finally.setMinimum(0)
        self.nl_after_try_catch_finally.setMaximum(100)
        self.nl_after_try_catch_finally.setValue(0)
        self.lt5.addWidget(self.nl_after_try_catch_finally, 107, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) The number of newlines before and after a property, indexer or event declaration. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 108, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_around_cs_property")), 109, 0, 1, 5)
        label = QtWidgets.QLabel("nl_around_cs_property")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 110, 0)
        self.nl_around_cs_property = QtWidgets.QSpinBox()
        self.nl_around_cs_property.setMinimum(0)
        self.nl_around_cs_property.setMaximum(100)
        self.nl_around_cs_property.setValue(0)
        self.lt5.addWidget(self.nl_around_cs_property, 110, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) The number of newlines between the get/set/add/remove handlers. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 111, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_between_get_set")), 112, 0, 1, 5)
        label = QtWidgets.QLabel("nl_between_get_set")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 113, 0)
        self.nl_between_get_set = QtWidgets.QSpinBox()
        self.nl_between_get_set.setMinimum(0)
        self.nl_between_get_set.setMaximum(100)
        self.nl_between_get_set.setValue(0)
        self.lt5.addWidget(self.nl_between_get_set, 113, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Add or remove newline between property and the '{'. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 114, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_property_brace")), 115, 0, 1, 5)
        label = QtWidgets.QLabel("nl_property_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 116, 0)
        self.nl_property_brace = QtWidgets.QComboBox()
        self.nl_property_brace.addItems(['ignore','add','remove','force'])
        self.nl_property_brace.setCurrentText('ignore')
        self.lt5.addWidget(self.nl_property_brace, 116, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to remove blank lines after '{'. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 117, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_eat_blanks_after_open_brace")), 118, 0, 1, 5)
        label = QtWidgets.QLabel("eat_blanks_after_open_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 119, 0)
        self.eat_blanks_after_open_brace = QtWidgets.QComboBox()
        self.eat_blanks_after_open_brace.addItems(['true','false'])
        self.eat_blanks_after_open_brace.setCurrentText('false')
        self.lt5.addWidget(self.eat_blanks_after_open_brace, 119, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to remove blank lines before '}'. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 120, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_eat_blanks_before_close_brace")), 121, 0, 1, 5)
        label = QtWidgets.QLabel("eat_blanks_before_close_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 122, 0)
        self.eat_blanks_before_close_brace = QtWidgets.QComboBox()
        self.eat_blanks_before_close_brace.addItems(['true','false'])
        self.eat_blanks_before_close_brace.setCurrentText('false')
        self.lt5.addWidget(self.eat_blanks_before_close_brace, 122, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How aggressively to remove extra newlines not in preprocessor. ")+self.tr("0: No change (default) 1: Remove most newlines not handled by other config 2: Remove all newlines and reformat completely by config. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 123, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_remove_extra_newlines")), 124, 0, 1, 5)
        label = QtWidgets.QLabel("nl_remove_extra_newlines")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 125, 0)
        self.nl_remove_extra_newlines = QtWidgets.QSpinBox()
        self.nl_remove_extra_newlines.setMinimum(0)
        self.nl_remove_extra_newlines.setMaximum(100)
        self.nl_remove_extra_newlines.setValue(0)
        self.lt5.addWidget(self.nl_remove_extra_newlines, 125, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Java) Add or remove newline after an annotation statement. ")+self.tr("Only affects annotations that are after a newline. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 126, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_annotation")), 127, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_annotation")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 128, 0)
        self.nl_after_annotation = QtWidgets.QComboBox()
        self.nl_after_annotation.addItems(['ignore','add','remove','force'])
        self.nl_after_annotation.setCurrentText('ignore')
        self.lt5.addWidget(self.nl_after_annotation, 128, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Java) Add or remove newline between two annotations. "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 129, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_between_annotation")), 130, 0, 1, 5)
        label = QtWidgets.QLabel("nl_between_annotation")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 131, 0)
        self.nl_between_annotation = QtWidgets.QComboBox()
        self.nl_between_annotation.addItems(['ignore','add','remove','force'])
        self.nl_between_annotation.setCurrentText('ignore')
        self.lt5.addWidget(self.nl_between_annotation, 131, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a whole-file #ifdef. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 132, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_whole_file_ifdef")), 133, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_whole_file_ifdef")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 134, 0)
        self.nl_before_whole_file_ifdef = QtWidgets.QSpinBox()
        self.nl_before_whole_file_ifdef.setMinimum(0)
        self.nl_before_whole_file_ifdef.setMaximum(100)
        self.nl_before_whole_file_ifdef.setValue(0)
        self.lt5.addWidget(self.nl_before_whole_file_ifdef, 134, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a whole-file #ifdef. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 135, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_whole_file_ifdef")), 136, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_whole_file_ifdef")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 137, 0)
        self.nl_after_whole_file_ifdef = QtWidgets.QSpinBox()
        self.nl_after_whole_file_ifdef.setMinimum(0)
        self.nl_after_whole_file_ifdef.setMaximum(100)
        self.nl_after_whole_file_ifdef.setValue(0)
        self.lt5.addWidget(self.nl_after_whole_file_ifdef, 137, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines before a whole-file #endif. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 138, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_before_whole_file_endif")), 139, 0, 1, 5)
        label = QtWidgets.QLabel("nl_before_whole_file_endif")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 140, 0)
        self.nl_before_whole_file_endif = QtWidgets.QSpinBox()
        self.nl_before_whole_file_endif.setMinimum(0)
        self.nl_before_whole_file_endif.setMaximum(100)
        self.nl_before_whole_file_endif.setValue(0)
        self.lt5.addWidget(self.nl_before_whole_file_endif, 140, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of newlines after a whole-file #endif. ")+self.tr("0: No change (default). "))
        label.setWordWrap(True)
        self.lt5.addWidget(label, 141, 0, 1, 5)
        self.lt5.addWidget(QtWidgets.QLabel(self.tr("code_nl_after_whole_file_endif")), 142, 0, 1, 5)
        label = QtWidgets.QLabel("nl_after_whole_file_endif")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(label, 143, 0)
        self.nl_after_whole_file_endif = QtWidgets.QSpinBox()
        self.nl_after_whole_file_endif.setMinimum(0)
        self.nl_after_whole_file_endif.setMaximum(100)
        self.nl_after_whole_file_endif.setValue(0)
        self.lt5.addWidget(self.nl_after_whole_file_endif, 143, 1, 1, 4)
        self.widget6 = QtWidgets.QWidget()
        self.addItem(self.widget6, self.tr("Positioning options"))
        self.lt6 = QtWidgets.QGridLayout(self.widget6)
        label = QtWidgets.QLabel(self.tr("The position of arithmetic operators in wrapped expressions. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 0, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_arith")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("pos_arith")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 2, 0)
        self.pos_arith = QtWidgets.QComboBox()
        self.pos_arith.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_arith.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_arith, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of assignment in wrapped expressions. ")+self.tr("Do not affect '=' followed by '{'. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 3, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_assign")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("pos_assign")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 5, 0)
        self.pos_assign = QtWidgets.QComboBox()
        self.pos_assign.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_assign.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_assign, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of Boolean operators in wrapped expressions. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 6, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_bool")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("pos_bool")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 8, 0)
        self.pos_bool = QtWidgets.QComboBox()
        self.pos_bool.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_bool.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_bool, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of comparison operators in wrapped expressions. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 9, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_compare")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("pos_compare")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 11, 0)
        self.pos_compare = QtWidgets.QComboBox()
        self.pos_compare.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_compare.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_compare, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of conditional operators, as in the '?' and ':' of 'expr ? stmt : stmt', in wrapped expressions. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 12, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_conditional")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("pos_conditional")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 14, 0)
        self.pos_conditional = QtWidgets.QComboBox()
        self.pos_conditional.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_conditional.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_conditional, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of the comma in wrapped expressions. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 15, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_comma")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("pos_comma")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 17, 0)
        self.pos_comma = QtWidgets.QComboBox()
        self.pos_comma.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_comma.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_comma, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of the comma in enum entries. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 18, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_enum_comma")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("pos_enum_comma")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 20, 0)
        self.pos_enum_comma = QtWidgets.QComboBox()
        self.pos_enum_comma.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_enum_comma.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_enum_comma, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of the comma in the base class list if there is more than one line. ")+self.tr("Affects nl_class_init_args. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 21, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_class_comma")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("pos_class_comma")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 23, 0)
        self.pos_class_comma = QtWidgets.QComboBox()
        self.pos_class_comma.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_class_comma.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_class_comma, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of the comma in the constructor initialization list. ")+self.tr("Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 24, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_constr_comma")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("pos_constr_comma")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 26, 0)
        self.pos_constr_comma = QtWidgets.QComboBox()
        self.pos_constr_comma.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_constr_comma.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_constr_comma, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of trailing/leading class colon, between class and base class list. ")+self.tr("Affects nl_class_colon. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 27, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_class_colon")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("pos_class_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 29, 0)
        self.pos_class_colon = QtWidgets.QComboBox()
        self.pos_class_colon.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_class_colon.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_class_colon, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The position of colons between constructor and member initialization. ")+self.tr("Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma. "))
        label.setWordWrap(True)
        self.lt6.addWidget(label, 30, 0, 1, 5)
        self.lt6.addWidget(QtWidgets.QLabel(self.tr("code_pos_constr_colon")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("pos_constr_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(label, 32, 0)
        self.pos_constr_colon = QtWidgets.QComboBox()
        self.pos_constr_colon.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_constr_colon.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_constr_colon, 32, 1, 1, 4)
        self.widget7 = QtWidgets.QWidget()
        self.addItem(self.widget7, self.tr("Line splitting options"))
        self.lt7 = QtWidgets.QGridLayout(self.widget7)
        label = QtWidgets.QLabel(self.tr("Try to limit code width to N columns. "))
        label.setWordWrap(True)
        self.lt7.addWidget(label, 0, 0, 1, 5)
        self.lt7.addWidget(QtWidgets.QLabel(self.tr("code_code_width")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("code_width")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt7.addWidget(label, 2, 0)
        self.code_width = QtWidgets.QSpinBox()
        self.code_width.setMinimum(0)
        self.code_width.setMaximum(100)
        self.code_width.setValue(0)
        self.lt7.addWidget(self.code_width, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to fully split long 'for' statements at semi-colons. "))
        label.setWordWrap(True)
        self.lt7.addWidget(label, 3, 0, 1, 5)
        self.lt7.addWidget(QtWidgets.QLabel(self.tr("code_ls_for_split_full")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("ls_for_split_full")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt7.addWidget(label, 5, 0)
        self.ls_for_split_full = QtWidgets.QComboBox()
        self.ls_for_split_full.addItems(['true','false'])
        self.ls_for_split_full.setCurrentText('false')
        self.lt7.addWidget(self.ls_for_split_full, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to fully split long function prototypes/calls at commas. ")+self.tr("The option ls_code_width has priority over the option ls_func_split_full. "))
        label.setWordWrap(True)
        self.lt7.addWidget(label, 6, 0, 1, 5)
        self.lt7.addWidget(QtWidgets.QLabel(self.tr("code_ls_func_split_full")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("ls_func_split_full")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt7.addWidget(label, 8, 0)
        self.ls_func_split_full = QtWidgets.QComboBox()
        self.ls_func_split_full.addItems(['true','false'])
        self.ls_func_split_full.setCurrentText('false')
        self.lt7.addWidget(self.ls_func_split_full, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to split lines as close to code_width as possible and ignore some groupings. ")+self.tr("The option ls_code_width has priority over the option ls_func_split_full. "))
        label.setWordWrap(True)
        self.lt7.addWidget(label, 9, 0, 1, 5)
        self.lt7.addWidget(QtWidgets.QLabel(self.tr("code_ls_code_width")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("ls_code_width")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt7.addWidget(label, 11, 0)
        self.ls_code_width = QtWidgets.QComboBox()
        self.ls_code_width.addItems(['true','false'])
        self.ls_code_width.setCurrentText('false')
        self.lt7.addWidget(self.ls_code_width, 11, 1, 1, 4)
        self.widget8 = QtWidgets.QWidget()
        self.addItem(self.widget8, self.tr("Code alignment options (not left column spaces/tabs)"))
        self.lt8 = QtWidgets.QGridLayout(self.widget8)
        label = QtWidgets.QLabel(self.tr("Whether to keep non-indenting tabs. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 0, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_keep_tabs")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("align_keep_tabs")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 2, 0)
        self.align_keep_tabs = QtWidgets.QComboBox()
        self.align_keep_tabs.addItems(['true','false'])
        self.align_keep_tabs.setCurrentText('false')
        self.lt8.addWidget(self.align_keep_tabs, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to use tabs for aligning. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 3, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_with_tabs")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("align_with_tabs")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 5, 0)
        self.align_with_tabs = QtWidgets.QComboBox()
        self.align_with_tabs.addItems(['true','false'])
        self.align_with_tabs.setCurrentText('false')
        self.lt8.addWidget(self.align_with_tabs, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to bump out to the next tab when aligning. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 6, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_on_tabstop")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("align_on_tabstop")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 8, 0)
        self.align_on_tabstop = QtWidgets.QComboBox()
        self.align_on_tabstop.addItems(['true','false'])
        self.align_on_tabstop.setCurrentText('false')
        self.lt8.addWidget(self.align_on_tabstop, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to right-align numbers. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 9, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_number_right")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("align_number_right")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 11, 0)
        self.align_number_right = QtWidgets.QComboBox()
        self.align_number_right.addItems(['true','false'])
        self.align_number_right.setCurrentText('false')
        self.lt8.addWidget(self.align_number_right, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to keep whitespace not required for alignment. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 12, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_keep_extra_space")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("align_keep_extra_space")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 14, 0)
        self.align_keep_extra_space = QtWidgets.QComboBox()
        self.align_keep_extra_space.addItems(['true','false'])
        self.align_keep_extra_space.setCurrentText('false')
        self.lt8.addWidget(self.align_keep_extra_space, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align variable definitions in prototypes and functions. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 15, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_func_params")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("align_func_params")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 17, 0)
        self.align_func_params = QtWidgets.QComboBox()
        self.align_func_params.addItems(['true','false'])
        self.align_func_params.setCurrentText('false')
        self.lt8.addWidget(self.align_func_params, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning parameter definitions in function on parameter name. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 18, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_func_params_span")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("align_func_params_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 20, 0)
        self.align_func_params_span = QtWidgets.QSpinBox()
        self.align_func_params_span.setMinimum(0)
        self.align_func_params_span.setMaximum(100)
        self.align_func_params_span.setValue(0)
        self.lt8.addWidget(self.align_func_params_span, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning function parameter definitions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 21, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_func_params_thresh")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("align_func_params_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 23, 0)
        self.align_func_params_thresh = QtWidgets.QSpinBox()
        self.align_func_params_thresh.setMinimum(-100)
        self.align_func_params_thresh.setMaximum(100)
        self.align_func_params_thresh.setValue(0)
        self.lt8.addWidget(self.align_func_params_thresh, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The gap for aligning function parameter definitions. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 24, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_func_params_gap")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("align_func_params_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 26, 0)
        self.align_func_params_gap = QtWidgets.QSpinBox()
        self.align_func_params_gap.setMinimum(0)
        self.align_func_params_gap.setMaximum(100)
        self.align_func_params_gap.setValue(0)
        self.lt8.addWidget(self.align_func_params_gap, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning constructor value. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 27, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_constr_value_span")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("align_constr_value_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 29, 0)
        self.align_constr_value_span = QtWidgets.QSpinBox()
        self.align_constr_value_span.setMinimum(0)
        self.align_constr_value_span.setMaximum(100)
        self.align_constr_value_span.setValue(0)
        self.lt8.addWidget(self.align_constr_value_span, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning constructor value. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 30, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_constr_value_thresh")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("align_constr_value_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 32, 0)
        self.align_constr_value_thresh = QtWidgets.QSpinBox()
        self.align_constr_value_thresh.setMinimum(-100)
        self.align_constr_value_thresh.setMaximum(100)
        self.align_constr_value_thresh.setValue(0)
        self.lt8.addWidget(self.align_constr_value_thresh, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The gap for aligning constructor value. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 33, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_constr_value_gap")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("align_constr_value_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 35, 0)
        self.align_constr_value_gap = QtWidgets.QSpinBox()
        self.align_constr_value_gap.setMinimum(0)
        self.align_constr_value_gap.setMaximum(100)
        self.align_constr_value_gap.setValue(0)
        self.lt8.addWidget(self.align_constr_value_gap, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align parameters in single-line functions that have the same name. ")+self.tr("The function names must already be aligned with each other. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 36, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_same_func_call_params")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("align_same_func_call_params")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 38, 0)
        self.align_same_func_call_params = QtWidgets.QComboBox()
        self.align_same_func_call_params.addItems(['true','false'])
        self.align_same_func_call_params.setCurrentText('false')
        self.lt8.addWidget(self.align_same_func_call_params, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning function-call parameters for single line functions. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 39, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_same_func_call_params_span")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("align_same_func_call_params_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 41, 0)
        self.align_same_func_call_params_span = QtWidgets.QSpinBox()
        self.align_same_func_call_params_span.setMinimum(0)
        self.align_same_func_call_params_span.setMaximum(100)
        self.align_same_func_call_params_span.setValue(0)
        self.lt8.addWidget(self.align_same_func_call_params_span, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning function-call parameters for single line functions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 42, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_same_func_call_params_thresh")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("align_same_func_call_params_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 44, 0)
        self.align_same_func_call_params_thresh = QtWidgets.QSpinBox()
        self.align_same_func_call_params_thresh.setMinimum(-100)
        self.align_same_func_call_params_thresh.setMaximum(100)
        self.align_same_func_call_params_thresh.setValue(0)
        self.lt8.addWidget(self.align_same_func_call_params_thresh, 44, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning variable definitions. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 45, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_span")), 46, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 47, 0)
        self.align_var_def_span = QtWidgets.QSpinBox()
        self.align_var_def_span.setMinimum(0)
        self.align_var_def_span.setMaximum(100)
        self.align_var_def_span.setValue(0)
        self.lt8.addWidget(self.align_var_def_span, 47, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to consider (or treat) the '*' in the alignment of variable definitions. ")+self.tr("0: Part of the type     'void *   foo;' (default) 1: Part of the variable 'void     *foo;' 2: Dangling             'void    *foo;' Dangling: the '*' will not be taken into account when aligning. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 48, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_star_style")), 49, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_star_style")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 50, 0)
        self.align_var_def_star_style = QtWidgets.QSpinBox()
        self.align_var_def_star_style.setMinimum(0)
        self.align_var_def_star_style.setMaximum(100)
        self.align_var_def_star_style.setValue(0)
        self.lt8.addWidget(self.align_var_def_star_style, 50, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to consider (or treat) the '&' in the alignment of variable definitions. ")+self.tr("0: Part of the type     'long &   foo;' (default) 1: Part of the variable 'long     &foo;' 2: Dangling             'long    &foo;' Dangling: the '&' will not be taken into account when aligning. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 51, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_amp_style")), 52, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_amp_style")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 53, 0)
        self.align_var_def_amp_style = QtWidgets.QSpinBox()
        self.align_var_def_amp_style.setMinimum(0)
        self.align_var_def_amp_style.setMaximum(100)
        self.align_var_def_amp_style.setValue(0)
        self.lt8.addWidget(self.align_var_def_amp_style, 53, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning variable definitions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 54, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_thresh")), 55, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 56, 0)
        self.align_var_def_thresh = QtWidgets.QSpinBox()
        self.align_var_def_thresh.setMinimum(-100)
        self.align_var_def_thresh.setMaximum(100)
        self.align_var_def_thresh.setValue(0)
        self.lt8.addWidget(self.align_var_def_thresh, 56, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The gap for aligning variable definitions. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 57, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_gap")), 58, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 59, 0)
        self.align_var_def_gap = QtWidgets.QSpinBox()
        self.align_var_def_gap.setMinimum(0)
        self.align_var_def_gap.setMaximum(100)
        self.align_var_def_gap.setValue(0)
        self.lt8.addWidget(self.align_var_def_gap, 59, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align the colon in struct bit fields. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 60, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_colon")), 61, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 62, 0)
        self.align_var_def_colon = QtWidgets.QComboBox()
        self.align_var_def_colon.addItems(['true','false'])
        self.align_var_def_colon.setCurrentText('false')
        self.lt8.addWidget(self.align_var_def_colon, 62, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The gap for aligning the colon in struct bit fields. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 63, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_colon_gap")), 64, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_colon_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 65, 0)
        self.align_var_def_colon_gap = QtWidgets.QSpinBox()
        self.align_var_def_colon_gap.setMinimum(0)
        self.align_var_def_colon_gap.setMaximum(100)
        self.align_var_def_colon_gap.setValue(0)
        self.lt8.addWidget(self.align_var_def_colon_gap, 65, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align any attribute after the variable name. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 66, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_attribute")), 67, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_attribute")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 68, 0)
        self.align_var_def_attribute = QtWidgets.QComboBox()
        self.align_var_def_attribute.addItems(['true','false'])
        self.align_var_def_attribute.setCurrentText('false')
        self.lt8.addWidget(self.align_var_def_attribute, 68, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align inline struct/enum/union variable definitions. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 69, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_def_inline")), 70, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_def_inline")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 71, 0)
        self.align_var_def_inline = QtWidgets.QComboBox()
        self.align_var_def_inline.addItems(['true','false'])
        self.align_var_def_inline.setCurrentText('false')
        self.lt8.addWidget(self.align_var_def_inline, 71, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning on '=' in assignments. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 72, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_assign_span")), 73, 0, 1, 5)
        label = QtWidgets.QLabel("align_assign_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 74, 0)
        self.align_assign_span = QtWidgets.QSpinBox()
        self.align_assign_span.setMinimum(0)
        self.align_assign_span.setMaximum(100)
        self.align_assign_span.setValue(0)
        self.lt8.addWidget(self.align_assign_span, 74, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning on '=' in function prototype modifier. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 75, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_assign_func_proto_span")), 76, 0, 1, 5)
        label = QtWidgets.QLabel("align_assign_func_proto_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 77, 0)
        self.align_assign_func_proto_span = QtWidgets.QSpinBox()
        self.align_assign_func_proto_span.setMinimum(0)
        self.align_assign_func_proto_span.setMaximum(100)
        self.align_assign_func_proto_span.setValue(0)
        self.lt8.addWidget(self.align_assign_func_proto_span, 77, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning on '=' in assignments. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 78, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_assign_thresh")), 79, 0, 1, 5)
        label = QtWidgets.QLabel("align_assign_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 80, 0)
        self.align_assign_thresh = QtWidgets.QSpinBox()
        self.align_assign_thresh.setMinimum(-100)
        self.align_assign_thresh.setMaximum(100)
        self.align_assign_thresh.setValue(0)
        self.lt8.addWidget(self.align_assign_thresh, 80, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to apply align_assign_span to function declaration \"assignments\", ie 'virtual void foo() = 0' or '~foo() = {default|delete}'. ")+self.tr("0: Align with other assignments (default) 1: Align with each other, ignoring regular assignments 2: Don't align. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 81, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_assign_decl_func")), 82, 0, 1, 5)
        label = QtWidgets.QLabel("align_assign_decl_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 83, 0)
        self.align_assign_decl_func = QtWidgets.QSpinBox()
        self.align_assign_decl_func.setMinimum(0)
        self.align_assign_decl_func.setMaximum(100)
        self.align_assign_decl_func.setValue(0)
        self.lt8.addWidget(self.align_assign_decl_func, 83, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning on '=' in enums. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 84, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_enum_equ_span")), 85, 0, 1, 5)
        label = QtWidgets.QLabel("align_enum_equ_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 86, 0)
        self.align_enum_equ_span = QtWidgets.QSpinBox()
        self.align_enum_equ_span.setMinimum(0)
        self.align_enum_equ_span.setMaximum(100)
        self.align_enum_equ_span.setValue(0)
        self.lt8.addWidget(self.align_enum_equ_span, 86, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning on '=' in enums. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: no limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 87, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_enum_equ_thresh")), 88, 0, 1, 5)
        label = QtWidgets.QLabel("align_enum_equ_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 89, 0)
        self.align_enum_equ_thresh = QtWidgets.QSpinBox()
        self.align_enum_equ_thresh.setMinimum(-100)
        self.align_enum_equ_thresh.setMaximum(100)
        self.align_enum_equ_thresh.setValue(0)
        self.lt8.addWidget(self.align_enum_equ_thresh, 89, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning class member definitions. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 90, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_class_span")), 91, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_class_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 92, 0)
        self.align_var_class_span = QtWidgets.QSpinBox()
        self.align_var_class_span.setMinimum(0)
        self.align_var_class_span.setMaximum(100)
        self.align_var_class_span.setValue(0)
        self.lt8.addWidget(self.align_var_class_span, 92, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning class member definitions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 93, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_class_thresh")), 94, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_class_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 95, 0)
        self.align_var_class_thresh = QtWidgets.QSpinBox()
        self.align_var_class_thresh.setMinimum(-100)
        self.align_var_class_thresh.setMaximum(100)
        self.align_var_class_thresh.setValue(0)
        self.lt8.addWidget(self.align_var_class_thresh, 95, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The gap for aligning class member definitions. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 96, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_class_gap")), 97, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_class_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 98, 0)
        self.align_var_class_gap = QtWidgets.QSpinBox()
        self.align_var_class_gap.setMinimum(0)
        self.align_var_class_gap.setMaximum(100)
        self.align_var_class_gap.setValue(0)
        self.lt8.addWidget(self.align_var_class_gap, 98, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning struct/union member definitions. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 99, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_struct_span")), 100, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_struct_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 101, 0)
        self.align_var_struct_span = QtWidgets.QSpinBox()
        self.align_var_struct_span.setMinimum(0)
        self.align_var_struct_span.setMaximum(100)
        self.align_var_struct_span.setValue(0)
        self.lt8.addWidget(self.align_var_struct_span, 101, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning struct/union member definitions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 102, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_struct_thresh")), 103, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_struct_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 104, 0)
        self.align_var_struct_thresh = QtWidgets.QSpinBox()
        self.align_var_struct_thresh.setMinimum(-100)
        self.align_var_struct_thresh.setMaximum(100)
        self.align_var_struct_thresh.setValue(0)
        self.lt8.addWidget(self.align_var_struct_thresh, 104, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The gap for aligning struct/union member definitions. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 105, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_var_struct_gap")), 106, 0, 1, 5)
        label = QtWidgets.QLabel("align_var_struct_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 107, 0)
        self.align_var_struct_gap = QtWidgets.QSpinBox()
        self.align_var_struct_gap.setMinimum(0)
        self.align_var_struct_gap.setMaximum(100)
        self.align_var_struct_gap.setValue(0)
        self.lt8.addWidget(self.align_var_struct_gap, 107, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning struct initializer values. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 108, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_struct_init_span")), 109, 0, 1, 5)
        label = QtWidgets.QLabel("align_struct_init_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 110, 0)
        self.align_struct_init_span = QtWidgets.QSpinBox()
        self.align_struct_init_span.setMinimum(0)
        self.align_struct_init_span.setMaximum(100)
        self.align_struct_init_span.setValue(0)
        self.lt8.addWidget(self.align_struct_init_span, 110, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning single-line typedefs. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 111, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_typedef_span")), 112, 0, 1, 5)
        label = QtWidgets.QLabel("align_typedef_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 113, 0)
        self.align_typedef_span = QtWidgets.QSpinBox()
        self.align_typedef_span.setMinimum(0)
        self.align_typedef_span.setMaximum(100)
        self.align_typedef_span.setValue(0)
        self.lt8.addWidget(self.align_typedef_span, 113, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The minimum space between the type and the synonym of a typedef. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 114, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_typedef_gap")), 115, 0, 1, 5)
        label = QtWidgets.QLabel("align_typedef_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 116, 0)
        self.align_typedef_gap = QtWidgets.QSpinBox()
        self.align_typedef_gap.setMinimum(0)
        self.align_typedef_gap.setMaximum(100)
        self.align_typedef_gap.setValue(0)
        self.lt8.addWidget(self.align_typedef_gap, 116, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to align typedef'd functions with other typedefs. ")+self.tr("0: Don't mix them at all (default) 1: Align the open parenthesis with the types 2: Align the function type name with the other type names. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 117, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_typedef_func")), 118, 0, 1, 5)
        label = QtWidgets.QLabel("align_typedef_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 119, 0)
        self.align_typedef_func = QtWidgets.QSpinBox()
        self.align_typedef_func.setMinimum(0)
        self.align_typedef_func.setMaximum(100)
        self.align_typedef_func.setValue(0)
        self.lt8.addWidget(self.align_typedef_func, 119, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to consider (or treat) the '*' in the alignment of typedefs. ")+self.tr("0: Part of the typedef type, 'typedef int * pint;' (default) 1: Part of type name:        'typedef int   *pint;' 2: Dangling:                 'typedef int  *pint;' Dangling: the '*' will not be taken into account when aligning. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 120, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_typedef_star_style")), 121, 0, 1, 5)
        label = QtWidgets.QLabel("align_typedef_star_style")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 122, 0)
        self.align_typedef_star_style = QtWidgets.QSpinBox()
        self.align_typedef_star_style.setMinimum(0)
        self.align_typedef_star_style.setMaximum(100)
        self.align_typedef_star_style.setValue(0)
        self.lt8.addWidget(self.align_typedef_star_style, 122, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to consider (or treat) the '&' in the alignment of typedefs. ")+self.tr("0: Part of the typedef type, 'typedef int & intref;' (default) 1: Part of type name:        'typedef int   &intref;' 2: Dangling:                 'typedef int  &intref;' Dangling: the '&' will not be taken into account when aligning. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 123, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_typedef_amp_style")), 124, 0, 1, 5)
        label = QtWidgets.QLabel("align_typedef_amp_style")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 125, 0)
        self.align_typedef_amp_style = QtWidgets.QSpinBox()
        self.align_typedef_amp_style.setMinimum(0)
        self.align_typedef_amp_style.setMaximum(100)
        self.align_typedef_amp_style.setValue(0)
        self.lt8.addWidget(self.align_typedef_amp_style, 125, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning comments that end lines. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 126, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_right_cmt_span")), 127, 0, 1, 5)
        label = QtWidgets.QLabel("align_right_cmt_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 128, 0)
        self.align_right_cmt_span = QtWidgets.QSpinBox()
        self.align_right_cmt_span.setMinimum(0)
        self.align_right_cmt_span.setMaximum(100)
        self.align_right_cmt_span.setValue(0)
        self.lt8.addWidget(self.align_right_cmt_span, 128, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Minimum number of columns between preceding text and a trailing comment in order for the comment to qualify for being aligned. ")+self.tr("Must be non-zero to have an effect. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 129, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_right_cmt_gap")), 130, 0, 1, 5)
        label = QtWidgets.QLabel("align_right_cmt_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 131, 0)
        self.align_right_cmt_gap = QtWidgets.QSpinBox()
        self.align_right_cmt_gap.setMinimum(0)
        self.align_right_cmt_gap.setMaximum(100)
        self.align_right_cmt_gap.setValue(0)
        self.lt8.addWidget(self.align_right_cmt_gap, 131, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If aligning comments, whether to mix with comments after '}' and #endif with less than three spaces before the comment. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 132, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_right_cmt_mix")), 133, 0, 1, 5)
        label = QtWidgets.QLabel("align_right_cmt_mix")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 134, 0)
        self.align_right_cmt_mix = QtWidgets.QComboBox()
        self.align_right_cmt_mix.addItems(['true','false'])
        self.align_right_cmt_mix.setCurrentText('false')
        self.lt8.addWidget(self.align_right_cmt_mix, 134, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to only align trailing comments that are at the same brace level. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 135, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_right_cmt_same_level")), 136, 0, 1, 5)
        label = QtWidgets.QLabel("align_right_cmt_same_level")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 137, 0)
        self.align_right_cmt_same_level = QtWidgets.QComboBox()
        self.align_right_cmt_same_level.addItems(['true','false'])
        self.align_right_cmt_same_level.setCurrentText('false')
        self.lt8.addWidget(self.align_right_cmt_same_level, 137, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Minimum column at which to align trailing comments. ")+self.tr("Comments which are aligned beyond this column, but which can be aligned in a lesser column, may be \"pulled in\". ")+self.tr("0: Ignore (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 138, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_right_cmt_at_col")), 139, 0, 1, 5)
        label = QtWidgets.QLabel("align_right_cmt_at_col")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 140, 0)
        self.align_right_cmt_at_col = QtWidgets.QSpinBox()
        self.align_right_cmt_at_col.setMinimum(0)
        self.align_right_cmt_at_col.setMaximum(100)
        self.align_right_cmt_at_col.setValue(0)
        self.lt8.addWidget(self.align_right_cmt_at_col, 140, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning function prototypes. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 141, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_func_proto_span")), 142, 0, 1, 5)
        label = QtWidgets.QLabel("align_func_proto_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 143, 0)
        self.align_func_proto_span = QtWidgets.QSpinBox()
        self.align_func_proto_span.setMinimum(0)
        self.align_func_proto_span.setMaximum(100)
        self.align_func_proto_span.setValue(0)
        self.lt8.addWidget(self.align_func_proto_span, 143, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The threshold for aligning function prototypes. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 144, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_func_proto_thresh")), 145, 0, 1, 5)
        label = QtWidgets.QLabel("align_func_proto_thresh")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 146, 0)
        self.align_func_proto_thresh = QtWidgets.QSpinBox()
        self.align_func_proto_thresh.setMinimum(-100)
        self.align_func_proto_thresh.setMaximum(100)
        self.align_func_proto_thresh.setValue(0)
        self.lt8.addWidget(self.align_func_proto_thresh, 146, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Minimum gap between the return type and the function name. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 147, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_func_proto_gap")), 148, 0, 1, 5)
        label = QtWidgets.QLabel("align_func_proto_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 149, 0)
        self.align_func_proto_gap = QtWidgets.QSpinBox()
        self.align_func_proto_gap.setMinimum(0)
        self.align_func_proto_gap.setMaximum(100)
        self.align_func_proto_gap.setValue(0)
        self.lt8.addWidget(self.align_func_proto_gap, 149, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align function prototypes on the 'operator' keyword instead of what follows. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 150, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_on_operator")), 151, 0, 1, 5)
        label = QtWidgets.QLabel("align_on_operator")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 152, 0)
        self.align_on_operator = QtWidgets.QComboBox()
        self.align_on_operator.addItems(['true','false'])
        self.align_on_operator.setCurrentText('false')
        self.lt8.addWidget(self.align_on_operator, 152, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to mix aligning prototype and variable declarations. ")+self.tr("If true, align_var_def_XXX options are used instead of align_func_proto_XXX options. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 153, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_mix_var_proto")), 154, 0, 1, 5)
        label = QtWidgets.QLabel("align_mix_var_proto")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 155, 0)
        self.align_mix_var_proto = QtWidgets.QComboBox()
        self.align_mix_var_proto.addItems(['true','false'])
        self.align_mix_var_proto.setCurrentText('false')
        self.lt8.addWidget(self.align_mix_var_proto, 155, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align single-line functions with function prototypes. ")+self.tr("Uses align_func_proto_span. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 156, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_single_line_func")), 157, 0, 1, 5)
        label = QtWidgets.QLabel("align_single_line_func")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 158, 0)
        self.align_single_line_func = QtWidgets.QComboBox()
        self.align_single_line_func.addItems(['true','false'])
        self.align_single_line_func.setCurrentText('false')
        self.lt8.addWidget(self.align_single_line_func, 158, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align the open brace of single-line functions. ")+self.tr("Requires align_single_line_func=true. ")+self.tr("Uses align_func_proto_span. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 159, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_single_line_brace")), 160, 0, 1, 5)
        label = QtWidgets.QLabel("align_single_line_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 161, 0)
        self.align_single_line_brace = QtWidgets.QComboBox()
        self.align_single_line_brace.addItems(['true','false'])
        self.align_single_line_brace.setCurrentText('false')
        self.lt8.addWidget(self.align_single_line_brace, 161, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Gap for align_single_line_brace. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 162, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_single_line_brace_gap")), 163, 0, 1, 5)
        label = QtWidgets.QLabel("align_single_line_brace_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 164, 0)
        self.align_single_line_brace_gap = QtWidgets.QSpinBox()
        self.align_single_line_brace_gap.setMinimum(0)
        self.align_single_line_brace_gap.setMaximum(100)
        self.align_single_line_brace_gap.setValue(0)
        self.lt8.addWidget(self.align_single_line_brace_gap, 164, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) The span for aligning Objective-C message specifications. ")+self.tr("0: Don't align (default). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 165, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_oc_msg_spec_span")), 166, 0, 1, 5)
        label = QtWidgets.QLabel("align_oc_msg_spec_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 167, 0)
        self.align_oc_msg_spec_span = QtWidgets.QSpinBox()
        self.align_oc_msg_spec_span.setMinimum(0)
        self.align_oc_msg_spec_span.setMaximum(100)
        self.align_oc_msg_spec_span.setValue(0)
        self.lt8.addWidget(self.align_oc_msg_spec_span, 167, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align macros wrapped with a backslash and a newline. ")+self.tr("This will not work right if the macro contains a multi-line comment. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 168, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_nl_cont")), 169, 0, 1, 5)
        label = QtWidgets.QLabel("align_nl_cont")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 170, 0)
        self.align_nl_cont = QtWidgets.QComboBox()
        self.align_nl_cont.addItems(['true','false'])
        self.align_nl_cont.setCurrentText('false')
        self.lt8.addWidget(self.align_nl_cont, 170, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align macro functions and variables together. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 171, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_pp_define_together")), 172, 0, 1, 5)
        label = QtWidgets.QLabel("align_pp_define_together")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 173, 0)
        self.align_pp_define_together = QtWidgets.QComboBox()
        self.align_pp_define_together.addItems(['true','false'])
        self.align_pp_define_together.setCurrentText('false')
        self.lt8.addWidget(self.align_pp_define_together, 173, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The span for aligning on '#define' bodies. ")+self.tr("=0: Don't align (default) >0: Number of lines (including comments) between blocks. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 174, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_pp_define_span")), 175, 0, 1, 5)
        label = QtWidgets.QLabel("align_pp_define_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 176, 0)
        self.align_pp_define_span = QtWidgets.QSpinBox()
        self.align_pp_define_span.setMinimum(0)
        self.align_pp_define_span.setMaximum(100)
        self.align_pp_define_span.setValue(0)
        self.lt8.addWidget(self.align_pp_define_span, 176, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The minimum space between label and value of a preprocessor define. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 177, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_pp_define_gap")), 178, 0, 1, 5)
        label = QtWidgets.QLabel("align_pp_define_gap")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 179, 0)
        self.align_pp_define_gap = QtWidgets.QSpinBox()
        self.align_pp_define_gap.setMinimum(0)
        self.align_pp_define_gap.setMaximum(100)
        self.align_pp_define_gap.setValue(0)
        self.lt8.addWidget(self.align_pp_define_gap, 179, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align lines that start with '<<' with previous '<<'. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 180, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_left_shift")), 181, 0, 1, 5)
        label = QtWidgets.QLabel("align_left_shift")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 182, 0)
        self.align_left_shift = QtWidgets.QComboBox()
        self.align_left_shift.addItems(['true','false'])
        self.align_left_shift.setCurrentText('true')
        self.lt8.addWidget(self.align_left_shift, 182, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to align text after 'asm volatile ()' colons. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 183, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_asm_colon")), 184, 0, 1, 5)
        label = QtWidgets.QLabel("align_asm_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 185, 0)
        self.align_asm_colon = QtWidgets.QComboBox()
        self.align_asm_colon.addItems(['true','false'])
        self.align_asm_colon.setCurrentText('false')
        self.lt8.addWidget(self.align_asm_colon, 185, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Span for aligning parameters in an Objective-C message call on the ':'. ")+self.tr("0: Don't align. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 186, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_oc_msg_colon_span")), 187, 0, 1, 5)
        label = QtWidgets.QLabel("align_oc_msg_colon_span")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 188, 0)
        self.align_oc_msg_colon_span = QtWidgets.QSpinBox()
        self.align_oc_msg_colon_span.setMinimum(0)
        self.align_oc_msg_colon_span.setMaximum(100)
        self.align_oc_msg_colon_span.setValue(0)
        self.lt8.addWidget(self.align_oc_msg_colon_span, 188, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to always align with the first parameter, even if it is too short. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 189, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_oc_msg_colon_first")), 190, 0, 1, 5)
        label = QtWidgets.QLabel("align_oc_msg_colon_first")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 191, 0)
        self.align_oc_msg_colon_first = QtWidgets.QComboBox()
        self.align_oc_msg_colon_first.addItems(['true','false'])
        self.align_oc_msg_colon_first.setCurrentText('false')
        self.lt8.addWidget(self.align_oc_msg_colon_first, 191, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to align parameters in an Objective-C '+' or '-' declaration on the ':'. "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 192, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_oc_decl_colon")), 193, 0, 1, 5)
        label = QtWidgets.QLabel("align_oc_decl_colon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 194, 0)
        self.align_oc_decl_colon = QtWidgets.QComboBox()
        self.align_oc_decl_colon.addItems(['true','false'])
        self.align_oc_decl_colon.setCurrentText('false')
        self.lt8.addWidget(self.align_oc_decl_colon, 194, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to not align parameters in an Objectve-C message call if first colon is not on next line of the message call (the same way Xcode does aligment). "))
        label.setWordWrap(True)
        self.lt8.addWidget(label, 195, 0, 1, 5)
        self.lt8.addWidget(QtWidgets.QLabel(self.tr("code_align_oc_msg_colon_xcode_like")), 196, 0, 1, 5)
        label = QtWidgets.QLabel("align_oc_msg_colon_xcode_like")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(label, 197, 0)
        self.align_oc_msg_colon_xcode_like = QtWidgets.QComboBox()
        self.align_oc_msg_colon_xcode_like.addItems(['true','false'])
        self.align_oc_msg_colon_xcode_like.setCurrentText('false')
        self.lt8.addWidget(self.align_oc_msg_colon_xcode_like, 197, 1, 1, 4)
        self.widget9 = QtWidgets.QWidget()
        self.addItem(self.widget9, self.tr("Comment modification options"))
        self.lt9 = QtWidgets.QGridLayout(self.widget9)
        label = QtWidgets.QLabel(self.tr("Try to wrap comments at N columns. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 0, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_width")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_width")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 2, 0)
        self.cmt_width = QtWidgets.QSpinBox()
        self.cmt_width.setMinimum(0)
        self.cmt_width.setMaximum(100)
        self.cmt_width.setValue(0)
        self.lt9.addWidget(self.cmt_width, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("How to reflow comments. ")+self.tr("0: No reflowing (apart from the line wrapping due to cmt_width) (default) 1: No touching at all 2: Full reflow. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 3, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_reflow_mode")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_reflow_mode")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 5, 0)
        self.cmt_reflow_mode = QtWidgets.QSpinBox()
        self.cmt_reflow_mode.setMinimum(0)
        self.cmt_reflow_mode.setMaximum(100)
        self.cmt_reflow_mode.setValue(0)
        self.lt9.addWidget(self.cmt_reflow_mode, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to convert all tabs to spaces in comments. ")+self.tr("If false, tabs in comments are left alone, unless used for indenting. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 6, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_convert_tab_to_spaces")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_convert_tab_to_spaces")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 8, 0)
        self.cmt_convert_tab_to_spaces = QtWidgets.QComboBox()
        self.cmt_convert_tab_to_spaces.addItems(['true','false'])
        self.cmt_convert_tab_to_spaces.setCurrentText('false')
        self.lt9.addWidget(self.cmt_convert_tab_to_spaces, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to apply changes to multi-line comments, including cmt_width, keyword substitution and leading chars. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 9, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_indent_multi")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_indent_multi")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 11, 0)
        self.cmt_indent_multi = QtWidgets.QComboBox()
        self.cmt_indent_multi.addItems(['true','false'])
        self.cmt_indent_multi.setCurrentText('true')
        self.lt9.addWidget(self.cmt_indent_multi, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to group c-comments that look like they are in a block. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 12, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_c_group")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_c_group")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 14, 0)
        self.cmt_c_group = QtWidgets.QComboBox()
        self.cmt_c_group.addItems(['true','false'])
        self.cmt_c_group.setCurrentText('false')
        self.lt9.addWidget(self.cmt_c_group, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to put an empty '/*' on the first line of the combined c-comment. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 15, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_c_nl_start")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_c_nl_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 17, 0)
        self.cmt_c_nl_start = QtWidgets.QComboBox()
        self.cmt_c_nl_start.addItems(['true','false'])
        self.cmt_c_nl_start.setCurrentText('false')
        self.lt9.addWidget(self.cmt_c_nl_start, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before the closing '*/' of the combined c-comment. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 18, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_c_nl_end")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_c_nl_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 20, 0)
        self.cmt_c_nl_end = QtWidgets.QComboBox()
        self.cmt_c_nl_end.addItems(['true','false'])
        self.cmt_c_nl_end.setCurrentText('false')
        self.lt9.addWidget(self.cmt_c_nl_end, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to change cpp-comments into c-comments. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 21, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_cpp_to_c")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_cpp_to_c")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 23, 0)
        self.cmt_cpp_to_c = QtWidgets.QComboBox()
        self.cmt_cpp_to_c.addItems(['true','false'])
        self.cmt_cpp_to_c.setCurrentText('false')
        self.lt9.addWidget(self.cmt_cpp_to_c, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to group cpp-comments that look like they are in a block. ")+self.tr("Only meaningful if cmt_cpp_to_c=true. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 24, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_cpp_group")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_cpp_group")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 26, 0)
        self.cmt_cpp_group = QtWidgets.QComboBox()
        self.cmt_cpp_group.addItems(['true','false'])
        self.cmt_cpp_group.setCurrentText('false')
        self.lt9.addWidget(self.cmt_cpp_group, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to put an empty '/*' on the first line of the combined cpp-comment when converting to a c-comment. ")+self.tr("Requires cmt_cpp_to_c=true and cmt_cpp_group=true. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 27, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_cpp_nl_start")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_cpp_nl_start")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 29, 0)
        self.cmt_cpp_nl_start = QtWidgets.QComboBox()
        self.cmt_cpp_nl_start.addItems(['true','false'])
        self.cmt_cpp_nl_start.setCurrentText('false')
        self.lt9.addWidget(self.cmt_cpp_nl_start, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add a newline before the closing '*/' of the combined cpp-comment when converting to a c-comment. ")+self.tr("Requires cmt_cpp_to_c=true and cmt_cpp_group=true. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 30, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_cpp_nl_end")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_cpp_nl_end")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 32, 0)
        self.cmt_cpp_nl_end = QtWidgets.QComboBox()
        self.cmt_cpp_nl_end.addItems(['true','false'])
        self.cmt_cpp_nl_end.setCurrentText('false')
        self.lt9.addWidget(self.cmt_cpp_nl_end, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to put a star on subsequent comment lines. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 33, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_star_cont")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_star_cont")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 35, 0)
        self.cmt_star_cont = QtWidgets.QComboBox()
        self.cmt_star_cont.addItems(['true','false'])
        self.cmt_star_cont.setCurrentText('false')
        self.lt9.addWidget(self.cmt_star_cont, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of spaces to insert at the start of subsequent comment lines. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 36, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_sp_before_star_cont")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_sp_before_star_cont")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 38, 0)
        self.cmt_sp_before_star_cont = QtWidgets.QSpinBox()
        self.cmt_sp_before_star_cont.setMinimum(0)
        self.cmt_sp_before_star_cont.setMaximum(100)
        self.cmt_sp_before_star_cont.setValue(0)
        self.lt9.addWidget(self.cmt_sp_before_star_cont, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The number of spaces to insert after the star on subsequent comment lines. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 39, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_sp_after_star_cont")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_sp_after_star_cont")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 41, 0)
        self.cmt_sp_after_star_cont = QtWidgets.QSpinBox()
        self.cmt_sp_after_star_cont.setMinimum(0)
        self.cmt_sp_after_star_cont.setMaximum(100)
        self.cmt_sp_after_star_cont.setValue(0)
        self.lt9.addWidget(self.cmt_sp_after_star_cont, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 42, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_multi_check_last")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_multi_check_last")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 44, 0)
        self.cmt_multi_check_last = QtWidgets.QComboBox()
        self.cmt_multi_check_last.addItems(['true','false'])
        self.cmt_multi_check_last.setCurrentText('true')
        self.lt9.addWidget(self.cmt_multi_check_last, 44, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length AND if the length is bigger as the first_len minimum. ")+self.tr("Default: 4. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 45, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_multi_first_len_minimum")), 46, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_multi_first_len_minimum")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 47, 0)
        self.cmt_multi_first_len_minimum = QtWidgets.QSpinBox()
        self.cmt_multi_first_len_minimum.setMinimum(0)
        self.cmt_multi_first_len_minimum.setMaximum(100)
        self.cmt_multi_first_len_minimum.setValue(4)
        self.lt9.addWidget(self.cmt_multi_first_len_minimum, 47, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert at the beginning of a file if the file doesn't start with a C/C++ comment. ")+self.tr("If the inserted text contains '$(filename)', that will be replaced with the current file's name. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 48, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_insert_file_header")), 49, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_insert_file_header")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 50, 0)
        self.cmt_insert_file_header = QtWidgets.QLineEdit()
        self.cmt_insert_file_header.setText("")
        self.lt9.addWidget(self.cmt_insert_file_header, 50, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert at the end of a file if the file doesn't end with a C/C++ comment. ")+self.tr("If the inserted text contains '$(filename)', that will be replaced with the current file's name. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 51, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_insert_file_footer")), 52, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_insert_file_footer")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 53, 0)
        self.cmt_insert_file_footer = QtWidgets.QLineEdit()
        self.cmt_insert_file_footer.setText("")
        self.lt9.addWidget(self.cmt_insert_file_footer, 53, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert before a function definition if the function isn't preceded by a C/C++ comment. ")+self.tr("If the inserted text contains '$(function)', '$(javaparam)' or '$(fclass)', these will be replaced with, respectively, the name of the function, the javadoc '@param' and '@return' stuff, or the name of the class to which the member function belongs. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 54, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_insert_func_header")), 55, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_insert_func_header")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 56, 0)
        self.cmt_insert_func_header = QtWidgets.QLineEdit()
        self.cmt_insert_func_header.setText("")
        self.lt9.addWidget(self.cmt_insert_func_header, 56, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert before a class if the class isn't preceded by a C/C++ comment. ")+self.tr("If the inserted text contains '$(class)', that will be replaced with the class name. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 57, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_insert_class_header")), 58, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_insert_class_header")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 59, 0)
        self.cmt_insert_class_header = QtWidgets.QLineEdit()
        self.cmt_insert_class_header.setText("")
        self.lt9.addWidget(self.cmt_insert_class_header, 59, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert before an Objective-C message specification, if the method isn't preceded by a C/C++ comment. ")+self.tr("If the inserted text contains '$(message)' or '$(javaparam)', these will be replaced with, respectively, the name of the function, or the javadoc '@param' and '@return' stuff. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 60, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_insert_oc_msg_header")), 61, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_insert_oc_msg_header")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 62, 0)
        self.cmt_insert_oc_msg_header = QtWidgets.QLineEdit()
        self.cmt_insert_oc_msg_header.setText("")
        self.lt9.addWidget(self.cmt_insert_oc_msg_header, 62, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether a comment should be inserted if a preprocessor is encountered when stepping backwards from a function name. ")+self.tr("Applies to cmt_insert_oc_msg_header, cmt_insert_func_header and cmt_insert_class_header. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 63, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_insert_before_preproc")), 64, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_insert_before_preproc")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 65, 0)
        self.cmt_insert_before_preproc = QtWidgets.QComboBox()
        self.cmt_insert_before_preproc.addItems(['true','false'])
        self.cmt_insert_before_preproc.setCurrentText('false')
        self.lt9.addWidget(self.cmt_insert_before_preproc, 65, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether a comment should be inserted if a function is declared inline to a class definition. ")+self.tr("Applies to cmt_insert_func_header. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 66, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_insert_before_inlines")), 67, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_insert_before_inlines")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 68, 0)
        self.cmt_insert_before_inlines = QtWidgets.QComboBox()
        self.cmt_insert_before_inlines.addItems(['true','false'])
        self.cmt_insert_before_inlines.setCurrentText('true')
        self.lt9.addWidget(self.cmt_insert_before_inlines, 68, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether a comment should be inserted if the function is a class constructor or destructor. ")+self.tr("Applies to cmt_insert_func_header. "))
        label.setWordWrap(True)
        self.lt9.addWidget(label, 69, 0, 1, 5)
        self.lt9.addWidget(QtWidgets.QLabel(self.tr("code_cmt_insert_before_ctor_dtor")), 70, 0, 1, 5)
        label = QtWidgets.QLabel("cmt_insert_before_ctor_dtor")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(label, 71, 0)
        self.cmt_insert_before_ctor_dtor = QtWidgets.QComboBox()
        self.cmt_insert_before_ctor_dtor.addItems(['true','false'])
        self.cmt_insert_before_ctor_dtor.setCurrentText('false')
        self.lt9.addWidget(self.cmt_insert_before_ctor_dtor, 71, 1, 1, 4)
        self.widget10 = QtWidgets.QWidget()
        self.addItem(self.widget10, self.tr("Code modifying options (non-whitespace)"))
        self.lt10 = QtWidgets.QGridLayout(self.widget10)
        label = QtWidgets.QLabel(self.tr("Add or remove braces on a single-line 'do' statement. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 0, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_do")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_do")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 2, 0)
        self.mod_full_brace_do = QtWidgets.QComboBox()
        self.mod_full_brace_do.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_do.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_do, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove braces on a single-line 'for' statement. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 3, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_for")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_for")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 5, 0)
        self.mod_full_brace_for = QtWidgets.QComboBox()
        self.mod_full_brace_for.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_for.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_for, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Pawn) Add or remove braces on a single-line function definition. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 6, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_function")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_function")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 8, 0)
        self.mod_full_brace_function = QtWidgets.QComboBox()
        self.mod_full_brace_function.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_function.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_function, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove braces on a single-line 'if' statement. ")+self.tr("Braces will not be removed if the braced statement contains an 'else'. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 9, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_if")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_if")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 11, 0)
        self.mod_full_brace_if = QtWidgets.QComboBox()
        self.mod_full_brace_if.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_if.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_if, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to enforce that all blocks of an 'if'/'else if'/'else' chain either have, or do not have, braces. ")+self.tr("If true, braces will be added if any block needs braces, and will only be removed if they can be removed from all blocks. ")+self.tr("Overrides mod_full_brace_if. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 12, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_if_chain")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_if_chain")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 14, 0)
        self.mod_full_brace_if_chain = QtWidgets.QComboBox()
        self.mod_full_brace_if_chain.addItems(['true','false'])
        self.mod_full_brace_if_chain.setCurrentText('false')
        self.lt10.addWidget(self.mod_full_brace_if_chain, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to add braces to all blocks of an 'if'/'else if'/'else' chain. ")+self.tr("If true, mod_full_brace_if_chain will only remove braces from an 'if' that does not have an 'else if' or 'else'. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 15, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_if_chain_only")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_if_chain_only")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 17, 0)
        self.mod_full_brace_if_chain_only = QtWidgets.QComboBox()
        self.mod_full_brace_if_chain_only.addItems(['true','false'])
        self.mod_full_brace_if_chain_only.setCurrentText('false')
        self.lt10.addWidget(self.mod_full_brace_if_chain_only, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove braces on single-line 'while' statement. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 18, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_while")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_while")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 20, 0)
        self.mod_full_brace_while = QtWidgets.QComboBox()
        self.mod_full_brace_while.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_while.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_while, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove braces on single-line 'using ()' statement. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 21, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_using")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_using")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 23, 0)
        self.mod_full_brace_using = QtWidgets.QComboBox()
        self.mod_full_brace_using.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_using.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_using, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Don't remove braces around statements that span N newlines. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 24, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_nl")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_nl")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 26, 0)
        self.mod_full_brace_nl = QtWidgets.QSpinBox()
        self.mod_full_brace_nl.setMinimum(0)
        self.mod_full_brace_nl.setMaximum(100)
        self.mod_full_brace_nl.setValue(0)
        self.lt10.addWidget(self.mod_full_brace_nl, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to prevent removal of braces from 'if'/'for'/'while'/etc. ")+self.tr("blocks which span multiple lines. ")+self.tr("Affects:   mod_full_brace_for   mod_full_brace_if   mod_full_brace_if_chain   mod_full_brace_if_chain_only   mod_full_brace_while   mod_full_brace_using. ")+self.tr("Does not affect:   mod_full_brace_do   mod_full_brace_function. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 27, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_brace_nl_block_rem_mlcond")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_brace_nl_block_rem_mlcond")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 29, 0)
        self.mod_full_brace_nl_block_rem_mlcond = QtWidgets.QComboBox()
        self.mod_full_brace_nl_block_rem_mlcond.addItems(['true','false'])
        self.mod_full_brace_nl_block_rem_mlcond.setCurrentText('false')
        self.lt10.addWidget(self.mod_full_brace_nl_block_rem_mlcond, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove unnecessary parenthesis on 'return' statement. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 30, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_paren_on_return")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("mod_paren_on_return")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 32, 0)
        self.mod_paren_on_return = QtWidgets.QComboBox()
        self.mod_paren_on_return.addItems(['ignore','add','remove','force'])
        self.mod_paren_on_return.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_paren_on_return, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(Pawn) Whether to change optional semicolons to real semicolons. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 33, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_pawn_semicolon")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("mod_pawn_semicolon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 35, 0)
        self.mod_pawn_semicolon = QtWidgets.QComboBox()
        self.mod_pawn_semicolon.addItems(['true','false'])
        self.mod_pawn_semicolon.setCurrentText('false')
        self.lt10.addWidget(self.mod_pawn_semicolon, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to fully parenthesize Boolean expressions in 'while' and 'if' statement, as in 'if (a && b > c)' => 'if (a && (b > c))'. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 36, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_full_paren_if_bool")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("mod_full_paren_if_bool")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 38, 0)
        self.mod_full_paren_if_bool = QtWidgets.QComboBox()
        self.mod_full_paren_if_bool.addItems(['true','false'])
        self.mod_full_paren_if_bool.setCurrentText('false')
        self.lt10.addWidget(self.mod_full_paren_if_bool, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to remove superfluous semicolons. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 39, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_remove_extra_semicolon")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("mod_remove_extra_semicolon")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 41, 0)
        self.mod_remove_extra_semicolon = QtWidgets.QComboBox()
        self.mod_remove_extra_semicolon.addItems(['true','false'])
        self.mod_remove_extra_semicolon.setCurrentText('false')
        self.lt10.addWidget(self.mod_remove_extra_semicolon, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If a function body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 42, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_add_long_function_closebrace_comment")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("mod_add_long_function_closebrace_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 44, 0)
        self.mod_add_long_function_closebrace_comment = QtWidgets.QSpinBox()
        self.mod_add_long_function_closebrace_comment.setMinimum(0)
        self.mod_add_long_function_closebrace_comment.setMaximum(100)
        self.mod_add_long_function_closebrace_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_function_closebrace_comment, 44, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If a namespace body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 45, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_add_long_namespace_closebrace_comment")), 46, 0, 1, 5)
        label = QtWidgets.QLabel("mod_add_long_namespace_closebrace_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 47, 0)
        self.mod_add_long_namespace_closebrace_comment = QtWidgets.QSpinBox()
        self.mod_add_long_namespace_closebrace_comment.setMinimum(0)
        self.mod_add_long_namespace_closebrace_comment.setMaximum(100)
        self.mod_add_long_namespace_closebrace_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_namespace_closebrace_comment, 47, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If a class body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 48, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_add_long_class_closebrace_comment")), 49, 0, 1, 5)
        label = QtWidgets.QLabel("mod_add_long_class_closebrace_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 50, 0)
        self.mod_add_long_class_closebrace_comment = QtWidgets.QSpinBox()
        self.mod_add_long_class_closebrace_comment.setMinimum(0)
        self.mod_add_long_class_closebrace_comment.setMaximum(100)
        self.mod_add_long_class_closebrace_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_class_closebrace_comment, 50, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If a switch body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 51, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_add_long_switch_closebrace_comment")), 52, 0, 1, 5)
        label = QtWidgets.QLabel("mod_add_long_switch_closebrace_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 53, 0)
        self.mod_add_long_switch_closebrace_comment = QtWidgets.QSpinBox()
        self.mod_add_long_switch_closebrace_comment.setMinimum(0)
        self.mod_add_long_switch_closebrace_comment.setMaximum(100)
        self.mod_add_long_switch_closebrace_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_switch_closebrace_comment, 53, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If an #ifdef body exceeds the specified number of newlines and doesn't have a comment after the #endif, a comment will be added. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 54, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_add_long_ifdef_endif_comment")), 55, 0, 1, 5)
        label = QtWidgets.QLabel("mod_add_long_ifdef_endif_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 56, 0)
        self.mod_add_long_ifdef_endif_comment = QtWidgets.QSpinBox()
        self.mod_add_long_ifdef_endif_comment.setMinimum(0)
        self.mod_add_long_ifdef_endif_comment.setMaximum(100)
        self.mod_add_long_ifdef_endif_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_ifdef_endif_comment, 56, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If an #ifdef or #else body exceeds the specified number of newlines and doesn't have a comment after the #else, a comment will be added. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 57, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_add_long_ifdef_else_comment")), 58, 0, 1, 5)
        label = QtWidgets.QLabel("mod_add_long_ifdef_else_comment")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 59, 0)
        self.mod_add_long_ifdef_else_comment = QtWidgets.QSpinBox()
        self.mod_add_long_ifdef_else_comment.setMinimum(0)
        self.mod_add_long_ifdef_else_comment.setMaximum(100)
        self.mod_add_long_ifdef_else_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_ifdef_else_comment, 59, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to take care of the case by the mod_sort_xx options. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 60, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_case_sensitive")), 61, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_case_sensitive")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 62, 0)
        self.mod_sort_case_sensitive = QtWidgets.QComboBox()
        self.mod_sort_case_sensitive.addItems(['true','false'])
        self.mod_sort_case_sensitive.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_case_sensitive, 62, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to sort consecutive single-line 'import' statements. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 63, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_import")), 64, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_import")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 65, 0)
        self.mod_sort_import = QtWidgets.QComboBox()
        self.mod_sort_import.addItems(['true','false'])
        self.mod_sort_import.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_import, 65, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(C#) Whether to sort consecutive single-line 'using' statements. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 66, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_using")), 67, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_using")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 68, 0)
        self.mod_sort_using = QtWidgets.QComboBox()
        self.mod_sort_using.addItems(['true','false'])
        self.mod_sort_using.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_using, 68, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to sort consecutive single-line '#include' statements (C/C++) and '#import' statements (Objective-C). ")+self.tr("Be aware that this has the potential to break your code if your includes/imports have ordering dependencies. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 69, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_include")), 70, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_include")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 71, 0)
        self.mod_sort_include = QtWidgets.QComboBox()
        self.mod_sort_include.addItems(['true','false'])
        self.mod_sort_include.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_include, 71, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to prioritize '#include' and '#import' statements that contain filename without extension when sorting is enabled. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 72, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_prioritize_filename")), 73, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_incl_import_prioritize_filename")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 74, 0)
        self.mod_sort_incl_import_prioritize_filename = QtWidgets.QComboBox()
        self.mod_sort_incl_import_prioritize_filename.addItems(['true','false'])
        self.mod_sort_incl_import_prioritize_filename.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_prioritize_filename, 74, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to prioritize '#include' and '#import' statements that does not contain extensions when sorting is enabled. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 75, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_prioritize_extensionless")), 76, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_incl_import_prioritize_extensionless")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 77, 0)
        self.mod_sort_incl_import_prioritize_extensionless = QtWidgets.QComboBox()
        self.mod_sort_incl_import_prioritize_extensionless.addItems(['true','false'])
        self.mod_sort_incl_import_prioritize_extensionless.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_prioritize_extensionless, 77, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to prioritize '#include' and '#import' statements that contain angle over quotes when sorting is enabled. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 78, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_prioritize_angle_over_quotes")), 79, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_incl_import_prioritize_angle_over_quotes")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 80, 0)
        self.mod_sort_incl_import_prioritize_angle_over_quotes = QtWidgets.QComboBox()
        self.mod_sort_incl_import_prioritize_angle_over_quotes.addItems(['true','false'])
        self.mod_sort_incl_import_prioritize_angle_over_quotes.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_prioritize_angle_over_quotes, 80, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to ignore file extension in '#include' and '#import' statements for sorting comparison. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 81, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_ignore_extension")), 82, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_incl_import_ignore_extension")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 83, 0)
        self.mod_sort_incl_import_ignore_extension = QtWidgets.QComboBox()
        self.mod_sort_incl_import_ignore_extension.addItems(['true','false'])
        self.mod_sort_incl_import_ignore_extension.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_ignore_extension, 83, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to group '#include' and '#import' statements when sorting is enabled. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 84, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_grouping_enabled")), 85, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_incl_import_grouping_enabled")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 86, 0)
        self.mod_sort_incl_import_grouping_enabled = QtWidgets.QComboBox()
        self.mod_sort_incl_import_grouping_enabled.addItems(['true','false'])
        self.mod_sort_incl_import_grouping_enabled.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_grouping_enabled, 86, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to move a 'break' that appears after a fully braced 'case' before the close brace, as in 'case X: { ... ")+self.tr("} break;' => 'case X: { ... ")+self.tr("break; }'. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 87, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_move_case_break")), 88, 0, 1, 5)
        label = QtWidgets.QLabel("mod_move_case_break")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 89, 0)
        self.mod_move_case_break = QtWidgets.QComboBox()
        self.mod_move_case_break.addItems(['true','false'])
        self.mod_move_case_break.setCurrentText('false')
        self.lt10.addWidget(self.mod_move_case_break, 89, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove braces around a fully braced case statement. ")+self.tr("Will only remove braces if there are no variable declarations in the block. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 90, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_case_brace")), 91, 0, 1, 5)
        label = QtWidgets.QLabel("mod_case_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 92, 0)
        self.mod_case_brace = QtWidgets.QComboBox()
        self.mod_case_brace.addItems(['ignore','add','remove','force'])
        self.mod_case_brace.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_case_brace, 92, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to remove a void 'return;' that appears as the last statement in a function. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 93, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_remove_empty_return")), 94, 0, 1, 5)
        label = QtWidgets.QLabel("mod_remove_empty_return")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 95, 0)
        self.mod_remove_empty_return = QtWidgets.QComboBox()
        self.mod_remove_empty_return.addItems(['true','false'])
        self.mod_remove_empty_return.setCurrentText('false')
        self.lt10.addWidget(self.mod_remove_empty_return, 95, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove the comma after the last value of an enumeration. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 96, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_enum_last_comma")), 97, 0, 1, 5)
        label = QtWidgets.QLabel("mod_enum_last_comma")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 98, 0)
        self.mod_enum_last_comma = QtWidgets.QComboBox()
        self.mod_enum_last_comma.addItems(['ignore','add','remove','force'])
        self.mod_enum_last_comma.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_enum_last_comma, 98, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Whether to organize the properties. ")+self.tr("If true, properties will be rearranged according to the mod_sort_oc_property_*_weight factors. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 99, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_oc_properties")), 100, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_oc_properties")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 101, 0)
        self.mod_sort_oc_properties = QtWidgets.QComboBox()
        self.mod_sort_oc_properties.addItems(['true','false'])
        self.mod_sort_oc_properties.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_oc_properties, 101, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Weight of a class property modifier. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 102, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_class_weight")), 103, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_oc_property_class_weight")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 104, 0)
        self.mod_sort_oc_property_class_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_class_weight.setMinimum(-100)
        self.mod_sort_oc_property_class_weight.setMaximum(100)
        self.mod_sort_oc_property_class_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_class_weight, 104, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Weight of 'atomic' and 'nonatomic'. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 105, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_thread_safe_weight")), 106, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_oc_property_thread_safe_weight")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 107, 0)
        self.mod_sort_oc_property_thread_safe_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_thread_safe_weight.setMinimum(-100)
        self.mod_sort_oc_property_thread_safe_weight.setMaximum(100)
        self.mod_sort_oc_property_thread_safe_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_thread_safe_weight, 107, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Weight of 'readwrite' when organizing properties. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 108, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_readwrite_weight")), 109, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_oc_property_readwrite_weight")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 110, 0)
        self.mod_sort_oc_property_readwrite_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_readwrite_weight.setMinimum(-100)
        self.mod_sort_oc_property_readwrite_weight.setMaximum(100)
        self.mod_sort_oc_property_readwrite_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_readwrite_weight, 110, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Weight of a reference type specifier ('retain', 'copy', 'assign', 'weak', 'strong') when organizing properties. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 111, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_reference_weight")), 112, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_oc_property_reference_weight")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 113, 0)
        self.mod_sort_oc_property_reference_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_reference_weight.setMinimum(-100)
        self.mod_sort_oc_property_reference_weight.setMaximum(100)
        self.mod_sort_oc_property_reference_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_reference_weight, 113, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Weight of getter type ('getter=') when organizing properties. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 114, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_getter_weight")), 115, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_oc_property_getter_weight")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 116, 0)
        self.mod_sort_oc_property_getter_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_getter_weight.setMinimum(-100)
        self.mod_sort_oc_property_getter_weight.setMaximum(100)
        self.mod_sort_oc_property_getter_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_getter_weight, 116, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Weight of setter type ('setter=') when organizing properties. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 117, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_setter_weight")), 118, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_oc_property_setter_weight")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 119, 0)
        self.mod_sort_oc_property_setter_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_setter_weight.setMinimum(-100)
        self.mod_sort_oc_property_setter_weight.setMaximum(100)
        self.mod_sort_oc_property_setter_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_setter_weight, 119, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("(OC) Weight of nullability type ('nullable', 'nonnull', 'null_unspecified', 'null_resettable') when organizing properties. "))
        label.setWordWrap(True)
        self.lt10.addWidget(label, 120, 0, 1, 5)
        self.lt10.addWidget(QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_nullability_weight")), 121, 0, 1, 5)
        label = QtWidgets.QLabel("mod_sort_oc_property_nullability_weight")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(label, 122, 0)
        self.mod_sort_oc_property_nullability_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_nullability_weight.setMinimum(-100)
        self.mod_sort_oc_property_nullability_weight.setMaximum(100)
        self.mod_sort_oc_property_nullability_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_nullability_weight, 122, 1, 1, 4)
        self.widget11 = QtWidgets.QWidget()
        self.addItem(self.widget11, self.tr("Preprocessor options"))
        self.lt11 = QtWidgets.QGridLayout(self.widget11)
        label = QtWidgets.QLabel(self.tr("Add or remove indentation of preprocessor directives inside #if blocks at brace level 0 (file-level). "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 0, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 2, 0)
        self.pp_indent = QtWidgets.QComboBox()
        self.pp_indent.addItems(['ignore','add','remove','force'])
        self.pp_indent.setCurrentText('ignore')
        self.lt11.addWidget(self.pp_indent, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent #if/#else/#endif at the brace level. ")+self.tr("If false, these are indented from column 1. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 3, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent_at_level")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent_at_level")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 5, 0)
        self.pp_indent_at_level = QtWidgets.QComboBox()
        self.pp_indent_at_level.addItems(['true','false'])
        self.pp_indent_at_level.setCurrentText('false')
        self.lt11.addWidget(self.pp_indent_at_level, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Specifies the number of columns to indent preprocessors per level at brace level 0 (file-level). ")+self.tr("If pp_indent_at_level=false, also specifies the number of columns to indent preprocessors per level at brace level > 0 (function-level). ")+self.tr("Default: 1. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 6, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent_count")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent_count")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 8, 0)
        self.pp_indent_count = QtWidgets.QSpinBox()
        self.pp_indent_count.setMinimum(0)
        self.pp_indent_count.setMaximum(100)
        self.pp_indent_count.setValue(1)
        self.lt11.addWidget(self.pp_indent_count, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Add or remove space after # based on pp_level of #if blocks. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 9, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_space")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("pp_space")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 11, 0)
        self.pp_space = QtWidgets.QComboBox()
        self.pp_space.addItems(['ignore','add','remove','force'])
        self.pp_space.setCurrentText('ignore')
        self.lt11.addWidget(self.pp_space, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Sets the number of spaces per level added with pp_space. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 12, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_space_count")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("pp_space_count")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 14, 0)
        self.pp_space_count = QtWidgets.QSpinBox()
        self.pp_space_count.setMinimum(0)
        self.pp_space_count.setMaximum(100)
        self.pp_space_count.setValue(0)
        self.lt11.addWidget(self.pp_space_count, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The indent for '#region' and '#endregion' in C# and '#pragma region' in C/C++. ")+self.tr("Negative values decrease indent down to the first column. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 15, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent_region")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent_region")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 17, 0)
        self.pp_indent_region = QtWidgets.QSpinBox()
        self.pp_indent_region.setMinimum(-100)
        self.pp_indent_region.setMaximum(100)
        self.pp_indent_region.setValue(0)
        self.lt11.addWidget(self.pp_indent_region, 17, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the code between #region and #endregion. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 18, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_region_indent_code")), 19, 0, 1, 5)
        label = QtWidgets.QLabel("pp_region_indent_code")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 20, 0)
        self.pp_region_indent_code = QtWidgets.QComboBox()
        self.pp_region_indent_code.addItems(['true','false'])
        self.pp_region_indent_code.setCurrentText('false')
        self.lt11.addWidget(self.pp_region_indent_code, 20, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If pp_indent_at_level=true, sets the indent for #if, #else and #endif when not at file-level. ")+self.tr("Negative values decrease indent down to the first column. ")+self.tr("=0: Indent preprocessors using output_tab_size >0: Column at which all preprocessors will be indented. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 21, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent_if")), 22, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent_if")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 23, 0)
        self.pp_indent_if = QtWidgets.QSpinBox()
        self.pp_indent_if.setMinimum(-100)
        self.pp_indent_if.setMaximum(100)
        self.pp_indent_if.setValue(0)
        self.lt11.addWidget(self.pp_indent_if, 23, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent the code between #if, #else and #endif. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 24, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_if_indent_code")), 25, 0, 1, 5)
        label = QtWidgets.QLabel("pp_if_indent_code")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 26, 0)
        self.pp_if_indent_code = QtWidgets.QComboBox()
        self.pp_if_indent_code.addItems(['true','false'])
        self.pp_if_indent_code.setCurrentText('false')
        self.lt11.addWidget(self.pp_if_indent_code, 26, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent '#define' at the brace level. ")+self.tr("If false, these are indented from column 1. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 27, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_define_at_level")), 28, 0, 1, 5)
        label = QtWidgets.QLabel("pp_define_at_level")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 29, 0)
        self.pp_define_at_level = QtWidgets.QComboBox()
        self.pp_define_at_level.addItems(['true','false'])
        self.pp_define_at_level.setCurrentText('false')
        self.lt11.addWidget(self.pp_define_at_level, 29, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to ignore the '#define' body while formatting. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 30, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_ignore_define_body")), 31, 0, 1, 5)
        label = QtWidgets.QLabel("pp_ignore_define_body")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 32, 0)
        self.pp_ignore_define_body = QtWidgets.QComboBox()
        self.pp_ignore_define_body.addItems(['true','false'])
        self.pp_ignore_define_body.setCurrentText('false')
        self.lt11.addWidget(self.pp_ignore_define_body, 32, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent case statements between #if, #else, and #endif. ")+self.tr("Only applies to the indent of the preprocesser that the case statements directly inside of. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 33, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent_case")), 34, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent_case")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 35, 0)
        self.pp_indent_case = QtWidgets.QComboBox()
        self.pp_indent_case.addItems(['true','false'])
        self.pp_indent_case.setCurrentText('true')
        self.lt11.addWidget(self.pp_indent_case, 35, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent whole function definitions between #if, #else, and #endif. ")+self.tr("Only applies to the indent of the preprocesser that the function definition is directly inside of. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 36, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent_func_def")), 37, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent_func_def")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 38, 0)
        self.pp_indent_func_def = QtWidgets.QComboBox()
        self.pp_indent_func_def.addItems(['true','false'])
        self.pp_indent_func_def.setCurrentText('true')
        self.lt11.addWidget(self.pp_indent_func_def, 38, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent extern C blocks between #if, #else, and #endif. ")+self.tr("Only applies to the indent of the preprocesser that the extern block is directly inside of. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 39, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent_extern")), 40, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent_extern")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 41, 0)
        self.pp_indent_extern = QtWidgets.QComboBox()
        self.pp_indent_extern.addItems(['true','false'])
        self.pp_indent_extern.setCurrentText('true')
        self.lt11.addWidget(self.pp_indent_extern, 41, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to indent braces directly inside #if, #else, and #endif. ")+self.tr("Only applies to the indent of the preprocesser that the braces are directly inside of. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt11.addWidget(label, 42, 0, 1, 5)
        self.lt11.addWidget(QtWidgets.QLabel(self.tr("code_pp_indent_brace")), 43, 0, 1, 5)
        label = QtWidgets.QLabel("pp_indent_brace")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(label, 44, 0)
        self.pp_indent_brace = QtWidgets.QComboBox()
        self.pp_indent_brace.addItems(['true','false'])
        self.pp_indent_brace.setCurrentText('true')
        self.lt11.addWidget(self.pp_indent_brace, 44, 1, 1, 4)
        self.widget12 = QtWidgets.QWidget()
        self.addItem(self.widget12, self.tr("Sort includes options"))
        self.lt12 = QtWidgets.QGridLayout(self.widget12)
        label = QtWidgets.QLabel(self.tr("The regex for include category with priority 0. "))
        label.setWordWrap(True)
        self.lt12.addWidget(label, 0, 0, 1, 5)
        self.lt12.addWidget(QtWidgets.QLabel(self.tr("code_include_category_0")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("include_category_0")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt12.addWidget(label, 2, 0)
        self.include_category_0 = QtWidgets.QLineEdit()
        self.include_category_0.setText("")
        self.lt12.addWidget(self.include_category_0, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The regex for include category with priority 1. "))
        label.setWordWrap(True)
        self.lt12.addWidget(label, 3, 0, 1, 5)
        self.lt12.addWidget(QtWidgets.QLabel(self.tr("code_include_category_1")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("include_category_1")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt12.addWidget(label, 5, 0)
        self.include_category_1 = QtWidgets.QLineEdit()
        self.include_category_1.setText("")
        self.lt12.addWidget(self.include_category_1, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The regex for include category with priority 2. "))
        label.setWordWrap(True)
        self.lt12.addWidget(label, 6, 0, 1, 5)
        self.lt12.addWidget(QtWidgets.QLabel(self.tr("code_include_category_2")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("include_category_2")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt12.addWidget(label, 8, 0)
        self.include_category_2 = QtWidgets.QLineEdit()
        self.include_category_2.setText("")
        self.lt12.addWidget(self.include_category_2, 8, 1, 1, 4)
        self.widget13 = QtWidgets.QWidget()
        self.addItem(self.widget13, self.tr("Use or Do not Use options"))
        self.lt13 = QtWidgets.QGridLayout(self.widget13)
        label = QtWidgets.QLabel(self.tr("true:  indent_func_call_param will be used (default) false: indent_func_call_param will NOT be used. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt13.addWidget(label, 0, 0, 1, 5)
        self.lt13.addWidget(QtWidgets.QLabel(self.tr("code_use_indent_func_call_param")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("use_indent_func_call_param")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(label, 2, 0)
        self.use_indent_func_call_param = QtWidgets.QComboBox()
        self.use_indent_func_call_param.addItems(['true','false'])
        self.use_indent_func_call_param.setCurrentText('true')
        self.lt13.addWidget(self.use_indent_func_call_param, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The value of the indentation for a continuation line is calculated differently if the statement is: - a declaration: your case with QString fileName ... ")+self.tr("- an assignment: your case with pSettings = new QSettings( ... ")+self.tr("At the second case the indentation value might be used twice: - at the assignment - at the function call (if present). ")+self.tr("To prevent the double use of the indentation value, use this option with the value 'true'. ")+self.tr("true:  indent_continue will be used only once false: indent_continue will be used every time (default). "))
        label.setWordWrap(True)
        self.lt13.addWidget(label, 3, 0, 1, 5)
        self.lt13.addWidget(QtWidgets.QLabel(self.tr("code_use_indent_continue_only_once")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("use_indent_continue_only_once")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(label, 5, 0)
        self.use_indent_continue_only_once = QtWidgets.QComboBox()
        self.use_indent_continue_only_once.addItems(['true','false'])
        self.use_indent_continue_only_once.setCurrentText('false')
        self.lt13.addWidget(self.use_indent_continue_only_once, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("The value might be used twice: - at the assignment - at the opening brace. ")+self.tr("To prevent the double use of the indentation value, use this option with the value 'true'. ")+self.tr("true:  indentation will be used only once false: indentation will be used every time (default). "))
        label.setWordWrap(True)
        self.lt13.addWidget(label, 6, 0, 1, 5)
        self.lt13.addWidget(QtWidgets.QLabel(self.tr("code_indent_cpp_lambda_only_once")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("indent_cpp_lambda_only_once")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(label, 8, 0)
        self.indent_cpp_lambda_only_once = QtWidgets.QComboBox()
        self.indent_cpp_lambda_only_once.addItems(['true','false'])
        self.indent_cpp_lambda_only_once.setCurrentText('false')
        self.lt13.addWidget(self.indent_cpp_lambda_only_once, 8, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether sp_after_angle takes precedence over sp_inside_fparen. ")+self.tr("This was the historic behavior, but is probably not the desired behavior, so this is off by default. "))
        label.setWordWrap(True)
        self.lt13.addWidget(label, 9, 0, 1, 5)
        self.lt13.addWidget(QtWidgets.QLabel(self.tr("code_use_sp_after_angle_always")), 10, 0, 1, 5)
        label = QtWidgets.QLabel("use_sp_after_angle_always")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(label, 11, 0)
        self.use_sp_after_angle_always = QtWidgets.QComboBox()
        self.use_sp_after_angle_always.addItems(['true','false'])
        self.use_sp_after_angle_always.setCurrentText('false')
        self.lt13.addWidget(self.use_sp_after_angle_always, 11, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Whether to apply special formatting for Qt SIGNAL/SLOT macros. ")+self.tr("Essentially, this tries to format these so that they match Qt's normalized form (ie the result of QMetaObject::normalizedSignature), which can slightly improve the performance of the QObject::connect call, rather than how they would otherwise be formatted. ")+self.tr("See options_for_QT.cpp for details. ")+self.tr("Default: true. "))
        label.setWordWrap(True)
        self.lt13.addWidget(label, 12, 0, 1, 5)
        self.lt13.addWidget(QtWidgets.QLabel(self.tr("code_use_options_overriding_for_qt_macros")), 13, 0, 1, 5)
        label = QtWidgets.QLabel("use_options_overriding_for_qt_macros")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(label, 14, 0)
        self.use_options_overriding_for_qt_macros = QtWidgets.QComboBox()
        self.use_options_overriding_for_qt_macros.addItems(['true','false'])
        self.use_options_overriding_for_qt_macros.setCurrentText('true')
        self.lt13.addWidget(self.use_options_overriding_for_qt_macros, 14, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("If true: the form feed character is removed from the list of whitespace characters. ")+self.tr("See https://en.cppreference.com/w/cpp/string/byte/isspace. "))
        label.setWordWrap(True)
        self.lt13.addWidget(label, 15, 0, 1, 5)
        self.lt13.addWidget(QtWidgets.QLabel(self.tr("code_use_form_feed_no_more_as_whitespace_character")), 16, 0, 1, 5)
        label = QtWidgets.QLabel("use_form_feed_no_more_as_whitespace_character")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(label, 17, 0)
        self.use_form_feed_no_more_as_whitespace_character = QtWidgets.QComboBox()
        self.use_form_feed_no_more_as_whitespace_character.addItems(['true','false'])
        self.use_form_feed_no_more_as_whitespace_character.setCurrentText('false')
        self.lt13.addWidget(self.use_form_feed_no_more_as_whitespace_character, 17, 1, 1, 4)
        self.widget14 = QtWidgets.QWidget()
        self.addItem(self.widget14, self.tr("Warn levels - 1: error, 2: warning (default), 3: note"))
        self.lt14 = QtWidgets.QGridLayout(self.widget14)
        label = QtWidgets.QLabel(self.tr("(C#) Warning is given if doing tab-to-\t replacement and we have found one in a C# verbatim string literal. ")+self.tr("Default: 2. "))
        label.setWordWrap(True)
        self.lt14.addWidget(label, 0, 0, 1, 5)
        self.lt14.addWidget(QtWidgets.QLabel(self.tr("code_warn_level_tabs_found_in_verbatim_string_literals")), 1, 0, 1, 5)
        label = QtWidgets.QLabel("warn_level_tabs_found_in_verbatim_string_literals")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt14.addWidget(label, 2, 0)
        self.warn_level_tabs_found_in_verbatim_string_literals = QtWidgets.QSpinBox()
        self.warn_level_tabs_found_in_verbatim_string_literals.setMinimum(0)
        self.warn_level_tabs_found_in_verbatim_string_literals.setMaximum(100)
        self.warn_level_tabs_found_in_verbatim_string_literals.setValue(2)
        self.lt14.addWidget(self.warn_level_tabs_found_in_verbatim_string_literals, 2, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Limit the number of loops. ")+self.tr("Used by uncrustify.cpp to exit from infinite loop. ")+self.tr("0: no limit. "))
        label.setWordWrap(True)
        self.lt14.addWidget(label, 3, 0, 1, 5)
        self.lt14.addWidget(QtWidgets.QLabel(self.tr("code_debug_max_number_of_loops")), 4, 0, 1, 5)
        label = QtWidgets.QLabel("debug_max_number_of_loops")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt14.addWidget(label, 5, 0)
        self.debug_max_number_of_loops = QtWidgets.QSpinBox()
        self.debug_max_number_of_loops.setMinimum(-100)
        self.debug_max_number_of_loops.setMaximum(100)
        self.debug_max_number_of_loops.setValue(0)
        self.lt14.addWidget(self.debug_max_number_of_loops, 5, 1, 1, 4)
        label = QtWidgets.QLabel(self.tr("Set the number of the line to protocol; Used in the function prot_the_line if the 2. ")+self.tr("parameter is zero. ")+self.tr("0: nothing protocol. "))
        label.setWordWrap(True)
        self.lt14.addWidget(label, 6, 0, 1, 5)
        self.lt14.addWidget(QtWidgets.QLabel(self.tr("code_debug_line_number_to_protocol")), 7, 0, 1, 5)
        label = QtWidgets.QLabel("debug_line_number_to_protocol")
        label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt14.addWidget(label, 8, 0)
        self.debug_line_number_to_protocol = QtWidgets.QSpinBox()
        self.debug_line_number_to_protocol.setMinimum(-100)
        self.debug_line_number_to_protocol.setMaximum(100)
        self.debug_line_number_to_protocol.setValue(0)
        self.lt14.addWidget(self.debug_line_number_to_protocol, 8, 1, 1, 4)
    def get(self):
        s=[]
        s.append(wrap(self.tr("The type of line endings. ")+self.tr("Default: auto. ")))
        s.append("newlines = {} # lf/crlf/cr/auto".format(self.newlines.currentText()))
        s.append(wrap(self.tr("The original size of tabs in the input. ")+self.tr("Default: 8. ")))
        s.append("input_tab_size = {} # unsigned number".format(self.input_tab_size.value()))
        s.append(wrap(self.tr("The size of tabs in the output (only used if align_with_tabs=true). ")+self.tr("Default: 8. ")))
        s.append("output_tab_size = {} # unsigned number".format(self.output_tab_size.value()))
        s.append(wrap(self.tr("The ASCII value of the string escape char, usually 92 (\) or (Pawn) 94 (^). ")+self.tr("Default: 92. ")))
        s.append("string_escape_char = {} # unsigned number".format(self.string_escape_char.value()))
        s.append(wrap(self.tr("Alternate string escape char (usually only used for Pawn). ")+self.tr("Only works right before the quote char. ")))
        s.append("string_escape_char2 = {} # unsigned number".format(self.string_escape_char2.value()))
        s.append(wrap(self.tr("Replace tab characters found in string literals with the escape sequence \t instead. ")))
        s.append("string_replace_tab_chars = {} # true/false".format(self.string_replace_tab_chars.currentText()))
        s.append(wrap(self.tr("Allow interpreting '>=' and '>>=' as part of a template in code like 'void f(list<list<B>>=val);'. ")+self.tr("If true, 'assert(x<0 && y>=3)' will be broken. ")+self.tr("Improvements to template detection may make this option obsolete. ")))
        s.append("tok_split_gte = {} # true/false".format(self.tok_split_gte.currentText()))
        s.append(wrap(self.tr("Disable formatting of NL_CONT ('\\n') ended lines (e.g. ")+self.tr("multiline macros). ")))
        s.append("disable_processing_nl_cont = {} # true/false".format(self.disable_processing_nl_cont.currentText()))
        s.append(wrap(self.tr("Specify the marker used in comments to disable processing of part of the file. ")+self.tr("The comment should be used alone in one line. ")+self.tr("Default:  *INDENT-OFF*. ")))
        s.append("disable_processing_cmt = \"{}\" # string".format(self.disable_processing_cmt.text()))
        s.append(wrap(self.tr("Specify the marker used in comments to (re)enable processing in a file. ")+self.tr("The comment should be used alone in one line. ")+self.tr("Default:  *INDENT-ON*. ")))
        s.append("enable_processing_cmt = \"{}\" # string".format(self.enable_processing_cmt.text()))
        s.append(wrap(self.tr("Enable parsing of digraphs. ")))
        s.append("enable_digraphs = {} # true/false".format(self.enable_digraphs.currentText()))
        s.append(wrap(self.tr("Add or remove the UTF-8 BOM (recommend 'remove'). ")))
        s.append("utf8_bom = {} # ignore/add/remove/force".format(self.utf8_bom.currentText()))
        s.append(wrap(self.tr("If the file contains bytes with values between 128 and 255, but is not UTF-8, then output as UTF-8. ")))
        s.append("utf8_byte = {} # true/false".format(self.utf8_byte.currentText()))
        s.append(wrap(self.tr("Force the output encoding to UTF-8. ")))
        s.append("utf8_force = {} # true/false".format(self.utf8_force.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'do' and '{'. ")))
        s.append("sp_do_brace_open = {} # ignore/add/remove/force".format(self.sp_do_brace_open.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and 'while'. ")))
        s.append("sp_brace_close_while = {} # ignore/add/remove/force".format(self.sp_brace_close_while.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'while' and '('. ")))
        s.append("sp_while_paren_open = {} # ignore/add/remove/force".format(self.sp_while_paren_open.currentText()))
        s.append(wrap(self.tr("Add or remove space around non-assignment symbolic operators ('+', '/', '%', '<<', and so forth). ")))
        s.append("sp_arith = {} # ignore/add/remove/force".format(self.sp_arith.currentText()))
        s.append(wrap(self.tr("Add or remove space around arithmetic operators '+' and '-'. ")+self.tr("Overrides sp_arith. ")))
        s.append("sp_arith_additive = {} # ignore/add/remove/force".format(self.sp_arith_additive.currentText()))
        s.append(wrap(self.tr("Add or remove space around assignment operator '=', '+=', etc. ")))
        s.append("sp_assign = {} # ignore/add/remove/force".format(self.sp_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space around '=' in C++11 lambda capture specifications. ")+self.tr("Overrides sp_assign. ")))
        s.append("sp_cpp_lambda_assign = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space after the capture specification of a C++11 lambda when an argument list is present, as in '[] <here> (int x){ ... ")+self.tr("}'. ")))
        s.append("sp_cpp_lambda_square_paren = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_square_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space after the capture specification of a C++11 lambda with no argument list is present, as in '[] <here> { ... ")+self.tr("}'. ")))
        s.append("sp_cpp_lambda_square_brace = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_square_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space after the argument list of a C++11 lambda, as in '[](int x) <here> { ... ")+self.tr("}'. ")))
        s.append("sp_cpp_lambda_paren_brace = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_paren_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between a lambda body and its call operator of an immediately invoked lambda, as in '[]( ... ")+self.tr("){ ... ")+self.tr("} <here> ( ... ")+self.tr(")'. ")))
        s.append("sp_cpp_lambda_fparen = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove space around assignment operator '=' in a prototype. ")+self.tr("If set to ignore, use sp_assign. ")))
        s.append("sp_assign_default = {} # ignore/add/remove/force".format(self.sp_assign_default.currentText()))
        s.append(wrap(self.tr("Add or remove space before assignment operator '=', '+=', etc. ")+self.tr("Overrides sp_assign. ")))
        s.append("sp_before_assign = {} # ignore/add/remove/force".format(self.sp_before_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space after assignment operator '=', '+=', etc. ")+self.tr("Overrides sp_assign. ")))
        s.append("sp_after_assign = {} # ignore/add/remove/force".format(self.sp_after_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space in 'NS_ENUM ('. ")))
        s.append("sp_enum_paren = {} # ignore/add/remove/force".format(self.sp_enum_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space around assignment '=' in enum. ")))
        s.append("sp_enum_assign = {} # ignore/add/remove/force".format(self.sp_enum_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space before assignment '=' in enum. ")+self.tr("Overrides sp_enum_assign. ")))
        s.append("sp_enum_before_assign = {} # ignore/add/remove/force".format(self.sp_enum_before_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space after assignment '=' in enum. ")+self.tr("Overrides sp_enum_assign. ")))
        s.append("sp_enum_after_assign = {} # ignore/add/remove/force".format(self.sp_enum_after_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space around assignment ':' in enum. ")))
        s.append("sp_enum_colon = {} # ignore/add/remove/force".format(self.sp_enum_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space around preprocessor '##' concatenation operator. ")+self.tr("Default: add. ")))
        s.append("sp_pp_concat = {} # ignore/add/remove/force".format(self.sp_pp_concat.currentText()))
        s.append(wrap(self.tr("Add or remove space after preprocessor '#' stringify operator. ")+self.tr("Also affects the '#@' charizing operator. ")))
        s.append("sp_pp_stringify = {} # ignore/add/remove/force".format(self.sp_pp_stringify.currentText()))
        s.append(wrap(self.tr("Add or remove space before preprocessor '#' stringify operator as in '#define x(y) L#y'. ")))
        s.append("sp_before_pp_stringify = {} # ignore/add/remove/force".format(self.sp_before_pp_stringify.currentText()))
        s.append(wrap(self.tr("Add or remove space around boolean operators '&&' and '||'. ")))
        s.append("sp_bool = {} # ignore/add/remove/force".format(self.sp_bool.currentText()))
        s.append(wrap(self.tr("Add or remove space around compare operator '<', '>', '==', etc. ")))
        s.append("sp_compare = {} # ignore/add/remove/force".format(self.sp_compare.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '(' and ')'. ")))
        s.append("sp_inside_paren = {} # ignore/add/remove/force".format(self.sp_inside_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between nested parentheses, ie '((' vs. ")+self.tr("') )'. ")))
        s.append("sp_paren_paren = {} # ignore/add/remove/force".format(self.sp_paren_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between back-to-back parentheses, ie ')(' vs. ")+self.tr("') ('. ")))
        s.append("sp_cparen_oparen = {} # ignore/add/remove/force".format(self.sp_cparen_oparen.currentText()))
        s.append(wrap(self.tr("Whether to balance spaces inside nested parentheses. ")))
        s.append("sp_balance_nested_parens = {} # true/false".format(self.sp_balance_nested_parens.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '{'. ")))
        s.append("sp_paren_brace = {} # ignore/add/remove/force".format(self.sp_paren_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between nested braces, ie '{{' vs '{ {'. ")))
        s.append("sp_brace_brace = {} # ignore/add/remove/force".format(self.sp_brace_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space before pointer star '*'. ")))
        s.append("sp_before_ptr_star = {} # ignore/add/remove/force".format(self.sp_before_ptr_star.currentText()))
        s.append(wrap(self.tr("Add or remove space before pointer star '*' that isn't followed by a variable name. ")+self.tr("If set to ignore, sp_before_ptr_star is used instead. ")))
        s.append("sp_before_unnamed_ptr_star = {} # ignore/add/remove/force".format(self.sp_before_unnamed_ptr_star.currentText()))
        s.append(wrap(self.tr("Add or remove space between pointer stars '*'. ")))
        s.append("sp_between_ptr_star = {} # ignore/add/remove/force".format(self.sp_between_ptr_star.currentText()))
        s.append(wrap(self.tr("Add or remove space after pointer star '*', if followed by a word. ")+self.tr("Overrides sp_type_func. ")))
        s.append("sp_after_ptr_star = {} # ignore/add/remove/force".format(self.sp_after_ptr_star.currentText()))
        s.append(wrap(self.tr("Add or remove space after pointer caret '^', if followed by a word. ")))
        s.append("sp_after_ptr_block_caret = {} # ignore/add/remove/force".format(self.sp_after_ptr_block_caret.currentText()))
        s.append(wrap(self.tr("Add or remove space after pointer star '*', if followed by a qualifier. ")))
        s.append("sp_after_ptr_star_qualifier = {} # ignore/add/remove/force".format(self.sp_after_ptr_star_qualifier.currentText()))
        s.append(wrap(self.tr("Add or remove space after a pointer star '*', if followed by a function prototype or function definition. ")+self.tr("Overrides sp_after_ptr_star and sp_type_func. ")))
        s.append("sp_after_ptr_star_func = {} # ignore/add/remove/force".format(self.sp_after_ptr_star_func.currentText()))
        s.append(wrap(self.tr("Add or remove space after a pointer star '*', if followed by an open parenthesis, as in 'void* (*)(). ")))
        s.append("sp_ptr_star_paren = {} # ignore/add/remove/force".format(self.sp_ptr_star_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space before a pointer star '*', if followed by a function prototype or function definition. ")))
        s.append("sp_before_ptr_star_func = {} # ignore/add/remove/force".format(self.sp_before_ptr_star_func.currentText()))
        s.append(wrap(self.tr("Add or remove space before a reference sign '&'. ")))
        s.append("sp_before_byref = {} # ignore/add/remove/force".format(self.sp_before_byref.currentText()))
        s.append(wrap(self.tr("Add or remove space before a reference sign '&' that isn't followed by a variable name. ")+self.tr("If set to ignore, sp_before_byref is used instead. ")))
        s.append("sp_before_unnamed_byref = {} # ignore/add/remove/force".format(self.sp_before_unnamed_byref.currentText()))
        s.append(wrap(self.tr("Add or remove space after reference sign '&', if followed by a word. ")+self.tr("Overrides sp_type_func. ")))
        s.append("sp_after_byref = {} # ignore/add/remove/force".format(self.sp_after_byref.currentText()))
        s.append(wrap(self.tr("Add or remove space after a reference sign '&', if followed by a function prototype or function definition. ")+self.tr("Overrides sp_after_byref and sp_type_func. ")))
        s.append("sp_after_byref_func = {} # ignore/add/remove/force".format(self.sp_after_byref_func.currentText()))
        s.append(wrap(self.tr("Add or remove space before a reference sign '&', if followed by a function prototype or function definition. ")))
        s.append("sp_before_byref_func = {} # ignore/add/remove/force".format(self.sp_before_byref_func.currentText()))
        s.append(wrap(self.tr("Add or remove space between type and word. ")+self.tr("Default: force. ")))
        s.append("sp_after_type = {} # ignore/add/remove/force".format(self.sp_after_type.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'decltype(...)' and word. ")))
        s.append("sp_after_decltype = {} # ignore/add/remove/force".format(self.sp_after_decltype.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space before the parenthesis in the D constructs 'template Foo(' and 'class Foo('. ")))
        s.append("sp_before_template_paren = {} # ignore/add/remove/force".format(self.sp_before_template_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'template' and '<'. ")+self.tr("If set to ignore, sp_before_angle is used. ")))
        s.append("sp_template_angle = {} # ignore/add/remove/force".format(self.sp_template_angle.currentText()))
        s.append(wrap(self.tr("Add or remove space before '<'. ")))
        s.append("sp_before_angle = {} # ignore/add/remove/force".format(self.sp_before_angle.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '<' and '>'. ")))
        s.append("sp_inside_angle = {} # ignore/add/remove/force".format(self.sp_inside_angle.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '<>'. ")))
        s.append("sp_inside_angle_empty = {} # ignore/add/remove/force".format(self.sp_inside_angle_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and ':'. ")))
        s.append("sp_angle_colon = {} # ignore/add/remove/force".format(self.sp_angle_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space after '>'. ")))
        s.append("sp_after_angle = {} # ignore/add/remove/force".format(self.sp_after_angle.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and '(' as found in 'new List<byte>(foo);'. ")))
        s.append("sp_angle_paren = {} # ignore/add/remove/force".format(self.sp_angle_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and '()' as found in 'new List<byte>();'. ")))
        s.append("sp_angle_paren_empty = {} # ignore/add/remove/force".format(self.sp_angle_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and a word as in 'List<byte> m;' or 'template <typename T> static ...'. ")))
        s.append("sp_angle_word = {} # ignore/add/remove/force".format(self.sp_angle_word.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and '>' in '>>' (template stuff). ")+self.tr("Default: add. ")))
        s.append("sp_angle_shift = {} # ignore/add/remove/force".format(self.sp_angle_shift.currentText()))
        s.append(wrap(self.tr("(C++11) Permit removal of the space between '>>' in 'foo<bar<int> >'. ")+self.tr("Note that sp_angle_shift cannot remove the space without this option. ")))
        s.append("sp_permit_cpp11_shift = {} # true/false".format(self.sp_permit_cpp11_shift.currentText()))
        s.append(wrap(self.tr("Add or remove space before '(' of control statements ('if', 'for', 'switch', 'while', etc.). ")))
        s.append("sp_before_sparen = {} # ignore/add/remove/force".format(self.sp_before_sparen.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '(' and ')' of control statements. ")))
        s.append("sp_inside_sparen = {} # ignore/add/remove/force".format(self.sp_inside_sparen.currentText()))
        s.append(wrap(self.tr("Add or remove space after '(' of control statements. ")+self.tr("Overrides sp_inside_sparen. ")))
        s.append("sp_inside_sparen_open = {} # ignore/add/remove/force".format(self.sp_inside_sparen_open.currentText()))
        s.append(wrap(self.tr("Add or remove space before ')' of control statements. ")+self.tr("Overrides sp_inside_sparen. ")))
        s.append("sp_inside_sparen_close = {} # ignore/add/remove/force".format(self.sp_inside_sparen_close.currentText()))
        s.append(wrap(self.tr("Add or remove space after ')' of control statements. ")))
        s.append("sp_after_sparen = {} # ignore/add/remove/force".format(self.sp_after_sparen.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '{' of of control statements. ")))
        s.append("sp_sparen_brace = {} # ignore/add/remove/force".format(self.sp_sparen_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between 'invariant' and '('. ")))
        s.append("sp_invariant_paren = {} # ignore/add/remove/force".format(self.sp_invariant_paren.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space after the ')' in 'invariant (C) c'. ")))
        s.append("sp_after_invariant_paren = {} # ignore/add/remove/force".format(self.sp_after_invariant_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space before empty statement ';' on 'if', 'for' and 'while'. ")))
        s.append("sp_special_semi = {} # ignore/add/remove/force".format(self.sp_special_semi.currentText()))
        s.append(wrap(self.tr("Add or remove space before ';'. ")+self.tr("Default: remove. ")))
        s.append("sp_before_semi = {} # ignore/add/remove/force".format(self.sp_before_semi.currentText()))
        s.append(wrap(self.tr("Add or remove space before ';' in non-empty 'for' statements. ")))
        s.append("sp_before_semi_for = {} # ignore/add/remove/force".format(self.sp_before_semi_for.currentText()))
        s.append(wrap(self.tr("Add or remove space before a semicolon of an empty part of a for statement. ")))
        s.append("sp_before_semi_for_empty = {} # ignore/add/remove/force".format(self.sp_before_semi_for_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space after ';', except when followed by a comment. ")+self.tr("Default: add. ")))
        s.append("sp_after_semi = {} # ignore/add/remove/force".format(self.sp_after_semi.currentText()))
        s.append(wrap(self.tr("Add or remove space after ';' in non-empty 'for' statements. ")+self.tr("Default: force. ")))
        s.append("sp_after_semi_for = {} # ignore/add/remove/force".format(self.sp_after_semi_for.currentText()))
        s.append(wrap(self.tr("Add or remove space after the final semicolon of an empty part of a for statement, as in 'for ( ; ; <here> )'. ")))
        s.append("sp_after_semi_for_empty = {} # ignore/add/remove/force".format(self.sp_after_semi_for_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space before '[' (except '[]'). ")))
        s.append("sp_before_square = {} # ignore/add/remove/force".format(self.sp_before_square.currentText()))
        s.append(wrap(self.tr("Add or remove space before '[' for a variable definition. ")+self.tr("Default: remove. ")))
        s.append("sp_before_vardef_square = {} # ignore/add/remove/force".format(self.sp_before_vardef_square.currentText()))
        s.append(wrap(self.tr("Add or remove space before '[' for asm block. ")))
        s.append("sp_before_square_asm_block = {} # ignore/add/remove/force".format(self.sp_before_square_asm_block.currentText()))
        s.append(wrap(self.tr("Add or remove space before '[]'. ")))
        s.append("sp_before_squares = {} # ignore/add/remove/force".format(self.sp_before_squares.currentText()))
        s.append(wrap(self.tr("Add or remove space before C++17 structured bindings. ")))
        s.append("sp_cpp_before_struct_binding = {} # ignore/add/remove/force".format(self.sp_cpp_before_struct_binding.currentText()))
        s.append(wrap(self.tr("Add or remove space inside a non-empty '[' and ']'. ")))
        s.append("sp_inside_square = {} # ignore/add/remove/force".format(self.sp_inside_square.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space inside a non-empty Objective-C boxed array '@[' and ']'. ")+self.tr("If set to ignore, sp_inside_square is used. ")))
        s.append("sp_inside_square_oc_array = {} # ignore/add/remove/force".format(self.sp_inside_square_oc_array.currentText()))
        s.append(wrap(self.tr("Add or remove space after ',', ie 'a,b' vs. ")+self.tr("'a, b'. ")))
        s.append("sp_after_comma = {} # ignore/add/remove/force".format(self.sp_after_comma.currentText()))
        s.append(wrap(self.tr("Add or remove space before ','. ")+self.tr("Default: remove. ")))
        s.append("sp_before_comma = {} # ignore/add/remove/force".format(self.sp_before_comma.currentText()))
        s.append(wrap(self.tr("(C#) Add or remove space between ',' and ']' in multidimensional array type like 'int[,,]'. ")))
        s.append("sp_after_mdatype_commas = {} # ignore/add/remove/force".format(self.sp_after_mdatype_commas.currentText()))
        s.append(wrap(self.tr("(C#) Add or remove space between '[' and ',' in multidimensional array type like 'int[,,]'. ")))
        s.append("sp_before_mdatype_commas = {} # ignore/add/remove/force".format(self.sp_before_mdatype_commas.currentText()))
        s.append(wrap(self.tr("(C#) Add or remove space between ',' in multidimensional array type like 'int[,,]'. ")))
        s.append("sp_between_mdatype_commas = {} # ignore/add/remove/force".format(self.sp_between_mdatype_commas.currentText()))
        s.append(wrap(self.tr("Add or remove space between an open parenthesis and comma, ie '(,' vs. ")+self.tr("'( ,'. ")+self.tr("Default: force. ")))
        s.append("sp_paren_comma = {} # ignore/add/remove/force".format(self.sp_paren_comma.currentText()))
        s.append(wrap(self.tr("Add or remove space before the variadic '...' when preceded by a non-punctuator. ")))
        s.append("sp_before_ellipsis = {} # ignore/add/remove/force".format(self.sp_before_ellipsis.currentText()))
        s.append(wrap(self.tr("Add or remove space between a type and '...'. ")))
        s.append("sp_type_ellipsis = {} # ignore/add/remove/force".format(self.sp_type_ellipsis.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between a type and '?'. ")))
        s.append("sp_type_question = {} # ignore/add/remove/force".format(self.sp_type_question.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '...'. ")))
        s.append("sp_paren_ellipsis = {} # ignore/add/remove/force".format(self.sp_paren_ellipsis.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and a qualifier such as 'const'. ")))
        s.append("sp_paren_qualifier = {} # ignore/add/remove/force".format(self.sp_paren_qualifier.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and 'noexcept'. ")))
        s.append("sp_paren_noexcept = {} # ignore/add/remove/force".format(self.sp_paren_noexcept.currentText()))
        s.append(wrap(self.tr("Add or remove space after class ':'. ")))
        s.append("sp_after_class_colon = {} # ignore/add/remove/force".format(self.sp_after_class_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before class ':'. ")))
        s.append("sp_before_class_colon = {} # ignore/add/remove/force".format(self.sp_before_class_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space after class constructor ':'. ")))
        s.append("sp_after_constr_colon = {} # ignore/add/remove/force".format(self.sp_after_constr_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before class constructor ':'. ")))
        s.append("sp_before_constr_colon = {} # ignore/add/remove/force".format(self.sp_before_constr_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before case ':'. ")+self.tr("Default: remove. ")))
        s.append("sp_before_case_colon = {} # ignore/add/remove/force".format(self.sp_before_case_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'operator' and operator sign. ")))
        s.append("sp_after_operator = {} # ignore/add/remove/force".format(self.sp_after_operator.currentText()))
        s.append(wrap(self.tr("Add or remove space between the operator symbol and the open parenthesis, as in 'operator ++('. ")))
        s.append("sp_after_operator_sym = {} # ignore/add/remove/force".format(self.sp_after_operator_sym.currentText()))
        s.append(wrap(self.tr("Overrides sp_after_operator_sym when the operator has no arguments, as in 'operator *()'. ")))
        s.append("sp_after_operator_sym_empty = {} # ignore/add/remove/force".format(self.sp_after_operator_sym_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space after C/D cast, ie 'cast(int)a' vs. ")+self.tr("'cast(int) a' or '(int)a' vs. ")+self.tr("'(int) a'. ")))
        s.append("sp_after_cast = {} # ignore/add/remove/force".format(self.sp_after_cast.currentText()))
        s.append(wrap(self.tr("Add or remove spaces inside cast parentheses. ")))
        s.append("sp_inside_paren_cast = {} # ignore/add/remove/force".format(self.sp_inside_paren_cast.currentText()))
        s.append(wrap(self.tr("Add or remove space between the type and open parenthesis in a C++ cast, ie 'int(exp)' vs. ")+self.tr("'int (exp)'. ")))
        s.append("sp_cpp_cast_paren = {} # ignore/add/remove/force".format(self.sp_cpp_cast_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'sizeof' and '('. ")))
        s.append("sp_sizeof_paren = {} # ignore/add/remove/force".format(self.sp_sizeof_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'sizeof' and '...'. ")))
        s.append("sp_sizeof_ellipsis = {} # ignore/add/remove/force".format(self.sp_sizeof_ellipsis.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'sizeof...' and '('. ")))
        s.append("sp_sizeof_ellipsis_paren = {} # ignore/add/remove/force".format(self.sp_sizeof_ellipsis_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'decltype' and '('. ")))
        s.append("sp_decltype_paren = {} # ignore/add/remove/force".format(self.sp_decltype_paren.currentText()))
        s.append(wrap(self.tr("(Pawn) Add or remove space after the tag keyword. ")))
        s.append("sp_after_tag = {} # ignore/add/remove/force".format(self.sp_after_tag.currentText()))
        s.append(wrap(self.tr("Add or remove space inside enum '{' and '}'. ")))
        s.append("sp_inside_braces_enum = {} # ignore/add/remove/force".format(self.sp_inside_braces_enum.currentText()))
        s.append(wrap(self.tr("Add or remove space inside struct/union '{' and '}'. ")))
        s.append("sp_inside_braces_struct = {} # ignore/add/remove/force".format(self.sp_inside_braces_struct.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space inside Objective-C boxed dictionary '{' and '}'. ")))
        s.append("sp_inside_braces_oc_dict = {} # ignore/add/remove/force".format(self.sp_inside_braces_oc_dict.currentText()))
        s.append(wrap(self.tr("Add or remove space after open brace in an unnamed temporary direct-list-initialization. ")))
        s.append("sp_after_type_brace_init_lst_open = {} # ignore/add/remove/force".format(self.sp_after_type_brace_init_lst_open.currentText()))
        s.append(wrap(self.tr("Add or remove space before close brace in an unnamed temporary direct-list-initialization. ")))
        s.append("sp_before_type_brace_init_lst_close = {} # ignore/add/remove/force".format(self.sp_before_type_brace_init_lst_close.currentText()))
        s.append(wrap(self.tr("Add or remove space inside an unnamed temporary direct-list-initialization. ")))
        s.append("sp_inside_type_brace_init_lst = {} # ignore/add/remove/force".format(self.sp_inside_type_brace_init_lst.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '{' and '}'. ")))
        s.append("sp_inside_braces = {} # ignore/add/remove/force".format(self.sp_inside_braces.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '{}'. ")))
        s.append("sp_inside_braces_empty = {} # ignore/add/remove/force".format(self.sp_inside_braces_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space around trailing return operator '->'. ")))
        s.append("sp_trailing_return = {} # ignore/add/remove/force".format(self.sp_trailing_return.currentText()))
        s.append(wrap(self.tr("Add or remove space between return type and function name. ")+self.tr("A minimum of 1 is forced except for pointer return types. ")))
        s.append("sp_type_func = {} # ignore/add/remove/force".format(self.sp_type_func.currentText()))
        s.append(wrap(self.tr("Add or remove space between type and open brace of an unnamed temporary direct-list-initialization. ")))
        s.append("sp_type_brace_init_lst = {} # ignore/add/remove/force".format(self.sp_type_brace_init_lst.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '(' on function declaration. ")))
        s.append("sp_func_proto_paren = {} # ignore/add/remove/force".format(self.sp_func_proto_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '()' on function declaration without parameters. ")))
        s.append("sp_func_proto_paren_empty = {} # ignore/add/remove/force".format(self.sp_func_proto_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '(' with a typedef specifier. ")))
        s.append("sp_func_type_paren = {} # ignore/add/remove/force".format(self.sp_func_type_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between alias name and '(' of a non-pointer function type typedef. ")))
        s.append("sp_func_def_paren = {} # ignore/add/remove/force".format(self.sp_func_def_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '()' on function definition without parameters. ")))
        s.append("sp_func_def_paren_empty = {} # ignore/add/remove/force".format(self.sp_func_def_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space inside empty function '()'. ")+self.tr("Overrides sp_after_angle unless use_sp_after_angle_always is set to true. ")))
        s.append("sp_inside_fparens = {} # ignore/add/remove/force".format(self.sp_inside_fparens.currentText()))
        s.append(wrap(self.tr("Add or remove space inside function '(' and ')'. ")))
        s.append("sp_inside_fparen = {} # ignore/add/remove/force".format(self.sp_inside_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove space inside the first parentheses in a function type, as in 'void (*x)(...)'. ")))
        s.append("sp_inside_tparen = {} # ignore/add/remove/force".format(self.sp_inside_tparen.currentText()))
        s.append(wrap(self.tr("Add or remove space between the ')' and '(' in a function type, as in 'void (*x)(...)'. ")))
        s.append("sp_after_tparen_close = {} # ignore/add/remove/force".format(self.sp_after_tparen_close.currentText()))
        s.append(wrap(self.tr("Add or remove space between ']' and '(' when part of a function call. ")))
        s.append("sp_square_fparen = {} # ignore/add/remove/force".format(self.sp_square_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '{' of function. ")))
        s.append("sp_fparen_brace = {} # ignore/add/remove/force".format(self.sp_fparen_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '{' of s function call in object initialization. ")+self.tr("Overrides sp_fparen_brace. ")))
        s.append("sp_fparen_brace_initializer = {} # ignore/add/remove/force".format(self.sp_fparen_brace_initializer.currentText()))
        s.append(wrap(self.tr("(Java) Add or remove space between ')' and '{{' of double brace initializer. ")))
        s.append("sp_fparen_dbrace = {} # ignore/add/remove/force".format(self.sp_fparen_dbrace.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '(' on function calls. ")))
        s.append("sp_func_call_paren = {} # ignore/add/remove/force".format(self.sp_func_call_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '()' on function calls without parameters. ")+self.tr("If set to ignore (the default), sp_func_call_paren is used. ")))
        s.append("sp_func_call_paren_empty = {} # ignore/add/remove/force".format(self.sp_func_call_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between the user function name and '(' on function calls. ")+self.tr("You need to set a keyword to be a user function in the config file, like:   set func_call_user tr _ i18n. ")))
        s.append("sp_func_call_user_paren = {} # ignore/add/remove/force".format(self.sp_func_call_user_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space inside user function '(' and ')'. ")))
        s.append("sp_func_call_user_inside_fparen = {} # ignore/add/remove/force".format(self.sp_func_call_user_inside_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove space between nested parentheses with user functions, ie '((' vs. ")+self.tr("'( ('. ")))
        s.append("sp_func_call_user_paren_paren = {} # ignore/add/remove/force".format(self.sp_func_call_user_paren_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between a constructor/destructor and the open parenthesis. ")))
        s.append("sp_func_class_paren = {} # ignore/add/remove/force".format(self.sp_func_class_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between a constructor without parameters or destructor and '()'. ")))
        s.append("sp_func_class_paren_empty = {} # ignore/add/remove/force".format(self.sp_func_class_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'return' and '('. ")))
        s.append("sp_return_paren = {} # ignore/add/remove/force".format(self.sp_return_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'return' and '{'. ")))
        s.append("sp_return_brace = {} # ignore/add/remove/force".format(self.sp_return_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between '__attribute__' and '('. ")))
        s.append("sp_attribute_paren = {} # ignore/add/remove/force".format(self.sp_attribute_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'defined' and '(' in '#if defined (FOO)'. ")))
        s.append("sp_defined_paren = {} # ignore/add/remove/force".format(self.sp_defined_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'throw' and '(' in 'throw (something)'. ")))
        s.append("sp_throw_paren = {} # ignore/add/remove/force".format(self.sp_throw_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'throw' and anything other than '(' as in '@throw [...];'. ")))
        s.append("sp_after_throw = {} # ignore/add/remove/force".format(self.sp_after_throw.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'catch' and '(' in 'catch (something) { }'. ")+self.tr("If set to ignore, sp_before_sparen is used. ")))
        s.append("sp_catch_paren = {} # ignore/add/remove/force".format(self.sp_catch_paren.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '@catch' and '(' in '@catch (something) { }'. ")+self.tr("If set to ignore, sp_catch_paren is used. ")))
        s.append("sp_oc_catch_paren = {} # ignore/add/remove/force".format(self.sp_oc_catch_paren.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before Objective-C protocol list as in '@protocol Protocol<here><Protocol_A>' or '@interface MyClass : NSObject<here><MyProtocol>'. ")))
        s.append("sp_before_oc_proto_list = {} # ignore/add/remove/force".format(self.sp_before_oc_proto_list.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between class name and '(' in '@interface className(categoryName)<ProtocolName>:BaseClass'. ")))
        s.append("sp_oc_classname_paren = {} # ignore/add/remove/force".format(self.sp_oc_classname_paren.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between 'version' and '(' in 'version (something) { }'. ")+self.tr("If set to ignore, sp_before_sparen is used. ")))
        s.append("sp_version_paren = {} # ignore/add/remove/force".format(self.sp_version_paren.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between 'scope' and '(' in 'scope (something) { }'. ")+self.tr("If set to ignore, sp_before_sparen is used. ")))
        s.append("sp_scope_paren = {} # ignore/add/remove/force".format(self.sp_scope_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'super' and '(' in 'super (something)'. ")+self.tr("Default: remove. ")))
        s.append("sp_super_paren = {} # ignore/add/remove/force".format(self.sp_super_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'this' and '(' in 'this (something)'. ")+self.tr("Default: remove. ")))
        s.append("sp_this_paren = {} # ignore/add/remove/force".format(self.sp_this_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between a macro name and its definition. ")))
        s.append("sp_macro = {} # ignore/add/remove/force".format(self.sp_macro.currentText()))
        s.append(wrap(self.tr("Add or remove space between a macro function ')' and its definition. ")))
        s.append("sp_macro_func = {} # ignore/add/remove/force".format(self.sp_macro_func.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'else' and '{' if on the same line. ")))
        s.append("sp_else_brace = {} # ignore/add/remove/force".format(self.sp_else_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and 'else' if on the same line. ")))
        s.append("sp_brace_else = {} # ignore/add/remove/force".format(self.sp_brace_else.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and the name of a typedef on the same line. ")))
        s.append("sp_brace_typedef = {} # ignore/add/remove/force".format(self.sp_brace_typedef.currentText()))
        s.append(wrap(self.tr("Add or remove space before the '{' of a 'catch' statement, if the '{' and 'catch' are on the same line, as in 'catch (decl) <here> {'. ")))
        s.append("sp_catch_brace = {} # ignore/add/remove/force".format(self.sp_catch_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before the '{' of a '@catch' statement, if the '{' and '@catch' are on the same line, as in '@catch (decl) <here> {'. ")+self.tr("If set to ignore, sp_catch_brace is used. ")))
        s.append("sp_oc_catch_brace = {} # ignore/add/remove/force".format(self.sp_oc_catch_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and 'catch' if on the same line. ")))
        s.append("sp_brace_catch = {} # ignore/add/remove/force".format(self.sp_brace_catch.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '}' and '@catch' if on the same line. ")+self.tr("If set to ignore, sp_brace_catch is used. ")))
        s.append("sp_oc_brace_catch = {} # ignore/add/remove/force".format(self.sp_oc_brace_catch.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'finally' and '{' if on the same line. ")))
        s.append("sp_finally_brace = {} # ignore/add/remove/force".format(self.sp_finally_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and 'finally' if on the same line. ")))
        s.append("sp_brace_finally = {} # ignore/add/remove/force".format(self.sp_brace_finally.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'try' and '{' if on the same line. ")))
        s.append("sp_try_brace = {} # ignore/add/remove/force".format(self.sp_try_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between get/set and '{' if on the same line. ")))
        s.append("sp_getset_brace = {} # ignore/add/remove/force".format(self.sp_getset_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between a variable and '{' for C++ uniform initialization. ")))
        s.append("sp_word_brace_init_lst = {} # ignore/add/remove/force".format(self.sp_word_brace_init_lst.currentText()))
        s.append(wrap(self.tr("Add or remove space between a variable and '{' for a namespace. ")+self.tr("Default: add. ")))
        s.append("sp_word_brace_ns = {} # ignore/add/remove/force".format(self.sp_word_brace_ns.currentText()))
        s.append(wrap(self.tr("Add or remove space before the '::' operator. ")))
        s.append("sp_before_dc = {} # ignore/add/remove/force".format(self.sp_before_dc.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '::' operator. ")))
        s.append("sp_after_dc = {} # ignore/add/remove/force".format(self.sp_after_dc.currentText()))
        s.append(wrap(self.tr("(D) Add or remove around the D named array initializer ':' operator. ")))
        s.append("sp_d_array_colon = {} # ignore/add/remove/force".format(self.sp_d_array_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '!' (not) unary operator. ")+self.tr("Default: remove. ")))
        s.append("sp_not = {} # ignore/add/remove/force".format(self.sp_not.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '~' (invert) unary operator. ")+self.tr("Default: remove. ")))
        s.append("sp_inv = {} # ignore/add/remove/force".format(self.sp_inv.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '&' (address-of) unary operator. ")+self.tr("This does not affect the spacing after a '&' that is part of a type. ")+self.tr("Default: remove. ")))
        s.append("sp_addr = {} # ignore/add/remove/force".format(self.sp_addr.currentText()))
        s.append(wrap(self.tr("Add or remove space around the '.' or '->' operators. ")+self.tr("Default: remove. ")))
        s.append("sp_member = {} # ignore/add/remove/force".format(self.sp_member.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '*' (dereference) unary operator. ")+self.tr("This does not affect the spacing after a '*' that is part of a type. ")+self.tr("Default: remove. ")))
        s.append("sp_deref = {} # ignore/add/remove/force".format(self.sp_deref.currentText()))
        s.append(wrap(self.tr("Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'. ")+self.tr("Default: remove. ")))
        s.append("sp_sign = {} # ignore/add/remove/force".format(self.sp_sign.currentText()))
        s.append(wrap(self.tr("Add or remove space between '++' and '--' the word to which it is being applied, as in '(--x)' or 'y++;'. ")+self.tr("Default: remove. ")))
        s.append("sp_incdec = {} # ignore/add/remove/force".format(self.sp_incdec.currentText()))
        s.append(wrap(self.tr("Add or remove space before a backslash-newline at the end of a line. ")+self.tr("Default: add. ")))
        s.append("sp_before_nl_cont = {} # ignore/add/remove/force".format(self.sp_before_nl_cont.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'. ")))
        s.append("sp_after_oc_scope = {} # ignore/add/remove/force".format(self.sp_after_oc_scope.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the colon in message specs, ie '-(int) f:(int) x;' vs. ")+self.tr("'-(int) f: (int) x;'. ")))
        s.append("sp_after_oc_colon = {} # ignore/add/remove/force".format(self.sp_after_oc_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before the colon in message specs, ie '-(int) f: (int) x;' vs. ")+self.tr("'-(int) f : (int) x;'. ")))
        s.append("sp_before_oc_colon = {} # ignore/add/remove/force".format(self.sp_before_oc_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the colon in immutable dictionary expression 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'. ")))
        s.append("sp_after_oc_dict_colon = {} # ignore/add/remove/force".format(self.sp_after_oc_dict_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before the colon in immutable dictionary expression 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'. ")))
        s.append("sp_before_oc_dict_colon = {} # ignore/add/remove/force".format(self.sp_before_oc_dict_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the colon in message specs, ie '[object setValue:1];' vs. ")+self.tr("'[object setValue: 1];'. ")))
        s.append("sp_after_send_oc_colon = {} # ignore/add/remove/force".format(self.sp_after_send_oc_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before the colon in message specs, ie '[object setValue:1];' vs. ")+self.tr("'[object setValue :1];'. ")))
        s.append("sp_before_send_oc_colon = {} # ignore/add/remove/force".format(self.sp_before_send_oc_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the (type) in message specs, ie '-(int)f: (int) x;' vs. ")+self.tr("'-(int)f: (int)x;'. ")))
        s.append("sp_after_oc_type = {} # ignore/add/remove/force".format(self.sp_after_oc_type.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the first (type) in message specs, ie '-(int) f:(int)x;' vs. ")+self.tr("'-(int)f:(int)x;'. ")))
        s.append("sp_after_oc_return_type = {} # ignore/add/remove/force".format(self.sp_after_oc_return_type.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '@selector' and '(', ie '@selector(msgName)' vs. ")+self.tr("'@selector (msgName)'. ")+self.tr("Also applies to '@protocol()' constructs. ")))
        s.append("sp_after_oc_at_sel = {} # ignore/add/remove/force".format(self.sp_after_oc_at_sel.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '@selector(x)' and the following word, ie '@selector(foo) a:' vs. ")+self.tr("'@selector(foo)a:'. ")))
        s.append("sp_after_oc_at_sel_parens = {} # ignore/add/remove/force".format(self.sp_after_oc_at_sel_parens.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space inside '@selector' parentheses, ie '@selector(foo)' vs. ")+self.tr("'@selector( foo )'. ")+self.tr("Also applies to '@protocol()' constructs. ")))
        s.append("sp_inside_oc_at_sel_parens = {} # ignore/add/remove/force".format(self.sp_inside_oc_at_sel_parens.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before a block pointer caret, ie '^int (int arg){...}' vs. ")+self.tr("' ^int (int arg){...}'. ")))
        s.append("sp_before_oc_block_caret = {} # ignore/add/remove/force".format(self.sp_before_oc_block_caret.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after a block pointer caret, ie '^int (int arg){...}' vs. ")+self.tr("'^ int (int arg){...}'. ")))
        s.append("sp_after_oc_block_caret = {} # ignore/add/remove/force".format(self.sp_after_oc_block_caret.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between the receiver and selector in a message, as in '[receiver selector ...]'. ")))
        s.append("sp_after_oc_msg_receiver = {} # ignore/add/remove/force".format(self.sp_after_oc_msg_receiver.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after '@property'. ")))
        s.append("sp_after_oc_property = {} # ignore/add/remove/force".format(self.sp_after_oc_property.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '@synchronized' and the open parenthesis, ie '@synchronized(foo)' vs. ")+self.tr("'@synchronized (foo)'. ")))
        s.append("sp_after_oc_synchronized = {} # ignore/add/remove/force".format(self.sp_after_oc_synchronized.currentText()))
        s.append(wrap(self.tr("Add or remove space around the ':' in 'b ? t : f'. ")))
        s.append("sp_cond_colon = {} # ignore/add/remove/force".format(self.sp_cond_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before the ':' in 'b ? t : f'. ")+self.tr("Overrides sp_cond_colon. ")))
        s.append("sp_cond_colon_before = {} # ignore/add/remove/force".format(self.sp_cond_colon_before.currentText()))
        s.append(wrap(self.tr("Add or remove space after the ':' in 'b ? t : f'. ")+self.tr("Overrides sp_cond_colon. ")))
        s.append("sp_cond_colon_after = {} # ignore/add/remove/force".format(self.sp_cond_colon_after.currentText()))
        s.append(wrap(self.tr("Add or remove space around the '?' in 'b ? t : f'. ")))
        s.append("sp_cond_question = {} # ignore/add/remove/force".format(self.sp_cond_question.currentText()))
        s.append(wrap(self.tr("Add or remove space before the '?' in 'b ? t : f'. ")+self.tr("Overrides sp_cond_question. ")))
        s.append("sp_cond_question_before = {} # ignore/add/remove/force".format(self.sp_cond_question_before.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '?' in 'b ? t : f'. ")+self.tr("Overrides sp_cond_question. ")))
        s.append("sp_cond_question_after = {} # ignore/add/remove/force".format(self.sp_cond_question_after.currentText()))
        s.append(wrap(self.tr("In the abbreviated ternary form '(a ?: b)', add or remove space between '?' and ':'. ")+self.tr("Overrides all other sp_cond_* options. ")))
        s.append("sp_cond_ternary_short = {} # ignore/add/remove/force".format(self.sp_cond_ternary_short.currentText()))
        s.append(wrap(self.tr("Fix the spacing between 'case' and the label. ")+self.tr("Only 'ignore' and 'force' make sense here. ")))
        s.append("sp_case_label = {} # ignore/add/remove/force".format(self.sp_case_label.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space around the D '..' operator. ")))
        s.append("sp_range = {} # ignore/add/remove/force".format(self.sp_range.currentText()))
        s.append(wrap(self.tr("Add or remove space after ':' in a Java/C++11 range-based 'for', as in 'for (Type var : expr)'. ")))
        s.append("sp_after_for_colon = {} # ignore/add/remove/force".format(self.sp_after_for_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before ':' in a Java/C++11 range-based 'for', as in 'for (Type var : expr)'. ")))
        s.append("sp_before_for_colon = {} # ignore/add/remove/force".format(self.sp_before_for_colon.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between 'extern' and '(' as in 'extern (C)'. ")))
        s.append("sp_extern_paren = {} # ignore/add/remove/force".format(self.sp_extern_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space after the opening of a C++ comment, ie '// A' vs. ")+self.tr("'//A'. ")))
        s.append("sp_cmt_cpp_start = {} # ignore/add/remove/force".format(self.sp_cmt_cpp_start.currentText()))
        s.append(wrap(self.tr("If true, space is added with sp_cmt_cpp_start will be added after doxygen sequences like '///', '///<', '//!' and '//!<'. ")))
        s.append("sp_cmt_cpp_doxygen = {} # true/false".format(self.sp_cmt_cpp_doxygen.currentText()))
        s.append(wrap(self.tr("If true, space is added with sp_cmt_cpp_start will be added after Qt translator or meta-data comments like '//:', '//=', and '//~'. ")))
        s.append("sp_cmt_cpp_qttr = {} # true/false".format(self.sp_cmt_cpp_qttr.currentText()))
        s.append(wrap(self.tr("Add or remove space between #else or #endif and a trailing comment. ")))
        s.append("sp_endif_cmt = {} # ignore/add/remove/force".format(self.sp_endif_cmt.currentText()))
        s.append(wrap(self.tr("Add or remove space after 'new', 'delete' and 'delete[]'. ")))
        s.append("sp_after_new = {} # ignore/add/remove/force".format(self.sp_after_new.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'new' and '(' in 'new()'. ")))
        s.append("sp_between_new_paren = {} # ignore/add/remove/force".format(self.sp_between_new_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and type in 'new(foo) BAR'. ")))
        s.append("sp_after_newop_paren = {} # ignore/add/remove/force".format(self.sp_after_newop_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space inside parenthesis of the new operator as in 'new(foo) BAR'. ")))
        s.append("sp_inside_newop_paren = {} # ignore/add/remove/force".format(self.sp_inside_newop_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space after the open parenthesis of the new operator, as in 'new(foo) BAR'. ")+self.tr("Overrides sp_inside_newop_paren. ")))
        s.append("sp_inside_newop_paren_open = {} # ignore/add/remove/force".format(self.sp_inside_newop_paren_open.currentText()))
        s.append(wrap(self.tr("Add or remove space before the close parenthesis of the new operator, as in 'new(foo) BAR'. ")+self.tr("Overrides sp_inside_newop_paren. ")))
        s.append("sp_inside_newop_paren_close = {} # ignore/add/remove/force".format(self.sp_inside_newop_paren_close.currentText()))
        s.append(wrap(self.tr("Add or remove space before a trailing or embedded comment. ")))
        s.append("sp_before_tr_emb_cmt = {} # ignore/add/remove/force".format(self.sp_before_tr_emb_cmt.currentText()))
        s.append(wrap(self.tr("Number of spaces before a trailing or embedded comment. ")))
        s.append("sp_num_before_tr_emb_cmt = {} # unsigned number".format(self.sp_num_before_tr_emb_cmt.value()))
        s.append(wrap(self.tr("(Java) Add or remove space between an annotation and the open parenthesis. ")))
        s.append("sp_annotation_paren = {} # ignore/add/remove/force".format(self.sp_annotation_paren.currentText()))
        s.append(wrap(self.tr("If true, vbrace tokens are dropped to the previous token and skipped. ")))
        s.append("sp_skip_vbrace_tokens = {} # true/false".format(self.sp_skip_vbrace_tokens.currentText()))
        s.append(wrap(self.tr("Add or remove space after 'noexcept'. ")))
        s.append("sp_after_noexcept = {} # ignore/add/remove/force".format(self.sp_after_noexcept.currentText()))
        s.append(wrap(self.tr("Add or remove space after '_'. ")))
        s.append("sp_vala_after_translation = {} # ignore/add/remove/force".format(self.sp_vala_after_translation.currentText()))
        s.append(wrap(self.tr("If true, a <TAB> is inserted after #define. ")))
        s.append("force_tab_after_define = {} # true/false".format(self.force_tab_after_define.currentText()))
        s.append(wrap(self.tr("The number of columns to indent per level. ")+self.tr("Usually 2, 3, 4, or 8. ")+self.tr("Default: 8. ")))
        s.append("indent_columns = {} # unsigned number".format(self.indent_columns.value()))
        s.append(wrap(self.tr("The continuation indent. ")+self.tr("If non-zero, this overrides the indent of '(', '[' and '=' continuation indents. ")+self.tr("Negative values are OK; negative value is absolute and not increased for each '(' or '[' level. ")+self.tr("For FreeBSD, this is set to 4. ")))
        s.append("indent_continue = {} # number".format(self.indent_continue.value()))
        s.append(wrap(self.tr("The continuation indent, only for class header line(s). ")+self.tr("If non-zero, this overrides the indent of 'class' continuation indents. ")))
        s.append("indent_continue_class_head = {} # unsigned number".format(self.indent_continue_class_head.value()))
        s.append(wrap(self.tr("Whether to indent empty lines (ie lines which contain only spaces before the newline character). ")))
        s.append("indent_single_newlines = {} # true/false".format(self.indent_single_newlines.currentText()))
        s.append(wrap(self.tr("The continuation indent for func_*_param if they are true. ")+self.tr("If non-zero, this overrides the indent. ")))
        s.append("indent_param = {} # unsigned number".format(self.indent_param.value()))
        s.append(wrap(self.tr("How to use tabs when indenting code. ")+self.tr("0: Spaces only 1: Indent with tabs to brace level, align with spaces (default) 2: Indent and align with tabs, using spaces when not on a tabstop. ")+self.tr("Default: 1. ")))
        s.append("indent_with_tabs = {} # unsigned number".format(self.indent_with_tabs.value()))
        s.append(wrap(self.tr("Whether to indent comments that are not at a brace level with tabs on a tabstop. ")+self.tr("Requires indent_with_tabs=2. ")+self.tr("If false, will use spaces. ")))
        s.append("indent_cmt_with_tabs = {} # true/false".format(self.indent_cmt_with_tabs.currentText()))
        s.append(wrap(self.tr("Whether to indent strings broken by '\' so that they line up. ")))
        s.append("indent_align_string = {} # true/false".format(self.indent_align_string.currentText()))
        s.append(wrap(self.tr("The number of spaces to indent multi-line XML strings. ")+self.tr("Requires indent_align_string=true. ")))
        s.append("indent_xml_string = {} # unsigned number".format(self.indent_xml_string.value()))
        s.append(wrap(self.tr("Spaces to indent '{' from level. ")))
        s.append("indent_brace = {} # unsigned number".format(self.indent_brace.value()))
        s.append(wrap(self.tr("Whether braces are indented to the body level. ")))
        s.append("indent_braces = {} # true/false".format(self.indent_braces.currentText()))
        s.append(wrap(self.tr("Whether to disable indenting function braces if indent_braces=true. ")))
        s.append("indent_braces_no_func = {} # true/false".format(self.indent_braces_no_func.currentText()))
        s.append(wrap(self.tr("Whether to disable indenting class braces if indent_braces=true. ")))
        s.append("indent_braces_no_class = {} # true/false".format(self.indent_braces_no_class.currentText()))
        s.append(wrap(self.tr("Whether to disable indenting struct braces if indent_braces=true. ")))
        s.append("indent_braces_no_struct = {} # true/false".format(self.indent_braces_no_struct.currentText()))
        s.append(wrap(self.tr("Whether to indent based on the size of the brace parent, ie 'if' => 3 spaces, 'for' => 4 spaces, etc. ")))
        s.append("indent_brace_parent = {} # true/false".format(self.indent_brace_parent.currentText()))
        s.append(wrap(self.tr("Whether to indent based on the open parenthesis instead of the open brace in '({\n'. ")))
        s.append("indent_paren_open_brace = {} # true/false".format(self.indent_paren_open_brace.currentText()))
        s.append(wrap(self.tr("(C#) Whether to indent the brace of a C# delegate by another level. ")))
        s.append("indent_cs_delegate_brace = {} # true/false".format(self.indent_cs_delegate_brace.currentText()))
        s.append(wrap(self.tr("(C#) Whether to indent a C# delegate (to handle delegates with no brace) by another level. ")))
        s.append("indent_cs_delegate_body = {} # true/false".format(self.indent_cs_delegate_body.currentText()))
        s.append(wrap(self.tr("Whether to indent the body of a 'namespace'. ")))
        s.append("indent_namespace = {} # true/false".format(self.indent_namespace.currentText()))
        s.append(wrap(self.tr("Whether to indent only the first namespace, and not any nested namespaces. ")+self.tr("Requires indent_namespace=true. ")))
        s.append("indent_namespace_single_indent = {} # true/false".format(self.indent_namespace_single_indent.currentText()))
        s.append(wrap(self.tr("The number of spaces to indent a namespace block. ")+self.tr("If set to zero, use the value indent_columns. ")))
        s.append("indent_namespace_level = {} # unsigned number".format(self.indent_namespace_level.value()))
        s.append(wrap(self.tr("If the body of the namespace is longer than this number, it won't be indented. ")+self.tr("Requires indent_namespace=true. ")+self.tr("0 means no limit. ")))
        s.append("indent_namespace_limit = {} # unsigned number".format(self.indent_namespace_limit.value()))
        s.append(wrap(self.tr("Whether the 'extern \"C\"' body is indented. ")))
        s.append("indent_extern = {} # true/false".format(self.indent_extern.currentText()))
        s.append(wrap(self.tr("Whether the 'class' body is indented. ")))
        s.append("indent_class = {} # true/false".format(self.indent_class.currentText()))
        s.append(wrap(self.tr("Whether to indent the stuff after a leading base class colon. ")))
        s.append("indent_class_colon = {} # true/false".format(self.indent_class_colon.currentText()))
        s.append(wrap(self.tr("Whether to indent based on a class colon instead of the stuff after the colon. ")+self.tr("Requires indent_class_colon=true. ")))
        s.append("indent_class_on_colon = {} # true/false".format(self.indent_class_on_colon.currentText()))
        s.append(wrap(self.tr("Whether to indent the stuff after a leading class initializer colon. ")))
        s.append("indent_constr_colon = {} # true/false".format(self.indent_constr_colon.currentText()))
        s.append(wrap(self.tr("Virtual indent from the ':' for member initializers. ")+self.tr("Default: 2. ")))
        s.append("indent_ctor_init_leading = {} # unsigned number".format(self.indent_ctor_init_leading.value()))
        s.append(wrap(self.tr("Additional indent for constructor initializer list. ")+self.tr("Negative values decrease indent down to the first column. ")))
        s.append("indent_ctor_init = {} # number".format(self.indent_ctor_init.value()))
        s.append(wrap(self.tr("Whether to indent 'if' following 'else' as a new block under the 'else'. ")+self.tr("If false, 'else\nif' is treated as 'else if' for indenting purposes. ")))
        s.append("indent_else_if = {} # true/false".format(self.indent_else_if.currentText()))
        s.append(wrap(self.tr("Amount to indent variable declarations after a open brace. ")+self.tr("<0: Relative >=0: Absolute. ")))
        s.append("indent_var_def_blk = {} # number".format(self.indent_var_def_blk.value()))
        s.append(wrap(self.tr("Whether to indent continued variable declarations instead of aligning. ")))
        s.append("indent_var_def_cont = {} # true/false".format(self.indent_var_def_cont.currentText()))
        s.append(wrap(self.tr("Whether to indent continued shift expressions ('<<' and '>>') instead of aligning. ")+self.tr("Set align_left_shift=false when enabling this. ")))
        s.append("indent_shift = {} # true/false".format(self.indent_shift.currentText()))
        s.append(wrap(self.tr("Whether to force indentation of function definitions to start in column 1. ")))
        s.append("indent_func_def_force_col1 = {} # true/false".format(self.indent_func_def_force_col1.currentText()))
        s.append(wrap(self.tr("Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. ")))
        s.append("indent_func_call_param = {} # true/false".format(self.indent_func_call_param.currentText()))
        s.append(wrap(self.tr("Whether to indent continued function definition parameters one indent level, rather than aligning parameters under the open parenthesis. ")))
        s.append("indent_func_def_param = {} # true/false".format(self.indent_func_def_param.currentText()))
        s.append(wrap(self.tr("for function definitions, only if indent_func_def_param is false Allows to align params when appropriate and indent them when not behave as if it was true if paren position is more than this value if paren position is more than the option value. ")))
        s.append("indent_func_def_param_paren_pos_threshold = {} # unsigned number".format(self.indent_func_def_param_paren_pos_threshold.value()))
        s.append(wrap(self.tr("Whether to indent continued function call prototype one indent level, rather than aligning parameters under the open parenthesis. ")))
        s.append("indent_func_proto_param = {} # true/false".format(self.indent_func_proto_param.currentText()))
        s.append(wrap(self.tr("Whether to indent continued function call declaration one indent level, rather than aligning parameters under the open parenthesis. ")))
        s.append("indent_func_class_param = {} # true/false".format(self.indent_func_class_param.currentText()))
        s.append(wrap(self.tr("Whether to indent continued class variable constructors one indent level, rather than aligning parameters under the open parenthesis. ")))
        s.append("indent_func_ctor_var_param = {} # true/false".format(self.indent_func_ctor_var_param.currentText()))
        s.append(wrap(self.tr("Whether to indent continued template parameter list one indent level, rather than aligning parameters under the open parenthesis. ")))
        s.append("indent_template_param = {} # true/false".format(self.indent_template_param.currentText()))
        s.append(wrap(self.tr("Double the indent for indent_func_xxx_param options. ")+self.tr("Use both values of the options indent_columns and indent_param. ")))
        s.append("indent_func_param_double = {} # true/false".format(self.indent_func_param_double.currentText()))
        s.append(wrap(self.tr("Indentation column for standalone 'const' qualifier on a function prototype. ")))
        s.append("indent_func_const = {} # unsigned number".format(self.indent_func_const.value()))
        s.append(wrap(self.tr("Indentation column for standalone 'throw' qualifier on a function prototype. ")))
        s.append("indent_func_throw = {} # unsigned number".format(self.indent_func_throw.value()))
        s.append(wrap(self.tr("How to indent within a macro followed by a brace on the same line This allows reducing the indent in macros that have (for example) `do { ... ")+self.tr("} while (0)` blocks bracketing them. ")+self.tr("true:  add an indent for the brace on the same line as the macro false: do not add an indent for the brace on the same line as the macro. ")+self.tr("Default: true. ")))
        s.append("indent_macro_brace = {} # true/false".format(self.indent_macro_brace.currentText()))
        s.append(wrap(self.tr("The number of spaces to indent a continued '->' or '.'. ")+self.tr("Usually set to 0, 1, or indent_columns. ")))
        s.append("indent_member = {} # unsigned number".format(self.indent_member.value()))
        s.append(wrap(self.tr("Whether lines broken at '.' or '->' should be indented by a single indent. ")+self.tr("The indent_member option will not be effective if this is set to true. ")))
        s.append("indent_member_single = {} # true/false".format(self.indent_member_single.currentText()))
        s.append(wrap(self.tr("Spaces to indent single line ('//') comments on lines before code. ")))
        s.append("indent_sing_line_comments = {} # unsigned number".format(self.indent_sing_line_comments.value()))
        s.append(wrap(self.tr("When opening a paren for a control statement (if, for, while, etc), increase the indent level by this value. ")+self.tr("Negative values decrease the indent level. ")))
        s.append("indent_sparen_extra = {} # number".format(self.indent_sparen_extra.value()))
        s.append(wrap(self.tr("Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column. ")))
        s.append("indent_relative_single_line_comments = {} # true/false".format(self.indent_relative_single_line_comments.currentText()))
        s.append(wrap(self.tr("Spaces to indent 'case' from 'switch'. ")+self.tr("Usually 0 or indent_columns. ")))
        s.append("indent_switch_case = {} # unsigned number".format(self.indent_switch_case.value()))
        s.append(wrap(self.tr("indent 'break' with 'case' from 'switch'. ")))
        s.append("indent_switch_break_with_case = {} # true/false".format(self.indent_switch_break_with_case.currentText()))
        s.append(wrap(self.tr("Whether to indent preprocessor statements inside of switch statements. ")+self.tr("Default: true. ")))
        s.append("indent_switch_pp = {} # true/false".format(self.indent_switch_pp.currentText()))
        s.append(wrap(self.tr("Spaces to shift the 'case' line, without affecting any other lines. ")+self.tr("Usually 0. ")))
        s.append("indent_case_shift = {} # unsigned number".format(self.indent_case_shift.value()))
        s.append(wrap(self.tr("Spaces to indent '{' from 'case'. ")+self.tr("By default, the brace will appear under the 'c' in case. ")+self.tr("Usually set to 0 or indent_columns. ")+self.tr("Negative values are OK. ")))
        s.append("indent_case_brace = {} # number".format(self.indent_case_brace.value()))
        s.append(wrap(self.tr("Whether to indent comments found in first column. ")))
        s.append("indent_col1_comment = {} # true/false".format(self.indent_col1_comment.currentText()))
        s.append(wrap(self.tr("Whether to indent multi string literal in first column. ")))
        s.append("indent_col1_multi_string_literal = {} # true/false".format(self.indent_col1_multi_string_literal.currentText()))
        s.append(wrap(self.tr("How to indent goto labels. ")+self.tr(">0: Absolute column where 1 is the leftmost column <=0: Subtract from brace indent. ")+self.tr("Default: 1. ")))
        s.append("indent_label = {} # number".format(self.indent_label.value()))
        s.append(wrap(self.tr("How to indent access specifiers that are followed by a colon. ")+self.tr(">0: Absolute column where 1 is the leftmost column <=0: Subtract from brace indent. ")+self.tr("Default: 1. ")))
        s.append("indent_access_spec = {} # number".format(self.indent_access_spec.value()))
        s.append(wrap(self.tr("Whether to indent the code after an access specifier by one level. ")+self.tr("If true, this option forces 'indent_access_spec=0'. ")))
        s.append("indent_access_spec_body = {} # true/false".format(self.indent_access_spec_body.currentText()))
        s.append(wrap(self.tr("If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis (not recommended). ")))
        s.append("indent_paren_nl = {} # true/false".format(self.indent_paren_nl.currentText()))
        s.append(wrap(self.tr("How to indent a close parenthesis after a newline. ")+self.tr("0: Indent to body level (default) 1: Align under the open parenthesis 2: Indent to the brace level. ")))
        s.append("indent_paren_close = {} # unsigned number".format(self.indent_paren_close.value()))
        s.append(wrap(self.tr("Whether to indent the open parenthesis of a function definition, if the parenthesis is on its own line. ")))
        s.append("indent_paren_after_func_def = {} # true/false".format(self.indent_paren_after_func_def.currentText()))
        s.append(wrap(self.tr("Whether to indent the open parenthesis of a function declaration, if the parenthesis is on its own line. ")))
        s.append("indent_paren_after_func_decl = {} # true/false".format(self.indent_paren_after_func_decl.currentText()))
        s.append(wrap(self.tr("Whether to indent the open parenthesis of a function call, if the parenthesis is on its own line. ")))
        s.append("indent_paren_after_func_call = {} # true/false".format(self.indent_paren_after_func_call.currentText()))
        s.append(wrap(self.tr("Whether to indent a comma when inside a parenthesis. ")+self.tr("If true, aligns under the open parenthesis. ")))
        s.append("indent_comma_paren = {} # true/false".format(self.indent_comma_paren.currentText()))
        s.append(wrap(self.tr("Whether to indent a Boolean operator when inside a parenthesis. ")+self.tr("If true, aligns under the open parenthesis. ")))
        s.append("indent_bool_paren = {} # true/false".format(self.indent_bool_paren.currentText()))
        s.append(wrap(self.tr("Whether to indent a semicolon when inside a for parenthesis. ")+self.tr("If true, aligns under the open for parenthesis. ")))
        s.append("indent_semicolon_for_paren = {} # true/false".format(self.indent_semicolon_for_paren.currentText()))
        s.append(wrap(self.tr("Whether to align the first expression to following ones if indent_bool_paren=true. ")))
        s.append("indent_first_bool_expr = {} # true/false".format(self.indent_first_bool_expr.currentText()))
        s.append(wrap(self.tr("Whether to align the first expression to following ones if indent_semicolon_for_paren=true. ")))
        s.append("indent_first_for_expr = {} # true/false".format(self.indent_first_for_expr.currentText()))
        s.append(wrap(self.tr("If an open square is followed by a newline, whether to indent the next line so that it lines up after the open square (not recommended). ")))
        s.append("indent_square_nl = {} # true/false".format(self.indent_square_nl.currentText()))
        s.append(wrap(self.tr("(ESQL/C) Whether to preserve the relative indent of 'EXEC SQL' bodies. ")))
        s.append("indent_preserve_sql = {} # true/false".format(self.indent_preserve_sql.currentText()))
        s.append(wrap(self.tr("Whether to align continued statements at the '='. ")+self.tr("If false or if the '=' is followed by a newline, the next line is indent one tab. ")+self.tr("Default: true. ")))
        s.append("indent_align_assign = {} # true/false".format(self.indent_align_assign.currentText()))
        s.append(wrap(self.tr("If true, the indentation of the chunks after a '=' sequence will be set at LHS token indentation column before '='. ")))
        s.append("indent_off_after_assign = {} # true/false".format(self.indent_off_after_assign.currentText()))
        s.append(wrap(self.tr("Whether to align continued statements at the '('. ")+self.tr("If false or the '(' is followed by a newline, the next line indent is one tab. ")+self.tr("Default: true. ")))
        s.append("indent_align_paren = {} # true/false".format(self.indent_align_paren.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent Objective-C code inside message selectors. ")))
        s.append("indent_oc_inside_msg_sel = {} # true/false".format(self.indent_oc_inside_msg_sel.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent Objective-C blocks at brace level instead of usual rules. ")))
        s.append("indent_oc_block = {} # true/false".format(self.indent_oc_block.currentText()))
        s.append(wrap(self.tr("(OC) Indent for Objective-C blocks in a message relative to the parameter name. ")+self.tr("=0: Use indent_oc_block rules >0: Use specified number of spaces to indent. ")))
        s.append("indent_oc_block_msg = {} # unsigned number".format(self.indent_oc_block_msg.value()))
        s.append(wrap(self.tr("(OC) Minimum indent for subsequent parameters. ")))
        s.append("indent_oc_msg_colon = {} # unsigned number".format(self.indent_oc_msg_colon.value()))
        s.append(wrap(self.tr("(OC) Whether to prioritize aligning with initial colon (and stripping spaces from lines, if necessary). ")+self.tr("Default: true. ")))
        s.append("indent_oc_msg_prioritize_first_colon = {} # true/false".format(self.indent_oc_msg_prioritize_first_colon.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks the way that Xcode does by default (from the keyword if the parameter is on its own line; otherwise, from the previous indentation level). ")+self.tr("Requires indent_oc_block_msg=true. ")))
        s.append("indent_oc_block_msg_xcode_style = {} # true/false".format(self.indent_oc_block_msg_xcode_style.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks from where the brace is, relative to a message keyword. ")+self.tr("Requires indent_oc_block_msg=true. ")))
        s.append("indent_oc_block_msg_from_keyword = {} # true/false".format(self.indent_oc_block_msg_from_keyword.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks from where the brace is, relative to a message colon. ")+self.tr("Requires indent_oc_block_msg=true. ")))
        s.append("indent_oc_block_msg_from_colon = {} # true/false".format(self.indent_oc_block_msg_from_colon.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks from where the block caret is. ")+self.tr("Requires indent_oc_block_msg=true. ")))
        s.append("indent_oc_block_msg_from_caret = {} # true/false".format(self.indent_oc_block_msg_from_caret.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks from where the brace caret is. ")+self.tr("Requires indent_oc_block_msg=true. ")))
        s.append("indent_oc_block_msg_from_brace = {} # true/false".format(self.indent_oc_block_msg_from_brace.currentText()))
        s.append(wrap(self.tr("When indenting after virtual brace open and newline add further spaces to reach this minimum indent. ")))
        s.append("indent_min_vbrace_open = {} # unsigned number".format(self.indent_min_vbrace_open.value()))
        s.append(wrap(self.tr("Whether to add further spaces after regular indent to reach next tabstop when identing after virtual brace open and newline. ")))
        s.append("indent_vbrace_open_on_tabstop = {} # true/false".format(self.indent_vbrace_open_on_tabstop.currentText()))
        s.append(wrap(self.tr("How to indent after a brace followed by another token (not a newline). ")+self.tr("true:  indent all contained lines to match the token false: indent all contained lines to match the brace. ")+self.tr("Default: true. ")))
        s.append("indent_token_after_brace = {} # true/false".format(self.indent_token_after_brace.currentText()))
        s.append(wrap(self.tr("Whether to indent the body of a C++11 lambda. ")))
        s.append("indent_cpp_lambda_body = {} # true/false".format(self.indent_cpp_lambda_body.currentText()))
        s.append(wrap(self.tr("How to indent compound literals that are being returned. ")+self.tr("true: add both the indent from return & the compound literal open brace (ie:       2 indent levels) false: only indent 1 level, don't add the indent for the open brace, only add        the indent for the return. ")+self.tr("Default: true. ")))
        s.append("indent_compound_literal_return = {} # true/false".format(self.indent_compound_literal_return.currentText()))
        s.append(wrap(self.tr("(C#) Whether to indent a 'using' block if no braces are used. ")+self.tr("Default: true. ")))
        s.append("indent_using_block = {} # true/false".format(self.indent_using_block.currentText()))
        s.append(wrap(self.tr("How to indent the continuation of ternary operator. ")+self.tr("0: Off (default) 1: When the `if_false` is a continuation, indent it under `if_false` 2: When the `:` is a continuation, indent it under `?`. ")))
        s.append("indent_ternary_operator = {} # unsigned number".format(self.indent_ternary_operator.value()))
        s.append(wrap(self.tr("Whether to indent the statments inside ternary operator. ")))
        s.append("indent_inside_ternary_operator = {} # true/false".format(self.indent_inside_ternary_operator.currentText()))
        s.append(wrap(self.tr("If true, the indentation of the chunks after a `return` sequence will be set at return indentation column. ")))
        s.append("indent_off_after_return = {} # true/false".format(self.indent_off_after_return.currentText()))
        s.append(wrap(self.tr("If true, the indentation of the chunks after a `return new` sequence will be set at return indentation column. ")))
        s.append("indent_off_after_return_new = {} # true/false".format(self.indent_off_after_return_new.currentText()))
        s.append(wrap(self.tr("If true, the tokens after return are indented with regular single indentation. ")+self.tr("By default (false) the indentation is after the return token. ")))
        s.append("indent_single_after_return = {} # true/false".format(self.indent_single_after_return.currentText()))
        s.append(wrap(self.tr("Whether to ignore indent and alignment for 'asm' blocks (ie assume they have their own indentation). ")))
        s.append("indent_ignore_asm_block = {} # true/false".format(self.indent_ignore_asm_block.currentText()))
        s.append(wrap(self.tr("Whether to collapse empty blocks between '{' and '}'. ")))
        s.append("nl_collapse_empty_body = {} # true/false".format(self.nl_collapse_empty_body.currentText()))
        s.append(wrap(self.tr("Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'. ")))
        s.append("nl_assign_leave_one_liners = {} # true/false".format(self.nl_assign_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line braced statements inside a 'class xx { }' body. ")))
        s.append("nl_class_leave_one_liners = {} # true/false".format(self.nl_class_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line enums, as in 'enum foo { BAR = 15 };'. ")))
        s.append("nl_enum_leave_one_liners = {} # true/false".format(self.nl_enum_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line get or set functions. ")))
        s.append("nl_getset_leave_one_liners = {} # true/false".format(self.nl_getset_leave_one_liners.currentText()))
        s.append(wrap(self.tr("(C#) Don't split one-line property get or set functions. ")))
        s.append("nl_cs_property_leave_one_liners = {} # true/false".format(self.nl_cs_property_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line function definitions, as in 'int foo() { return 0; }'. ")+self.tr("might modify nl_func_type_name. ")))
        s.append("nl_func_leave_one_liners = {} # true/false".format(self.nl_func_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line C++11 lambdas, as in '[]() { return 0; }'. ")))
        s.append("nl_cpp_lambda_leave_one_liners = {} # true/false".format(self.nl_cpp_lambda_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line if/else statements, as in 'if(...) b++;'. ")))
        s.append("nl_if_leave_one_liners = {} # true/false".format(self.nl_if_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line while statements, as in 'while(...) b++;'. ")))
        s.append("nl_while_leave_one_liners = {} # true/false".format(self.nl_while_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line for statements, as in 'for(...) b++;'. ")))
        s.append("nl_for_leave_one_liners = {} # true/false".format(self.nl_for_leave_one_liners.currentText()))
        s.append(wrap(self.tr("(OC) Don't split one-line Objective-C messages. ")))
        s.append("nl_oc_msg_leave_one_liner = {} # true/false".format(self.nl_oc_msg_leave_one_liner.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between method declaration and '{'. ")))
        s.append("nl_oc_mdef_brace = {} # ignore/add/remove/force".format(self.nl_oc_mdef_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between Objective-C block signature and '{'. ")))
        s.append("nl_oc_block_brace = {} # ignore/add/remove/force".format(self.nl_oc_block_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove blank line before '@interface' statement. ")))
        s.append("nl_oc_before_interface = {} # ignore/add/remove/force".format(self.nl_oc_before_interface.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove blank line before '@implementation' statement. ")))
        s.append("nl_oc_before_implementation = {} # ignore/add/remove/force".format(self.nl_oc_before_implementation.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove blank line before '@end' statement. ")))
        s.append("nl_oc_before_end = {} # ignore/add/remove/force".format(self.nl_oc_before_end.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between '@interface' and '{'. ")))
        s.append("nl_oc_interface_brace = {} # ignore/add/remove/force".format(self.nl_oc_interface_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between '@implementation' and '{'. ")))
        s.append("nl_oc_implementation_brace = {} # ignore/add/remove/force".format(self.nl_oc_implementation_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newlines at the start of the file. ")))
        s.append("nl_start_of_file = {} # ignore/add/remove/force".format(self.nl_start_of_file.currentText()))
        s.append(wrap(self.tr("The minimum number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force'). ")))
        s.append("nl_start_of_file_min = {} # unsigned number".format(self.nl_start_of_file_min.value()))
        s.append(wrap(self.tr("Add or remove newline at the end of the file. ")))
        s.append("nl_end_of_file = {} # ignore/add/remove/force".format(self.nl_end_of_file.currentText()))
        s.append(wrap(self.tr("The minimum number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force'). ")))
        s.append("nl_end_of_file_min = {} # unsigned number".format(self.nl_end_of_file_min.value()))
        s.append(wrap(self.tr("Add or remove newline between '=' and '{'. ")))
        s.append("nl_assign_brace = {} # ignore/add/remove/force".format(self.nl_assign_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline between '=' and '['. ")))
        s.append("nl_assign_square = {} # ignore/add/remove/force".format(self.nl_assign_square.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '[]' and '{'. ")))
        s.append("nl_tsquare_brace = {} # ignore/add/remove/force".format(self.nl_tsquare_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline after '= ['. ")+self.tr("Will also affect the newline before the ']'. ")))
        s.append("nl_after_square_assign = {} # ignore/add/remove/force".format(self.nl_after_square_assign.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a function call's ')' and '{', as in 'list_for_each(item, &list) { }'. ")))
        s.append("nl_fcall_brace = {} # ignore/add/remove/force".format(self.nl_fcall_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum' and '{'. ")))
        s.append("nl_enum_brace = {} # ignore/add/remove/force".format(self.nl_enum_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum' and 'class'. ")))
        s.append("nl_enum_class = {} # ignore/add/remove/force".format(self.nl_enum_class.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum class' and the identifier. ")))
        s.append("nl_enum_class_identifier = {} # ignore/add/remove/force".format(self.nl_enum_class_identifier.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum class' type and ':'. ")))
        s.append("nl_enum_identifier_colon = {} # ignore/add/remove/force".format(self.nl_enum_identifier_colon.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum class identifier :' and type. ")))
        s.append("nl_enum_colon_type = {} # ignore/add/remove/force".format(self.nl_enum_colon_type.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'struct and '{'. ")))
        s.append("nl_struct_brace = {} # ignore/add/remove/force".format(self.nl_struct_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'union' and '{'. ")))
        s.append("nl_union_brace = {} # ignore/add/remove/force".format(self.nl_union_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'if' and '{'. ")))
        s.append("nl_if_brace = {} # ignore/add/remove/force".format(self.nl_if_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and 'else'. ")))
        s.append("nl_brace_else = {} # ignore/add/remove/force".format(self.nl_brace_else.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'else if' and '{'. ")+self.tr("If set to ignore, nl_if_brace is used instead. ")))
        s.append("nl_elseif_brace = {} # ignore/add/remove/force".format(self.nl_elseif_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'else' and '{'. ")))
        s.append("nl_else_brace = {} # ignore/add/remove/force".format(self.nl_else_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'else' and 'if'. ")))
        s.append("nl_else_if = {} # ignore/add/remove/force".format(self.nl_else_if.currentText()))
        s.append(wrap(self.tr("Add or remove newline before '{' opening brace. ")))
        s.append("nl_before_opening_brace_func_class_def = {} # ignore/add/remove/force".format(self.nl_before_opening_brace_func_class_def.currentText()))
        s.append(wrap(self.tr("Add or remove newline before 'if'/'else if' closing parenthesis. ")))
        s.append("nl_before_if_closing_paren = {} # ignore/add/remove/force".format(self.nl_before_if_closing_paren.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and 'finally'. ")))
        s.append("nl_brace_finally = {} # ignore/add/remove/force".format(self.nl_brace_finally.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'finally' and '{'. ")))
        s.append("nl_finally_brace = {} # ignore/add/remove/force".format(self.nl_finally_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'try' and '{'. ")))
        s.append("nl_try_brace = {} # ignore/add/remove/force".format(self.nl_try_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between get/set and '{'. ")))
        s.append("nl_getset_brace = {} # ignore/add/remove/force".format(self.nl_getset_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'for' and '{'. ")))
        s.append("nl_for_brace = {} # ignore/add/remove/force".format(self.nl_for_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline before the '{' of a 'catch' statement, as in 'catch (decl) <here> {'. ")))
        s.append("nl_catch_brace = {} # ignore/add/remove/force".format(self.nl_catch_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline before the '{' of a '@catch' statement, as in '@catch (decl) <here> {'. ")+self.tr("If set to ignore, nl_catch_brace is used. ")))
        s.append("nl_oc_catch_brace = {} # ignore/add/remove/force".format(self.nl_oc_catch_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and 'catch'. ")))
        s.append("nl_brace_catch = {} # ignore/add/remove/force".format(self.nl_brace_catch.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between '}' and '@catch'. ")+self.tr("If set to ignore, nl_brace_catch is used. ")))
        s.append("nl_oc_brace_catch = {} # ignore/add/remove/force".format(self.nl_oc_brace_catch.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and ']'. ")))
        s.append("nl_brace_square = {} # ignore/add/remove/force".format(self.nl_brace_square.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and ')' in a function invocation. ")))
        s.append("nl_brace_fparen = {} # ignore/add/remove/force".format(self.nl_brace_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'while' and '{'. ")))
        s.append("nl_while_brace = {} # ignore/add/remove/force".format(self.nl_while_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline between 'scope (x)' and '{'. ")))
        s.append("nl_scope_brace = {} # ignore/add/remove/force".format(self.nl_scope_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline between 'unittest' and '{'. ")))
        s.append("nl_unittest_brace = {} # ignore/add/remove/force".format(self.nl_unittest_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline between 'version (x)' and '{'. ")))
        s.append("nl_version_brace = {} # ignore/add/remove/force".format(self.nl_version_brace.currentText()))
        s.append(wrap(self.tr("(C#) Add or remove newline between 'using' and '{'. ")))
        s.append("nl_using_brace = {} # ignore/add/remove/force".format(self.nl_using_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between two open or close braces. ")+self.tr("Due to general newline/brace handling, REMOVE may not work. ")))
        s.append("nl_brace_brace = {} # ignore/add/remove/force".format(self.nl_brace_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'do' and '{'. ")))
        s.append("nl_do_brace = {} # ignore/add/remove/force".format(self.nl_do_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and 'while' of 'do' statement. ")))
        s.append("nl_brace_while = {} # ignore/add/remove/force".format(self.nl_brace_while.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'switch' and '{'. ")))
        s.append("nl_switch_brace = {} # ignore/add/remove/force".format(self.nl_switch_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'synchronized' and '{'. ")))
        s.append("nl_synchronized_brace = {} # ignore/add/remove/force".format(self.nl_synchronized_brace.currentText()))
        s.append(wrap(self.tr("Add a newline between ')' and '{' if the ')' is on a different line than the if/for/etc. ")+self.tr("Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch and nl_catch_brace. ")))
        s.append("nl_multi_line_cond = {} # true/false".format(self.nl_multi_line_cond.currentText()))
        s.append(wrap(self.tr("Add a newline after '(' if an if/for/while/switch condition spans multiple lines. ")))
        s.append("nl_multi_line_sparen_open = {} # ignore/add/remove/force".format(self.nl_multi_line_sparen_open.currentText()))
        s.append(wrap(self.tr("Add a newline before ')' if an if/for/while/switch condition spans multiple lines. ")+self.tr("Overrides nl_before_if_closing_paren if both are specified. ")))
        s.append("nl_multi_line_sparen_close = {} # ignore/add/remove/force".format(self.nl_multi_line_sparen_close.currentText()))
        s.append(wrap(self.tr("Force a newline in a define after the macro name for multi-line defines. ")))
        s.append("nl_multi_line_define = {} # true/false".format(self.nl_multi_line_define.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before 'case', and a blank line before a 'case' statement that follows a ';' or '}'. ")))
        s.append("nl_before_case = {} # true/false".format(self.nl_before_case.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after a 'case' statement. ")))
        s.append("nl_after_case = {} # true/false".format(self.nl_after_case.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a case ':' and '{'. ")+self.tr("Overrides nl_after_case. ")))
        s.append("nl_case_colon_brace = {} # ignore/add/remove/force".format(self.nl_case_colon_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between ')' and 'throw'. ")))
        s.append("nl_before_throw = {} # ignore/add/remove/force".format(self.nl_before_throw.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'namespace' and '{'. ")))
        s.append("nl_namespace_brace = {} # ignore/add/remove/force".format(self.nl_namespace_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template class. ")))
        s.append("nl_template_class = {} # ignore/add/remove/force".format(self.nl_template_class.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template class declaration. ")+self.tr("Overrides nl_template_class. ")))
        s.append("nl_template_class_decl = {} # ignore/add/remove/force".format(self.nl_template_class_decl.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<>' of a specialized class declaration. ")+self.tr("Overrides nl_template_class_decl. ")))
        s.append("nl_template_class_decl_special = {} # ignore/add/remove/force".format(self.nl_template_class_decl_special.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template class definition. ")+self.tr("Overrides nl_template_class. ")))
        s.append("nl_template_class_def = {} # ignore/add/remove/force".format(self.nl_template_class_def.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<>' of a specialized class definition. ")+self.tr("Overrides nl_template_class_def. ")))
        s.append("nl_template_class_def_special = {} # ignore/add/remove/force".format(self.nl_template_class_def_special.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template function. ")))
        s.append("nl_template_func = {} # ignore/add/remove/force".format(self.nl_template_func.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template function declaration. ")+self.tr("Overrides nl_template_func. ")))
        s.append("nl_template_func_decl = {} # ignore/add/remove/force".format(self.nl_template_func_decl.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<>' of a specialized function declaration. ")+self.tr("Overrides nl_template_func_decl. ")))
        s.append("nl_template_func_decl_special = {} # ignore/add/remove/force".format(self.nl_template_func_decl_special.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template function definition. ")+self.tr("Overrides nl_template_func. ")))
        s.append("nl_template_func_def = {} # ignore/add/remove/force".format(self.nl_template_func_def.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<>' of a specialized function definition. ")+self.tr("Overrides nl_template_func_def. ")))
        s.append("nl_template_func_def_special = {} # ignore/add/remove/force".format(self.nl_template_func_def_special.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template variable. ")))
        s.append("nl_template_var = {} # ignore/add/remove/force".format(self.nl_template_var.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'template<...>' and 'using' of a templated type alias. ")))
        s.append("nl_template_using = {} # ignore/add/remove/force".format(self.nl_template_using.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'class' and '{'. ")))
        s.append("nl_class_brace = {} # ignore/add/remove/force".format(self.nl_class_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline before or after (depending on pos_class_comma, may not be IGNORE) each',' in the base class list. ")))
        s.append("nl_class_init_args = {} # ignore/add/remove/force".format(self.nl_class_init_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline after each ',' in the constructor member initialization. ")+self.tr("Related to nl_constr_colon, pos_constr_colon and pos_constr_comma. ")))
        s.append("nl_constr_init_args = {} # ignore/add/remove/force".format(self.nl_constr_init_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline before first element, after comma, and after last element, in 'enum'. ")))
        s.append("nl_enum_own_lines = {} # ignore/add/remove/force".format(self.nl_enum_own_lines.currentText()))
        s.append(wrap(self.tr("Add or remove newline between return type and function name in a function definition. ")+self.tr("might be modified by nl_func_leave_one_liners. ")))
        s.append("nl_func_type_name = {} # ignore/add/remove/force".format(self.nl_func_type_name.currentText()))
        s.append(wrap(self.tr("Add or remove newline between return type and function name inside a class definition. ")+self.tr("If set to ignore, nl_func_type_name or nl_func_proto_type_name is used instead. ")))
        s.append("nl_func_type_name_class = {} # ignore/add/remove/force".format(self.nl_func_type_name_class.currentText()))
        s.append(wrap(self.tr("Add or remove newline between class specification and '::' in 'void A::f() { }'. ")+self.tr("Only appears in separate member implementation (does not appear with in-line implementation). ")))
        s.append("nl_func_class_scope = {} # ignore/add/remove/force".format(self.nl_func_class_scope.currentText()))
        s.append(wrap(self.tr("Add or remove newline between function scope and name, as in 'void A :: <here> f() { }'. ")))
        s.append("nl_func_scope_name = {} # ignore/add/remove/force".format(self.nl_func_scope_name.currentText()))
        s.append(wrap(self.tr("Add or remove newline between return type and function name in a prototype. ")))
        s.append("nl_func_proto_type_name = {} # ignore/add/remove/force".format(self.nl_func_proto_type_name.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a function name and the opening '(' in the declaration. ")))
        s.append("nl_func_paren = {} # ignore/add/remove/force".format(self.nl_func_paren.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_paren for functions with no parameters. ")))
        s.append("nl_func_paren_empty = {} # ignore/add/remove/force".format(self.nl_func_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a function name and the opening '(' in the definition. ")))
        s.append("nl_func_def_paren = {} # ignore/add/remove/force".format(self.nl_func_def_paren.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_def_paren for functions with no parameters. ")))
        s.append("nl_func_def_paren_empty = {} # ignore/add/remove/force".format(self.nl_func_def_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a function name and the opening '(' in the call. ")))
        s.append("nl_func_call_paren = {} # ignore/add/remove/force".format(self.nl_func_call_paren.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_call_paren for functions with no parameters. ")))
        s.append("nl_func_call_paren_empty = {} # ignore/add/remove/force".format(self.nl_func_call_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline after '(' in a function declaration. ")))
        s.append("nl_func_decl_start = {} # ignore/add/remove/force".format(self.nl_func_decl_start.currentText()))
        s.append(wrap(self.tr("Add or remove newline after '(' in a function definition. ")))
        s.append("nl_func_def_start = {} # ignore/add/remove/force".format(self.nl_func_def_start.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_decl_start when there is only one parameter. ")))
        s.append("nl_func_decl_start_single = {} # ignore/add/remove/force".format(self.nl_func_decl_start_single.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_def_start when there is only one parameter. ")))
        s.append("nl_func_def_start_single = {} # ignore/add/remove/force".format(self.nl_func_def_start_single.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '(' in a function declaration if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_decl_start is used instead. ")))
        s.append("nl_func_decl_start_multi_line = {} # true/false".format(self.nl_func_decl_start_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '(' in a function definition if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_def_start is used instead. ")))
        s.append("nl_func_def_start_multi_line = {} # true/false".format(self.nl_func_def_start_multi_line.currentText()))
        s.append(wrap(self.tr("Add or remove newline after each ',' in a function declaration. ")))
        s.append("nl_func_decl_args = {} # ignore/add/remove/force".format(self.nl_func_decl_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline after each ',' in a function definition. ")))
        s.append("nl_func_def_args = {} # ignore/add/remove/force".format(self.nl_func_def_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline after each ',' in a function call. ")))
        s.append("nl_func_call_args = {} # ignore/add/remove/force".format(self.nl_func_call_args.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after each ',' in a function declaration if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_decl_args is used instead. ")))
        s.append("nl_func_decl_args_multi_line = {} # true/false".format(self.nl_func_decl_args_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after each ',' in a function definition if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_def_args is used instead. ")))
        s.append("nl_func_def_args_multi_line = {} # true/false".format(self.nl_func_def_args_multi_line.currentText()))
        s.append(wrap(self.tr("Add or remove newline before the ')' in a function declaration. ")))
        s.append("nl_func_decl_end = {} # ignore/add/remove/force".format(self.nl_func_decl_end.currentText()))
        s.append(wrap(self.tr("Add or remove newline before the ')' in a function definition. ")))
        s.append("nl_func_def_end = {} # ignore/add/remove/force".format(self.nl_func_def_end.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_decl_end when there is only one parameter. ")))
        s.append("nl_func_decl_end_single = {} # ignore/add/remove/force".format(self.nl_func_decl_end_single.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_def_end when there is only one parameter. ")))
        s.append("nl_func_def_end_single = {} # ignore/add/remove/force".format(self.nl_func_def_end_single.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before ')' in a function declaration if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_decl_end is used instead. ")))
        s.append("nl_func_decl_end_multi_line = {} # true/false".format(self.nl_func_decl_end_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before ')' in a function definition if '(' and ')' are in different lines. ")+self.tr("If false, nl_func_def_end is used instead. ")))
        s.append("nl_func_def_end_multi_line = {} # true/false".format(self.nl_func_def_end_multi_line.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '()' in a function declaration. ")))
        s.append("nl_func_decl_empty = {} # ignore/add/remove/force".format(self.nl_func_decl_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '()' in a function definition. ")))
        s.append("nl_func_def_empty = {} # ignore/add/remove/force".format(self.nl_func_def_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '()' in a function call. ")))
        s.append("nl_func_call_empty = {} # ignore/add/remove/force".format(self.nl_func_call_empty.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '(' in a function call, has preference over nl_func_call_start_multi_line. ")))
        s.append("nl_func_call_start = {} # ignore/add/remove/force".format(self.nl_func_call_start.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before ')' in a function call. ")))
        s.append("nl_func_call_end = {} # ignore/add/remove/force".format(self.nl_func_call_end.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '(' in a function call if '(' and ')' are in different lines. ")))
        s.append("nl_func_call_start_multi_line = {} # true/false".format(self.nl_func_call_start_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after each ',' in a function call if '(' and ')' are in different lines. ")))
        s.append("nl_func_call_args_multi_line = {} # true/false".format(self.nl_func_call_args_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before ')' in a function call if '(' and ')' are in different lines. ")))
        s.append("nl_func_call_end_multi_line = {} # true/false".format(self.nl_func_call_end_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to respect nl_func_call_XXX option incase of closure args. ")))
        s.append("nl_func_call_args_multi_line_ignore_closures = {} # true/false".format(self.nl_func_call_args_multi_line_ignore_closures.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '<' of a template parameter list. ")))
        s.append("nl_template_start = {} # true/false".format(self.nl_template_start.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after each ',' in a template parameter list. ")))
        s.append("nl_template_args = {} # true/false".format(self.nl_template_args.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before '>' of a template parameter list. ")))
        s.append("nl_template_end = {} # true/false".format(self.nl_template_end.currentText()))
        s.append(wrap(self.tr("(OC) Whether to put each Objective-C message parameter on a separate line. ")+self.tr("See nl_oc_msg_leave_one_liner. ")))
        s.append("nl_oc_msg_args = {} # true/false".format(self.nl_oc_msg_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline between function signature and '{'. ")))
        s.append("nl_fdef_brace = {} # ignore/add/remove/force".format(self.nl_fdef_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between function signature and '{', if signature ends with ')'. ")+self.tr("Overrides nl_fdef_brace. ")))
        s.append("nl_fdef_brace_cond = {} # ignore/add/remove/force".format(self.nl_fdef_brace_cond.currentText()))
        s.append(wrap(self.tr("Add or remove newline between C++11 lambda signature and '{'. ")))
        s.append("nl_cpp_ldef_brace = {} # ignore/add/remove/force".format(self.nl_cpp_ldef_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'return' and the return expression. ")))
        s.append("nl_return_expr = {} # ignore/add/remove/force".format(self.nl_return_expr.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after semicolons, except in 'for' statements. ")))
        s.append("nl_after_semicolon = {} # true/false".format(self.nl_after_semicolon.currentText()))
        s.append(wrap(self.tr("(Java) Add or remove newline between the ')' and '{{' of the double brace initializer. ")))
        s.append("nl_paren_dbrace_open = {} # ignore/add/remove/force".format(self.nl_paren_dbrace_open.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after the type in an unnamed temporary direct-list-initialization. ")))
        s.append("nl_type_brace_init_lst = {} # ignore/add/remove/force".format(self.nl_type_brace_init_lst.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after the open brace in an unnamed temporary direct-list-initialization. ")))
        s.append("nl_type_brace_init_lst_open = {} # ignore/add/remove/force".format(self.nl_type_brace_init_lst_open.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before the close brace in an unnamed temporary direct-list-initialization. ")))
        s.append("nl_type_brace_init_lst_close = {} # ignore/add/remove/force".format(self.nl_type_brace_init_lst_close.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '{'. ")+self.tr("This also adds a newline before the matching '}'. ")))
        s.append("nl_after_brace_open = {} # true/false".format(self.nl_after_brace_open.currentText()))
        s.append(wrap(self.tr("Whether to add a newline between the open brace and a trailing single-line comment. ")+self.tr("Requires nl_after_brace_open=true. ")))
        s.append("nl_after_brace_open_cmt = {} # true/false".format(self.nl_after_brace_open_cmt.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after a virtual brace open with a non-empty body. ")+self.tr("These occur in un-braced if/while/do/for statement bodies. ")))
        s.append("nl_after_vbrace_open = {} # true/false".format(self.nl_after_vbrace_open.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after a virtual brace open with an empty body. ")+self.tr("These occur in un-braced if/while/do/for statement bodies. ")))
        s.append("nl_after_vbrace_open_empty = {} # true/false".format(self.nl_after_vbrace_open_empty.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '}'. ")+self.tr("Does not apply if followed by a necessary ';'. ")))
        s.append("nl_after_brace_close = {} # true/false".format(self.nl_after_brace_close.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after a virtual brace close, as in 'if (foo) a++; <here> return;'. ")))
        s.append("nl_after_vbrace_close = {} # true/false".format(self.nl_after_vbrace_close.currentText()))
        s.append(wrap(self.tr("Add or remove newline between the close brace and identifier, as in 'struct { int a; } <here> b;'. ")+self.tr("Affects enumerations, unions and structures. ")+self.tr("If set to ignore, uses nl_after_brace_close. ")))
        s.append("nl_brace_struct_var = {} # ignore/add/remove/force".format(self.nl_brace_struct_var.currentText()))
        s.append(wrap(self.tr("Whether to alter newlines in '#define' macros. ")))
        s.append("nl_define_macro = {} # true/false".format(self.nl_define_macro.currentText()))
        s.append(wrap(self.tr("Whether to alter newlines between consecutive parenthesis closes. ")+self.tr("The number of closing parentheses in a line will depend on respective open parenthesis lines. ")))
        s.append("nl_squeeze_paren_close = {} # true/false".format(self.nl_squeeze_paren_close.currentText()))
        s.append(wrap(self.tr("Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and '#endif'. ")+self.tr("Does not affect top-level #ifdefs. ")))
        s.append("nl_squeeze_ifdef = {} # true/false".format(self.nl_squeeze_ifdef.currentText()))
        s.append(wrap(self.tr("Makes the nl_squeeze_ifdef option affect the top-level #ifdefs as well. ")))
        s.append("nl_squeeze_ifdef_top_level = {} # true/false".format(self.nl_squeeze_ifdef_top_level.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'if'. ")))
        s.append("nl_before_if = {} # ignore/add/remove/force".format(self.nl_before_if.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'if' statement. ")+self.tr("Add/Force work only if the next token is not a closing brace. ")))
        s.append("nl_after_if = {} # ignore/add/remove/force".format(self.nl_after_if.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'for'. ")))
        s.append("nl_before_for = {} # ignore/add/remove/force".format(self.nl_before_for.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'for' statement. ")))
        s.append("nl_after_for = {} # ignore/add/remove/force".format(self.nl_after_for.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'while'. ")))
        s.append("nl_before_while = {} # ignore/add/remove/force".format(self.nl_before_while.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'while' statement. ")))
        s.append("nl_after_while = {} # ignore/add/remove/force".format(self.nl_after_while.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'switch'. ")))
        s.append("nl_before_switch = {} # ignore/add/remove/force".format(self.nl_before_switch.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'switch' statement. ")))
        s.append("nl_after_switch = {} # ignore/add/remove/force".format(self.nl_after_switch.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'synchronized'. ")))
        s.append("nl_before_synchronized = {} # ignore/add/remove/force".format(self.nl_before_synchronized.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'synchronized' statement. ")))
        s.append("nl_after_synchronized = {} # ignore/add/remove/force".format(self.nl_after_synchronized.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'do'. ")))
        s.append("nl_before_do = {} # ignore/add/remove/force".format(self.nl_before_do.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'do/while' statement. ")))
        s.append("nl_after_do = {} # ignore/add/remove/force".format(self.nl_after_do.currentText()))
        s.append(wrap(self.tr("Whether to put a blank line before 'return' statements, unless after an open brace. ")))
        s.append("nl_before_return = {} # true/false".format(self.nl_before_return.currentText()))
        s.append(wrap(self.tr("Whether to put a blank line after 'return' statements, unless followed by a close brace. ")))
        s.append("nl_after_return = {} # true/false".format(self.nl_after_return.currentText()))
        s.append(wrap(self.tr("Whether to put a blank line before a member '.' or '->' operators. ")))
        s.append("nl_before_member = {} # ignore/add/remove/force".format(self.nl_before_member.currentText()))
        s.append(wrap(self.tr("(Java) Whether to put a blank line after a member '.' or '->' operators. ")))
        s.append("nl_after_member = {} # ignore/add/remove/force".format(self.nl_after_member.currentText()))
        s.append(wrap(self.tr("Whether to double-space commented-entries in 'struct'/'union'/'enum'. ")))
        s.append("nl_ds_struct_enum_cmt = {} # true/false".format(self.nl_ds_struct_enum_cmt.currentText()))
        s.append(wrap(self.tr("Whether to force a newline before '}' of a 'struct'/'union'/'enum'. ")+self.tr("(Lower priority than eat_blanks_before_close_brace.). ")))
        s.append("nl_ds_struct_enum_close_brace = {} # true/false".format(self.nl_ds_struct_enum_close_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline before or after (depending on pos_class_colon) a class colon, as in 'class Foo <here> : <or here> public Bar'. ")))
        s.append("nl_class_colon = {} # ignore/add/remove/force".format(self.nl_class_colon.currentText()))
        s.append(wrap(self.tr("Add or remove newline around a class constructor colon. ")+self.tr("The exact position depends on nl_constr_init_args, pos_constr_colon and pos_constr_comma. ")))
        s.append("nl_constr_colon = {} # ignore/add/remove/force".format(self.nl_constr_colon.currentText()))
        s.append(wrap(self.tr("Whether to collapse a two-line namespace, like 'namespace foo\n{ decl; }' into a single line. ")+self.tr("If true, prevents other brace newline rules from turning such code into four lines. ")))
        s.append("nl_namespace_two_to_one_liner = {} # true/false".format(self.nl_namespace_two_to_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to remove a newline in simple unbraced if statements, turning them into one-liners, as in 'if(b)\n i++;' => 'if(b) i++;'. ")))
        s.append("nl_create_if_one_liner = {} # true/false".format(self.nl_create_if_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to remove a newline in simple unbraced for statements, turning them into one-liners, as in 'for (...)\n stmt;' => 'for (...) stmt;'. ")))
        s.append("nl_create_for_one_liner = {} # true/false".format(self.nl_create_for_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to remove a newline in simple unbraced while statements, turning them into one-liners, as in 'while (expr)\n stmt;' => 'while (expr) stmt;'. ")))
        s.append("nl_create_while_one_liner = {} # true/false".format(self.nl_create_while_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to collapse a function definition whose body (not counting braces) is only one line so that the entire definition (prototype, braces, body) is a single line. ")))
        s.append("nl_create_func_def_one_liner = {} # true/false".format(self.nl_create_func_def_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to collapse a function definition whose body (not counting braces) is only one line so that the entire definition (prototype, braces, body) is a single line. ")))
        s.append("nl_create_list_one_liner = {} # true/false".format(self.nl_create_list_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to split one-line simple unbraced if statements into two lines by adding a newline, as in 'if(b) <here> i++;'. ")))
        s.append("nl_split_if_one_liner = {} # true/false".format(self.nl_split_if_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to split one-line simple unbraced for statements into two lines by adding a newline, as in 'for (...) <here> stmt;'. ")))
        s.append("nl_split_for_one_liner = {} # true/false".format(self.nl_split_for_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to split one-line simple unbraced while statements into two lines by adding a newline, as in 'while (expr) <here> stmt;'. ")))
        s.append("nl_split_while_one_liner = {} # true/false".format(self.nl_split_while_one_liner.currentText()))
        s.append(wrap(self.tr("The maximum number of consecutive newlines (3 = 2 blank lines). ")))
        s.append("nl_max = {} # unsigned number".format(self.nl_max.value()))
        s.append(wrap(self.tr("The maximum number of consecutive newlines in a function. ")))
        s.append("nl_max_blank_in_func = {} # unsigned number".format(self.nl_max_blank_in_func.value()))
        s.append(wrap(self.tr("The number of newlines before a function prototype. ")))
        s.append("nl_before_func_body_proto = {} # unsigned number".format(self.nl_before_func_body_proto.value()))
        s.append(wrap(self.tr("The number of newlines before a multi-line function definition. ")))
        s.append("nl_before_func_body_def = {} # unsigned number".format(self.nl_before_func_body_def.value()))
        s.append(wrap(self.tr("The number of newlines before a class constructor/destructor prototype. ")))
        s.append("nl_before_func_class_proto = {} # unsigned number".format(self.nl_before_func_class_proto.value()))
        s.append(wrap(self.tr("The number of newlines before a class constructor/destructor definition. ")))
        s.append("nl_before_func_class_def = {} # unsigned number".format(self.nl_before_func_class_def.value()))
        s.append(wrap(self.tr("The number of newlines after a function prototype. ")))
        s.append("nl_after_func_proto = {} # unsigned number".format(self.nl_after_func_proto.value()))
        s.append(wrap(self.tr("The number of newlines after a function prototype, if not followed by another function prototype. ")))
        s.append("nl_after_func_proto_group = {} # unsigned number".format(self.nl_after_func_proto_group.value()))
        s.append(wrap(self.tr("The number of newlines after a class constructor/destructor prototype. ")))
        s.append("nl_after_func_class_proto = {} # unsigned number".format(self.nl_after_func_class_proto.value()))
        s.append(wrap(self.tr("The number of newlines after a class constructor/destructor prototype, if not followed by another constructor/destructor prototype. ")))
        s.append("nl_after_func_class_proto_group = {} # unsigned number".format(self.nl_after_func_class_proto_group.value()))
        s.append(wrap(self.tr("Whether one-line method definitions inside a class body should be treated as if they were prototypes for the purposes of adding newlines. ")+self.tr("Requires nl_class_leave_one_liners=true. ")+self.tr("Overrides nl_before_func_body_def and nl_before_func_class_def for one-liners. ")))
        s.append("nl_class_leave_one_liner_groups = {} # true/false".format(self.nl_class_leave_one_liner_groups.currentText()))
        s.append(wrap(self.tr("The number of newlines after '}' of a multi-line function body. ")))
        s.append("nl_after_func_body = {} # unsigned number".format(self.nl_after_func_body.value()))
        s.append(wrap(self.tr("The number of newlines after '}' of a multi-line function body in a class declaration. ")+self.tr("Also affects class constructors/destructors. ")+self.tr("Overrides nl_after_func_body. ")))
        s.append("nl_after_func_body_class = {} # unsigned number".format(self.nl_after_func_body_class.value()))
        s.append(wrap(self.tr("The number of newlines after '}' of a single line function body. ")+self.tr("Also affects class constructors/destructors. ")+self.tr("Overrides nl_after_func_body and nl_after_func_body_class. ")))
        s.append("nl_after_func_body_one_liner = {} # unsigned number".format(self.nl_after_func_body_one_liner.value()))
        s.append(wrap(self.tr("The number of blank lines after a block of variable definitions at the top of a function body. ")+self.tr("0: No change (default). ")))
        s.append("nl_func_var_def_blk = {} # unsigned number".format(self.nl_func_var_def_blk.value()))
        s.append(wrap(self.tr("The number of newlines before a block of typedefs. ")+self.tr("If nl_after_access_spec is non-zero, that option takes precedence. ")+self.tr("0: No change (default). ")))
        s.append("nl_typedef_blk_start = {} # unsigned number".format(self.nl_typedef_blk_start.value()))
        s.append(wrap(self.tr("The number of newlines after a block of typedefs. ")+self.tr("0: No change (default). ")))
        s.append("nl_typedef_blk_end = {} # unsigned number".format(self.nl_typedef_blk_end.value()))
        s.append(wrap(self.tr("The maximum number of consecutive newlines within a block of typedefs. ")+self.tr("0: No change (default). ")))
        s.append("nl_typedef_blk_in = {} # unsigned number".format(self.nl_typedef_blk_in.value()))
        s.append(wrap(self.tr("The number of newlines before a block of variable definitions not at the top of a function body. ")+self.tr("If nl_after_access_spec is non-zero, that option takes precedence. ")+self.tr("0: No change (default). ")))
        s.append("nl_var_def_blk_start = {} # unsigned number".format(self.nl_var_def_blk_start.value()))
        s.append(wrap(self.tr("The number of newlines after a block of variable definitions not at the top of a function body. ")+self.tr("0: No change (default). ")))
        s.append("nl_var_def_blk_end = {} # unsigned number".format(self.nl_var_def_blk_end.value()))
        s.append(wrap(self.tr("The maximum number of consecutive newlines within a block of variable definitions. ")+self.tr("0: No change (default). ")))
        s.append("nl_var_def_blk_in = {} # unsigned number".format(self.nl_var_def_blk_in.value()))
        s.append(wrap(self.tr("The minimum number of newlines before a multi-line comment. ")+self.tr("Doesn't apply if after a brace open or another multi-line comment. ")))
        s.append("nl_before_block_comment = {} # unsigned number".format(self.nl_before_block_comment.value()))
        s.append(wrap(self.tr("The minimum number of newlines before a single-line C comment. ")+self.tr("Doesn't apply if after a brace open or other single-line C comments. ")))
        s.append("nl_before_c_comment = {} # unsigned number".format(self.nl_before_c_comment.value()))
        s.append(wrap(self.tr("The minimum number of newlines before a CPP comment. ")+self.tr("Doesn't apply if after a brace open or other CPP comments. ")))
        s.append("nl_before_cpp_comment = {} # unsigned number".format(self.nl_before_cpp_comment.value()))
        s.append(wrap(self.tr("Whether to force a newline after a multi-line comment. ")))
        s.append("nl_after_multiline_comment = {} # true/false".format(self.nl_after_multiline_comment.currentText()))
        s.append(wrap(self.tr("Whether to force a newline after a label's colon. ")))
        s.append("nl_after_label_colon = {} # true/false".format(self.nl_after_label_colon.currentText()))
        s.append(wrap(self.tr("The number of newlines after '}' or ';' of a struct/enum/union definition. ")))
        s.append("nl_after_struct = {} # unsigned number".format(self.nl_after_struct.value()))
        s.append(wrap(self.tr("The number of newlines before a class definition. ")))
        s.append("nl_before_class = {} # unsigned number".format(self.nl_before_class.value()))
        s.append(wrap(self.tr("The number of newlines after '}' or ';' of a class definition. ")))
        s.append("nl_after_class = {} # unsigned number".format(self.nl_after_class.value()))
        s.append(wrap(self.tr("The number of newlines before a namespace. ")))
        s.append("nl_before_namespace = {} # unsigned number".format(self.nl_before_namespace.value()))
        s.append(wrap(self.tr("The number of newlines after '{' of a namespace. ")+self.tr("This also adds newlines before the matching '}'. ")+self.tr("0: Apply eat_blanks_after_open_brace or eat_blanks_before_close_brace if     applicable, otherwise no change. ")+self.tr("Overrides eat_blanks_after_open_brace and eat_blanks_before_close_brace. ")))
        s.append("nl_inside_namespace = {} # unsigned number".format(self.nl_inside_namespace.value()))
        s.append(wrap(self.tr("The number of newlines after '}' of a namespace. ")))
        s.append("nl_after_namespace = {} # unsigned number".format(self.nl_after_namespace.value()))
        s.append(wrap(self.tr("The number of newlines before an access specifier label. ")+self.tr("This also includes the Qt-specific 'signals:' and 'slots:'. ")+self.tr("Will not change the newline count if after a brace open. ")+self.tr("0: No change (default). ")))
        s.append("nl_before_access_spec = {} # unsigned number".format(self.nl_before_access_spec.value()))
        s.append(wrap(self.tr("The number of newlines after an access specifier label. ")+self.tr("This also includes the Qt-specific 'signals:' and 'slots:'. ")+self.tr("Will not change the newline count if after a brace open. ")+self.tr("0: No change (default). ")+self.tr("Overrides nl_typedef_blk_start and nl_var_def_blk_start. ")))
        s.append("nl_after_access_spec = {} # unsigned number".format(self.nl_after_access_spec.value()))
        s.append(wrap(self.tr("The number of newlines between a function definition and the function comment, as in '// comment\n <here> void foo() {...}'. ")+self.tr("0: No change (default). ")))
        s.append("nl_comment_func_def = {} # unsigned number".format(self.nl_comment_func_def.value()))
        s.append(wrap(self.tr("The number of newlines after a try-catch-finally block that isn't followed by a brace close. ")+self.tr("0: No change (default). ")))
        s.append("nl_after_try_catch_finally = {} # unsigned number".format(self.nl_after_try_catch_finally.value()))
        s.append(wrap(self.tr("(C#) The number of newlines before and after a property, indexer or event declaration. ")+self.tr("0: No change (default). ")))
        s.append("nl_around_cs_property = {} # unsigned number".format(self.nl_around_cs_property.value()))
        s.append(wrap(self.tr("(C#) The number of newlines between the get/set/add/remove handlers. ")+self.tr("0: No change (default). ")))
        s.append("nl_between_get_set = {} # unsigned number".format(self.nl_between_get_set.value()))
        s.append(wrap(self.tr("(C#) Add or remove newline between property and the '{'. ")))
        s.append("nl_property_brace = {} # ignore/add/remove/force".format(self.nl_property_brace.currentText()))
        s.append(wrap(self.tr("Whether to remove blank lines after '{'. ")))
        s.append("eat_blanks_after_open_brace = {} # true/false".format(self.eat_blanks_after_open_brace.currentText()))
        s.append(wrap(self.tr("Whether to remove blank lines before '}'. ")))
        s.append("eat_blanks_before_close_brace = {} # true/false".format(self.eat_blanks_before_close_brace.currentText()))
        s.append(wrap(self.tr("How aggressively to remove extra newlines not in preprocessor. ")+self.tr("0: No change (default) 1: Remove most newlines not handled by other config 2: Remove all newlines and reformat completely by config. ")))
        s.append("nl_remove_extra_newlines = {} # unsigned number".format(self.nl_remove_extra_newlines.value()))
        s.append(wrap(self.tr("(Java) Add or remove newline after an annotation statement. ")+self.tr("Only affects annotations that are after a newline. ")))
        s.append("nl_after_annotation = {} # ignore/add/remove/force".format(self.nl_after_annotation.currentText()))
        s.append(wrap(self.tr("(Java) Add or remove newline between two annotations. ")))
        s.append("nl_between_annotation = {} # ignore/add/remove/force".format(self.nl_between_annotation.currentText()))
        s.append(wrap(self.tr("The number of newlines before a whole-file #ifdef. ")+self.tr("0: No change (default). ")))
        s.append("nl_before_whole_file_ifdef = {} # unsigned number".format(self.nl_before_whole_file_ifdef.value()))
        s.append(wrap(self.tr("The number of newlines after a whole-file #ifdef. ")+self.tr("0: No change (default). ")))
        s.append("nl_after_whole_file_ifdef = {} # unsigned number".format(self.nl_after_whole_file_ifdef.value()))
        s.append(wrap(self.tr("The number of newlines before a whole-file #endif. ")+self.tr("0: No change (default). ")))
        s.append("nl_before_whole_file_endif = {} # unsigned number".format(self.nl_before_whole_file_endif.value()))
        s.append(wrap(self.tr("The number of newlines after a whole-file #endif. ")+self.tr("0: No change (default). ")))
        s.append("nl_after_whole_file_endif = {} # unsigned number".format(self.nl_after_whole_file_endif.value()))
        s.append(wrap(self.tr("The position of arithmetic operators in wrapped expressions. ")))
        s.append("pos_arith = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_arith.currentText()))
        s.append(wrap(self.tr("The position of assignment in wrapped expressions. ")+self.tr("Do not affect '=' followed by '{'. ")))
        s.append("pos_assign = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_assign.currentText()))
        s.append(wrap(self.tr("The position of Boolean operators in wrapped expressions. ")))
        s.append("pos_bool = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_bool.currentText()))
        s.append(wrap(self.tr("The position of comparison operators in wrapped expressions. ")))
        s.append("pos_compare = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_compare.currentText()))
        s.append(wrap(self.tr("The position of conditional operators, as in the '?' and ':' of 'expr ? stmt : stmt', in wrapped expressions. ")))
        s.append("pos_conditional = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_conditional.currentText()))
        s.append(wrap(self.tr("The position of the comma in wrapped expressions. ")))
        s.append("pos_comma = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_comma.currentText()))
        s.append(wrap(self.tr("The position of the comma in enum entries. ")))
        s.append("pos_enum_comma = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_enum_comma.currentText()))
        s.append(wrap(self.tr("The position of the comma in the base class list if there is more than one line. ")+self.tr("Affects nl_class_init_args. ")))
        s.append("pos_class_comma = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_class_comma.currentText()))
        s.append(wrap(self.tr("The position of the comma in the constructor initialization list. ")+self.tr("Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon. ")))
        s.append("pos_constr_comma = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_constr_comma.currentText()))
        s.append(wrap(self.tr("The position of trailing/leading class colon, between class and base class list. ")+self.tr("Affects nl_class_colon. ")))
        s.append("pos_class_colon = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_class_colon.currentText()))
        s.append(wrap(self.tr("The position of colons between constructor and member initialization. ")+self.tr("Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma. ")))
        s.append("pos_constr_colon = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_constr_colon.currentText()))
        s.append(wrap(self.tr("Try to limit code width to N columns. ")))
        s.append("code_width = {} # unsigned number".format(self.code_width.value()))
        s.append(wrap(self.tr("Whether to fully split long 'for' statements at semi-colons. ")))
        s.append("ls_for_split_full = {} # true/false".format(self.ls_for_split_full.currentText()))
        s.append(wrap(self.tr("Whether to fully split long function prototypes/calls at commas. ")+self.tr("The option ls_code_width has priority over the option ls_func_split_full. ")))
        s.append("ls_func_split_full = {} # true/false".format(self.ls_func_split_full.currentText()))
        s.append(wrap(self.tr("Whether to split lines as close to code_width as possible and ignore some groupings. ")+self.tr("The option ls_code_width has priority over the option ls_func_split_full. ")))
        s.append("ls_code_width = {} # true/false".format(self.ls_code_width.currentText()))
        s.append(wrap(self.tr("Whether to keep non-indenting tabs. ")))
        s.append("align_keep_tabs = {} # true/false".format(self.align_keep_tabs.currentText()))
        s.append(wrap(self.tr("Whether to use tabs for aligning. ")))
        s.append("align_with_tabs = {} # true/false".format(self.align_with_tabs.currentText()))
        s.append(wrap(self.tr("Whether to bump out to the next tab when aligning. ")))
        s.append("align_on_tabstop = {} # true/false".format(self.align_on_tabstop.currentText()))
        s.append(wrap(self.tr("Whether to right-align numbers. ")))
        s.append("align_number_right = {} # true/false".format(self.align_number_right.currentText()))
        s.append(wrap(self.tr("Whether to keep whitespace not required for alignment. ")))
        s.append("align_keep_extra_space = {} # true/false".format(self.align_keep_extra_space.currentText()))
        s.append(wrap(self.tr("Whether to align variable definitions in prototypes and functions. ")))
        s.append("align_func_params = {} # true/false".format(self.align_func_params.currentText()))
        s.append(wrap(self.tr("The span for aligning parameter definitions in function on parameter name. ")+self.tr("0: Don't align (default). ")))
        s.append("align_func_params_span = {} # unsigned number".format(self.align_func_params_span.value()))
        s.append(wrap(self.tr("The threshold for aligning function parameter definitions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). ")))
        s.append("align_func_params_thresh = {} # number".format(self.align_func_params_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning function parameter definitions. ")))
        s.append("align_func_params_gap = {} # unsigned number".format(self.align_func_params_gap.value()))
        s.append(wrap(self.tr("The span for aligning constructor value. ")+self.tr("0: Don't align (default). ")))
        s.append("align_constr_value_span = {} # unsigned number".format(self.align_constr_value_span.value()))
        s.append(wrap(self.tr("The threshold for aligning constructor value. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). ")))
        s.append("align_constr_value_thresh = {} # number".format(self.align_constr_value_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning constructor value. ")))
        s.append("align_constr_value_gap = {} # unsigned number".format(self.align_constr_value_gap.value()))
        s.append(wrap(self.tr("Whether to align parameters in single-line functions that have the same name. ")+self.tr("The function names must already be aligned with each other. ")))
        s.append("align_same_func_call_params = {} # true/false".format(self.align_same_func_call_params.currentText()))
        s.append(wrap(self.tr("The span for aligning function-call parameters for single line functions. ")+self.tr("0: Don't align (default). ")))
        s.append("align_same_func_call_params_span = {} # unsigned number".format(self.align_same_func_call_params_span.value()))
        s.append(wrap(self.tr("The threshold for aligning function-call parameters for single line functions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). ")))
        s.append("align_same_func_call_params_thresh = {} # number".format(self.align_same_func_call_params_thresh.value()))
        s.append(wrap(self.tr("The span for aligning variable definitions. ")+self.tr("0: Don't align (default). ")))
        s.append("align_var_def_span = {} # unsigned number".format(self.align_var_def_span.value()))
        s.append(wrap(self.tr("How to consider (or treat) the '*' in the alignment of variable definitions. ")+self.tr("0: Part of the type     'void *   foo;' (default) 1: Part of the variable 'void     *foo;' 2: Dangling             'void    *foo;' Dangling: the '*' will not be taken into account when aligning. ")))
        s.append("align_var_def_star_style = {} # unsigned number".format(self.align_var_def_star_style.value()))
        s.append(wrap(self.tr("How to consider (or treat) the '&' in the alignment of variable definitions. ")+self.tr("0: Part of the type     'long &   foo;' (default) 1: Part of the variable 'long     &foo;' 2: Dangling             'long    &foo;' Dangling: the '&' will not be taken into account when aligning. ")))
        s.append("align_var_def_amp_style = {} # unsigned number".format(self.align_var_def_amp_style.value()))
        s.append(wrap(self.tr("The threshold for aligning variable definitions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). ")))
        s.append("align_var_def_thresh = {} # number".format(self.align_var_def_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning variable definitions. ")))
        s.append("align_var_def_gap = {} # unsigned number".format(self.align_var_def_gap.value()))
        s.append(wrap(self.tr("Whether to align the colon in struct bit fields. ")))
        s.append("align_var_def_colon = {} # true/false".format(self.align_var_def_colon.currentText()))
        s.append(wrap(self.tr("The gap for aligning the colon in struct bit fields. ")))
        s.append("align_var_def_colon_gap = {} # unsigned number".format(self.align_var_def_colon_gap.value()))
        s.append(wrap(self.tr("Whether to align any attribute after the variable name. ")))
        s.append("align_var_def_attribute = {} # true/false".format(self.align_var_def_attribute.currentText()))
        s.append(wrap(self.tr("Whether to align inline struct/enum/union variable definitions. ")))
        s.append("align_var_def_inline = {} # true/false".format(self.align_var_def_inline.currentText()))
        s.append(wrap(self.tr("The span for aligning on '=' in assignments. ")+self.tr("0: Don't align (default). ")))
        s.append("align_assign_span = {} # unsigned number".format(self.align_assign_span.value()))
        s.append(wrap(self.tr("The span for aligning on '=' in function prototype modifier. ")+self.tr("0: Don't align (default). ")))
        s.append("align_assign_func_proto_span = {} # unsigned number".format(self.align_assign_func_proto_span.value()))
        s.append(wrap(self.tr("The threshold for aligning on '=' in assignments. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). ")))
        s.append("align_assign_thresh = {} # number".format(self.align_assign_thresh.value()))
        s.append(wrap(self.tr("How to apply align_assign_span to function declaration \"assignments\", ie 'virtual void foo() = 0' or '~foo() = {default|delete}'. ")+self.tr("0: Align with other assignments (default) 1: Align with each other, ignoring regular assignments 2: Don't align. ")))
        s.append("align_assign_decl_func = {} # unsigned number".format(self.align_assign_decl_func.value()))
        s.append(wrap(self.tr("The span for aligning on '=' in enums. ")+self.tr("0: Don't align (default). ")))
        s.append("align_enum_equ_span = {} # unsigned number".format(self.align_enum_equ_span.value()))
        s.append(wrap(self.tr("The threshold for aligning on '=' in enums. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: no limit (default). ")))
        s.append("align_enum_equ_thresh = {} # number".format(self.align_enum_equ_thresh.value()))
        s.append(wrap(self.tr("The span for aligning class member definitions. ")+self.tr("0: Don't align (default). ")))
        s.append("align_var_class_span = {} # unsigned number".format(self.align_var_class_span.value()))
        s.append(wrap(self.tr("The threshold for aligning class member definitions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). ")))
        s.append("align_var_class_thresh = {} # number".format(self.align_var_class_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning class member definitions. ")))
        s.append("align_var_class_gap = {} # unsigned number".format(self.align_var_class_gap.value()))
        s.append(wrap(self.tr("The span for aligning struct/union member definitions. ")+self.tr("0: Don't align (default). ")))
        s.append("align_var_struct_span = {} # unsigned number".format(self.align_var_struct_span.value()))
        s.append(wrap(self.tr("The threshold for aligning struct/union member definitions. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). ")))
        s.append("align_var_struct_thresh = {} # number".format(self.align_var_struct_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning struct/union member definitions. ")))
        s.append("align_var_struct_gap = {} # unsigned number".format(self.align_var_struct_gap.value()))
        s.append(wrap(self.tr("The span for aligning struct initializer values. ")+self.tr("0: Don't align (default). ")))
        s.append("align_struct_init_span = {} # unsigned number".format(self.align_struct_init_span.value()))
        s.append(wrap(self.tr("The span for aligning single-line typedefs. ")+self.tr("0: Don't align (default). ")))
        s.append("align_typedef_span = {} # unsigned number".format(self.align_typedef_span.value()))
        s.append(wrap(self.tr("The minimum space between the type and the synonym of a typedef. ")))
        s.append("align_typedef_gap = {} # unsigned number".format(self.align_typedef_gap.value()))
        s.append(wrap(self.tr("How to align typedef'd functions with other typedefs. ")+self.tr("0: Don't mix them at all (default) 1: Align the open parenthesis with the types 2: Align the function type name with the other type names. ")))
        s.append("align_typedef_func = {} # unsigned number".format(self.align_typedef_func.value()))
        s.append(wrap(self.tr("How to consider (or treat) the '*' in the alignment of typedefs. ")+self.tr("0: Part of the typedef type, 'typedef int * pint;' (default) 1: Part of type name:        'typedef int   *pint;' 2: Dangling:                 'typedef int  *pint;' Dangling: the '*' will not be taken into account when aligning. ")))
        s.append("align_typedef_star_style = {} # unsigned number".format(self.align_typedef_star_style.value()))
        s.append(wrap(self.tr("How to consider (or treat) the '&' in the alignment of typedefs. ")+self.tr("0: Part of the typedef type, 'typedef int & intref;' (default) 1: Part of type name:        'typedef int   &intref;' 2: Dangling:                 'typedef int  &intref;' Dangling: the '&' will not be taken into account when aligning. ")))
        s.append("align_typedef_amp_style = {} # unsigned number".format(self.align_typedef_amp_style.value()))
        s.append(wrap(self.tr("The span for aligning comments that end lines. ")+self.tr("0: Don't align (default). ")))
        s.append("align_right_cmt_span = {} # unsigned number".format(self.align_right_cmt_span.value()))
        s.append(wrap(self.tr("Minimum number of columns between preceding text and a trailing comment in order for the comment to qualify for being aligned. ")+self.tr("Must be non-zero to have an effect. ")))
        s.append("align_right_cmt_gap = {} # unsigned number".format(self.align_right_cmt_gap.value()))
        s.append(wrap(self.tr("If aligning comments, whether to mix with comments after '}' and #endif with less than three spaces before the comment. ")))
        s.append("align_right_cmt_mix = {} # true/false".format(self.align_right_cmt_mix.currentText()))
        s.append(wrap(self.tr("Whether to only align trailing comments that are at the same brace level. ")))
        s.append("align_right_cmt_same_level = {} # true/false".format(self.align_right_cmt_same_level.currentText()))
        s.append(wrap(self.tr("Minimum column at which to align trailing comments. ")+self.tr("Comments which are aligned beyond this column, but which can be aligned in a lesser column, may be \"pulled in\". ")+self.tr("0: Ignore (default). ")))
        s.append("align_right_cmt_at_col = {} # unsigned number".format(self.align_right_cmt_at_col.value()))
        s.append(wrap(self.tr("The span for aligning function prototypes. ")+self.tr("0: Don't align (default). ")))
        s.append("align_func_proto_span = {} # unsigned number".format(self.align_func_proto_span.value()))
        s.append(wrap(self.tr("The threshold for aligning function prototypes. ")+self.tr("Use a negative number for absolute thresholds. ")+self.tr("0: No limit (default). ")))
        s.append("align_func_proto_thresh = {} # number".format(self.align_func_proto_thresh.value()))
        s.append(wrap(self.tr("Minimum gap between the return type and the function name. ")))
        s.append("align_func_proto_gap = {} # unsigned number".format(self.align_func_proto_gap.value()))
        s.append(wrap(self.tr("Whether to align function prototypes on the 'operator' keyword instead of what follows. ")))
        s.append("align_on_operator = {} # true/false".format(self.align_on_operator.currentText()))
        s.append(wrap(self.tr("Whether to mix aligning prototype and variable declarations. ")+self.tr("If true, align_var_def_XXX options are used instead of align_func_proto_XXX options. ")))
        s.append("align_mix_var_proto = {} # true/false".format(self.align_mix_var_proto.currentText()))
        s.append(wrap(self.tr("Whether to align single-line functions with function prototypes. ")+self.tr("Uses align_func_proto_span. ")))
        s.append("align_single_line_func = {} # true/false".format(self.align_single_line_func.currentText()))
        s.append(wrap(self.tr("Whether to align the open brace of single-line functions. ")+self.tr("Requires align_single_line_func=true. ")+self.tr("Uses align_func_proto_span. ")))
        s.append("align_single_line_brace = {} # true/false".format(self.align_single_line_brace.currentText()))
        s.append(wrap(self.tr("Gap for align_single_line_brace. ")))
        s.append("align_single_line_brace_gap = {} # unsigned number".format(self.align_single_line_brace_gap.value()))
        s.append(wrap(self.tr("(OC) The span for aligning Objective-C message specifications. ")+self.tr("0: Don't align (default). ")))
        s.append("align_oc_msg_spec_span = {} # unsigned number".format(self.align_oc_msg_spec_span.value()))
        s.append(wrap(self.tr("Whether to align macros wrapped with a backslash and a newline. ")+self.tr("This will not work right if the macro contains a multi-line comment. ")))
        s.append("align_nl_cont = {} # true/false".format(self.align_nl_cont.currentText()))
        s.append(wrap(self.tr("Whether to align macro functions and variables together. ")))
        s.append("align_pp_define_together = {} # true/false".format(self.align_pp_define_together.currentText()))
        s.append(wrap(self.tr("The span for aligning on '#define' bodies. ")+self.tr("=0: Don't align (default) >0: Number of lines (including comments) between blocks. ")))
        s.append("align_pp_define_span = {} # unsigned number".format(self.align_pp_define_span.value()))
        s.append(wrap(self.tr("The minimum space between label and value of a preprocessor define. ")))
        s.append("align_pp_define_gap = {} # unsigned number".format(self.align_pp_define_gap.value()))
        s.append(wrap(self.tr("Whether to align lines that start with '<<' with previous '<<'. ")+self.tr("Default: true. ")))
        s.append("align_left_shift = {} # true/false".format(self.align_left_shift.currentText()))
        s.append(wrap(self.tr("Whether to align text after 'asm volatile ()' colons. ")))
        s.append("align_asm_colon = {} # true/false".format(self.align_asm_colon.currentText()))
        s.append(wrap(self.tr("(OC) Span for aligning parameters in an Objective-C message call on the ':'. ")+self.tr("0: Don't align. ")))
        s.append("align_oc_msg_colon_span = {} # unsigned number".format(self.align_oc_msg_colon_span.value()))
        s.append(wrap(self.tr("(OC) Whether to always align with the first parameter, even if it is too short. ")))
        s.append("align_oc_msg_colon_first = {} # true/false".format(self.align_oc_msg_colon_first.currentText()))
        s.append(wrap(self.tr("(OC) Whether to align parameters in an Objective-C '+' or '-' declaration on the ':'. ")))
        s.append("align_oc_decl_colon = {} # true/false".format(self.align_oc_decl_colon.currentText()))
        s.append(wrap(self.tr("(OC) Whether to not align parameters in an Objectve-C message call if first colon is not on next line of the message call (the same way Xcode does aligment). ")))
        s.append("align_oc_msg_colon_xcode_like = {} # true/false".format(self.align_oc_msg_colon_xcode_like.currentText()))
        s.append(wrap(self.tr("Try to wrap comments at N columns. ")))
        s.append("cmt_width = {} # unsigned number".format(self.cmt_width.value()))
        s.append(wrap(self.tr("How to reflow comments. ")+self.tr("0: No reflowing (apart from the line wrapping due to cmt_width) (default) 1: No touching at all 2: Full reflow. ")))
        s.append("cmt_reflow_mode = {} # unsigned number".format(self.cmt_reflow_mode.value()))
        s.append(wrap(self.tr("Whether to convert all tabs to spaces in comments. ")+self.tr("If false, tabs in comments are left alone, unless used for indenting. ")))
        s.append("cmt_convert_tab_to_spaces = {} # true/false".format(self.cmt_convert_tab_to_spaces.currentText()))
        s.append(wrap(self.tr("Whether to apply changes to multi-line comments, including cmt_width, keyword substitution and leading chars. ")+self.tr("Default: true. ")))
        s.append("cmt_indent_multi = {} # true/false".format(self.cmt_indent_multi.currentText()))
        s.append(wrap(self.tr("Whether to group c-comments that look like they are in a block. ")))
        s.append("cmt_c_group = {} # true/false".format(self.cmt_c_group.currentText()))
        s.append(wrap(self.tr("Whether to put an empty '/*' on the first line of the combined c-comment. ")))
        s.append("cmt_c_nl_start = {} # true/false".format(self.cmt_c_nl_start.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before the closing '*/' of the combined c-comment. ")))
        s.append("cmt_c_nl_end = {} # true/false".format(self.cmt_c_nl_end.currentText()))
        s.append(wrap(self.tr("Whether to change cpp-comments into c-comments. ")))
        s.append("cmt_cpp_to_c = {} # true/false".format(self.cmt_cpp_to_c.currentText()))
        s.append(wrap(self.tr("Whether to group cpp-comments that look like they are in a block. ")+self.tr("Only meaningful if cmt_cpp_to_c=true. ")))
        s.append("cmt_cpp_group = {} # true/false".format(self.cmt_cpp_group.currentText()))
        s.append(wrap(self.tr("Whether to put an empty '/*' on the first line of the combined cpp-comment when converting to a c-comment. ")+self.tr("Requires cmt_cpp_to_c=true and cmt_cpp_group=true. ")))
        s.append("cmt_cpp_nl_start = {} # true/false".format(self.cmt_cpp_nl_start.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before the closing '*/' of the combined cpp-comment when converting to a c-comment. ")+self.tr("Requires cmt_cpp_to_c=true and cmt_cpp_group=true. ")))
        s.append("cmt_cpp_nl_end = {} # true/false".format(self.cmt_cpp_nl_end.currentText()))
        s.append(wrap(self.tr("Whether to put a star on subsequent comment lines. ")))
        s.append("cmt_star_cont = {} # true/false".format(self.cmt_star_cont.currentText()))
        s.append(wrap(self.tr("The number of spaces to insert at the start of subsequent comment lines. ")))
        s.append("cmt_sp_before_star_cont = {} # unsigned number".format(self.cmt_sp_before_star_cont.value()))
        s.append(wrap(self.tr("The number of spaces to insert after the star on subsequent comment lines. ")))
        s.append("cmt_sp_after_star_cont = {} # unsigned number".format(self.cmt_sp_after_star_cont.value()))
        s.append(wrap(self.tr("For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length. ")+self.tr("Default: true. ")))
        s.append("cmt_multi_check_last = {} # true/false".format(self.cmt_multi_check_last.currentText()))
        s.append(wrap(self.tr("For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length AND if the length is bigger as the first_len minimum. ")+self.tr("Default: 4. ")))
        s.append("cmt_multi_first_len_minimum = {} # unsigned number".format(self.cmt_multi_first_len_minimum.value()))
        s.append(wrap(self.tr("Path to a file that contains text to insert at the beginning of a file if the file doesn't start with a C/C++ comment. ")+self.tr("If the inserted text contains '$(filename)', that will be replaced with the current file's name. ")))
        s.append("cmt_insert_file_header = \"{}\" # string".format(self.cmt_insert_file_header.text()))
        s.append(wrap(self.tr("Path to a file that contains text to insert at the end of a file if the file doesn't end with a C/C++ comment. ")+self.tr("If the inserted text contains '$(filename)', that will be replaced with the current file's name. ")))
        s.append("cmt_insert_file_footer = \"{}\" # string".format(self.cmt_insert_file_footer.text()))
        s.append(wrap(self.tr("Path to a file that contains text to insert before a function definition if the function isn't preceded by a C/C++ comment. ")+self.tr("If the inserted text contains '$(function)', '$(javaparam)' or '$(fclass)', these will be replaced with, respectively, the name of the function, the javadoc '@param' and '@return' stuff, or the name of the class to which the member function belongs. ")))
        s.append("cmt_insert_func_header = \"{}\" # string".format(self.cmt_insert_func_header.text()))
        s.append(wrap(self.tr("Path to a file that contains text to insert before a class if the class isn't preceded by a C/C++ comment. ")+self.tr("If the inserted text contains '$(class)', that will be replaced with the class name. ")))
        s.append("cmt_insert_class_header = \"{}\" # string".format(self.cmt_insert_class_header.text()))
        s.append(wrap(self.tr("Path to a file that contains text to insert before an Objective-C message specification, if the method isn't preceded by a C/C++ comment. ")+self.tr("If the inserted text contains '$(message)' or '$(javaparam)', these will be replaced with, respectively, the name of the function, or the javadoc '@param' and '@return' stuff. ")))
        s.append("cmt_insert_oc_msg_header = \"{}\" # string".format(self.cmt_insert_oc_msg_header.text()))
        s.append(wrap(self.tr("Whether a comment should be inserted if a preprocessor is encountered when stepping backwards from a function name. ")+self.tr("Applies to cmt_insert_oc_msg_header, cmt_insert_func_header and cmt_insert_class_header. ")))
        s.append("cmt_insert_before_preproc = {} # true/false".format(self.cmt_insert_before_preproc.currentText()))
        s.append(wrap(self.tr("Whether a comment should be inserted if a function is declared inline to a class definition. ")+self.tr("Applies to cmt_insert_func_header. ")+self.tr("Default: true. ")))
        s.append("cmt_insert_before_inlines = {} # true/false".format(self.cmt_insert_before_inlines.currentText()))
        s.append(wrap(self.tr("Whether a comment should be inserted if the function is a class constructor or destructor. ")+self.tr("Applies to cmt_insert_func_header. ")))
        s.append("cmt_insert_before_ctor_dtor = {} # true/false".format(self.cmt_insert_before_ctor_dtor.currentText()))
        s.append(wrap(self.tr("Add or remove braces on a single-line 'do' statement. ")))
        s.append("mod_full_brace_do = {} # ignore/add/remove/force".format(self.mod_full_brace_do.currentText()))
        s.append(wrap(self.tr("Add or remove braces on a single-line 'for' statement. ")))
        s.append("mod_full_brace_for = {} # ignore/add/remove/force".format(self.mod_full_brace_for.currentText()))
        s.append(wrap(self.tr("(Pawn) Add or remove braces on a single-line function definition. ")))
        s.append("mod_full_brace_function = {} # ignore/add/remove/force".format(self.mod_full_brace_function.currentText()))
        s.append(wrap(self.tr("Add or remove braces on a single-line 'if' statement. ")+self.tr("Braces will not be removed if the braced statement contains an 'else'. ")))
        s.append("mod_full_brace_if = {} # ignore/add/remove/force".format(self.mod_full_brace_if.currentText()))
        s.append(wrap(self.tr("Whether to enforce that all blocks of an 'if'/'else if'/'else' chain either have, or do not have, braces. ")+self.tr("If true, braces will be added if any block needs braces, and will only be removed if they can be removed from all blocks. ")+self.tr("Overrides mod_full_brace_if. ")))
        s.append("mod_full_brace_if_chain = {} # true/false".format(self.mod_full_brace_if_chain.currentText()))
        s.append(wrap(self.tr("Whether to add braces to all blocks of an 'if'/'else if'/'else' chain. ")+self.tr("If true, mod_full_brace_if_chain will only remove braces from an 'if' that does not have an 'else if' or 'else'. ")))
        s.append("mod_full_brace_if_chain_only = {} # true/false".format(self.mod_full_brace_if_chain_only.currentText()))
        s.append(wrap(self.tr("Add or remove braces on single-line 'while' statement. ")))
        s.append("mod_full_brace_while = {} # ignore/add/remove/force".format(self.mod_full_brace_while.currentText()))
        s.append(wrap(self.tr("Add or remove braces on single-line 'using ()' statement. ")))
        s.append("mod_full_brace_using = {} # ignore/add/remove/force".format(self.mod_full_brace_using.currentText()))
        s.append(wrap(self.tr("Don't remove braces around statements that span N newlines. ")))
        s.append("mod_full_brace_nl = {} # unsigned number".format(self.mod_full_brace_nl.value()))
        s.append(wrap(self.tr("Whether to prevent removal of braces from 'if'/'for'/'while'/etc. ")+self.tr("blocks which span multiple lines. ")+self.tr("Affects:   mod_full_brace_for   mod_full_brace_if   mod_full_brace_if_chain   mod_full_brace_if_chain_only   mod_full_brace_while   mod_full_brace_using. ")+self.tr("Does not affect:   mod_full_brace_do   mod_full_brace_function. ")))
        s.append("mod_full_brace_nl_block_rem_mlcond = {} # true/false".format(self.mod_full_brace_nl_block_rem_mlcond.currentText()))
        s.append(wrap(self.tr("Add or remove unnecessary parenthesis on 'return' statement. ")))
        s.append("mod_paren_on_return = {} # ignore/add/remove/force".format(self.mod_paren_on_return.currentText()))
        s.append(wrap(self.tr("(Pawn) Whether to change optional semicolons to real semicolons. ")))
        s.append("mod_pawn_semicolon = {} # true/false".format(self.mod_pawn_semicolon.currentText()))
        s.append(wrap(self.tr("Whether to fully parenthesize Boolean expressions in 'while' and 'if' statement, as in 'if (a && b > c)' => 'if (a && (b > c))'. ")))
        s.append("mod_full_paren_if_bool = {} # true/false".format(self.mod_full_paren_if_bool.currentText()))
        s.append(wrap(self.tr("Whether to remove superfluous semicolons. ")))
        s.append("mod_remove_extra_semicolon = {} # true/false".format(self.mod_remove_extra_semicolon.currentText()))
        s.append(wrap(self.tr("If a function body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added. ")))
        s.append("mod_add_long_function_closebrace_comment = {} # unsigned number".format(self.mod_add_long_function_closebrace_comment.value()))
        s.append(wrap(self.tr("If a namespace body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added. ")))
        s.append("mod_add_long_namespace_closebrace_comment = {} # unsigned number".format(self.mod_add_long_namespace_closebrace_comment.value()))
        s.append(wrap(self.tr("If a class body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added. ")))
        s.append("mod_add_long_class_closebrace_comment = {} # unsigned number".format(self.mod_add_long_class_closebrace_comment.value()))
        s.append(wrap(self.tr("If a switch body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added. ")))
        s.append("mod_add_long_switch_closebrace_comment = {} # unsigned number".format(self.mod_add_long_switch_closebrace_comment.value()))
        s.append(wrap(self.tr("If an #ifdef body exceeds the specified number of newlines and doesn't have a comment after the #endif, a comment will be added. ")))
        s.append("mod_add_long_ifdef_endif_comment = {} # unsigned number".format(self.mod_add_long_ifdef_endif_comment.value()))
        s.append(wrap(self.tr("If an #ifdef or #else body exceeds the specified number of newlines and doesn't have a comment after the #else, a comment will be added. ")))
        s.append("mod_add_long_ifdef_else_comment = {} # unsigned number".format(self.mod_add_long_ifdef_else_comment.value()))
        s.append(wrap(self.tr("Whether to take care of the case by the mod_sort_xx options. ")))
        s.append("mod_sort_case_sensitive = {} # true/false".format(self.mod_sort_case_sensitive.currentText()))
        s.append(wrap(self.tr("Whether to sort consecutive single-line 'import' statements. ")))
        s.append("mod_sort_import = {} # true/false".format(self.mod_sort_import.currentText()))
        s.append(wrap(self.tr("(C#) Whether to sort consecutive single-line 'using' statements. ")))
        s.append("mod_sort_using = {} # true/false".format(self.mod_sort_using.currentText()))
        s.append(wrap(self.tr("Whether to sort consecutive single-line '#include' statements (C/C++) and '#import' statements (Objective-C). ")+self.tr("Be aware that this has the potential to break your code if your includes/imports have ordering dependencies. ")))
        s.append("mod_sort_include = {} # true/false".format(self.mod_sort_include.currentText()))
        s.append(wrap(self.tr("Whether to prioritize '#include' and '#import' statements that contain filename without extension when sorting is enabled. ")))
        s.append("mod_sort_incl_import_prioritize_filename = {} # true/false".format(self.mod_sort_incl_import_prioritize_filename.currentText()))
        s.append(wrap(self.tr("Whether to prioritize '#include' and '#import' statements that does not contain extensions when sorting is enabled. ")))
        s.append("mod_sort_incl_import_prioritize_extensionless = {} # true/false".format(self.mod_sort_incl_import_prioritize_extensionless.currentText()))
        s.append(wrap(self.tr("Whether to prioritize '#include' and '#import' statements that contain angle over quotes when sorting is enabled. ")))
        s.append("mod_sort_incl_import_prioritize_angle_over_quotes = {} # true/false".format(self.mod_sort_incl_import_prioritize_angle_over_quotes.currentText()))
        s.append(wrap(self.tr("Whether to ignore file extension in '#include' and '#import' statements for sorting comparison. ")))
        s.append("mod_sort_incl_import_ignore_extension = {} # true/false".format(self.mod_sort_incl_import_ignore_extension.currentText()))
        s.append(wrap(self.tr("Whether to group '#include' and '#import' statements when sorting is enabled. ")))
        s.append("mod_sort_incl_import_grouping_enabled = {} # true/false".format(self.mod_sort_incl_import_grouping_enabled.currentText()))
        s.append(wrap(self.tr("Whether to move a 'break' that appears after a fully braced 'case' before the close brace, as in 'case X: { ... ")+self.tr("} break;' => 'case X: { ... ")+self.tr("break; }'. ")))
        s.append("mod_move_case_break = {} # true/false".format(self.mod_move_case_break.currentText()))
        s.append(wrap(self.tr("Add or remove braces around a fully braced case statement. ")+self.tr("Will only remove braces if there are no variable declarations in the block. ")))
        s.append("mod_case_brace = {} # ignore/add/remove/force".format(self.mod_case_brace.currentText()))
        s.append(wrap(self.tr("Whether to remove a void 'return;' that appears as the last statement in a function. ")))
        s.append("mod_remove_empty_return = {} # true/false".format(self.mod_remove_empty_return.currentText()))
        s.append(wrap(self.tr("Add or remove the comma after the last value of an enumeration. ")))
        s.append("mod_enum_last_comma = {} # ignore/add/remove/force".format(self.mod_enum_last_comma.currentText()))
        s.append(wrap(self.tr("(OC) Whether to organize the properties. ")+self.tr("If true, properties will be rearranged according to the mod_sort_oc_property_*_weight factors. ")))
        s.append("mod_sort_oc_properties = {} # true/false".format(self.mod_sort_oc_properties.currentText()))
        s.append(wrap(self.tr("(OC) Weight of a class property modifier. ")))
        s.append("mod_sort_oc_property_class_weight = {} # number".format(self.mod_sort_oc_property_class_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of 'atomic' and 'nonatomic'. ")))
        s.append("mod_sort_oc_property_thread_safe_weight = {} # number".format(self.mod_sort_oc_property_thread_safe_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of 'readwrite' when organizing properties. ")))
        s.append("mod_sort_oc_property_readwrite_weight = {} # number".format(self.mod_sort_oc_property_readwrite_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of a reference type specifier ('retain', 'copy', 'assign', 'weak', 'strong') when organizing properties. ")))
        s.append("mod_sort_oc_property_reference_weight = {} # number".format(self.mod_sort_oc_property_reference_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of getter type ('getter=') when organizing properties. ")))
        s.append("mod_sort_oc_property_getter_weight = {} # number".format(self.mod_sort_oc_property_getter_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of setter type ('setter=') when organizing properties. ")))
        s.append("mod_sort_oc_property_setter_weight = {} # number".format(self.mod_sort_oc_property_setter_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of nullability type ('nullable', 'nonnull', 'null_unspecified', 'null_resettable') when organizing properties. ")))
        s.append("mod_sort_oc_property_nullability_weight = {} # number".format(self.mod_sort_oc_property_nullability_weight.value()))
        s.append(wrap(self.tr("Add or remove indentation of preprocessor directives inside #if blocks at brace level 0 (file-level). ")))
        s.append("pp_indent = {} # ignore/add/remove/force".format(self.pp_indent.currentText()))
        s.append(wrap(self.tr("Whether to indent #if/#else/#endif at the brace level. ")+self.tr("If false, these are indented from column 1. ")))
        s.append("pp_indent_at_level = {} # true/false".format(self.pp_indent_at_level.currentText()))
        s.append(wrap(self.tr("Specifies the number of columns to indent preprocessors per level at brace level 0 (file-level). ")+self.tr("If pp_indent_at_level=false, also specifies the number of columns to indent preprocessors per level at brace level > 0 (function-level). ")+self.tr("Default: 1. ")))
        s.append("pp_indent_count = {} # unsigned number".format(self.pp_indent_count.value()))
        s.append(wrap(self.tr("Add or remove space after # based on pp_level of #if blocks. ")))
        s.append("pp_space = {} # ignore/add/remove/force".format(self.pp_space.currentText()))
        s.append(wrap(self.tr("Sets the number of spaces per level added with pp_space. ")))
        s.append("pp_space_count = {} # unsigned number".format(self.pp_space_count.value()))
        s.append(wrap(self.tr("The indent for '#region' and '#endregion' in C# and '#pragma region' in C/C++. ")+self.tr("Negative values decrease indent down to the first column. ")))
        s.append("pp_indent_region = {} # number".format(self.pp_indent_region.value()))
        s.append(wrap(self.tr("Whether to indent the code between #region and #endregion. ")))
        s.append("pp_region_indent_code = {} # true/false".format(self.pp_region_indent_code.currentText()))
        s.append(wrap(self.tr("If pp_indent_at_level=true, sets the indent for #if, #else and #endif when not at file-level. ")+self.tr("Negative values decrease indent down to the first column. ")+self.tr("=0: Indent preprocessors using output_tab_size >0: Column at which all preprocessors will be indented. ")))
        s.append("pp_indent_if = {} # number".format(self.pp_indent_if.value()))
        s.append(wrap(self.tr("Whether to indent the code between #if, #else and #endif. ")))
        s.append("pp_if_indent_code = {} # true/false".format(self.pp_if_indent_code.currentText()))
        s.append(wrap(self.tr("Whether to indent '#define' at the brace level. ")+self.tr("If false, these are indented from column 1. ")))
        s.append("pp_define_at_level = {} # true/false".format(self.pp_define_at_level.currentText()))
        s.append(wrap(self.tr("Whether to ignore the '#define' body while formatting. ")))
        s.append("pp_ignore_define_body = {} # true/false".format(self.pp_ignore_define_body.currentText()))
        s.append(wrap(self.tr("Whether to indent case statements between #if, #else, and #endif. ")+self.tr("Only applies to the indent of the preprocesser that the case statements directly inside of. ")+self.tr("Default: true. ")))
        s.append("pp_indent_case = {} # true/false".format(self.pp_indent_case.currentText()))
        s.append(wrap(self.tr("Whether to indent whole function definitions between #if, #else, and #endif. ")+self.tr("Only applies to the indent of the preprocesser that the function definition is directly inside of. ")+self.tr("Default: true. ")))
        s.append("pp_indent_func_def = {} # true/false".format(self.pp_indent_func_def.currentText()))
        s.append(wrap(self.tr("Whether to indent extern C blocks between #if, #else, and #endif. ")+self.tr("Only applies to the indent of the preprocesser that the extern block is directly inside of. ")+self.tr("Default: true. ")))
        s.append("pp_indent_extern = {} # true/false".format(self.pp_indent_extern.currentText()))
        s.append(wrap(self.tr("Whether to indent braces directly inside #if, #else, and #endif. ")+self.tr("Only applies to the indent of the preprocesser that the braces are directly inside of. ")+self.tr("Default: true. ")))
        s.append("pp_indent_brace = {} # true/false".format(self.pp_indent_brace.currentText()))
        s.append(wrap(self.tr("The regex for include category with priority 0. ")))
        s.append("include_category_0 = \"{}\" # string".format(self.include_category_0.text()))
        s.append(wrap(self.tr("The regex for include category with priority 1. ")))
        s.append("include_category_1 = \"{}\" # string".format(self.include_category_1.text()))
        s.append(wrap(self.tr("The regex for include category with priority 2. ")))
        s.append("include_category_2 = \"{}\" # string".format(self.include_category_2.text()))
        s.append(wrap(self.tr("true:  indent_func_call_param will be used (default) false: indent_func_call_param will NOT be used. ")+self.tr("Default: true. ")))
        s.append("use_indent_func_call_param = {} # true/false".format(self.use_indent_func_call_param.currentText()))
        s.append(wrap(self.tr("The value of the indentation for a continuation line is calculated differently if the statement is: - a declaration: your case with QString fileName ... ")+self.tr("- an assignment: your case with pSettings = new QSettings( ... ")+self.tr("At the second case the indentation value might be used twice: - at the assignment - at the function call (if present). ")+self.tr("To prevent the double use of the indentation value, use this option with the value 'true'. ")+self.tr("true:  indent_continue will be used only once false: indent_continue will be used every time (default). ")))
        s.append("use_indent_continue_only_once = {} # true/false".format(self.use_indent_continue_only_once.currentText()))
        s.append(wrap(self.tr("The value might be used twice: - at the assignment - at the opening brace. ")+self.tr("To prevent the double use of the indentation value, use this option with the value 'true'. ")+self.tr("true:  indentation will be used only once false: indentation will be used every time (default). ")))
        s.append("indent_cpp_lambda_only_once = {} # true/false".format(self.indent_cpp_lambda_only_once.currentText()))
        s.append(wrap(self.tr("Whether sp_after_angle takes precedence over sp_inside_fparen. ")+self.tr("This was the historic behavior, but is probably not the desired behavior, so this is off by default. ")))
        s.append("use_sp_after_angle_always = {} # true/false".format(self.use_sp_after_angle_always.currentText()))
        s.append(wrap(self.tr("Whether to apply special formatting for Qt SIGNAL/SLOT macros. ")+self.tr("Essentially, this tries to format these so that they match Qt's normalized form (ie the result of QMetaObject::normalizedSignature), which can slightly improve the performance of the QObject::connect call, rather than how they would otherwise be formatted. ")+self.tr("See options_for_QT.cpp for details. ")+self.tr("Default: true. ")))
        s.append("use_options_overriding_for_qt_macros = {} # true/false".format(self.use_options_overriding_for_qt_macros.currentText()))
        s.append(wrap(self.tr("If true: the form feed character is removed from the list of whitespace characters. ")+self.tr("See https://en.cppreference.com/w/cpp/string/byte/isspace. ")))
        s.append("use_form_feed_no_more_as_whitespace_character = {} # true/false".format(self.use_form_feed_no_more_as_whitespace_character.currentText()))
        s.append(wrap(self.tr("(C#) Warning is given if doing tab-to-\t replacement and we have found one in a C# verbatim string literal. ")+self.tr("Default: 2. ")))
        s.append("warn_level_tabs_found_in_verbatim_string_literals = {} # unsigned number".format(self.warn_level_tabs_found_in_verbatim_string_literals.value()))
        s.append(wrap(self.tr("Limit the number of loops. ")+self.tr("Used by uncrustify.cpp to exit from infinite loop. ")+self.tr("0: no limit. ")))
        s.append("debug_max_number_of_loops = {} # number".format(self.debug_max_number_of_loops.value()))
        s.append(wrap(self.tr("Set the number of the line to protocol; Used in the function prot_the_line if the 2. ")+self.tr("parameter is zero. ")+self.tr("0: nothing protocol. ")))
        s.append("debug_line_number_to_protocol = {} # number".format(self.debug_line_number_to_protocol.value()))
        return '\n'.join(s)