from PyQt5 import QtWidgets, QtGui
import textwrap
import re
def wrap(s):
    my_wrap = textwrap.TextWrapper(width = 80)
    wrap_list = my_wrap.wrap(text=s)
    s = ""
    for line in wrap_list:
        s += "\n# "+line
    return s
class Widget(QtWidgets.QToolBox):
    def __init__(self, parent=None):
        super(Widget, self).__init__(parent)
        self.setWindowTitle('Uncrustify-0.71.0_f')
        self.widget1 = QtWidgets.QWidget()
        self.addItem(self.widget1, self.tr("General options"))
        self.lt1 = QtWidgets.QGridLayout(self.widget1)
        self.labelnewlines = QtWidgets.QLabel(self.tr("The type of line endings.")+' '+self.tr("\n")+' '+self.tr("Default: auto")+' '+self.tr("\n"))
        self.labelnewlines.setWordWrap(True)
        self.lt1.addWidget(self.labelnewlines, 0, 0, 1, 5)
        if self.tr("code_newlines")!="code_newlines":
            self.codenewlines = QtWidgets.QLabel(self.tr("code_newlines"))
            self.codenewlines.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codenewlines, 1, 0, 1, 5)
        self.namenewlines = QtWidgets.QLabel("newlines")
        self.namenewlines.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namenewlines, 2, 0)
        self.newlines = QtWidgets.QComboBox()
        self.newlines.addItems(['lf','crlf','cr','auto'])
        self.newlines.setCurrentText('auto')
        self.lt1.addWidget(self.newlines, 2, 1, 1, 4)
        self.labelinput_tab_size = QtWidgets.QLabel(self.tr("The original size of tabs in the input.")+' '+self.tr("\n")+' '+self.tr("Default: 8")+' '+self.tr("\n"))
        self.labelinput_tab_size.setWordWrap(True)
        self.lt1.addWidget(self.labelinput_tab_size, 3, 0, 1, 5)
        if self.tr("code_input_tab_size")!="code_input_tab_size":
            self.codeinput_tab_size = QtWidgets.QLabel(self.tr("code_input_tab_size"))
            self.codeinput_tab_size.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codeinput_tab_size, 4, 0, 1, 5)
        self.nameinput_tab_size = QtWidgets.QLabel("input_tab_size")
        self.nameinput_tab_size.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.nameinput_tab_size, 5, 0)
        self.input_tab_size = QtWidgets.QSpinBox()
        self.input_tab_size.setMinimum(0)
        self.input_tab_size.setMaximum(100)
        self.input_tab_size.setValue(8)
        self.lt1.addWidget(self.input_tab_size, 5, 1, 1, 4)
        self.labeloutput_tab_size = QtWidgets.QLabel(self.tr("The size of tabs in the output (only used if align_with_tabs=true).")+' '+self.tr("\n")+' '+self.tr("Default: 8")+' '+self.tr("\n"))
        self.labeloutput_tab_size.setWordWrap(True)
        self.lt1.addWidget(self.labeloutput_tab_size, 6, 0, 1, 5)
        if self.tr("code_output_tab_size")!="code_output_tab_size":
            self.codeoutput_tab_size = QtWidgets.QLabel(self.tr("code_output_tab_size"))
            self.codeoutput_tab_size.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codeoutput_tab_size, 7, 0, 1, 5)
        self.nameoutput_tab_size = QtWidgets.QLabel("output_tab_size")
        self.nameoutput_tab_size.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.nameoutput_tab_size, 8, 0)
        self.output_tab_size = QtWidgets.QSpinBox()
        self.output_tab_size.setMinimum(0)
        self.output_tab_size.setMaximum(100)
        self.output_tab_size.setValue(8)
        self.lt1.addWidget(self.output_tab_size, 8, 1, 1, 4)
        self.labelstring_escape_char = QtWidgets.QLabel(self.tr("The ASCII value of the string escape char, usually 92 (\) or (Pawn) 94 (^).")+' '+self.tr("\n")+' '+self.tr("Default: 92")+' '+self.tr("\n"))
        self.labelstring_escape_char.setWordWrap(True)
        self.lt1.addWidget(self.labelstring_escape_char, 9, 0, 1, 5)
        if self.tr("code_string_escape_char")!="code_string_escape_char":
            self.codestring_escape_char = QtWidgets.QLabel(self.tr("code_string_escape_char"))
            self.codestring_escape_char.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codestring_escape_char, 10, 0, 1, 5)
        self.namestring_escape_char = QtWidgets.QLabel("string_escape_char")
        self.namestring_escape_char.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namestring_escape_char, 11, 0)
        self.string_escape_char = QtWidgets.QSpinBox()
        self.string_escape_char.setMinimum(0)
        self.string_escape_char.setMaximum(100)
        self.string_escape_char.setValue(92)
        self.lt1.addWidget(self.string_escape_char, 11, 1, 1, 4)
        self.labelstring_escape_char2 = QtWidgets.QLabel(self.tr("Alternate string escape char (usually only used for Pawn).")+' '+self.tr("Only works right before the quote char.")+' '+self.tr("\n"))
        self.labelstring_escape_char2.setWordWrap(True)
        self.lt1.addWidget(self.labelstring_escape_char2, 12, 0, 1, 5)
        if self.tr("code_string_escape_char2")!="code_string_escape_char2":
            self.codestring_escape_char2 = QtWidgets.QLabel(self.tr("code_string_escape_char2"))
            self.codestring_escape_char2.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codestring_escape_char2, 13, 0, 1, 5)
        self.namestring_escape_char2 = QtWidgets.QLabel("string_escape_char2")
        self.namestring_escape_char2.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namestring_escape_char2, 14, 0)
        self.string_escape_char2 = QtWidgets.QSpinBox()
        self.string_escape_char2.setMinimum(0)
        self.string_escape_char2.setMaximum(100)
        self.string_escape_char2.setValue(0)
        self.lt1.addWidget(self.string_escape_char2, 14, 1, 1, 4)
        self.labelstring_replace_tab_chars = QtWidgets.QLabel(self.tr("Replace tab characters found in string literals with the escape sequence \t instead.")+' '+self.tr("\n"))
        self.labelstring_replace_tab_chars.setWordWrap(True)
        self.lt1.addWidget(self.labelstring_replace_tab_chars, 15, 0, 1, 5)
        if self.tr("code_string_replace_tab_chars")!="code_string_replace_tab_chars":
            self.codestring_replace_tab_chars = QtWidgets.QLabel(self.tr("code_string_replace_tab_chars"))
            self.codestring_replace_tab_chars.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codestring_replace_tab_chars, 16, 0, 1, 5)
        self.namestring_replace_tab_chars = QtWidgets.QLabel("string_replace_tab_chars")
        self.namestring_replace_tab_chars.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namestring_replace_tab_chars, 17, 0)
        self.string_replace_tab_chars = QtWidgets.QComboBox()
        self.string_replace_tab_chars.addItems(['true','false'])
        self.string_replace_tab_chars.setCurrentText('false')
        self.lt1.addWidget(self.string_replace_tab_chars, 17, 1, 1, 4)
        self.labeltok_split_gte = QtWidgets.QLabel(self.tr("Allow interpreting '>=' and '>>=' as part of a template in code like 'void f(list<list<B>>=val);'.")+' '+self.tr("If true, 'assert(x<0 && y>=3)' will be broken.")+' '+self.tr("Improvements to template detection may make this option obsolete.")+' '+self.tr("\n"))
        self.labeltok_split_gte.setWordWrap(True)
        self.lt1.addWidget(self.labeltok_split_gte, 18, 0, 1, 5)
        if self.tr("code_tok_split_gte")!="code_tok_split_gte":
            self.codetok_split_gte = QtWidgets.QLabel(self.tr("code_tok_split_gte"))
            self.codetok_split_gte.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codetok_split_gte, 19, 0, 1, 5)
        self.nametok_split_gte = QtWidgets.QLabel("tok_split_gte")
        self.nametok_split_gte.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.nametok_split_gte, 20, 0)
        self.tok_split_gte = QtWidgets.QComboBox()
        self.tok_split_gte.addItems(['true','false'])
        self.tok_split_gte.setCurrentText('false')
        self.lt1.addWidget(self.tok_split_gte, 20, 1, 1, 4)
        self.labeldisable_processing_nl_cont = QtWidgets.QLabel(self.tr("Disable formatting of NL_CONT ('\\n') ended lines (e.g. multiline macros)")+' '+self.tr("\n"))
        self.labeldisable_processing_nl_cont.setWordWrap(True)
        self.lt1.addWidget(self.labeldisable_processing_nl_cont, 21, 0, 1, 5)
        if self.tr("code_disable_processing_nl_cont")!="code_disable_processing_nl_cont":
            self.codedisable_processing_nl_cont = QtWidgets.QLabel(self.tr("code_disable_processing_nl_cont"))
            self.codedisable_processing_nl_cont.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codedisable_processing_nl_cont, 22, 0, 1, 5)
        self.namedisable_processing_nl_cont = QtWidgets.QLabel("disable_processing_nl_cont")
        self.namedisable_processing_nl_cont.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namedisable_processing_nl_cont, 23, 0)
        self.disable_processing_nl_cont = QtWidgets.QComboBox()
        self.disable_processing_nl_cont.addItems(['true','false'])
        self.disable_processing_nl_cont.setCurrentText('false')
        self.lt1.addWidget(self.disable_processing_nl_cont, 23, 1, 1, 4)
        self.labeldisable_processing_cmt = QtWidgets.QLabel(self.tr("Specify the marker used in comments to disable processing of part of the file.")+' '+self.tr("The comment should be used alone in one line.")+' '+self.tr("\n")+' '+self.tr("Default:  *INDENT-OFF*")+' '+self.tr("\n"))
        self.labeldisable_processing_cmt.setWordWrap(True)
        self.lt1.addWidget(self.labeldisable_processing_cmt, 24, 0, 1, 5)
        if self.tr("code_disable_processing_cmt")!="code_disable_processing_cmt":
            self.codedisable_processing_cmt = QtWidgets.QLabel(self.tr("code_disable_processing_cmt"))
            self.codedisable_processing_cmt.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codedisable_processing_cmt, 25, 0, 1, 5)
        self.namedisable_processing_cmt = QtWidgets.QLabel("disable_processing_cmt")
        self.namedisable_processing_cmt.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namedisable_processing_cmt, 26, 0)
        self.disable_processing_cmt = QtWidgets.QLineEdit()
        self.disable_processing_cmt.setText(" *INDENT-OFF*")
        self.lt1.addWidget(self.disable_processing_cmt, 26, 1, 1, 4)
        self.labelenable_processing_cmt = QtWidgets.QLabel(self.tr("Specify the marker used in comments to (re)enable processing in a file.")+' '+self.tr("The comment should be used alone in one line.")+' '+self.tr("\n")+' '+self.tr("Default:  *INDENT-ON*")+' '+self.tr("\n"))
        self.labelenable_processing_cmt.setWordWrap(True)
        self.lt1.addWidget(self.labelenable_processing_cmt, 27, 0, 1, 5)
        if self.tr("code_enable_processing_cmt")!="code_enable_processing_cmt":
            self.codeenable_processing_cmt = QtWidgets.QLabel(self.tr("code_enable_processing_cmt"))
            self.codeenable_processing_cmt.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codeenable_processing_cmt, 28, 0, 1, 5)
        self.nameenable_processing_cmt = QtWidgets.QLabel("enable_processing_cmt")
        self.nameenable_processing_cmt.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.nameenable_processing_cmt, 29, 0)
        self.enable_processing_cmt = QtWidgets.QLineEdit()
        self.enable_processing_cmt.setText(" *INDENT-ON*")
        self.lt1.addWidget(self.enable_processing_cmt, 29, 1, 1, 4)
        self.labelenable_digraphs = QtWidgets.QLabel(self.tr("Enable parsing of digraphs.")+' '+self.tr("\n"))
        self.labelenable_digraphs.setWordWrap(True)
        self.lt1.addWidget(self.labelenable_digraphs, 30, 0, 1, 5)
        if self.tr("code_enable_digraphs")!="code_enable_digraphs":
            self.codeenable_digraphs = QtWidgets.QLabel(self.tr("code_enable_digraphs"))
            self.codeenable_digraphs.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codeenable_digraphs, 31, 0, 1, 5)
        self.nameenable_digraphs = QtWidgets.QLabel("enable_digraphs")
        self.nameenable_digraphs.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.nameenable_digraphs, 32, 0)
        self.enable_digraphs = QtWidgets.QComboBox()
        self.enable_digraphs.addItems(['true','false'])
        self.enable_digraphs.setCurrentText('false')
        self.lt1.addWidget(self.enable_digraphs, 32, 1, 1, 4)
        self.labelutf8_bom = QtWidgets.QLabel(self.tr("Add or remove the UTF-8 BOM (recommend 'remove').")+' '+self.tr("\n"))
        self.labelutf8_bom.setWordWrap(True)
        self.lt1.addWidget(self.labelutf8_bom, 33, 0, 1, 5)
        if self.tr("code_utf8_bom")!="code_utf8_bom":
            self.codeutf8_bom = QtWidgets.QLabel(self.tr("code_utf8_bom"))
            self.codeutf8_bom.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codeutf8_bom, 34, 0, 1, 5)
        self.nameutf8_bom = QtWidgets.QLabel("utf8_bom")
        self.nameutf8_bom.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.nameutf8_bom, 35, 0)
        self.utf8_bom = QtWidgets.QComboBox()
        self.utf8_bom.addItems(['ignore','add','remove','force'])
        self.utf8_bom.setCurrentText('ignore')
        self.lt1.addWidget(self.utf8_bom, 35, 1, 1, 4)
        self.labelutf8_byte = QtWidgets.QLabel(self.tr("If the file contains bytes with values between 128 and 255, but is not UTF-8, then output as UTF-8.")+' '+self.tr("\n"))
        self.labelutf8_byte.setWordWrap(True)
        self.lt1.addWidget(self.labelutf8_byte, 36, 0, 1, 5)
        if self.tr("code_utf8_byte")!="code_utf8_byte":
            self.codeutf8_byte = QtWidgets.QLabel(self.tr("code_utf8_byte"))
            self.codeutf8_byte.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codeutf8_byte, 37, 0, 1, 5)
        self.nameutf8_byte = QtWidgets.QLabel("utf8_byte")
        self.nameutf8_byte.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.nameutf8_byte, 38, 0)
        self.utf8_byte = QtWidgets.QComboBox()
        self.utf8_byte.addItems(['true','false'])
        self.utf8_byte.setCurrentText('false')
        self.lt1.addWidget(self.utf8_byte, 38, 1, 1, 4)
        self.labelutf8_force = QtWidgets.QLabel(self.tr("Force the output encoding to UTF-8.")+' '+self.tr("\n"))
        self.labelutf8_force.setWordWrap(True)
        self.lt1.addWidget(self.labelutf8_force, 39, 0, 1, 5)
        if self.tr("code_utf8_force")!="code_utf8_force":
            self.codeutf8_force = QtWidgets.QLabel(self.tr("code_utf8_force"))
            self.codeutf8_force.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codeutf8_force, 40, 0, 1, 5)
        self.nameutf8_force = QtWidgets.QLabel("utf8_force")
        self.nameutf8_force.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.nameutf8_force, 41, 0)
        self.utf8_force = QtWidgets.QComboBox()
        self.utf8_force.addItems(['true','false'])
        self.utf8_force.setCurrentText('false')
        self.lt1.addWidget(self.utf8_force, 41, 1, 1, 4)
        self.labelsp_do_brace_open = QtWidgets.QLabel(self.tr("Add or remove space between 'do' and '{'.")+' '+self.tr("\n"))
        self.labelsp_do_brace_open.setWordWrap(True)
        self.lt1.addWidget(self.labelsp_do_brace_open, 42, 0, 1, 5)
        if self.tr("code_sp_do_brace_open")!="code_sp_do_brace_open":
            self.codesp_do_brace_open = QtWidgets.QLabel(self.tr("code_sp_do_brace_open"))
            self.codesp_do_brace_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codesp_do_brace_open, 43, 0, 1, 5)
        self.namesp_do_brace_open = QtWidgets.QLabel("sp_do_brace_open")
        self.namesp_do_brace_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namesp_do_brace_open, 44, 0)
        self.sp_do_brace_open = QtWidgets.QComboBox()
        self.sp_do_brace_open.addItems(['ignore','add','remove','force'])
        self.sp_do_brace_open.setCurrentText('ignore')
        self.lt1.addWidget(self.sp_do_brace_open, 44, 1, 1, 4)
        self.labelsp_brace_close_while = QtWidgets.QLabel(self.tr("Add or remove space between '}' and 'while'.")+' '+self.tr("\n"))
        self.labelsp_brace_close_while.setWordWrap(True)
        self.lt1.addWidget(self.labelsp_brace_close_while, 45, 0, 1, 5)
        if self.tr("code_sp_brace_close_while")!="code_sp_brace_close_while":
            self.codesp_brace_close_while = QtWidgets.QLabel(self.tr("code_sp_brace_close_while"))
            self.codesp_brace_close_while.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codesp_brace_close_while, 46, 0, 1, 5)
        self.namesp_brace_close_while = QtWidgets.QLabel("sp_brace_close_while")
        self.namesp_brace_close_while.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namesp_brace_close_while, 47, 0)
        self.sp_brace_close_while = QtWidgets.QComboBox()
        self.sp_brace_close_while.addItems(['ignore','add','remove','force'])
        self.sp_brace_close_while.setCurrentText('ignore')
        self.lt1.addWidget(self.sp_brace_close_while, 47, 1, 1, 4)
        self.labelsp_while_paren_open = QtWidgets.QLabel(self.tr("Add or remove space between 'while' and '('.")+' '+self.tr("\n"))
        self.labelsp_while_paren_open.setWordWrap(True)
        self.lt1.addWidget(self.labelsp_while_paren_open, 48, 0, 1, 5)
        if self.tr("code_sp_while_paren_open")!="code_sp_while_paren_open":
            self.codesp_while_paren_open = QtWidgets.QLabel(self.tr("code_sp_while_paren_open"))
            self.codesp_while_paren_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt1.addWidget(self.codesp_while_paren_open, 49, 0, 1, 5)
        self.namesp_while_paren_open = QtWidgets.QLabel("sp_while_paren_open")
        self.namesp_while_paren_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt1.addWidget(self.namesp_while_paren_open, 50, 0)
        self.sp_while_paren_open = QtWidgets.QComboBox()
        self.sp_while_paren_open.addItems(['ignore','add','remove','force'])
        self.sp_while_paren_open.setCurrentText('ignore')
        self.lt1.addWidget(self.sp_while_paren_open, 50, 1, 1, 4)
        self.widget2 = QtWidgets.QWidget()
        self.addItem(self.widget2, self.tr("Spacing options"))
        self.lt2 = QtWidgets.QGridLayout(self.widget2)
        self.labelsp_arith = QtWidgets.QLabel(self.tr("Add or remove space around non-assignment symbolic operators ('+', '/', '%', '<<', and so forth).")+' '+self.tr("\n"))
        self.labelsp_arith.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_arith, 0, 0, 1, 5)
        if self.tr("code_sp_arith")!="code_sp_arith":
            self.codesp_arith = QtWidgets.QLabel(self.tr("code_sp_arith"))
            self.codesp_arith.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_arith, 1, 0, 1, 5)
        self.namesp_arith = QtWidgets.QLabel("sp_arith")
        self.namesp_arith.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_arith, 2, 0)
        self.sp_arith = QtWidgets.QComboBox()
        self.sp_arith.addItems(['ignore','add','remove','force'])
        self.sp_arith.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_arith, 2, 1, 1, 4)
        self.labelsp_arith_additive = QtWidgets.QLabel(self.tr("Add or remove space around arithmetic operators '+' and '-'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_arith.")+' '+self.tr("\n"))
        self.labelsp_arith_additive.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_arith_additive, 3, 0, 1, 5)
        if self.tr("code_sp_arith_additive")!="code_sp_arith_additive":
            self.codesp_arith_additive = QtWidgets.QLabel(self.tr("code_sp_arith_additive"))
            self.codesp_arith_additive.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_arith_additive, 4, 0, 1, 5)
        self.namesp_arith_additive = QtWidgets.QLabel("sp_arith_additive")
        self.namesp_arith_additive.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_arith_additive, 5, 0)
        self.sp_arith_additive = QtWidgets.QComboBox()
        self.sp_arith_additive.addItems(['ignore','add','remove','force'])
        self.sp_arith_additive.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_arith_additive, 5, 1, 1, 4)
        self.labelsp_assign = QtWidgets.QLabel(self.tr("Add or remove space around assignment operator '=', '+=', etc.")+' '+self.tr("\n"))
        self.labelsp_assign.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_assign, 6, 0, 1, 5)
        if self.tr("code_sp_assign")!="code_sp_assign":
            self.codesp_assign = QtWidgets.QLabel(self.tr("code_sp_assign"))
            self.codesp_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_assign, 7, 0, 1, 5)
        self.namesp_assign = QtWidgets.QLabel("sp_assign")
        self.namesp_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_assign, 8, 0)
        self.sp_assign = QtWidgets.QComboBox()
        self.sp_assign.addItems(['ignore','add','remove','force'])
        self.sp_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_assign, 8, 1, 1, 4)
        self.labelsp_cpp_lambda_assign = QtWidgets.QLabel(self.tr("Add or remove space around '=' in C++11 lambda capture specifications.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_assign.")+' '+self.tr("\n"))
        self.labelsp_cpp_lambda_assign.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cpp_lambda_assign, 9, 0, 1, 5)
        if self.tr("code_sp_cpp_lambda_assign")!="code_sp_cpp_lambda_assign":
            self.codesp_cpp_lambda_assign = QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_assign"))
            self.codesp_cpp_lambda_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cpp_lambda_assign, 10, 0, 1, 5)
        self.namesp_cpp_lambda_assign = QtWidgets.QLabel("sp_cpp_lambda_assign")
        self.namesp_cpp_lambda_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cpp_lambda_assign, 11, 0)
        self.sp_cpp_lambda_assign = QtWidgets.QComboBox()
        self.sp_cpp_lambda_assign.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_assign, 11, 1, 1, 4)
        self.labelsp_cpp_lambda_square_paren = QtWidgets.QLabel(self.tr("Add or remove space after the capture specification of a C++11 lambda when an argument list is present, as in '[] <here> (int x){ ... }'.")+' '+self.tr("\n"))
        self.labelsp_cpp_lambda_square_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cpp_lambda_square_paren, 12, 0, 1, 5)
        if self.tr("code_sp_cpp_lambda_square_paren")!="code_sp_cpp_lambda_square_paren":
            self.codesp_cpp_lambda_square_paren = QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_square_paren"))
            self.codesp_cpp_lambda_square_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cpp_lambda_square_paren, 13, 0, 1, 5)
        self.namesp_cpp_lambda_square_paren = QtWidgets.QLabel("sp_cpp_lambda_square_paren")
        self.namesp_cpp_lambda_square_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cpp_lambda_square_paren, 14, 0)
        self.sp_cpp_lambda_square_paren = QtWidgets.QComboBox()
        self.sp_cpp_lambda_square_paren.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_square_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_square_paren, 14, 1, 1, 4)
        self.labelsp_cpp_lambda_square_brace = QtWidgets.QLabel(self.tr("Add or remove space after the capture specification of a C++11 lambda with no argument list is present, as in '[] <here> { ... }'.")+' '+self.tr("\n"))
        self.labelsp_cpp_lambda_square_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cpp_lambda_square_brace, 15, 0, 1, 5)
        if self.tr("code_sp_cpp_lambda_square_brace")!="code_sp_cpp_lambda_square_brace":
            self.codesp_cpp_lambda_square_brace = QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_square_brace"))
            self.codesp_cpp_lambda_square_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cpp_lambda_square_brace, 16, 0, 1, 5)
        self.namesp_cpp_lambda_square_brace = QtWidgets.QLabel("sp_cpp_lambda_square_brace")
        self.namesp_cpp_lambda_square_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cpp_lambda_square_brace, 17, 0)
        self.sp_cpp_lambda_square_brace = QtWidgets.QComboBox()
        self.sp_cpp_lambda_square_brace.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_square_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_square_brace, 17, 1, 1, 4)
        self.labelsp_cpp_lambda_paren_brace = QtWidgets.QLabel(self.tr("Add or remove space after the argument list of a C++11 lambda, as in '[](int x) <here> { ... }'.")+' '+self.tr("\n"))
        self.labelsp_cpp_lambda_paren_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cpp_lambda_paren_brace, 18, 0, 1, 5)
        if self.tr("code_sp_cpp_lambda_paren_brace")!="code_sp_cpp_lambda_paren_brace":
            self.codesp_cpp_lambda_paren_brace = QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_paren_brace"))
            self.codesp_cpp_lambda_paren_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cpp_lambda_paren_brace, 19, 0, 1, 5)
        self.namesp_cpp_lambda_paren_brace = QtWidgets.QLabel("sp_cpp_lambda_paren_brace")
        self.namesp_cpp_lambda_paren_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cpp_lambda_paren_brace, 20, 0)
        self.sp_cpp_lambda_paren_brace = QtWidgets.QComboBox()
        self.sp_cpp_lambda_paren_brace.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_paren_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_paren_brace, 20, 1, 1, 4)
        self.labelsp_cpp_lambda_fparen = QtWidgets.QLabel(self.tr("Add or remove space between a lambda body and its call operator of an immediately invoked lambda, as in '[]( ... ){ ... } <here> ( ... )'.")+' '+self.tr("\n"))
        self.labelsp_cpp_lambda_fparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cpp_lambda_fparen, 21, 0, 1, 5)
        if self.tr("code_sp_cpp_lambda_fparen")!="code_sp_cpp_lambda_fparen":
            self.codesp_cpp_lambda_fparen = QtWidgets.QLabel(self.tr("code_sp_cpp_lambda_fparen"))
            self.codesp_cpp_lambda_fparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cpp_lambda_fparen, 22, 0, 1, 5)
        self.namesp_cpp_lambda_fparen = QtWidgets.QLabel("sp_cpp_lambda_fparen")
        self.namesp_cpp_lambda_fparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cpp_lambda_fparen, 23, 0)
        self.sp_cpp_lambda_fparen = QtWidgets.QComboBox()
        self.sp_cpp_lambda_fparen.addItems(['ignore','add','remove','force'])
        self.sp_cpp_lambda_fparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_lambda_fparen, 23, 1, 1, 4)
        self.labelsp_assign_default = QtWidgets.QLabel(self.tr("Add or remove space around assignment operator '=' in a prototype.")+' '+self.tr("\n")+' '+self.tr("If set to ignore, use sp_assign.")+' '+self.tr("\n"))
        self.labelsp_assign_default.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_assign_default, 24, 0, 1, 5)
        if self.tr("code_sp_assign_default")!="code_sp_assign_default":
            self.codesp_assign_default = QtWidgets.QLabel(self.tr("code_sp_assign_default"))
            self.codesp_assign_default.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_assign_default, 25, 0, 1, 5)
        self.namesp_assign_default = QtWidgets.QLabel("sp_assign_default")
        self.namesp_assign_default.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_assign_default, 26, 0)
        self.sp_assign_default = QtWidgets.QComboBox()
        self.sp_assign_default.addItems(['ignore','add','remove','force'])
        self.sp_assign_default.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_assign_default, 26, 1, 1, 4)
        self.labelsp_before_assign = QtWidgets.QLabel(self.tr("Add or remove space before assignment operator '=', '+=', etc.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_assign.")+' '+self.tr("\n"))
        self.labelsp_before_assign.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_assign, 27, 0, 1, 5)
        if self.tr("code_sp_before_assign")!="code_sp_before_assign":
            self.codesp_before_assign = QtWidgets.QLabel(self.tr("code_sp_before_assign"))
            self.codesp_before_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_assign, 28, 0, 1, 5)
        self.namesp_before_assign = QtWidgets.QLabel("sp_before_assign")
        self.namesp_before_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_assign, 29, 0)
        self.sp_before_assign = QtWidgets.QComboBox()
        self.sp_before_assign.addItems(['ignore','add','remove','force'])
        self.sp_before_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_assign, 29, 1, 1, 4)
        self.labelsp_after_assign = QtWidgets.QLabel(self.tr("Add or remove space after assignment operator '=', '+=', etc.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_assign.")+' '+self.tr("\n"))
        self.labelsp_after_assign.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_assign, 30, 0, 1, 5)
        if self.tr("code_sp_after_assign")!="code_sp_after_assign":
            self.codesp_after_assign = QtWidgets.QLabel(self.tr("code_sp_after_assign"))
            self.codesp_after_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_assign, 31, 0, 1, 5)
        self.namesp_after_assign = QtWidgets.QLabel("sp_after_assign")
        self.namesp_after_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_assign, 32, 0)
        self.sp_after_assign = QtWidgets.QComboBox()
        self.sp_after_assign.addItems(['ignore','add','remove','force'])
        self.sp_after_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_assign, 32, 1, 1, 4)
        self.labelsp_enum_paren = QtWidgets.QLabel(self.tr("Add or remove space in 'NS_ENUM ('.")+' '+self.tr("\n"))
        self.labelsp_enum_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_enum_paren, 33, 0, 1, 5)
        if self.tr("code_sp_enum_paren")!="code_sp_enum_paren":
            self.codesp_enum_paren = QtWidgets.QLabel(self.tr("code_sp_enum_paren"))
            self.codesp_enum_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_enum_paren, 34, 0, 1, 5)
        self.namesp_enum_paren = QtWidgets.QLabel("sp_enum_paren")
        self.namesp_enum_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_enum_paren, 35, 0)
        self.sp_enum_paren = QtWidgets.QComboBox()
        self.sp_enum_paren.addItems(['ignore','add','remove','force'])
        self.sp_enum_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_paren, 35, 1, 1, 4)
        self.labelsp_enum_assign = QtWidgets.QLabel(self.tr("Add or remove space around assignment '=' in enum.")+' '+self.tr("\n"))
        self.labelsp_enum_assign.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_enum_assign, 36, 0, 1, 5)
        if self.tr("code_sp_enum_assign")!="code_sp_enum_assign":
            self.codesp_enum_assign = QtWidgets.QLabel(self.tr("code_sp_enum_assign"))
            self.codesp_enum_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_enum_assign, 37, 0, 1, 5)
        self.namesp_enum_assign = QtWidgets.QLabel("sp_enum_assign")
        self.namesp_enum_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_enum_assign, 38, 0)
        self.sp_enum_assign = QtWidgets.QComboBox()
        self.sp_enum_assign.addItems(['ignore','add','remove','force'])
        self.sp_enum_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_assign, 38, 1, 1, 4)
        self.labelsp_enum_before_assign = QtWidgets.QLabel(self.tr("Add or remove space before assignment '=' in enum.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_enum_assign.")+' '+self.tr("\n"))
        self.labelsp_enum_before_assign.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_enum_before_assign, 39, 0, 1, 5)
        if self.tr("code_sp_enum_before_assign")!="code_sp_enum_before_assign":
            self.codesp_enum_before_assign = QtWidgets.QLabel(self.tr("code_sp_enum_before_assign"))
            self.codesp_enum_before_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_enum_before_assign, 40, 0, 1, 5)
        self.namesp_enum_before_assign = QtWidgets.QLabel("sp_enum_before_assign")
        self.namesp_enum_before_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_enum_before_assign, 41, 0)
        self.sp_enum_before_assign = QtWidgets.QComboBox()
        self.sp_enum_before_assign.addItems(['ignore','add','remove','force'])
        self.sp_enum_before_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_before_assign, 41, 1, 1, 4)
        self.labelsp_enum_after_assign = QtWidgets.QLabel(self.tr("Add or remove space after assignment '=' in enum.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_enum_assign.")+' '+self.tr("\n"))
        self.labelsp_enum_after_assign.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_enum_after_assign, 42, 0, 1, 5)
        if self.tr("code_sp_enum_after_assign")!="code_sp_enum_after_assign":
            self.codesp_enum_after_assign = QtWidgets.QLabel(self.tr("code_sp_enum_after_assign"))
            self.codesp_enum_after_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_enum_after_assign, 43, 0, 1, 5)
        self.namesp_enum_after_assign = QtWidgets.QLabel("sp_enum_after_assign")
        self.namesp_enum_after_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_enum_after_assign, 44, 0)
        self.sp_enum_after_assign = QtWidgets.QComboBox()
        self.sp_enum_after_assign.addItems(['ignore','add','remove','force'])
        self.sp_enum_after_assign.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_after_assign, 44, 1, 1, 4)
        self.labelsp_enum_colon = QtWidgets.QLabel(self.tr("Add or remove space around assignment ':' in enum.")+' '+self.tr("\n"))
        self.labelsp_enum_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_enum_colon, 45, 0, 1, 5)
        if self.tr("code_sp_enum_colon")!="code_sp_enum_colon":
            self.codesp_enum_colon = QtWidgets.QLabel(self.tr("code_sp_enum_colon"))
            self.codesp_enum_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_enum_colon, 46, 0, 1, 5)
        self.namesp_enum_colon = QtWidgets.QLabel("sp_enum_colon")
        self.namesp_enum_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_enum_colon, 47, 0)
        self.sp_enum_colon = QtWidgets.QComboBox()
        self.sp_enum_colon.addItems(['ignore','add','remove','force'])
        self.sp_enum_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_enum_colon, 47, 1, 1, 4)
        self.labelsp_pp_concat = QtWidgets.QLabel(self.tr("Add or remove space around preprocessor '##' concatenation operator.")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n"))
        self.labelsp_pp_concat.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_pp_concat, 48, 0, 1, 5)
        if self.tr("code_sp_pp_concat")!="code_sp_pp_concat":
            self.codesp_pp_concat = QtWidgets.QLabel(self.tr("code_sp_pp_concat"))
            self.codesp_pp_concat.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_pp_concat, 49, 0, 1, 5)
        self.namesp_pp_concat = QtWidgets.QLabel("sp_pp_concat")
        self.namesp_pp_concat.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_pp_concat, 50, 0)
        self.sp_pp_concat = QtWidgets.QComboBox()
        self.sp_pp_concat.addItems(['ignore','add','remove','force'])
        self.sp_pp_concat.setCurrentText('add')
        self.lt2.addWidget(self.sp_pp_concat, 50, 1, 1, 4)
        self.labelsp_pp_stringify = QtWidgets.QLabel(self.tr("Add or remove space after preprocessor '#' stringify operator.")+' '+self.tr("Also affects the '#@' charizing operator.")+' '+self.tr("\n"))
        self.labelsp_pp_stringify.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_pp_stringify, 51, 0, 1, 5)
        if self.tr("code_sp_pp_stringify")!="code_sp_pp_stringify":
            self.codesp_pp_stringify = QtWidgets.QLabel(self.tr("code_sp_pp_stringify"))
            self.codesp_pp_stringify.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_pp_stringify, 52, 0, 1, 5)
        self.namesp_pp_stringify = QtWidgets.QLabel("sp_pp_stringify")
        self.namesp_pp_stringify.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_pp_stringify, 53, 0)
        self.sp_pp_stringify = QtWidgets.QComboBox()
        self.sp_pp_stringify.addItems(['ignore','add','remove','force'])
        self.sp_pp_stringify.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_pp_stringify, 53, 1, 1, 4)
        self.labelsp_before_pp_stringify = QtWidgets.QLabel(self.tr("Add or remove space before preprocessor '#' stringify operator as in '#define x(y) L#y'.")+' '+self.tr("\n"))
        self.labelsp_before_pp_stringify.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_pp_stringify, 54, 0, 1, 5)
        if self.tr("code_sp_before_pp_stringify")!="code_sp_before_pp_stringify":
            self.codesp_before_pp_stringify = QtWidgets.QLabel(self.tr("code_sp_before_pp_stringify"))
            self.codesp_before_pp_stringify.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_pp_stringify, 55, 0, 1, 5)
        self.namesp_before_pp_stringify = QtWidgets.QLabel("sp_before_pp_stringify")
        self.namesp_before_pp_stringify.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_pp_stringify, 56, 0)
        self.sp_before_pp_stringify = QtWidgets.QComboBox()
        self.sp_before_pp_stringify.addItems(['ignore','add','remove','force'])
        self.sp_before_pp_stringify.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_pp_stringify, 56, 1, 1, 4)
        self.labelsp_bool = QtWidgets.QLabel(self.tr("Add or remove space around boolean operators '&&' and '||'.")+' '+self.tr("\n"))
        self.labelsp_bool.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_bool, 57, 0, 1, 5)
        if self.tr("code_sp_bool")!="code_sp_bool":
            self.codesp_bool = QtWidgets.QLabel(self.tr("code_sp_bool"))
            self.codesp_bool.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_bool, 58, 0, 1, 5)
        self.namesp_bool = QtWidgets.QLabel("sp_bool")
        self.namesp_bool.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_bool, 59, 0)
        self.sp_bool = QtWidgets.QComboBox()
        self.sp_bool.addItems(['ignore','add','remove','force'])
        self.sp_bool.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_bool, 59, 1, 1, 4)
        self.labelsp_compare = QtWidgets.QLabel(self.tr("Add or remove space around compare operator '<', '>', '==', etc.")+' '+self.tr("\n"))
        self.labelsp_compare.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_compare, 60, 0, 1, 5)
        if self.tr("code_sp_compare")!="code_sp_compare":
            self.codesp_compare = QtWidgets.QLabel(self.tr("code_sp_compare"))
            self.codesp_compare.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_compare, 61, 0, 1, 5)
        self.namesp_compare = QtWidgets.QLabel("sp_compare")
        self.namesp_compare.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_compare, 62, 0)
        self.sp_compare = QtWidgets.QComboBox()
        self.sp_compare.addItems(['ignore','add','remove','force'])
        self.sp_compare.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_compare, 62, 1, 1, 4)
        self.labelsp_inside_paren = QtWidgets.QLabel(self.tr("Add or remove space inside '(' and ')'.")+' '+self.tr("\n"))
        self.labelsp_inside_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_paren, 63, 0, 1, 5)
        if self.tr("code_sp_inside_paren")!="code_sp_inside_paren":
            self.codesp_inside_paren = QtWidgets.QLabel(self.tr("code_sp_inside_paren"))
            self.codesp_inside_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_paren, 64, 0, 1, 5)
        self.namesp_inside_paren = QtWidgets.QLabel("sp_inside_paren")
        self.namesp_inside_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_paren, 65, 0)
        self.sp_inside_paren = QtWidgets.QComboBox()
        self.sp_inside_paren.addItems(['ignore','add','remove','force'])
        self.sp_inside_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_paren, 65, 1, 1, 4)
        self.labelsp_paren_paren = QtWidgets.QLabel(self.tr("Add or remove space between nested parentheses, i.e. '((' vs. ') )'.")+' '+self.tr("\n"))
        self.labelsp_paren_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_paren_paren, 66, 0, 1, 5)
        if self.tr("code_sp_paren_paren")!="code_sp_paren_paren":
            self.codesp_paren_paren = QtWidgets.QLabel(self.tr("code_sp_paren_paren"))
            self.codesp_paren_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_paren_paren, 67, 0, 1, 5)
        self.namesp_paren_paren = QtWidgets.QLabel("sp_paren_paren")
        self.namesp_paren_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_paren_paren, 68, 0)
        self.sp_paren_paren = QtWidgets.QComboBox()
        self.sp_paren_paren.addItems(['ignore','add','remove','force'])
        self.sp_paren_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_paren, 68, 1, 1, 4)
        self.labelsp_cparen_oparen = QtWidgets.QLabel(self.tr("Add or remove space between back-to-back parentheses, i.e. ')(' vs. ') ('.")+' '+self.tr("\n"))
        self.labelsp_cparen_oparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cparen_oparen, 69, 0, 1, 5)
        if self.tr("code_sp_cparen_oparen")!="code_sp_cparen_oparen":
            self.codesp_cparen_oparen = QtWidgets.QLabel(self.tr("code_sp_cparen_oparen"))
            self.codesp_cparen_oparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cparen_oparen, 70, 0, 1, 5)
        self.namesp_cparen_oparen = QtWidgets.QLabel("sp_cparen_oparen")
        self.namesp_cparen_oparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cparen_oparen, 71, 0)
        self.sp_cparen_oparen = QtWidgets.QComboBox()
        self.sp_cparen_oparen.addItems(['ignore','add','remove','force'])
        self.sp_cparen_oparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cparen_oparen, 71, 1, 1, 4)
        self.labelsp_balance_nested_parens = QtWidgets.QLabel(self.tr("Whether to balance spaces inside nested parentheses.")+' '+self.tr("\n"))
        self.labelsp_balance_nested_parens.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_balance_nested_parens, 72, 0, 1, 5)
        if self.tr("code_sp_balance_nested_parens")!="code_sp_balance_nested_parens":
            self.codesp_balance_nested_parens = QtWidgets.QLabel(self.tr("code_sp_balance_nested_parens"))
            self.codesp_balance_nested_parens.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_balance_nested_parens, 73, 0, 1, 5)
        self.namesp_balance_nested_parens = QtWidgets.QLabel("sp_balance_nested_parens")
        self.namesp_balance_nested_parens.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_balance_nested_parens, 74, 0)
        self.sp_balance_nested_parens = QtWidgets.QComboBox()
        self.sp_balance_nested_parens.addItems(['true','false'])
        self.sp_balance_nested_parens.setCurrentText('false')
        self.lt2.addWidget(self.sp_balance_nested_parens, 74, 1, 1, 4)
        self.labelsp_paren_brace = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '{'.")+' '+self.tr("\n"))
        self.labelsp_paren_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_paren_brace, 75, 0, 1, 5)
        if self.tr("code_sp_paren_brace")!="code_sp_paren_brace":
            self.codesp_paren_brace = QtWidgets.QLabel(self.tr("code_sp_paren_brace"))
            self.codesp_paren_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_paren_brace, 76, 0, 1, 5)
        self.namesp_paren_brace = QtWidgets.QLabel("sp_paren_brace")
        self.namesp_paren_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_paren_brace, 77, 0)
        self.sp_paren_brace = QtWidgets.QComboBox()
        self.sp_paren_brace.addItems(['ignore','add','remove','force'])
        self.sp_paren_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_brace, 77, 1, 1, 4)
        self.labelsp_brace_brace = QtWidgets.QLabel(self.tr("Add or remove space between nested braces, i.e. '{{' vs '{ {'.")+' '+self.tr("\n"))
        self.labelsp_brace_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_brace_brace, 78, 0, 1, 5)
        if self.tr("code_sp_brace_brace")!="code_sp_brace_brace":
            self.codesp_brace_brace = QtWidgets.QLabel(self.tr("code_sp_brace_brace"))
            self.codesp_brace_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_brace_brace, 79, 0, 1, 5)
        self.namesp_brace_brace = QtWidgets.QLabel("sp_brace_brace")
        self.namesp_brace_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_brace_brace, 80, 0)
        self.sp_brace_brace = QtWidgets.QComboBox()
        self.sp_brace_brace.addItems(['ignore','add','remove','force'])
        self.sp_brace_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_brace, 80, 1, 1, 4)
        self.labelsp_before_ptr_star = QtWidgets.QLabel(self.tr("Add or remove space before pointer star '*'.")+' '+self.tr("\n"))
        self.labelsp_before_ptr_star.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_ptr_star, 81, 0, 1, 5)
        if self.tr("code_sp_before_ptr_star")!="code_sp_before_ptr_star":
            self.codesp_before_ptr_star = QtWidgets.QLabel(self.tr("code_sp_before_ptr_star"))
            self.codesp_before_ptr_star.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_ptr_star, 82, 0, 1, 5)
        self.namesp_before_ptr_star = QtWidgets.QLabel("sp_before_ptr_star")
        self.namesp_before_ptr_star.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_ptr_star, 83, 0)
        self.sp_before_ptr_star = QtWidgets.QComboBox()
        self.sp_before_ptr_star.addItems(['ignore','add','remove','force'])
        self.sp_before_ptr_star.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_ptr_star, 83, 1, 1, 4)
        self.labelsp_before_unnamed_ptr_star = QtWidgets.QLabel(self.tr("Add or remove space before pointer star '*' that isn't followed by a variable name.")+' '+self.tr("If set to ignore, sp_before_ptr_star is used instead.")+' '+self.tr("\n"))
        self.labelsp_before_unnamed_ptr_star.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_unnamed_ptr_star, 84, 0, 1, 5)
        if self.tr("code_sp_before_unnamed_ptr_star")!="code_sp_before_unnamed_ptr_star":
            self.codesp_before_unnamed_ptr_star = QtWidgets.QLabel(self.tr("code_sp_before_unnamed_ptr_star"))
            self.codesp_before_unnamed_ptr_star.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_unnamed_ptr_star, 85, 0, 1, 5)
        self.namesp_before_unnamed_ptr_star = QtWidgets.QLabel("sp_before_unnamed_ptr_star")
        self.namesp_before_unnamed_ptr_star.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_unnamed_ptr_star, 86, 0)
        self.sp_before_unnamed_ptr_star = QtWidgets.QComboBox()
        self.sp_before_unnamed_ptr_star.addItems(['ignore','add','remove','force'])
        self.sp_before_unnamed_ptr_star.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_unnamed_ptr_star, 86, 1, 1, 4)
        self.labelsp_between_ptr_star = QtWidgets.QLabel(self.tr("Add or remove space between pointer stars '*'.")+' '+self.tr("\n"))
        self.labelsp_between_ptr_star.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_between_ptr_star, 87, 0, 1, 5)
        if self.tr("code_sp_between_ptr_star")!="code_sp_between_ptr_star":
            self.codesp_between_ptr_star = QtWidgets.QLabel(self.tr("code_sp_between_ptr_star"))
            self.codesp_between_ptr_star.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_between_ptr_star, 88, 0, 1, 5)
        self.namesp_between_ptr_star = QtWidgets.QLabel("sp_between_ptr_star")
        self.namesp_between_ptr_star.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_between_ptr_star, 89, 0)
        self.sp_between_ptr_star = QtWidgets.QComboBox()
        self.sp_between_ptr_star.addItems(['ignore','add','remove','force'])
        self.sp_between_ptr_star.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_between_ptr_star, 89, 1, 1, 4)
        self.labelsp_after_ptr_star = QtWidgets.QLabel(self.tr("Add or remove space after pointer star '*', if followed by a word.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_type_func.")+' '+self.tr("\n"))
        self.labelsp_after_ptr_star.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_ptr_star, 90, 0, 1, 5)
        if self.tr("code_sp_after_ptr_star")!="code_sp_after_ptr_star":
            self.codesp_after_ptr_star = QtWidgets.QLabel(self.tr("code_sp_after_ptr_star"))
            self.codesp_after_ptr_star.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_ptr_star, 91, 0, 1, 5)
        self.namesp_after_ptr_star = QtWidgets.QLabel("sp_after_ptr_star")
        self.namesp_after_ptr_star.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_ptr_star, 92, 0)
        self.sp_after_ptr_star = QtWidgets.QComboBox()
        self.sp_after_ptr_star.addItems(['ignore','add','remove','force'])
        self.sp_after_ptr_star.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_ptr_star, 92, 1, 1, 4)
        self.labelsp_after_ptr_block_caret = QtWidgets.QLabel(self.tr("Add or remove space after pointer caret '^', if followed by a word.")+' '+self.tr("\n"))
        self.labelsp_after_ptr_block_caret.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_ptr_block_caret, 93, 0, 1, 5)
        if self.tr("code_sp_after_ptr_block_caret")!="code_sp_after_ptr_block_caret":
            self.codesp_after_ptr_block_caret = QtWidgets.QLabel(self.tr("code_sp_after_ptr_block_caret"))
            self.codesp_after_ptr_block_caret.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_ptr_block_caret, 94, 0, 1, 5)
        self.namesp_after_ptr_block_caret = QtWidgets.QLabel("sp_after_ptr_block_caret")
        self.namesp_after_ptr_block_caret.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_ptr_block_caret, 95, 0)
        self.sp_after_ptr_block_caret = QtWidgets.QComboBox()
        self.sp_after_ptr_block_caret.addItems(['ignore','add','remove','force'])
        self.sp_after_ptr_block_caret.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_ptr_block_caret, 95, 1, 1, 4)
        self.labelsp_after_ptr_star_qualifier = QtWidgets.QLabel(self.tr("Add or remove space after pointer star '*', if followed by a qualifier.")+' '+self.tr("\n"))
        self.labelsp_after_ptr_star_qualifier.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_ptr_star_qualifier, 96, 0, 1, 5)
        if self.tr("code_sp_after_ptr_star_qualifier")!="code_sp_after_ptr_star_qualifier":
            self.codesp_after_ptr_star_qualifier = QtWidgets.QLabel(self.tr("code_sp_after_ptr_star_qualifier"))
            self.codesp_after_ptr_star_qualifier.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_ptr_star_qualifier, 97, 0, 1, 5)
        self.namesp_after_ptr_star_qualifier = QtWidgets.QLabel("sp_after_ptr_star_qualifier")
        self.namesp_after_ptr_star_qualifier.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_ptr_star_qualifier, 98, 0)
        self.sp_after_ptr_star_qualifier = QtWidgets.QComboBox()
        self.sp_after_ptr_star_qualifier.addItems(['ignore','add','remove','force'])
        self.sp_after_ptr_star_qualifier.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_ptr_star_qualifier, 98, 1, 1, 4)
        self.labelsp_after_ptr_star_func = QtWidgets.QLabel(self.tr("Add or remove space after a pointer star '*', if followed by a function prototype or function definition.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_after_ptr_star and sp_type_func.")+' '+self.tr("\n"))
        self.labelsp_after_ptr_star_func.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_ptr_star_func, 99, 0, 1, 5)
        if self.tr("code_sp_after_ptr_star_func")!="code_sp_after_ptr_star_func":
            self.codesp_after_ptr_star_func = QtWidgets.QLabel(self.tr("code_sp_after_ptr_star_func"))
            self.codesp_after_ptr_star_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_ptr_star_func, 100, 0, 1, 5)
        self.namesp_after_ptr_star_func = QtWidgets.QLabel("sp_after_ptr_star_func")
        self.namesp_after_ptr_star_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_ptr_star_func, 101, 0)
        self.sp_after_ptr_star_func = QtWidgets.QComboBox()
        self.sp_after_ptr_star_func.addItems(['ignore','add','remove','force'])
        self.sp_after_ptr_star_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_ptr_star_func, 101, 1, 1, 4)
        self.labelsp_ptr_star_paren = QtWidgets.QLabel(self.tr("Add or remove space after a pointer star '*', if followed by an open parenthesis, as in 'void* (*)().")+' '+self.tr("\n"))
        self.labelsp_ptr_star_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_ptr_star_paren, 102, 0, 1, 5)
        if self.tr("code_sp_ptr_star_paren")!="code_sp_ptr_star_paren":
            self.codesp_ptr_star_paren = QtWidgets.QLabel(self.tr("code_sp_ptr_star_paren"))
            self.codesp_ptr_star_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_ptr_star_paren, 103, 0, 1, 5)
        self.namesp_ptr_star_paren = QtWidgets.QLabel("sp_ptr_star_paren")
        self.namesp_ptr_star_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_ptr_star_paren, 104, 0)
        self.sp_ptr_star_paren = QtWidgets.QComboBox()
        self.sp_ptr_star_paren.addItems(['ignore','add','remove','force'])
        self.sp_ptr_star_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_ptr_star_paren, 104, 1, 1, 4)
        self.labelsp_before_ptr_star_func = QtWidgets.QLabel(self.tr("Add or remove space before a pointer star '*', if followed by a function prototype or function definition.")+' '+self.tr("\n"))
        self.labelsp_before_ptr_star_func.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_ptr_star_func, 105, 0, 1, 5)
        if self.tr("code_sp_before_ptr_star_func")!="code_sp_before_ptr_star_func":
            self.codesp_before_ptr_star_func = QtWidgets.QLabel(self.tr("code_sp_before_ptr_star_func"))
            self.codesp_before_ptr_star_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_ptr_star_func, 106, 0, 1, 5)
        self.namesp_before_ptr_star_func = QtWidgets.QLabel("sp_before_ptr_star_func")
        self.namesp_before_ptr_star_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_ptr_star_func, 107, 0)
        self.sp_before_ptr_star_func = QtWidgets.QComboBox()
        self.sp_before_ptr_star_func.addItems(['ignore','add','remove','force'])
        self.sp_before_ptr_star_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_ptr_star_func, 107, 1, 1, 4)
        self.labelsp_before_byref = QtWidgets.QLabel(self.tr("Add or remove space before a reference sign '&'.")+' '+self.tr("\n"))
        self.labelsp_before_byref.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_byref, 108, 0, 1, 5)
        if self.tr("code_sp_before_byref")!="code_sp_before_byref":
            self.codesp_before_byref = QtWidgets.QLabel(self.tr("code_sp_before_byref"))
            self.codesp_before_byref.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_byref, 109, 0, 1, 5)
        self.namesp_before_byref = QtWidgets.QLabel("sp_before_byref")
        self.namesp_before_byref.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_byref, 110, 0)
        self.sp_before_byref = QtWidgets.QComboBox()
        self.sp_before_byref.addItems(['ignore','add','remove','force'])
        self.sp_before_byref.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_byref, 110, 1, 1, 4)
        self.labelsp_before_unnamed_byref = QtWidgets.QLabel(self.tr("Add or remove space before a reference sign '&' that isn't followed by a variable name.")+' '+self.tr("If set to ignore, sp_before_byref is used instead.")+' '+self.tr("\n"))
        self.labelsp_before_unnamed_byref.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_unnamed_byref, 111, 0, 1, 5)
        if self.tr("code_sp_before_unnamed_byref")!="code_sp_before_unnamed_byref":
            self.codesp_before_unnamed_byref = QtWidgets.QLabel(self.tr("code_sp_before_unnamed_byref"))
            self.codesp_before_unnamed_byref.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_unnamed_byref, 112, 0, 1, 5)
        self.namesp_before_unnamed_byref = QtWidgets.QLabel("sp_before_unnamed_byref")
        self.namesp_before_unnamed_byref.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_unnamed_byref, 113, 0)
        self.sp_before_unnamed_byref = QtWidgets.QComboBox()
        self.sp_before_unnamed_byref.addItems(['ignore','add','remove','force'])
        self.sp_before_unnamed_byref.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_unnamed_byref, 113, 1, 1, 4)
        self.labelsp_after_byref = QtWidgets.QLabel(self.tr("Add or remove space after reference sign '&', if followed by a word.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_type_func.")+' '+self.tr("\n"))
        self.labelsp_after_byref.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_byref, 114, 0, 1, 5)
        if self.tr("code_sp_after_byref")!="code_sp_after_byref":
            self.codesp_after_byref = QtWidgets.QLabel(self.tr("code_sp_after_byref"))
            self.codesp_after_byref.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_byref, 115, 0, 1, 5)
        self.namesp_after_byref = QtWidgets.QLabel("sp_after_byref")
        self.namesp_after_byref.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_byref, 116, 0)
        self.sp_after_byref = QtWidgets.QComboBox()
        self.sp_after_byref.addItems(['ignore','add','remove','force'])
        self.sp_after_byref.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_byref, 116, 1, 1, 4)
        self.labelsp_after_byref_func = QtWidgets.QLabel(self.tr("Add or remove space after a reference sign '&', if followed by a function prototype or function definition.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_after_byref and sp_type_func.")+' '+self.tr("\n"))
        self.labelsp_after_byref_func.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_byref_func, 117, 0, 1, 5)
        if self.tr("code_sp_after_byref_func")!="code_sp_after_byref_func":
            self.codesp_after_byref_func = QtWidgets.QLabel(self.tr("code_sp_after_byref_func"))
            self.codesp_after_byref_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_byref_func, 118, 0, 1, 5)
        self.namesp_after_byref_func = QtWidgets.QLabel("sp_after_byref_func")
        self.namesp_after_byref_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_byref_func, 119, 0)
        self.sp_after_byref_func = QtWidgets.QComboBox()
        self.sp_after_byref_func.addItems(['ignore','add','remove','force'])
        self.sp_after_byref_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_byref_func, 119, 1, 1, 4)
        self.labelsp_before_byref_func = QtWidgets.QLabel(self.tr("Add or remove space before a reference sign '&', if followed by a function prototype or function definition.")+' '+self.tr("\n"))
        self.labelsp_before_byref_func.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_byref_func, 120, 0, 1, 5)
        if self.tr("code_sp_before_byref_func")!="code_sp_before_byref_func":
            self.codesp_before_byref_func = QtWidgets.QLabel(self.tr("code_sp_before_byref_func"))
            self.codesp_before_byref_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_byref_func, 121, 0, 1, 5)
        self.namesp_before_byref_func = QtWidgets.QLabel("sp_before_byref_func")
        self.namesp_before_byref_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_byref_func, 122, 0)
        self.sp_before_byref_func = QtWidgets.QComboBox()
        self.sp_before_byref_func.addItems(['ignore','add','remove','force'])
        self.sp_before_byref_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_byref_func, 122, 1, 1, 4)
        self.labelsp_after_type = QtWidgets.QLabel(self.tr("Add or remove space between type and word.")+' '+self.tr("\n")+' '+self.tr("Default: force")+' '+self.tr("\n"))
        self.labelsp_after_type.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_type, 123, 0, 1, 5)
        if self.tr("code_sp_after_type")!="code_sp_after_type":
            self.codesp_after_type = QtWidgets.QLabel(self.tr("code_sp_after_type"))
            self.codesp_after_type.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_type, 124, 0, 1, 5)
        self.namesp_after_type = QtWidgets.QLabel("sp_after_type")
        self.namesp_after_type.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_type, 125, 0)
        self.sp_after_type = QtWidgets.QComboBox()
        self.sp_after_type.addItems(['ignore','add','remove','force'])
        self.sp_after_type.setCurrentText('force')
        self.lt2.addWidget(self.sp_after_type, 125, 1, 1, 4)
        self.labelsp_after_decltype = QtWidgets.QLabel(self.tr("Add or remove space between 'decltype(...)' and word.")+' '+self.tr("\n"))
        self.labelsp_after_decltype.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_decltype, 126, 0, 1, 5)
        if self.tr("code_sp_after_decltype")!="code_sp_after_decltype":
            self.codesp_after_decltype = QtWidgets.QLabel(self.tr("code_sp_after_decltype"))
            self.codesp_after_decltype.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_decltype, 127, 0, 1, 5)
        self.namesp_after_decltype = QtWidgets.QLabel("sp_after_decltype")
        self.namesp_after_decltype.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_decltype, 128, 0)
        self.sp_after_decltype = QtWidgets.QComboBox()
        self.sp_after_decltype.addItems(['ignore','add','remove','force'])
        self.sp_after_decltype.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_decltype, 128, 1, 1, 4)
        self.labelsp_before_template_paren = QtWidgets.QLabel(self.tr("(D) Add or remove space before the parenthesis in the D constructs 'template Foo(' and 'class Foo('.")+' '+self.tr("\n"))
        self.labelsp_before_template_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_template_paren, 129, 0, 1, 5)
        if self.tr("code_sp_before_template_paren")!="code_sp_before_template_paren":
            self.codesp_before_template_paren = QtWidgets.QLabel(self.tr("code_sp_before_template_paren"))
            self.codesp_before_template_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_template_paren, 130, 0, 1, 5)
        self.namesp_before_template_paren = QtWidgets.QLabel("sp_before_template_paren")
        self.namesp_before_template_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_template_paren, 131, 0)
        self.sp_before_template_paren = QtWidgets.QComboBox()
        self.sp_before_template_paren.addItems(['ignore','add','remove','force'])
        self.sp_before_template_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_template_paren, 131, 1, 1, 4)
        self.labelsp_template_angle = QtWidgets.QLabel(self.tr("Add or remove space between 'template' and '<'.")+' '+self.tr("If set to ignore, sp_before_angle is used.")+' '+self.tr("\n"))
        self.labelsp_template_angle.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_template_angle, 132, 0, 1, 5)
        if self.tr("code_sp_template_angle")!="code_sp_template_angle":
            self.codesp_template_angle = QtWidgets.QLabel(self.tr("code_sp_template_angle"))
            self.codesp_template_angle.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_template_angle, 133, 0, 1, 5)
        self.namesp_template_angle = QtWidgets.QLabel("sp_template_angle")
        self.namesp_template_angle.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_template_angle, 134, 0)
        self.sp_template_angle = QtWidgets.QComboBox()
        self.sp_template_angle.addItems(['ignore','add','remove','force'])
        self.sp_template_angle.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_template_angle, 134, 1, 1, 4)
        self.labelsp_before_angle = QtWidgets.QLabel(self.tr("Add or remove space before '<'.")+' '+self.tr("\n"))
        self.labelsp_before_angle.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_angle, 135, 0, 1, 5)
        if self.tr("code_sp_before_angle")!="code_sp_before_angle":
            self.codesp_before_angle = QtWidgets.QLabel(self.tr("code_sp_before_angle"))
            self.codesp_before_angle.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_angle, 136, 0, 1, 5)
        self.namesp_before_angle = QtWidgets.QLabel("sp_before_angle")
        self.namesp_before_angle.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_angle, 137, 0)
        self.sp_before_angle = QtWidgets.QComboBox()
        self.sp_before_angle.addItems(['ignore','add','remove','force'])
        self.sp_before_angle.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_angle, 137, 1, 1, 4)
        self.labelsp_inside_angle = QtWidgets.QLabel(self.tr("Add or remove space inside '<' and '>'.")+' '+self.tr("\n"))
        self.labelsp_inside_angle.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_angle, 138, 0, 1, 5)
        if self.tr("code_sp_inside_angle")!="code_sp_inside_angle":
            self.codesp_inside_angle = QtWidgets.QLabel(self.tr("code_sp_inside_angle"))
            self.codesp_inside_angle.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_angle, 139, 0, 1, 5)
        self.namesp_inside_angle = QtWidgets.QLabel("sp_inside_angle")
        self.namesp_inside_angle.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_angle, 140, 0)
        self.sp_inside_angle = QtWidgets.QComboBox()
        self.sp_inside_angle.addItems(['ignore','add','remove','force'])
        self.sp_inside_angle.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_angle, 140, 1, 1, 4)
        self.labelsp_inside_angle_empty = QtWidgets.QLabel(self.tr("Add or remove space inside '<>'.")+' '+self.tr("\n"))
        self.labelsp_inside_angle_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_angle_empty, 141, 0, 1, 5)
        if self.tr("code_sp_inside_angle_empty")!="code_sp_inside_angle_empty":
            self.codesp_inside_angle_empty = QtWidgets.QLabel(self.tr("code_sp_inside_angle_empty"))
            self.codesp_inside_angle_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_angle_empty, 142, 0, 1, 5)
        self.namesp_inside_angle_empty = QtWidgets.QLabel("sp_inside_angle_empty")
        self.namesp_inside_angle_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_angle_empty, 143, 0)
        self.sp_inside_angle_empty = QtWidgets.QComboBox()
        self.sp_inside_angle_empty.addItems(['ignore','add','remove','force'])
        self.sp_inside_angle_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_angle_empty, 143, 1, 1, 4)
        self.labelsp_angle_colon = QtWidgets.QLabel(self.tr("Add or remove space between '>' and ':'.")+' '+self.tr("\n"))
        self.labelsp_angle_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_angle_colon, 144, 0, 1, 5)
        if self.tr("code_sp_angle_colon")!="code_sp_angle_colon":
            self.codesp_angle_colon = QtWidgets.QLabel(self.tr("code_sp_angle_colon"))
            self.codesp_angle_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_angle_colon, 145, 0, 1, 5)
        self.namesp_angle_colon = QtWidgets.QLabel("sp_angle_colon")
        self.namesp_angle_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_angle_colon, 146, 0)
        self.sp_angle_colon = QtWidgets.QComboBox()
        self.sp_angle_colon.addItems(['ignore','add','remove','force'])
        self.sp_angle_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_angle_colon, 146, 1, 1, 4)
        self.labelsp_after_angle = QtWidgets.QLabel(self.tr("Add or remove space after '>'.")+' '+self.tr("\n"))
        self.labelsp_after_angle.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_angle, 147, 0, 1, 5)
        if self.tr("code_sp_after_angle")!="code_sp_after_angle":
            self.codesp_after_angle = QtWidgets.QLabel(self.tr("code_sp_after_angle"))
            self.codesp_after_angle.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_angle, 148, 0, 1, 5)
        self.namesp_after_angle = QtWidgets.QLabel("sp_after_angle")
        self.namesp_after_angle.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_angle, 149, 0)
        self.sp_after_angle = QtWidgets.QComboBox()
        self.sp_after_angle.addItems(['ignore','add','remove','force'])
        self.sp_after_angle.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_angle, 149, 1, 1, 4)
        self.labelsp_angle_paren = QtWidgets.QLabel(self.tr("Add or remove space between '>' and '(' as found in 'new List<byte>(foo);'.")+' '+self.tr("\n"))
        self.labelsp_angle_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_angle_paren, 150, 0, 1, 5)
        if self.tr("code_sp_angle_paren")!="code_sp_angle_paren":
            self.codesp_angle_paren = QtWidgets.QLabel(self.tr("code_sp_angle_paren"))
            self.codesp_angle_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_angle_paren, 151, 0, 1, 5)
        self.namesp_angle_paren = QtWidgets.QLabel("sp_angle_paren")
        self.namesp_angle_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_angle_paren, 152, 0)
        self.sp_angle_paren = QtWidgets.QComboBox()
        self.sp_angle_paren.addItems(['ignore','add','remove','force'])
        self.sp_angle_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_angle_paren, 152, 1, 1, 4)
        self.labelsp_angle_paren_empty = QtWidgets.QLabel(self.tr("Add or remove space between '>' and '()' as found in 'new List<byte>();'.")+' '+self.tr("\n"))
        self.labelsp_angle_paren_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_angle_paren_empty, 153, 0, 1, 5)
        if self.tr("code_sp_angle_paren_empty")!="code_sp_angle_paren_empty":
            self.codesp_angle_paren_empty = QtWidgets.QLabel(self.tr("code_sp_angle_paren_empty"))
            self.codesp_angle_paren_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_angle_paren_empty, 154, 0, 1, 5)
        self.namesp_angle_paren_empty = QtWidgets.QLabel("sp_angle_paren_empty")
        self.namesp_angle_paren_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_angle_paren_empty, 155, 0)
        self.sp_angle_paren_empty = QtWidgets.QComboBox()
        self.sp_angle_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_angle_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_angle_paren_empty, 155, 1, 1, 4)
        self.labelsp_angle_word = QtWidgets.QLabel(self.tr("Add or remove space between '>' and a word as in 'List<byte> m;' or 'template <typename T> static ...'.")+' '+self.tr("\n"))
        self.labelsp_angle_word.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_angle_word, 156, 0, 1, 5)
        if self.tr("code_sp_angle_word")!="code_sp_angle_word":
            self.codesp_angle_word = QtWidgets.QLabel(self.tr("code_sp_angle_word"))
            self.codesp_angle_word.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_angle_word, 157, 0, 1, 5)
        self.namesp_angle_word = QtWidgets.QLabel("sp_angle_word")
        self.namesp_angle_word.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_angle_word, 158, 0)
        self.sp_angle_word = QtWidgets.QComboBox()
        self.sp_angle_word.addItems(['ignore','add','remove','force'])
        self.sp_angle_word.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_angle_word, 158, 1, 1, 4)
        self.labelsp_angle_shift = QtWidgets.QLabel(self.tr("Add or remove space between '>' and '>' in '>>' (template stuff).")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n"))
        self.labelsp_angle_shift.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_angle_shift, 159, 0, 1, 5)
        if self.tr("code_sp_angle_shift")!="code_sp_angle_shift":
            self.codesp_angle_shift = QtWidgets.QLabel(self.tr("code_sp_angle_shift"))
            self.codesp_angle_shift.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_angle_shift, 160, 0, 1, 5)
        self.namesp_angle_shift = QtWidgets.QLabel("sp_angle_shift")
        self.namesp_angle_shift.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_angle_shift, 161, 0)
        self.sp_angle_shift = QtWidgets.QComboBox()
        self.sp_angle_shift.addItems(['ignore','add','remove','force'])
        self.sp_angle_shift.setCurrentText('add')
        self.lt2.addWidget(self.sp_angle_shift, 161, 1, 1, 4)
        self.labelsp_permit_cpp11_shift = QtWidgets.QLabel(self.tr("(C++11) Permit removal of the space between '>>' in 'foo<bar<int> >'.")+' '+self.tr("Note that sp_angle_shift cannot remove the space without this option.")+' '+self.tr("\n"))
        self.labelsp_permit_cpp11_shift.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_permit_cpp11_shift, 162, 0, 1, 5)
        if self.tr("code_sp_permit_cpp11_shift")!="code_sp_permit_cpp11_shift":
            self.codesp_permit_cpp11_shift = QtWidgets.QLabel(self.tr("code_sp_permit_cpp11_shift"))
            self.codesp_permit_cpp11_shift.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_permit_cpp11_shift, 163, 0, 1, 5)
        self.namesp_permit_cpp11_shift = QtWidgets.QLabel("sp_permit_cpp11_shift")
        self.namesp_permit_cpp11_shift.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_permit_cpp11_shift, 164, 0)
        self.sp_permit_cpp11_shift = QtWidgets.QComboBox()
        self.sp_permit_cpp11_shift.addItems(['true','false'])
        self.sp_permit_cpp11_shift.setCurrentText('false')
        self.lt2.addWidget(self.sp_permit_cpp11_shift, 164, 1, 1, 4)
        self.labelsp_before_sparen = QtWidgets.QLabel(self.tr("Add or remove space before '(' of control statements ('if', 'for', 'switch', 'while', etc.).")+' '+self.tr("\n"))
        self.labelsp_before_sparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_sparen, 165, 0, 1, 5)
        if self.tr("code_sp_before_sparen")!="code_sp_before_sparen":
            self.codesp_before_sparen = QtWidgets.QLabel(self.tr("code_sp_before_sparen"))
            self.codesp_before_sparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_sparen, 166, 0, 1, 5)
        self.namesp_before_sparen = QtWidgets.QLabel("sp_before_sparen")
        self.namesp_before_sparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_sparen, 167, 0)
        self.sp_before_sparen = QtWidgets.QComboBox()
        self.sp_before_sparen.addItems(['ignore','add','remove','force'])
        self.sp_before_sparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_sparen, 167, 1, 1, 4)
        self.labelsp_inside_sparen = QtWidgets.QLabel(self.tr("Add or remove space inside '(' and ')' of control statements.")+' '+self.tr("\n"))
        self.labelsp_inside_sparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_sparen, 168, 0, 1, 5)
        if self.tr("code_sp_inside_sparen")!="code_sp_inside_sparen":
            self.codesp_inside_sparen = QtWidgets.QLabel(self.tr("code_sp_inside_sparen"))
            self.codesp_inside_sparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_sparen, 169, 0, 1, 5)
        self.namesp_inside_sparen = QtWidgets.QLabel("sp_inside_sparen")
        self.namesp_inside_sparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_sparen, 170, 0)
        self.sp_inside_sparen = QtWidgets.QComboBox()
        self.sp_inside_sparen.addItems(['ignore','add','remove','force'])
        self.sp_inside_sparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_sparen, 170, 1, 1, 4)
        self.labelsp_inside_sparen_open = QtWidgets.QLabel(self.tr("Add or remove space after '(' of control statements.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_inside_sparen.")+' '+self.tr("\n"))
        self.labelsp_inside_sparen_open.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_sparen_open, 171, 0, 1, 5)
        if self.tr("code_sp_inside_sparen_open")!="code_sp_inside_sparen_open":
            self.codesp_inside_sparen_open = QtWidgets.QLabel(self.tr("code_sp_inside_sparen_open"))
            self.codesp_inside_sparen_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_sparen_open, 172, 0, 1, 5)
        self.namesp_inside_sparen_open = QtWidgets.QLabel("sp_inside_sparen_open")
        self.namesp_inside_sparen_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_sparen_open, 173, 0)
        self.sp_inside_sparen_open = QtWidgets.QComboBox()
        self.sp_inside_sparen_open.addItems(['ignore','add','remove','force'])
        self.sp_inside_sparen_open.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_sparen_open, 173, 1, 1, 4)
        self.labelsp_inside_sparen_close = QtWidgets.QLabel(self.tr("Add or remove space before ')' of control statements.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_inside_sparen.")+' '+self.tr("\n"))
        self.labelsp_inside_sparen_close.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_sparen_close, 174, 0, 1, 5)
        if self.tr("code_sp_inside_sparen_close")!="code_sp_inside_sparen_close":
            self.codesp_inside_sparen_close = QtWidgets.QLabel(self.tr("code_sp_inside_sparen_close"))
            self.codesp_inside_sparen_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_sparen_close, 175, 0, 1, 5)
        self.namesp_inside_sparen_close = QtWidgets.QLabel("sp_inside_sparen_close")
        self.namesp_inside_sparen_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_sparen_close, 176, 0)
        self.sp_inside_sparen_close = QtWidgets.QComboBox()
        self.sp_inside_sparen_close.addItems(['ignore','add','remove','force'])
        self.sp_inside_sparen_close.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_sparen_close, 176, 1, 1, 4)
        self.labelsp_after_sparen = QtWidgets.QLabel(self.tr("Add or remove space after ')' of control statements.")+' '+self.tr("\n"))
        self.labelsp_after_sparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_sparen, 177, 0, 1, 5)
        if self.tr("code_sp_after_sparen")!="code_sp_after_sparen":
            self.codesp_after_sparen = QtWidgets.QLabel(self.tr("code_sp_after_sparen"))
            self.codesp_after_sparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_sparen, 178, 0, 1, 5)
        self.namesp_after_sparen = QtWidgets.QLabel("sp_after_sparen")
        self.namesp_after_sparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_sparen, 179, 0)
        self.sp_after_sparen = QtWidgets.QComboBox()
        self.sp_after_sparen.addItems(['ignore','add','remove','force'])
        self.sp_after_sparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_sparen, 179, 1, 1, 4)
        self.labelsp_sparen_brace = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '{' of of control statements.")+' '+self.tr("\n"))
        self.labelsp_sparen_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_sparen_brace, 180, 0, 1, 5)
        if self.tr("code_sp_sparen_brace")!="code_sp_sparen_brace":
            self.codesp_sparen_brace = QtWidgets.QLabel(self.tr("code_sp_sparen_brace"))
            self.codesp_sparen_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_sparen_brace, 181, 0, 1, 5)
        self.namesp_sparen_brace = QtWidgets.QLabel("sp_sparen_brace")
        self.namesp_sparen_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_sparen_brace, 182, 0)
        self.sp_sparen_brace = QtWidgets.QComboBox()
        self.sp_sparen_brace.addItems(['ignore','add','remove','force'])
        self.sp_sparen_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_sparen_brace, 182, 1, 1, 4)
        self.labelsp_invariant_paren = QtWidgets.QLabel(self.tr("(D) Add or remove space between 'invariant' and '('.")+' '+self.tr("\n"))
        self.labelsp_invariant_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_invariant_paren, 183, 0, 1, 5)
        if self.tr("code_sp_invariant_paren")!="code_sp_invariant_paren":
            self.codesp_invariant_paren = QtWidgets.QLabel(self.tr("code_sp_invariant_paren"))
            self.codesp_invariant_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_invariant_paren, 184, 0, 1, 5)
        self.namesp_invariant_paren = QtWidgets.QLabel("sp_invariant_paren")
        self.namesp_invariant_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_invariant_paren, 185, 0)
        self.sp_invariant_paren = QtWidgets.QComboBox()
        self.sp_invariant_paren.addItems(['ignore','add','remove','force'])
        self.sp_invariant_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_invariant_paren, 185, 1, 1, 4)
        self.labelsp_after_invariant_paren = QtWidgets.QLabel(self.tr("(D) Add or remove space after the ')' in 'invariant (C) c'.")+' '+self.tr("\n"))
        self.labelsp_after_invariant_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_invariant_paren, 186, 0, 1, 5)
        if self.tr("code_sp_after_invariant_paren")!="code_sp_after_invariant_paren":
            self.codesp_after_invariant_paren = QtWidgets.QLabel(self.tr("code_sp_after_invariant_paren"))
            self.codesp_after_invariant_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_invariant_paren, 187, 0, 1, 5)
        self.namesp_after_invariant_paren = QtWidgets.QLabel("sp_after_invariant_paren")
        self.namesp_after_invariant_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_invariant_paren, 188, 0)
        self.sp_after_invariant_paren = QtWidgets.QComboBox()
        self.sp_after_invariant_paren.addItems(['ignore','add','remove','force'])
        self.sp_after_invariant_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_invariant_paren, 188, 1, 1, 4)
        self.labelsp_special_semi = QtWidgets.QLabel(self.tr("Add or remove space before empty statement ';' on 'if', 'for' and 'while'.")+' '+self.tr("\n"))
        self.labelsp_special_semi.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_special_semi, 189, 0, 1, 5)
        if self.tr("code_sp_special_semi")!="code_sp_special_semi":
            self.codesp_special_semi = QtWidgets.QLabel(self.tr("code_sp_special_semi"))
            self.codesp_special_semi.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_special_semi, 190, 0, 1, 5)
        self.namesp_special_semi = QtWidgets.QLabel("sp_special_semi")
        self.namesp_special_semi.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_special_semi, 191, 0)
        self.sp_special_semi = QtWidgets.QComboBox()
        self.sp_special_semi.addItems(['ignore','add','remove','force'])
        self.sp_special_semi.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_special_semi, 191, 1, 1, 4)
        self.labelsp_before_semi = QtWidgets.QLabel(self.tr("Add or remove space before ';'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_before_semi.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_semi, 192, 0, 1, 5)
        if self.tr("code_sp_before_semi")!="code_sp_before_semi":
            self.codesp_before_semi = QtWidgets.QLabel(self.tr("code_sp_before_semi"))
            self.codesp_before_semi.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_semi, 193, 0, 1, 5)
        self.namesp_before_semi = QtWidgets.QLabel("sp_before_semi")
        self.namesp_before_semi.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_semi, 194, 0)
        self.sp_before_semi = QtWidgets.QComboBox()
        self.sp_before_semi.addItems(['ignore','add','remove','force'])
        self.sp_before_semi.setCurrentText('remove')
        self.lt2.addWidget(self.sp_before_semi, 194, 1, 1, 4)
        self.labelsp_before_semi_for = QtWidgets.QLabel(self.tr("Add or remove space before ';' in non-empty 'for' statements.")+' '+self.tr("\n"))
        self.labelsp_before_semi_for.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_semi_for, 195, 0, 1, 5)
        if self.tr("code_sp_before_semi_for")!="code_sp_before_semi_for":
            self.codesp_before_semi_for = QtWidgets.QLabel(self.tr("code_sp_before_semi_for"))
            self.codesp_before_semi_for.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_semi_for, 196, 0, 1, 5)
        self.namesp_before_semi_for = QtWidgets.QLabel("sp_before_semi_for")
        self.namesp_before_semi_for.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_semi_for, 197, 0)
        self.sp_before_semi_for = QtWidgets.QComboBox()
        self.sp_before_semi_for.addItems(['ignore','add','remove','force'])
        self.sp_before_semi_for.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_semi_for, 197, 1, 1, 4)
        self.labelsp_before_semi_for_empty = QtWidgets.QLabel(self.tr("Add or remove space before a semicolon of an empty part of a for statement.")+' '+self.tr("\n"))
        self.labelsp_before_semi_for_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_semi_for_empty, 198, 0, 1, 5)
        if self.tr("code_sp_before_semi_for_empty")!="code_sp_before_semi_for_empty":
            self.codesp_before_semi_for_empty = QtWidgets.QLabel(self.tr("code_sp_before_semi_for_empty"))
            self.codesp_before_semi_for_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_semi_for_empty, 199, 0, 1, 5)
        self.namesp_before_semi_for_empty = QtWidgets.QLabel("sp_before_semi_for_empty")
        self.namesp_before_semi_for_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_semi_for_empty, 200, 0)
        self.sp_before_semi_for_empty = QtWidgets.QComboBox()
        self.sp_before_semi_for_empty.addItems(['ignore','add','remove','force'])
        self.sp_before_semi_for_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_semi_for_empty, 200, 1, 1, 4)
        self.labelsp_after_semi = QtWidgets.QLabel(self.tr("Add or remove space after ';', except when followed by a comment.")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n"))
        self.labelsp_after_semi.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_semi, 201, 0, 1, 5)
        if self.tr("code_sp_after_semi")!="code_sp_after_semi":
            self.codesp_after_semi = QtWidgets.QLabel(self.tr("code_sp_after_semi"))
            self.codesp_after_semi.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_semi, 202, 0, 1, 5)
        self.namesp_after_semi = QtWidgets.QLabel("sp_after_semi")
        self.namesp_after_semi.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_semi, 203, 0)
        self.sp_after_semi = QtWidgets.QComboBox()
        self.sp_after_semi.addItems(['ignore','add','remove','force'])
        self.sp_after_semi.setCurrentText('add')
        self.lt2.addWidget(self.sp_after_semi, 203, 1, 1, 4)
        self.labelsp_after_semi_for = QtWidgets.QLabel(self.tr("Add or remove space after ';' in non-empty 'for' statements.")+' '+self.tr("\n")+' '+self.tr("Default: force")+' '+self.tr("\n"))
        self.labelsp_after_semi_for.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_semi_for, 204, 0, 1, 5)
        if self.tr("code_sp_after_semi_for")!="code_sp_after_semi_for":
            self.codesp_after_semi_for = QtWidgets.QLabel(self.tr("code_sp_after_semi_for"))
            self.codesp_after_semi_for.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_semi_for, 205, 0, 1, 5)
        self.namesp_after_semi_for = QtWidgets.QLabel("sp_after_semi_for")
        self.namesp_after_semi_for.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_semi_for, 206, 0)
        self.sp_after_semi_for = QtWidgets.QComboBox()
        self.sp_after_semi_for.addItems(['ignore','add','remove','force'])
        self.sp_after_semi_for.setCurrentText('force')
        self.lt2.addWidget(self.sp_after_semi_for, 206, 1, 1, 4)
        self.labelsp_after_semi_for_empty = QtWidgets.QLabel(self.tr("Add or remove space after the final semicolon of an empty part of a for statement, as in 'for ( ; ; <here> )'.")+' '+self.tr("\n"))
        self.labelsp_after_semi_for_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_semi_for_empty, 207, 0, 1, 5)
        if self.tr("code_sp_after_semi_for_empty")!="code_sp_after_semi_for_empty":
            self.codesp_after_semi_for_empty = QtWidgets.QLabel(self.tr("code_sp_after_semi_for_empty"))
            self.codesp_after_semi_for_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_semi_for_empty, 208, 0, 1, 5)
        self.namesp_after_semi_for_empty = QtWidgets.QLabel("sp_after_semi_for_empty")
        self.namesp_after_semi_for_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_semi_for_empty, 209, 0)
        self.sp_after_semi_for_empty = QtWidgets.QComboBox()
        self.sp_after_semi_for_empty.addItems(['ignore','add','remove','force'])
        self.sp_after_semi_for_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_semi_for_empty, 209, 1, 1, 4)
        self.labelsp_before_square = QtWidgets.QLabel(self.tr("Add or remove space before '[' (except '[]').")+' '+self.tr("\n"))
        self.labelsp_before_square.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_square, 210, 0, 1, 5)
        if self.tr("code_sp_before_square")!="code_sp_before_square":
            self.codesp_before_square = QtWidgets.QLabel(self.tr("code_sp_before_square"))
            self.codesp_before_square.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_square, 211, 0, 1, 5)
        self.namesp_before_square = QtWidgets.QLabel("sp_before_square")
        self.namesp_before_square.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_square, 212, 0)
        self.sp_before_square = QtWidgets.QComboBox()
        self.sp_before_square.addItems(['ignore','add','remove','force'])
        self.sp_before_square.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_square, 212, 1, 1, 4)
        self.labelsp_before_vardef_square = QtWidgets.QLabel(self.tr("Add or remove space before '[' for a variable definition.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_before_vardef_square.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_vardef_square, 213, 0, 1, 5)
        if self.tr("code_sp_before_vardef_square")!="code_sp_before_vardef_square":
            self.codesp_before_vardef_square = QtWidgets.QLabel(self.tr("code_sp_before_vardef_square"))
            self.codesp_before_vardef_square.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_vardef_square, 214, 0, 1, 5)
        self.namesp_before_vardef_square = QtWidgets.QLabel("sp_before_vardef_square")
        self.namesp_before_vardef_square.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_vardef_square, 215, 0)
        self.sp_before_vardef_square = QtWidgets.QComboBox()
        self.sp_before_vardef_square.addItems(['ignore','add','remove','force'])
        self.sp_before_vardef_square.setCurrentText('remove')
        self.lt2.addWidget(self.sp_before_vardef_square, 215, 1, 1, 4)
        self.labelsp_before_square_asm_block = QtWidgets.QLabel(self.tr("Add or remove space before '[' for asm block.")+' '+self.tr("\n"))
        self.labelsp_before_square_asm_block.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_square_asm_block, 216, 0, 1, 5)
        if self.tr("code_sp_before_square_asm_block")!="code_sp_before_square_asm_block":
            self.codesp_before_square_asm_block = QtWidgets.QLabel(self.tr("code_sp_before_square_asm_block"))
            self.codesp_before_square_asm_block.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_square_asm_block, 217, 0, 1, 5)
        self.namesp_before_square_asm_block = QtWidgets.QLabel("sp_before_square_asm_block")
        self.namesp_before_square_asm_block.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_square_asm_block, 218, 0)
        self.sp_before_square_asm_block = QtWidgets.QComboBox()
        self.sp_before_square_asm_block.addItems(['ignore','add','remove','force'])
        self.sp_before_square_asm_block.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_square_asm_block, 218, 1, 1, 4)
        self.labelsp_before_squares = QtWidgets.QLabel(self.tr("Add or remove space before '[]'.")+' '+self.tr("\n"))
        self.labelsp_before_squares.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_squares, 219, 0, 1, 5)
        if self.tr("code_sp_before_squares")!="code_sp_before_squares":
            self.codesp_before_squares = QtWidgets.QLabel(self.tr("code_sp_before_squares"))
            self.codesp_before_squares.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_squares, 220, 0, 1, 5)
        self.namesp_before_squares = QtWidgets.QLabel("sp_before_squares")
        self.namesp_before_squares.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_squares, 221, 0)
        self.sp_before_squares = QtWidgets.QComboBox()
        self.sp_before_squares.addItems(['ignore','add','remove','force'])
        self.sp_before_squares.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_squares, 221, 1, 1, 4)
        self.labelsp_cpp_before_struct_binding = QtWidgets.QLabel(self.tr("Add or remove space before C++17 structured bindings.")+' '+self.tr("\n"))
        self.labelsp_cpp_before_struct_binding.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cpp_before_struct_binding, 222, 0, 1, 5)
        if self.tr("code_sp_cpp_before_struct_binding")!="code_sp_cpp_before_struct_binding":
            self.codesp_cpp_before_struct_binding = QtWidgets.QLabel(self.tr("code_sp_cpp_before_struct_binding"))
            self.codesp_cpp_before_struct_binding.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cpp_before_struct_binding, 223, 0, 1, 5)
        self.namesp_cpp_before_struct_binding = QtWidgets.QLabel("sp_cpp_before_struct_binding")
        self.namesp_cpp_before_struct_binding.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cpp_before_struct_binding, 224, 0)
        self.sp_cpp_before_struct_binding = QtWidgets.QComboBox()
        self.sp_cpp_before_struct_binding.addItems(['ignore','add','remove','force'])
        self.sp_cpp_before_struct_binding.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_before_struct_binding, 224, 1, 1, 4)
        self.labelsp_inside_square = QtWidgets.QLabel(self.tr("Add or remove space inside a non-empty '[' and ']'.")+' '+self.tr("\n"))
        self.labelsp_inside_square.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_square, 225, 0, 1, 5)
        if self.tr("code_sp_inside_square")!="code_sp_inside_square":
            self.codesp_inside_square = QtWidgets.QLabel(self.tr("code_sp_inside_square"))
            self.codesp_inside_square.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_square, 226, 0, 1, 5)
        self.namesp_inside_square = QtWidgets.QLabel("sp_inside_square")
        self.namesp_inside_square.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_square, 227, 0)
        self.sp_inside_square = QtWidgets.QComboBox()
        self.sp_inside_square.addItems(['ignore','add','remove','force'])
        self.sp_inside_square.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_square, 227, 1, 1, 4)
        self.labelsp_inside_square_oc_array = QtWidgets.QLabel(self.tr("(OC) Add or remove space inside a non-empty Objective-C boxed array '@[' and ']'.")+' '+self.tr("If set to ignore, sp_inside_square is used.")+' '+self.tr("\n"))
        self.labelsp_inside_square_oc_array.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_square_oc_array, 228, 0, 1, 5)
        if self.tr("code_sp_inside_square_oc_array")!="code_sp_inside_square_oc_array":
            self.codesp_inside_square_oc_array = QtWidgets.QLabel(self.tr("code_sp_inside_square_oc_array"))
            self.codesp_inside_square_oc_array.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_square_oc_array, 229, 0, 1, 5)
        self.namesp_inside_square_oc_array = QtWidgets.QLabel("sp_inside_square_oc_array")
        self.namesp_inside_square_oc_array.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_square_oc_array, 230, 0)
        self.sp_inside_square_oc_array = QtWidgets.QComboBox()
        self.sp_inside_square_oc_array.addItems(['ignore','add','remove','force'])
        self.sp_inside_square_oc_array.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_square_oc_array, 230, 1, 1, 4)
        self.labelsp_after_comma = QtWidgets.QLabel(self.tr("Add or remove space after ',', i.e. 'a,b' vs. 'a, b'.")+' '+self.tr("\n"))
        self.labelsp_after_comma.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_comma, 231, 0, 1, 5)
        if self.tr("code_sp_after_comma")!="code_sp_after_comma":
            self.codesp_after_comma = QtWidgets.QLabel(self.tr("code_sp_after_comma"))
            self.codesp_after_comma.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_comma, 232, 0, 1, 5)
        self.namesp_after_comma = QtWidgets.QLabel("sp_after_comma")
        self.namesp_after_comma.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_comma, 233, 0)
        self.sp_after_comma = QtWidgets.QComboBox()
        self.sp_after_comma.addItems(['ignore','add','remove','force'])
        self.sp_after_comma.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_comma, 233, 1, 1, 4)
        self.labelsp_before_comma = QtWidgets.QLabel(self.tr("Add or remove space before ','.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_before_comma.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_comma, 234, 0, 1, 5)
        if self.tr("code_sp_before_comma")!="code_sp_before_comma":
            self.codesp_before_comma = QtWidgets.QLabel(self.tr("code_sp_before_comma"))
            self.codesp_before_comma.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_comma, 235, 0, 1, 5)
        self.namesp_before_comma = QtWidgets.QLabel("sp_before_comma")
        self.namesp_before_comma.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_comma, 236, 0)
        self.sp_before_comma = QtWidgets.QComboBox()
        self.sp_before_comma.addItems(['ignore','add','remove','force'])
        self.sp_before_comma.setCurrentText('remove')
        self.lt2.addWidget(self.sp_before_comma, 236, 1, 1, 4)
        self.labelsp_after_mdatype_commas = QtWidgets.QLabel(self.tr("(C#) Add or remove space between ',' and ']' in multidimensional array type like 'int[,,]'.")+' '+self.tr("\n"))
        self.labelsp_after_mdatype_commas.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_mdatype_commas, 237, 0, 1, 5)
        if self.tr("code_sp_after_mdatype_commas")!="code_sp_after_mdatype_commas":
            self.codesp_after_mdatype_commas = QtWidgets.QLabel(self.tr("code_sp_after_mdatype_commas"))
            self.codesp_after_mdatype_commas.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_mdatype_commas, 238, 0, 1, 5)
        self.namesp_after_mdatype_commas = QtWidgets.QLabel("sp_after_mdatype_commas")
        self.namesp_after_mdatype_commas.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_mdatype_commas, 239, 0)
        self.sp_after_mdatype_commas = QtWidgets.QComboBox()
        self.sp_after_mdatype_commas.addItems(['ignore','add','remove','force'])
        self.sp_after_mdatype_commas.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_mdatype_commas, 239, 1, 1, 4)
        self.labelsp_before_mdatype_commas = QtWidgets.QLabel(self.tr("(C#) Add or remove space between '[' and ',' in multidimensional array type like 'int[,,]'.")+' '+self.tr("\n"))
        self.labelsp_before_mdatype_commas.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_mdatype_commas, 240, 0, 1, 5)
        if self.tr("code_sp_before_mdatype_commas")!="code_sp_before_mdatype_commas":
            self.codesp_before_mdatype_commas = QtWidgets.QLabel(self.tr("code_sp_before_mdatype_commas"))
            self.codesp_before_mdatype_commas.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_mdatype_commas, 241, 0, 1, 5)
        self.namesp_before_mdatype_commas = QtWidgets.QLabel("sp_before_mdatype_commas")
        self.namesp_before_mdatype_commas.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_mdatype_commas, 242, 0)
        self.sp_before_mdatype_commas = QtWidgets.QComboBox()
        self.sp_before_mdatype_commas.addItems(['ignore','add','remove','force'])
        self.sp_before_mdatype_commas.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_mdatype_commas, 242, 1, 1, 4)
        self.labelsp_between_mdatype_commas = QtWidgets.QLabel(self.tr("(C#) Add or remove space between ',' in multidimensional array type like 'int[,,]'.")+' '+self.tr("\n"))
        self.labelsp_between_mdatype_commas.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_between_mdatype_commas, 243, 0, 1, 5)
        if self.tr("code_sp_between_mdatype_commas")!="code_sp_between_mdatype_commas":
            self.codesp_between_mdatype_commas = QtWidgets.QLabel(self.tr("code_sp_between_mdatype_commas"))
            self.codesp_between_mdatype_commas.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_between_mdatype_commas, 244, 0, 1, 5)
        self.namesp_between_mdatype_commas = QtWidgets.QLabel("sp_between_mdatype_commas")
        self.namesp_between_mdatype_commas.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_between_mdatype_commas, 245, 0)
        self.sp_between_mdatype_commas = QtWidgets.QComboBox()
        self.sp_between_mdatype_commas.addItems(['ignore','add','remove','force'])
        self.sp_between_mdatype_commas.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_between_mdatype_commas, 245, 1, 1, 4)
        self.labelsp_paren_comma = QtWidgets.QLabel(self.tr("Add or remove space between an open parenthesis and comma, i.e. '(,' vs. '( ,'.")+' '+self.tr("\n")+' '+self.tr("Default: force")+' '+self.tr("\n"))
        self.labelsp_paren_comma.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_paren_comma, 246, 0, 1, 5)
        if self.tr("code_sp_paren_comma")!="code_sp_paren_comma":
            self.codesp_paren_comma = QtWidgets.QLabel(self.tr("code_sp_paren_comma"))
            self.codesp_paren_comma.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_paren_comma, 247, 0, 1, 5)
        self.namesp_paren_comma = QtWidgets.QLabel("sp_paren_comma")
        self.namesp_paren_comma.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_paren_comma, 248, 0)
        self.sp_paren_comma = QtWidgets.QComboBox()
        self.sp_paren_comma.addItems(['ignore','add','remove','force'])
        self.sp_paren_comma.setCurrentText('force')
        self.lt2.addWidget(self.sp_paren_comma, 248, 1, 1, 4)
        self.labelsp_before_ellipsis = QtWidgets.QLabel(self.tr("Add or remove space before the variadic '...' when preceded by a non-punctuator.")+' '+self.tr("\n"))
        self.labelsp_before_ellipsis.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_ellipsis, 249, 0, 1, 5)
        if self.tr("code_sp_before_ellipsis")!="code_sp_before_ellipsis":
            self.codesp_before_ellipsis = QtWidgets.QLabel(self.tr("code_sp_before_ellipsis"))
            self.codesp_before_ellipsis.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_ellipsis, 250, 0, 1, 5)
        self.namesp_before_ellipsis = QtWidgets.QLabel("sp_before_ellipsis")
        self.namesp_before_ellipsis.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_ellipsis, 251, 0)
        self.sp_before_ellipsis = QtWidgets.QComboBox()
        self.sp_before_ellipsis.addItems(['ignore','add','remove','force'])
        self.sp_before_ellipsis.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_ellipsis, 251, 1, 1, 4)
        self.labelsp_type_ellipsis = QtWidgets.QLabel(self.tr("Add or remove space between a type and '...'.")+' '+self.tr("\n"))
        self.labelsp_type_ellipsis.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_type_ellipsis, 252, 0, 1, 5)
        if self.tr("code_sp_type_ellipsis")!="code_sp_type_ellipsis":
            self.codesp_type_ellipsis = QtWidgets.QLabel(self.tr("code_sp_type_ellipsis"))
            self.codesp_type_ellipsis.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_type_ellipsis, 253, 0, 1, 5)
        self.namesp_type_ellipsis = QtWidgets.QLabel("sp_type_ellipsis")
        self.namesp_type_ellipsis.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_type_ellipsis, 254, 0)
        self.sp_type_ellipsis = QtWidgets.QComboBox()
        self.sp_type_ellipsis.addItems(['ignore','add','remove','force'])
        self.sp_type_ellipsis.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_type_ellipsis, 254, 1, 1, 4)
        self.labelsp_type_question = QtWidgets.QLabel(self.tr("(D) Add or remove space between a type and '?'.")+' '+self.tr("\n"))
        self.labelsp_type_question.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_type_question, 255, 0, 1, 5)
        if self.tr("code_sp_type_question")!="code_sp_type_question":
            self.codesp_type_question = QtWidgets.QLabel(self.tr("code_sp_type_question"))
            self.codesp_type_question.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_type_question, 256, 0, 1, 5)
        self.namesp_type_question = QtWidgets.QLabel("sp_type_question")
        self.namesp_type_question.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_type_question, 257, 0)
        self.sp_type_question = QtWidgets.QComboBox()
        self.sp_type_question.addItems(['ignore','add','remove','force'])
        self.sp_type_question.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_type_question, 257, 1, 1, 4)
        self.labelsp_paren_ellipsis = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '...'.")+' '+self.tr("\n"))
        self.labelsp_paren_ellipsis.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_paren_ellipsis, 258, 0, 1, 5)
        if self.tr("code_sp_paren_ellipsis")!="code_sp_paren_ellipsis":
            self.codesp_paren_ellipsis = QtWidgets.QLabel(self.tr("code_sp_paren_ellipsis"))
            self.codesp_paren_ellipsis.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_paren_ellipsis, 259, 0, 1, 5)
        self.namesp_paren_ellipsis = QtWidgets.QLabel("sp_paren_ellipsis")
        self.namesp_paren_ellipsis.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_paren_ellipsis, 260, 0)
        self.sp_paren_ellipsis = QtWidgets.QComboBox()
        self.sp_paren_ellipsis.addItems(['ignore','add','remove','force'])
        self.sp_paren_ellipsis.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_ellipsis, 260, 1, 1, 4)
        self.labelsp_paren_qualifier = QtWidgets.QLabel(self.tr("Add or remove space between ')' and a qualifier such as 'const'.")+' '+self.tr("\n"))
        self.labelsp_paren_qualifier.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_paren_qualifier, 261, 0, 1, 5)
        if self.tr("code_sp_paren_qualifier")!="code_sp_paren_qualifier":
            self.codesp_paren_qualifier = QtWidgets.QLabel(self.tr("code_sp_paren_qualifier"))
            self.codesp_paren_qualifier.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_paren_qualifier, 262, 0, 1, 5)
        self.namesp_paren_qualifier = QtWidgets.QLabel("sp_paren_qualifier")
        self.namesp_paren_qualifier.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_paren_qualifier, 263, 0)
        self.sp_paren_qualifier = QtWidgets.QComboBox()
        self.sp_paren_qualifier.addItems(['ignore','add','remove','force'])
        self.sp_paren_qualifier.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_qualifier, 263, 1, 1, 4)
        self.labelsp_paren_noexcept = QtWidgets.QLabel(self.tr("Add or remove space between ')' and 'noexcept'.")+' '+self.tr("\n"))
        self.labelsp_paren_noexcept.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_paren_noexcept, 264, 0, 1, 5)
        if self.tr("code_sp_paren_noexcept")!="code_sp_paren_noexcept":
            self.codesp_paren_noexcept = QtWidgets.QLabel(self.tr("code_sp_paren_noexcept"))
            self.codesp_paren_noexcept.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_paren_noexcept, 265, 0, 1, 5)
        self.namesp_paren_noexcept = QtWidgets.QLabel("sp_paren_noexcept")
        self.namesp_paren_noexcept.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_paren_noexcept, 266, 0)
        self.sp_paren_noexcept = QtWidgets.QComboBox()
        self.sp_paren_noexcept.addItems(['ignore','add','remove','force'])
        self.sp_paren_noexcept.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_paren_noexcept, 266, 1, 1, 4)
        self.labelsp_after_class_colon = QtWidgets.QLabel(self.tr("Add or remove space after class ':'.")+' '+self.tr("\n"))
        self.labelsp_after_class_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_class_colon, 267, 0, 1, 5)
        if self.tr("code_sp_after_class_colon")!="code_sp_after_class_colon":
            self.codesp_after_class_colon = QtWidgets.QLabel(self.tr("code_sp_after_class_colon"))
            self.codesp_after_class_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_class_colon, 268, 0, 1, 5)
        self.namesp_after_class_colon = QtWidgets.QLabel("sp_after_class_colon")
        self.namesp_after_class_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_class_colon, 269, 0)
        self.sp_after_class_colon = QtWidgets.QComboBox()
        self.sp_after_class_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_class_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_class_colon, 269, 1, 1, 4)
        self.labelsp_before_class_colon = QtWidgets.QLabel(self.tr("Add or remove space before class ':'.")+' '+self.tr("\n"))
        self.labelsp_before_class_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_class_colon, 270, 0, 1, 5)
        if self.tr("code_sp_before_class_colon")!="code_sp_before_class_colon":
            self.codesp_before_class_colon = QtWidgets.QLabel(self.tr("code_sp_before_class_colon"))
            self.codesp_before_class_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_class_colon, 271, 0, 1, 5)
        self.namesp_before_class_colon = QtWidgets.QLabel("sp_before_class_colon")
        self.namesp_before_class_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_class_colon, 272, 0)
        self.sp_before_class_colon = QtWidgets.QComboBox()
        self.sp_before_class_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_class_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_class_colon, 272, 1, 1, 4)
        self.labelsp_after_constr_colon = QtWidgets.QLabel(self.tr("Add or remove space after class constructor ':'.")+' '+self.tr("\n"))
        self.labelsp_after_constr_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_constr_colon, 273, 0, 1, 5)
        if self.tr("code_sp_after_constr_colon")!="code_sp_after_constr_colon":
            self.codesp_after_constr_colon = QtWidgets.QLabel(self.tr("code_sp_after_constr_colon"))
            self.codesp_after_constr_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_constr_colon, 274, 0, 1, 5)
        self.namesp_after_constr_colon = QtWidgets.QLabel("sp_after_constr_colon")
        self.namesp_after_constr_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_constr_colon, 275, 0)
        self.sp_after_constr_colon = QtWidgets.QComboBox()
        self.sp_after_constr_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_constr_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_constr_colon, 275, 1, 1, 4)
        self.labelsp_before_constr_colon = QtWidgets.QLabel(self.tr("Add or remove space before class constructor ':'.")+' '+self.tr("\n"))
        self.labelsp_before_constr_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_constr_colon, 276, 0, 1, 5)
        if self.tr("code_sp_before_constr_colon")!="code_sp_before_constr_colon":
            self.codesp_before_constr_colon = QtWidgets.QLabel(self.tr("code_sp_before_constr_colon"))
            self.codesp_before_constr_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_constr_colon, 277, 0, 1, 5)
        self.namesp_before_constr_colon = QtWidgets.QLabel("sp_before_constr_colon")
        self.namesp_before_constr_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_constr_colon, 278, 0)
        self.sp_before_constr_colon = QtWidgets.QComboBox()
        self.sp_before_constr_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_constr_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_constr_colon, 278, 1, 1, 4)
        self.labelsp_before_case_colon = QtWidgets.QLabel(self.tr("Add or remove space before case ':'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_before_case_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_case_colon, 279, 0, 1, 5)
        if self.tr("code_sp_before_case_colon")!="code_sp_before_case_colon":
            self.codesp_before_case_colon = QtWidgets.QLabel(self.tr("code_sp_before_case_colon"))
            self.codesp_before_case_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_case_colon, 280, 0, 1, 5)
        self.namesp_before_case_colon = QtWidgets.QLabel("sp_before_case_colon")
        self.namesp_before_case_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_case_colon, 281, 0)
        self.sp_before_case_colon = QtWidgets.QComboBox()
        self.sp_before_case_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_case_colon.setCurrentText('remove')
        self.lt2.addWidget(self.sp_before_case_colon, 281, 1, 1, 4)
        self.labelsp_after_operator = QtWidgets.QLabel(self.tr("Add or remove space between 'operator' and operator sign.")+' '+self.tr("\n"))
        self.labelsp_after_operator.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_operator, 282, 0, 1, 5)
        if self.tr("code_sp_after_operator")!="code_sp_after_operator":
            self.codesp_after_operator = QtWidgets.QLabel(self.tr("code_sp_after_operator"))
            self.codesp_after_operator.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_operator, 283, 0, 1, 5)
        self.namesp_after_operator = QtWidgets.QLabel("sp_after_operator")
        self.namesp_after_operator.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_operator, 284, 0)
        self.sp_after_operator = QtWidgets.QComboBox()
        self.sp_after_operator.addItems(['ignore','add','remove','force'])
        self.sp_after_operator.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_operator, 284, 1, 1, 4)
        self.labelsp_after_operator_sym = QtWidgets.QLabel(self.tr("Add or remove space between the operator symbol and the open parenthesis, as in 'operator ++('.")+' '+self.tr("\n"))
        self.labelsp_after_operator_sym.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_operator_sym, 285, 0, 1, 5)
        if self.tr("code_sp_after_operator_sym")!="code_sp_after_operator_sym":
            self.codesp_after_operator_sym = QtWidgets.QLabel(self.tr("code_sp_after_operator_sym"))
            self.codesp_after_operator_sym.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_operator_sym, 286, 0, 1, 5)
        self.namesp_after_operator_sym = QtWidgets.QLabel("sp_after_operator_sym")
        self.namesp_after_operator_sym.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_operator_sym, 287, 0)
        self.sp_after_operator_sym = QtWidgets.QComboBox()
        self.sp_after_operator_sym.addItems(['ignore','add','remove','force'])
        self.sp_after_operator_sym.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_operator_sym, 287, 1, 1, 4)
        self.labelsp_after_operator_sym_empty = QtWidgets.QLabel(self.tr("Overrides sp_after_operator_sym when the operator has no arguments, as in 'operator *()'.")+' '+self.tr("\n"))
        self.labelsp_after_operator_sym_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_operator_sym_empty, 288, 0, 1, 5)
        if self.tr("code_sp_after_operator_sym_empty")!="code_sp_after_operator_sym_empty":
            self.codesp_after_operator_sym_empty = QtWidgets.QLabel(self.tr("code_sp_after_operator_sym_empty"))
            self.codesp_after_operator_sym_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_operator_sym_empty, 289, 0, 1, 5)
        self.namesp_after_operator_sym_empty = QtWidgets.QLabel("sp_after_operator_sym_empty")
        self.namesp_after_operator_sym_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_operator_sym_empty, 290, 0)
        self.sp_after_operator_sym_empty = QtWidgets.QComboBox()
        self.sp_after_operator_sym_empty.addItems(['ignore','add','remove','force'])
        self.sp_after_operator_sym_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_operator_sym_empty, 290, 1, 1, 4)
        self.labelsp_after_cast = QtWidgets.QLabel(self.tr("Add or remove space after C/D cast, i.e. 'cast(int)a' vs. 'cast(int) a' or '(int)a' vs. '(int) a'.")+' '+self.tr("\n"))
        self.labelsp_after_cast.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_cast, 291, 0, 1, 5)
        if self.tr("code_sp_after_cast")!="code_sp_after_cast":
            self.codesp_after_cast = QtWidgets.QLabel(self.tr("code_sp_after_cast"))
            self.codesp_after_cast.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_cast, 292, 0, 1, 5)
        self.namesp_after_cast = QtWidgets.QLabel("sp_after_cast")
        self.namesp_after_cast.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_cast, 293, 0)
        self.sp_after_cast = QtWidgets.QComboBox()
        self.sp_after_cast.addItems(['ignore','add','remove','force'])
        self.sp_after_cast.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_cast, 293, 1, 1, 4)
        self.labelsp_inside_paren_cast = QtWidgets.QLabel(self.tr("Add or remove spaces inside cast parentheses.")+' '+self.tr("\n"))
        self.labelsp_inside_paren_cast.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_paren_cast, 294, 0, 1, 5)
        if self.tr("code_sp_inside_paren_cast")!="code_sp_inside_paren_cast":
            self.codesp_inside_paren_cast = QtWidgets.QLabel(self.tr("code_sp_inside_paren_cast"))
            self.codesp_inside_paren_cast.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_paren_cast, 295, 0, 1, 5)
        self.namesp_inside_paren_cast = QtWidgets.QLabel("sp_inside_paren_cast")
        self.namesp_inside_paren_cast.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_paren_cast, 296, 0)
        self.sp_inside_paren_cast = QtWidgets.QComboBox()
        self.sp_inside_paren_cast.addItems(['ignore','add','remove','force'])
        self.sp_inside_paren_cast.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_paren_cast, 296, 1, 1, 4)
        self.labelsp_cpp_cast_paren = QtWidgets.QLabel(self.tr("Add or remove space between the type and open parenthesis in a C++ cast, i.e. 'int(exp)' vs. 'int (exp)'.")+' '+self.tr("\n"))
        self.labelsp_cpp_cast_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cpp_cast_paren, 297, 0, 1, 5)
        if self.tr("code_sp_cpp_cast_paren")!="code_sp_cpp_cast_paren":
            self.codesp_cpp_cast_paren = QtWidgets.QLabel(self.tr("code_sp_cpp_cast_paren"))
            self.codesp_cpp_cast_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cpp_cast_paren, 298, 0, 1, 5)
        self.namesp_cpp_cast_paren = QtWidgets.QLabel("sp_cpp_cast_paren")
        self.namesp_cpp_cast_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cpp_cast_paren, 299, 0)
        self.sp_cpp_cast_paren = QtWidgets.QComboBox()
        self.sp_cpp_cast_paren.addItems(['ignore','add','remove','force'])
        self.sp_cpp_cast_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cpp_cast_paren, 299, 1, 1, 4)
        self.labelsp_sizeof_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'sizeof' and '('.")+' '+self.tr("\n"))
        self.labelsp_sizeof_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_sizeof_paren, 300, 0, 1, 5)
        if self.tr("code_sp_sizeof_paren")!="code_sp_sizeof_paren":
            self.codesp_sizeof_paren = QtWidgets.QLabel(self.tr("code_sp_sizeof_paren"))
            self.codesp_sizeof_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_sizeof_paren, 301, 0, 1, 5)
        self.namesp_sizeof_paren = QtWidgets.QLabel("sp_sizeof_paren")
        self.namesp_sizeof_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_sizeof_paren, 302, 0)
        self.sp_sizeof_paren = QtWidgets.QComboBox()
        self.sp_sizeof_paren.addItems(['ignore','add','remove','force'])
        self.sp_sizeof_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_sizeof_paren, 302, 1, 1, 4)
        self.labelsp_sizeof_ellipsis = QtWidgets.QLabel(self.tr("Add or remove space between 'sizeof' and '...'.")+' '+self.tr("\n"))
        self.labelsp_sizeof_ellipsis.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_sizeof_ellipsis, 303, 0, 1, 5)
        if self.tr("code_sp_sizeof_ellipsis")!="code_sp_sizeof_ellipsis":
            self.codesp_sizeof_ellipsis = QtWidgets.QLabel(self.tr("code_sp_sizeof_ellipsis"))
            self.codesp_sizeof_ellipsis.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_sizeof_ellipsis, 304, 0, 1, 5)
        self.namesp_sizeof_ellipsis = QtWidgets.QLabel("sp_sizeof_ellipsis")
        self.namesp_sizeof_ellipsis.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_sizeof_ellipsis, 305, 0)
        self.sp_sizeof_ellipsis = QtWidgets.QComboBox()
        self.sp_sizeof_ellipsis.addItems(['ignore','add','remove','force'])
        self.sp_sizeof_ellipsis.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_sizeof_ellipsis, 305, 1, 1, 4)
        self.labelsp_sizeof_ellipsis_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'sizeof...' and '('.")+' '+self.tr("\n"))
        self.labelsp_sizeof_ellipsis_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_sizeof_ellipsis_paren, 306, 0, 1, 5)
        if self.tr("code_sp_sizeof_ellipsis_paren")!="code_sp_sizeof_ellipsis_paren":
            self.codesp_sizeof_ellipsis_paren = QtWidgets.QLabel(self.tr("code_sp_sizeof_ellipsis_paren"))
            self.codesp_sizeof_ellipsis_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_sizeof_ellipsis_paren, 307, 0, 1, 5)
        self.namesp_sizeof_ellipsis_paren = QtWidgets.QLabel("sp_sizeof_ellipsis_paren")
        self.namesp_sizeof_ellipsis_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_sizeof_ellipsis_paren, 308, 0)
        self.sp_sizeof_ellipsis_paren = QtWidgets.QComboBox()
        self.sp_sizeof_ellipsis_paren.addItems(['ignore','add','remove','force'])
        self.sp_sizeof_ellipsis_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_sizeof_ellipsis_paren, 308, 1, 1, 4)
        self.labelsp_decltype_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'decltype' and '('.")+' '+self.tr("\n"))
        self.labelsp_decltype_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_decltype_paren, 309, 0, 1, 5)
        if self.tr("code_sp_decltype_paren")!="code_sp_decltype_paren":
            self.codesp_decltype_paren = QtWidgets.QLabel(self.tr("code_sp_decltype_paren"))
            self.codesp_decltype_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_decltype_paren, 310, 0, 1, 5)
        self.namesp_decltype_paren = QtWidgets.QLabel("sp_decltype_paren")
        self.namesp_decltype_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_decltype_paren, 311, 0)
        self.sp_decltype_paren = QtWidgets.QComboBox()
        self.sp_decltype_paren.addItems(['ignore','add','remove','force'])
        self.sp_decltype_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_decltype_paren, 311, 1, 1, 4)
        self.labelsp_after_tag = QtWidgets.QLabel(self.tr("(Pawn) Add or remove space after the tag keyword.")+' '+self.tr("\n"))
        self.labelsp_after_tag.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_tag, 312, 0, 1, 5)
        if self.tr("code_sp_after_tag")!="code_sp_after_tag":
            self.codesp_after_tag = QtWidgets.QLabel(self.tr("code_sp_after_tag"))
            self.codesp_after_tag.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_tag, 313, 0, 1, 5)
        self.namesp_after_tag = QtWidgets.QLabel("sp_after_tag")
        self.namesp_after_tag.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_tag, 314, 0)
        self.sp_after_tag = QtWidgets.QComboBox()
        self.sp_after_tag.addItems(['ignore','add','remove','force'])
        self.sp_after_tag.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_tag, 314, 1, 1, 4)
        self.labelsp_inside_braces_enum = QtWidgets.QLabel(self.tr("Add or remove space inside enum '{' and '}'.")+' '+self.tr("\n"))
        self.labelsp_inside_braces_enum.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_braces_enum, 315, 0, 1, 5)
        if self.tr("code_sp_inside_braces_enum")!="code_sp_inside_braces_enum":
            self.codesp_inside_braces_enum = QtWidgets.QLabel(self.tr("code_sp_inside_braces_enum"))
            self.codesp_inside_braces_enum.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_braces_enum, 316, 0, 1, 5)
        self.namesp_inside_braces_enum = QtWidgets.QLabel("sp_inside_braces_enum")
        self.namesp_inside_braces_enum.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_braces_enum, 317, 0)
        self.sp_inside_braces_enum = QtWidgets.QComboBox()
        self.sp_inside_braces_enum.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces_enum.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces_enum, 317, 1, 1, 4)
        self.labelsp_inside_braces_struct = QtWidgets.QLabel(self.tr("Add or remove space inside struct/union '{' and '}'.")+' '+self.tr("\n"))
        self.labelsp_inside_braces_struct.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_braces_struct, 318, 0, 1, 5)
        if self.tr("code_sp_inside_braces_struct")!="code_sp_inside_braces_struct":
            self.codesp_inside_braces_struct = QtWidgets.QLabel(self.tr("code_sp_inside_braces_struct"))
            self.codesp_inside_braces_struct.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_braces_struct, 319, 0, 1, 5)
        self.namesp_inside_braces_struct = QtWidgets.QLabel("sp_inside_braces_struct")
        self.namesp_inside_braces_struct.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_braces_struct, 320, 0)
        self.sp_inside_braces_struct = QtWidgets.QComboBox()
        self.sp_inside_braces_struct.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces_struct.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces_struct, 320, 1, 1, 4)
        self.labelsp_inside_braces_oc_dict = QtWidgets.QLabel(self.tr("(OC) Add or remove space inside Objective-C boxed dictionary '{' and '}'")+' '+self.tr("\n"))
        self.labelsp_inside_braces_oc_dict.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_braces_oc_dict, 321, 0, 1, 5)
        if self.tr("code_sp_inside_braces_oc_dict")!="code_sp_inside_braces_oc_dict":
            self.codesp_inside_braces_oc_dict = QtWidgets.QLabel(self.tr("code_sp_inside_braces_oc_dict"))
            self.codesp_inside_braces_oc_dict.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_braces_oc_dict, 322, 0, 1, 5)
        self.namesp_inside_braces_oc_dict = QtWidgets.QLabel("sp_inside_braces_oc_dict")
        self.namesp_inside_braces_oc_dict.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_braces_oc_dict, 323, 0)
        self.sp_inside_braces_oc_dict = QtWidgets.QComboBox()
        self.sp_inside_braces_oc_dict.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces_oc_dict.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces_oc_dict, 323, 1, 1, 4)
        self.labelsp_after_type_brace_init_lst_open = QtWidgets.QLabel(self.tr("Add or remove space after open brace in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n"))
        self.labelsp_after_type_brace_init_lst_open.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_type_brace_init_lst_open, 324, 0, 1, 5)
        if self.tr("code_sp_after_type_brace_init_lst_open")!="code_sp_after_type_brace_init_lst_open":
            self.codesp_after_type_brace_init_lst_open = QtWidgets.QLabel(self.tr("code_sp_after_type_brace_init_lst_open"))
            self.codesp_after_type_brace_init_lst_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_type_brace_init_lst_open, 325, 0, 1, 5)
        self.namesp_after_type_brace_init_lst_open = QtWidgets.QLabel("sp_after_type_brace_init_lst_open")
        self.namesp_after_type_brace_init_lst_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_type_brace_init_lst_open, 326, 0)
        self.sp_after_type_brace_init_lst_open = QtWidgets.QComboBox()
        self.sp_after_type_brace_init_lst_open.addItems(['ignore','add','remove','force'])
        self.sp_after_type_brace_init_lst_open.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_type_brace_init_lst_open, 326, 1, 1, 4)
        self.labelsp_before_type_brace_init_lst_close = QtWidgets.QLabel(self.tr("Add or remove space before close brace in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n"))
        self.labelsp_before_type_brace_init_lst_close.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_type_brace_init_lst_close, 327, 0, 1, 5)
        if self.tr("code_sp_before_type_brace_init_lst_close")!="code_sp_before_type_brace_init_lst_close":
            self.codesp_before_type_brace_init_lst_close = QtWidgets.QLabel(self.tr("code_sp_before_type_brace_init_lst_close"))
            self.codesp_before_type_brace_init_lst_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_type_brace_init_lst_close, 328, 0, 1, 5)
        self.namesp_before_type_brace_init_lst_close = QtWidgets.QLabel("sp_before_type_brace_init_lst_close")
        self.namesp_before_type_brace_init_lst_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_type_brace_init_lst_close, 329, 0)
        self.sp_before_type_brace_init_lst_close = QtWidgets.QComboBox()
        self.sp_before_type_brace_init_lst_close.addItems(['ignore','add','remove','force'])
        self.sp_before_type_brace_init_lst_close.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_type_brace_init_lst_close, 329, 1, 1, 4)
        self.labelsp_inside_type_brace_init_lst = QtWidgets.QLabel(self.tr("Add or remove space inside an unnamed temporary direct-list-initialization.")+' '+self.tr("\n"))
        self.labelsp_inside_type_brace_init_lst.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_type_brace_init_lst, 330, 0, 1, 5)
        if self.tr("code_sp_inside_type_brace_init_lst")!="code_sp_inside_type_brace_init_lst":
            self.codesp_inside_type_brace_init_lst = QtWidgets.QLabel(self.tr("code_sp_inside_type_brace_init_lst"))
            self.codesp_inside_type_brace_init_lst.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_type_brace_init_lst, 331, 0, 1, 5)
        self.namesp_inside_type_brace_init_lst = QtWidgets.QLabel("sp_inside_type_brace_init_lst")
        self.namesp_inside_type_brace_init_lst.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_type_brace_init_lst, 332, 0)
        self.sp_inside_type_brace_init_lst = QtWidgets.QComboBox()
        self.sp_inside_type_brace_init_lst.addItems(['ignore','add','remove','force'])
        self.sp_inside_type_brace_init_lst.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_type_brace_init_lst, 332, 1, 1, 4)
        self.labelsp_inside_braces = QtWidgets.QLabel(self.tr("Add or remove space inside '{' and '}'.")+' '+self.tr("\n"))
        self.labelsp_inside_braces.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_braces, 333, 0, 1, 5)
        if self.tr("code_sp_inside_braces")!="code_sp_inside_braces":
            self.codesp_inside_braces = QtWidgets.QLabel(self.tr("code_sp_inside_braces"))
            self.codesp_inside_braces.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_braces, 334, 0, 1, 5)
        self.namesp_inside_braces = QtWidgets.QLabel("sp_inside_braces")
        self.namesp_inside_braces.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_braces, 335, 0)
        self.sp_inside_braces = QtWidgets.QComboBox()
        self.sp_inside_braces.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces, 335, 1, 1, 4)
        self.labelsp_inside_braces_empty = QtWidgets.QLabel(self.tr("Add or remove space inside '{}'.")+' '+self.tr("\n"))
        self.labelsp_inside_braces_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_braces_empty, 336, 0, 1, 5)
        if self.tr("code_sp_inside_braces_empty")!="code_sp_inside_braces_empty":
            self.codesp_inside_braces_empty = QtWidgets.QLabel(self.tr("code_sp_inside_braces_empty"))
            self.codesp_inside_braces_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_braces_empty, 337, 0, 1, 5)
        self.namesp_inside_braces_empty = QtWidgets.QLabel("sp_inside_braces_empty")
        self.namesp_inside_braces_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_braces_empty, 338, 0)
        self.sp_inside_braces_empty = QtWidgets.QComboBox()
        self.sp_inside_braces_empty.addItems(['ignore','add','remove','force'])
        self.sp_inside_braces_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_braces_empty, 338, 1, 1, 4)
        self.labelsp_trailing_return = QtWidgets.QLabel(self.tr("Add or remove space around trailing return operator '->'.")+' '+self.tr("\n"))
        self.labelsp_trailing_return.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_trailing_return, 339, 0, 1, 5)
        if self.tr("code_sp_trailing_return")!="code_sp_trailing_return":
            self.codesp_trailing_return = QtWidgets.QLabel(self.tr("code_sp_trailing_return"))
            self.codesp_trailing_return.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_trailing_return, 340, 0, 1, 5)
        self.namesp_trailing_return = QtWidgets.QLabel("sp_trailing_return")
        self.namesp_trailing_return.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_trailing_return, 341, 0)
        self.sp_trailing_return = QtWidgets.QComboBox()
        self.sp_trailing_return.addItems(['ignore','add','remove','force'])
        self.sp_trailing_return.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_trailing_return, 341, 1, 1, 4)
        self.labelsp_type_func = QtWidgets.QLabel(self.tr("Add or remove space between return type and function name.")+' '+self.tr("A minimum of 1 is forced except for pointer return types.")+' '+self.tr("\n"))
        self.labelsp_type_func.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_type_func, 342, 0, 1, 5)
        if self.tr("code_sp_type_func")!="code_sp_type_func":
            self.codesp_type_func = QtWidgets.QLabel(self.tr("code_sp_type_func"))
            self.codesp_type_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_type_func, 343, 0, 1, 5)
        self.namesp_type_func = QtWidgets.QLabel("sp_type_func")
        self.namesp_type_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_type_func, 344, 0)
        self.sp_type_func = QtWidgets.QComboBox()
        self.sp_type_func.addItems(['ignore','add','remove','force'])
        self.sp_type_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_type_func, 344, 1, 1, 4)
        self.labelsp_type_brace_init_lst = QtWidgets.QLabel(self.tr("Add or remove space between type and open brace of an unnamed temporary direct-list-initialization.")+' '+self.tr("\n"))
        self.labelsp_type_brace_init_lst.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_type_brace_init_lst, 345, 0, 1, 5)
        if self.tr("code_sp_type_brace_init_lst")!="code_sp_type_brace_init_lst":
            self.codesp_type_brace_init_lst = QtWidgets.QLabel(self.tr("code_sp_type_brace_init_lst"))
            self.codesp_type_brace_init_lst.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_type_brace_init_lst, 346, 0, 1, 5)
        self.namesp_type_brace_init_lst = QtWidgets.QLabel("sp_type_brace_init_lst")
        self.namesp_type_brace_init_lst.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_type_brace_init_lst, 347, 0)
        self.sp_type_brace_init_lst = QtWidgets.QComboBox()
        self.sp_type_brace_init_lst.addItems(['ignore','add','remove','force'])
        self.sp_type_brace_init_lst.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_type_brace_init_lst, 347, 1, 1, 4)
        self.labelsp_func_proto_paren = QtWidgets.QLabel(self.tr("Add or remove space between function name and '(' on function declaration.")+' '+self.tr("\n"))
        self.labelsp_func_proto_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_proto_paren, 348, 0, 1, 5)
        if self.tr("code_sp_func_proto_paren")!="code_sp_func_proto_paren":
            self.codesp_func_proto_paren = QtWidgets.QLabel(self.tr("code_sp_func_proto_paren"))
            self.codesp_func_proto_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_proto_paren, 349, 0, 1, 5)
        self.namesp_func_proto_paren = QtWidgets.QLabel("sp_func_proto_paren")
        self.namesp_func_proto_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_proto_paren, 350, 0)
        self.sp_func_proto_paren = QtWidgets.QComboBox()
        self.sp_func_proto_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_proto_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_proto_paren, 350, 1, 1, 4)
        self.labelsp_func_proto_paren_empty = QtWidgets.QLabel(self.tr("Add or remove space between function name and '()' on function declaration without parameters.")+' '+self.tr("\n"))
        self.labelsp_func_proto_paren_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_proto_paren_empty, 351, 0, 1, 5)
        if self.tr("code_sp_func_proto_paren_empty")!="code_sp_func_proto_paren_empty":
            self.codesp_func_proto_paren_empty = QtWidgets.QLabel(self.tr("code_sp_func_proto_paren_empty"))
            self.codesp_func_proto_paren_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_proto_paren_empty, 352, 0, 1, 5)
        self.namesp_func_proto_paren_empty = QtWidgets.QLabel("sp_func_proto_paren_empty")
        self.namesp_func_proto_paren_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_proto_paren_empty, 353, 0)
        self.sp_func_proto_paren_empty = QtWidgets.QComboBox()
        self.sp_func_proto_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_func_proto_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_proto_paren_empty, 353, 1, 1, 4)
        self.labelsp_func_type_paren = QtWidgets.QLabel(self.tr("Add or remove space between function name and '(' with a typedef specifier.")+' '+self.tr("\n"))
        self.labelsp_func_type_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_type_paren, 354, 0, 1, 5)
        if self.tr("code_sp_func_type_paren")!="code_sp_func_type_paren":
            self.codesp_func_type_paren = QtWidgets.QLabel(self.tr("code_sp_func_type_paren"))
            self.codesp_func_type_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_type_paren, 355, 0, 1, 5)
        self.namesp_func_type_paren = QtWidgets.QLabel("sp_func_type_paren")
        self.namesp_func_type_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_type_paren, 356, 0)
        self.sp_func_type_paren = QtWidgets.QComboBox()
        self.sp_func_type_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_type_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_type_paren, 356, 1, 1, 4)
        self.labelsp_func_def_paren = QtWidgets.QLabel(self.tr("Add or remove space between alias name and '(' of a non-pointer function type typedef.")+' '+self.tr("\n"))
        self.labelsp_func_def_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_def_paren, 357, 0, 1, 5)
        if self.tr("code_sp_func_def_paren")!="code_sp_func_def_paren":
            self.codesp_func_def_paren = QtWidgets.QLabel(self.tr("code_sp_func_def_paren"))
            self.codesp_func_def_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_def_paren, 358, 0, 1, 5)
        self.namesp_func_def_paren = QtWidgets.QLabel("sp_func_def_paren")
        self.namesp_func_def_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_def_paren, 359, 0)
        self.sp_func_def_paren = QtWidgets.QComboBox()
        self.sp_func_def_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_def_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_def_paren, 359, 1, 1, 4)
        self.labelsp_func_def_paren_empty = QtWidgets.QLabel(self.tr("Add or remove space between function name and '()' on function definition without parameters.")+' '+self.tr("\n"))
        self.labelsp_func_def_paren_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_def_paren_empty, 360, 0, 1, 5)
        if self.tr("code_sp_func_def_paren_empty")!="code_sp_func_def_paren_empty":
            self.codesp_func_def_paren_empty = QtWidgets.QLabel(self.tr("code_sp_func_def_paren_empty"))
            self.codesp_func_def_paren_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_def_paren_empty, 361, 0, 1, 5)
        self.namesp_func_def_paren_empty = QtWidgets.QLabel("sp_func_def_paren_empty")
        self.namesp_func_def_paren_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_def_paren_empty, 362, 0)
        self.sp_func_def_paren_empty = QtWidgets.QComboBox()
        self.sp_func_def_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_func_def_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_def_paren_empty, 362, 1, 1, 4)
        self.labelsp_inside_fparens = QtWidgets.QLabel(self.tr("Add or remove space inside empty function '()'.")+' '+self.tr("Overrides sp_after_angle unless use_sp_after_angle_always is set to true.")+' '+self.tr("\n"))
        self.labelsp_inside_fparens.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_fparens, 363, 0, 1, 5)
        if self.tr("code_sp_inside_fparens")!="code_sp_inside_fparens":
            self.codesp_inside_fparens = QtWidgets.QLabel(self.tr("code_sp_inside_fparens"))
            self.codesp_inside_fparens.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_fparens, 364, 0, 1, 5)
        self.namesp_inside_fparens = QtWidgets.QLabel("sp_inside_fparens")
        self.namesp_inside_fparens.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_fparens, 365, 0)
        self.sp_inside_fparens = QtWidgets.QComboBox()
        self.sp_inside_fparens.addItems(['ignore','add','remove','force'])
        self.sp_inside_fparens.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_fparens, 365, 1, 1, 4)
        self.labelsp_inside_fparen = QtWidgets.QLabel(self.tr("Add or remove space inside function '(' and ')'.")+' '+self.tr("\n"))
        self.labelsp_inside_fparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_fparen, 366, 0, 1, 5)
        if self.tr("code_sp_inside_fparen")!="code_sp_inside_fparen":
            self.codesp_inside_fparen = QtWidgets.QLabel(self.tr("code_sp_inside_fparen"))
            self.codesp_inside_fparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_fparen, 367, 0, 1, 5)
        self.namesp_inside_fparen = QtWidgets.QLabel("sp_inside_fparen")
        self.namesp_inside_fparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_fparen, 368, 0)
        self.sp_inside_fparen = QtWidgets.QComboBox()
        self.sp_inside_fparen.addItems(['ignore','add','remove','force'])
        self.sp_inside_fparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_fparen, 368, 1, 1, 4)
        self.labelsp_inside_tparen = QtWidgets.QLabel(self.tr("Add or remove space inside the first parentheses in a function type, as in 'void (*x)(...)'.")+' '+self.tr("\n"))
        self.labelsp_inside_tparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_tparen, 369, 0, 1, 5)
        if self.tr("code_sp_inside_tparen")!="code_sp_inside_tparen":
            self.codesp_inside_tparen = QtWidgets.QLabel(self.tr("code_sp_inside_tparen"))
            self.codesp_inside_tparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_tparen, 370, 0, 1, 5)
        self.namesp_inside_tparen = QtWidgets.QLabel("sp_inside_tparen")
        self.namesp_inside_tparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_tparen, 371, 0)
        self.sp_inside_tparen = QtWidgets.QComboBox()
        self.sp_inside_tparen.addItems(['ignore','add','remove','force'])
        self.sp_inside_tparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_tparen, 371, 1, 1, 4)
        self.labelsp_after_tparen_close = QtWidgets.QLabel(self.tr("Add or remove space between the ')' and '(' in a function type, as in 'void (*x)(...)'.")+' '+self.tr("\n"))
        self.labelsp_after_tparen_close.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_tparen_close, 372, 0, 1, 5)
        if self.tr("code_sp_after_tparen_close")!="code_sp_after_tparen_close":
            self.codesp_after_tparen_close = QtWidgets.QLabel(self.tr("code_sp_after_tparen_close"))
            self.codesp_after_tparen_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_tparen_close, 373, 0, 1, 5)
        self.namesp_after_tparen_close = QtWidgets.QLabel("sp_after_tparen_close")
        self.namesp_after_tparen_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_tparen_close, 374, 0)
        self.sp_after_tparen_close = QtWidgets.QComboBox()
        self.sp_after_tparen_close.addItems(['ignore','add','remove','force'])
        self.sp_after_tparen_close.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_tparen_close, 374, 1, 1, 4)
        self.labelsp_square_fparen = QtWidgets.QLabel(self.tr("Add or remove space between ']' and '(' when part of a function call.")+' '+self.tr("\n"))
        self.labelsp_square_fparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_square_fparen, 375, 0, 1, 5)
        if self.tr("code_sp_square_fparen")!="code_sp_square_fparen":
            self.codesp_square_fparen = QtWidgets.QLabel(self.tr("code_sp_square_fparen"))
            self.codesp_square_fparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_square_fparen, 376, 0, 1, 5)
        self.namesp_square_fparen = QtWidgets.QLabel("sp_square_fparen")
        self.namesp_square_fparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_square_fparen, 377, 0)
        self.sp_square_fparen = QtWidgets.QComboBox()
        self.sp_square_fparen.addItems(['ignore','add','remove','force'])
        self.sp_square_fparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_square_fparen, 377, 1, 1, 4)
        self.labelsp_fparen_brace = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '{' of function.")+' '+self.tr("\n"))
        self.labelsp_fparen_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_fparen_brace, 378, 0, 1, 5)
        if self.tr("code_sp_fparen_brace")!="code_sp_fparen_brace":
            self.codesp_fparen_brace = QtWidgets.QLabel(self.tr("code_sp_fparen_brace"))
            self.codesp_fparen_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_fparen_brace, 379, 0, 1, 5)
        self.namesp_fparen_brace = QtWidgets.QLabel("sp_fparen_brace")
        self.namesp_fparen_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_fparen_brace, 380, 0)
        self.sp_fparen_brace = QtWidgets.QComboBox()
        self.sp_fparen_brace.addItems(['ignore','add','remove','force'])
        self.sp_fparen_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_fparen_brace, 380, 1, 1, 4)
        self.labelsp_fparen_brace_initializer = QtWidgets.QLabel(self.tr("Add or remove space between ')' and '{' of s function call in object initialization.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_fparen_brace.")+' '+self.tr("\n"))
        self.labelsp_fparen_brace_initializer.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_fparen_brace_initializer, 381, 0, 1, 5)
        if self.tr("code_sp_fparen_brace_initializer")!="code_sp_fparen_brace_initializer":
            self.codesp_fparen_brace_initializer = QtWidgets.QLabel(self.tr("code_sp_fparen_brace_initializer"))
            self.codesp_fparen_brace_initializer.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_fparen_brace_initializer, 382, 0, 1, 5)
        self.namesp_fparen_brace_initializer = QtWidgets.QLabel("sp_fparen_brace_initializer")
        self.namesp_fparen_brace_initializer.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_fparen_brace_initializer, 383, 0)
        self.sp_fparen_brace_initializer = QtWidgets.QComboBox()
        self.sp_fparen_brace_initializer.addItems(['ignore','add','remove','force'])
        self.sp_fparen_brace_initializer.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_fparen_brace_initializer, 383, 1, 1, 4)
        self.labelsp_fparen_dbrace = QtWidgets.QLabel(self.tr("(Java) Add or remove space between ')' and '{{' of double brace initializer.")+' '+self.tr("\n"))
        self.labelsp_fparen_dbrace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_fparen_dbrace, 384, 0, 1, 5)
        if self.tr("code_sp_fparen_dbrace")!="code_sp_fparen_dbrace":
            self.codesp_fparen_dbrace = QtWidgets.QLabel(self.tr("code_sp_fparen_dbrace"))
            self.codesp_fparen_dbrace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_fparen_dbrace, 385, 0, 1, 5)
        self.namesp_fparen_dbrace = QtWidgets.QLabel("sp_fparen_dbrace")
        self.namesp_fparen_dbrace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_fparen_dbrace, 386, 0)
        self.sp_fparen_dbrace = QtWidgets.QComboBox()
        self.sp_fparen_dbrace.addItems(['ignore','add','remove','force'])
        self.sp_fparen_dbrace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_fparen_dbrace, 386, 1, 1, 4)
        self.labelsp_func_call_paren = QtWidgets.QLabel(self.tr("Add or remove space between function name and '(' on function calls.")+' '+self.tr("\n"))
        self.labelsp_func_call_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_call_paren, 387, 0, 1, 5)
        if self.tr("code_sp_func_call_paren")!="code_sp_func_call_paren":
            self.codesp_func_call_paren = QtWidgets.QLabel(self.tr("code_sp_func_call_paren"))
            self.codesp_func_call_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_call_paren, 388, 0, 1, 5)
        self.namesp_func_call_paren = QtWidgets.QLabel("sp_func_call_paren")
        self.namesp_func_call_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_call_paren, 389, 0)
        self.sp_func_call_paren = QtWidgets.QComboBox()
        self.sp_func_call_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_call_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_paren, 389, 1, 1, 4)
        self.labelsp_func_call_paren_empty = QtWidgets.QLabel(self.tr("Add or remove space between function name and '()' on function calls without parameters.")+' '+self.tr("If set to ignore (the default), sp_func_call_paren is used.")+' '+self.tr("\n"))
        self.labelsp_func_call_paren_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_call_paren_empty, 390, 0, 1, 5)
        if self.tr("code_sp_func_call_paren_empty")!="code_sp_func_call_paren_empty":
            self.codesp_func_call_paren_empty = QtWidgets.QLabel(self.tr("code_sp_func_call_paren_empty"))
            self.codesp_func_call_paren_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_call_paren_empty, 391, 0, 1, 5)
        self.namesp_func_call_paren_empty = QtWidgets.QLabel("sp_func_call_paren_empty")
        self.namesp_func_call_paren_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_call_paren_empty, 392, 0)
        self.sp_func_call_paren_empty = QtWidgets.QComboBox()
        self.sp_func_call_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_func_call_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_paren_empty, 392, 1, 1, 4)
        self.labelsp_func_call_user_paren = QtWidgets.QLabel(self.tr("Add or remove space between the user function name and '(' on function calls.")+' '+self.tr("You need to set a keyword to be a user function in the config file, like:   set func_call_user tr _ i18n")+' '+self.tr("\n"))
        self.labelsp_func_call_user_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_call_user_paren, 393, 0, 1, 5)
        if self.tr("code_sp_func_call_user_paren")!="code_sp_func_call_user_paren":
            self.codesp_func_call_user_paren = QtWidgets.QLabel(self.tr("code_sp_func_call_user_paren"))
            self.codesp_func_call_user_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_call_user_paren, 394, 0, 1, 5)
        self.namesp_func_call_user_paren = QtWidgets.QLabel("sp_func_call_user_paren")
        self.namesp_func_call_user_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_call_user_paren, 395, 0)
        self.sp_func_call_user_paren = QtWidgets.QComboBox()
        self.sp_func_call_user_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_call_user_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_user_paren, 395, 1, 1, 4)
        self.labelsp_func_call_user_inside_fparen = QtWidgets.QLabel(self.tr("Add or remove space inside user function '(' and ')'.")+' '+self.tr("\n"))
        self.labelsp_func_call_user_inside_fparen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_call_user_inside_fparen, 396, 0, 1, 5)
        if self.tr("code_sp_func_call_user_inside_fparen")!="code_sp_func_call_user_inside_fparen":
            self.codesp_func_call_user_inside_fparen = QtWidgets.QLabel(self.tr("code_sp_func_call_user_inside_fparen"))
            self.codesp_func_call_user_inside_fparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_call_user_inside_fparen, 397, 0, 1, 5)
        self.namesp_func_call_user_inside_fparen = QtWidgets.QLabel("sp_func_call_user_inside_fparen")
        self.namesp_func_call_user_inside_fparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_call_user_inside_fparen, 398, 0)
        self.sp_func_call_user_inside_fparen = QtWidgets.QComboBox()
        self.sp_func_call_user_inside_fparen.addItems(['ignore','add','remove','force'])
        self.sp_func_call_user_inside_fparen.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_user_inside_fparen, 398, 1, 1, 4)
        self.labelsp_func_call_user_paren_paren = QtWidgets.QLabel(self.tr("Add or remove space between nested parentheses with user functions, i.e. '((' vs. '( ('.")+' '+self.tr("\n"))
        self.labelsp_func_call_user_paren_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_call_user_paren_paren, 399, 0, 1, 5)
        if self.tr("code_sp_func_call_user_paren_paren")!="code_sp_func_call_user_paren_paren":
            self.codesp_func_call_user_paren_paren = QtWidgets.QLabel(self.tr("code_sp_func_call_user_paren_paren"))
            self.codesp_func_call_user_paren_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_call_user_paren_paren, 400, 0, 1, 5)
        self.namesp_func_call_user_paren_paren = QtWidgets.QLabel("sp_func_call_user_paren_paren")
        self.namesp_func_call_user_paren_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_call_user_paren_paren, 401, 0)
        self.sp_func_call_user_paren_paren = QtWidgets.QComboBox()
        self.sp_func_call_user_paren_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_call_user_paren_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_call_user_paren_paren, 401, 1, 1, 4)
        self.labelsp_func_class_paren = QtWidgets.QLabel(self.tr("Add or remove space between a constructor/destructor and the open parenthesis.")+' '+self.tr("\n"))
        self.labelsp_func_class_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_class_paren, 402, 0, 1, 5)
        if self.tr("code_sp_func_class_paren")!="code_sp_func_class_paren":
            self.codesp_func_class_paren = QtWidgets.QLabel(self.tr("code_sp_func_class_paren"))
            self.codesp_func_class_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_class_paren, 403, 0, 1, 5)
        self.namesp_func_class_paren = QtWidgets.QLabel("sp_func_class_paren")
        self.namesp_func_class_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_class_paren, 404, 0)
        self.sp_func_class_paren = QtWidgets.QComboBox()
        self.sp_func_class_paren.addItems(['ignore','add','remove','force'])
        self.sp_func_class_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_class_paren, 404, 1, 1, 4)
        self.labelsp_func_class_paren_empty = QtWidgets.QLabel(self.tr("Add or remove space between a constructor without parameters or destructor and '()'.")+' '+self.tr("\n"))
        self.labelsp_func_class_paren_empty.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_func_class_paren_empty, 405, 0, 1, 5)
        if self.tr("code_sp_func_class_paren_empty")!="code_sp_func_class_paren_empty":
            self.codesp_func_class_paren_empty = QtWidgets.QLabel(self.tr("code_sp_func_class_paren_empty"))
            self.codesp_func_class_paren_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_func_class_paren_empty, 406, 0, 1, 5)
        self.namesp_func_class_paren_empty = QtWidgets.QLabel("sp_func_class_paren_empty")
        self.namesp_func_class_paren_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_func_class_paren_empty, 407, 0)
        self.sp_func_class_paren_empty = QtWidgets.QComboBox()
        self.sp_func_class_paren_empty.addItems(['ignore','add','remove','force'])
        self.sp_func_class_paren_empty.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_func_class_paren_empty, 407, 1, 1, 4)
        self.labelsp_return_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'return' and '('.")+' '+self.tr("\n"))
        self.labelsp_return_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_return_paren, 408, 0, 1, 5)
        if self.tr("code_sp_return_paren")!="code_sp_return_paren":
            self.codesp_return_paren = QtWidgets.QLabel(self.tr("code_sp_return_paren"))
            self.codesp_return_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_return_paren, 409, 0, 1, 5)
        self.namesp_return_paren = QtWidgets.QLabel("sp_return_paren")
        self.namesp_return_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_return_paren, 410, 0)
        self.sp_return_paren = QtWidgets.QComboBox()
        self.sp_return_paren.addItems(['ignore','add','remove','force'])
        self.sp_return_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_return_paren, 410, 1, 1, 4)
        self.labelsp_return_brace = QtWidgets.QLabel(self.tr("Add or remove space between 'return' and '{'.")+' '+self.tr("\n"))
        self.labelsp_return_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_return_brace, 411, 0, 1, 5)
        if self.tr("code_sp_return_brace")!="code_sp_return_brace":
            self.codesp_return_brace = QtWidgets.QLabel(self.tr("code_sp_return_brace"))
            self.codesp_return_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_return_brace, 412, 0, 1, 5)
        self.namesp_return_brace = QtWidgets.QLabel("sp_return_brace")
        self.namesp_return_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_return_brace, 413, 0)
        self.sp_return_brace = QtWidgets.QComboBox()
        self.sp_return_brace.addItems(['ignore','add','remove','force'])
        self.sp_return_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_return_brace, 413, 1, 1, 4)
        self.labelsp_attribute_paren = QtWidgets.QLabel(self.tr("Add or remove space between '__attribute__' and '('.")+' '+self.tr("\n"))
        self.labelsp_attribute_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_attribute_paren, 414, 0, 1, 5)
        if self.tr("code_sp_attribute_paren")!="code_sp_attribute_paren":
            self.codesp_attribute_paren = QtWidgets.QLabel(self.tr("code_sp_attribute_paren"))
            self.codesp_attribute_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_attribute_paren, 415, 0, 1, 5)
        self.namesp_attribute_paren = QtWidgets.QLabel("sp_attribute_paren")
        self.namesp_attribute_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_attribute_paren, 416, 0)
        self.sp_attribute_paren = QtWidgets.QComboBox()
        self.sp_attribute_paren.addItems(['ignore','add','remove','force'])
        self.sp_attribute_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_attribute_paren, 416, 1, 1, 4)
        self.labelsp_defined_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'defined' and '(' in '#if defined (FOO)'.")+' '+self.tr("\n"))
        self.labelsp_defined_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_defined_paren, 417, 0, 1, 5)
        if self.tr("code_sp_defined_paren")!="code_sp_defined_paren":
            self.codesp_defined_paren = QtWidgets.QLabel(self.tr("code_sp_defined_paren"))
            self.codesp_defined_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_defined_paren, 418, 0, 1, 5)
        self.namesp_defined_paren = QtWidgets.QLabel("sp_defined_paren")
        self.namesp_defined_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_defined_paren, 419, 0)
        self.sp_defined_paren = QtWidgets.QComboBox()
        self.sp_defined_paren.addItems(['ignore','add','remove','force'])
        self.sp_defined_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_defined_paren, 419, 1, 1, 4)
        self.labelsp_throw_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'throw' and '(' in 'throw (something)'.")+' '+self.tr("\n"))
        self.labelsp_throw_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_throw_paren, 420, 0, 1, 5)
        if self.tr("code_sp_throw_paren")!="code_sp_throw_paren":
            self.codesp_throw_paren = QtWidgets.QLabel(self.tr("code_sp_throw_paren"))
            self.codesp_throw_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_throw_paren, 421, 0, 1, 5)
        self.namesp_throw_paren = QtWidgets.QLabel("sp_throw_paren")
        self.namesp_throw_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_throw_paren, 422, 0)
        self.sp_throw_paren = QtWidgets.QComboBox()
        self.sp_throw_paren.addItems(['ignore','add','remove','force'])
        self.sp_throw_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_throw_paren, 422, 1, 1, 4)
        self.labelsp_after_throw = QtWidgets.QLabel(self.tr("Add or remove space between 'throw' and anything other than '(' as in '@throw [...];'.")+' '+self.tr("\n"))
        self.labelsp_after_throw.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_throw, 423, 0, 1, 5)
        if self.tr("code_sp_after_throw")!="code_sp_after_throw":
            self.codesp_after_throw = QtWidgets.QLabel(self.tr("code_sp_after_throw"))
            self.codesp_after_throw.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_throw, 424, 0, 1, 5)
        self.namesp_after_throw = QtWidgets.QLabel("sp_after_throw")
        self.namesp_after_throw.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_throw, 425, 0)
        self.sp_after_throw = QtWidgets.QComboBox()
        self.sp_after_throw.addItems(['ignore','add','remove','force'])
        self.sp_after_throw.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_throw, 425, 1, 1, 4)
        self.labelsp_catch_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'catch' and '(' in 'catch (something) { }'.")+' '+self.tr("If set to ignore, sp_before_sparen is used.")+' '+self.tr("\n"))
        self.labelsp_catch_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_catch_paren, 426, 0, 1, 5)
        if self.tr("code_sp_catch_paren")!="code_sp_catch_paren":
            self.codesp_catch_paren = QtWidgets.QLabel(self.tr("code_sp_catch_paren"))
            self.codesp_catch_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_catch_paren, 427, 0, 1, 5)
        self.namesp_catch_paren = QtWidgets.QLabel("sp_catch_paren")
        self.namesp_catch_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_catch_paren, 428, 0)
        self.sp_catch_paren = QtWidgets.QComboBox()
        self.sp_catch_paren.addItems(['ignore','add','remove','force'])
        self.sp_catch_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_catch_paren, 428, 1, 1, 4)
        self.labelsp_oc_catch_paren = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '@catch' and '(' in '@catch (something) { }'.")+' '+self.tr("If set to ignore, sp_catch_paren is used.")+' '+self.tr("\n"))
        self.labelsp_oc_catch_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_oc_catch_paren, 429, 0, 1, 5)
        if self.tr("code_sp_oc_catch_paren")!="code_sp_oc_catch_paren":
            self.codesp_oc_catch_paren = QtWidgets.QLabel(self.tr("code_sp_oc_catch_paren"))
            self.codesp_oc_catch_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_oc_catch_paren, 430, 0, 1, 5)
        self.namesp_oc_catch_paren = QtWidgets.QLabel("sp_oc_catch_paren")
        self.namesp_oc_catch_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_oc_catch_paren, 431, 0)
        self.sp_oc_catch_paren = QtWidgets.QComboBox()
        self.sp_oc_catch_paren.addItems(['ignore','add','remove','force'])
        self.sp_oc_catch_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_oc_catch_paren, 431, 1, 1, 4)
        self.labelsp_before_oc_proto_list = QtWidgets.QLabel(self.tr("(OC) Add or remove space before Objective-C protocol list as in '@protocol Protocol<here><Protocol_A>' or '@interface MyClass : NSObject<here><MyProtocol>'.")+' '+self.tr("\n"))
        self.labelsp_before_oc_proto_list.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_oc_proto_list, 432, 0, 1, 5)
        if self.tr("code_sp_before_oc_proto_list")!="code_sp_before_oc_proto_list":
            self.codesp_before_oc_proto_list = QtWidgets.QLabel(self.tr("code_sp_before_oc_proto_list"))
            self.codesp_before_oc_proto_list.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_oc_proto_list, 433, 0, 1, 5)
        self.namesp_before_oc_proto_list = QtWidgets.QLabel("sp_before_oc_proto_list")
        self.namesp_before_oc_proto_list.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_oc_proto_list, 434, 0)
        self.sp_before_oc_proto_list = QtWidgets.QComboBox()
        self.sp_before_oc_proto_list.addItems(['ignore','add','remove','force'])
        self.sp_before_oc_proto_list.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_oc_proto_list, 434, 1, 1, 4)
        self.labelsp_oc_classname_paren = QtWidgets.QLabel(self.tr("(OC) Add or remove space between class name and '(' in '@interface className(categoryName)<ProtocolName>:BaseClass'")+' '+self.tr("\n"))
        self.labelsp_oc_classname_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_oc_classname_paren, 435, 0, 1, 5)
        if self.tr("code_sp_oc_classname_paren")!="code_sp_oc_classname_paren":
            self.codesp_oc_classname_paren = QtWidgets.QLabel(self.tr("code_sp_oc_classname_paren"))
            self.codesp_oc_classname_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_oc_classname_paren, 436, 0, 1, 5)
        self.namesp_oc_classname_paren = QtWidgets.QLabel("sp_oc_classname_paren")
        self.namesp_oc_classname_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_oc_classname_paren, 437, 0)
        self.sp_oc_classname_paren = QtWidgets.QComboBox()
        self.sp_oc_classname_paren.addItems(['ignore','add','remove','force'])
        self.sp_oc_classname_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_oc_classname_paren, 437, 1, 1, 4)
        self.labelsp_version_paren = QtWidgets.QLabel(self.tr("(D) Add or remove space between 'version' and '(' in 'version (something) { }'.")+' '+self.tr("If set to ignore, sp_before_sparen is used.")+' '+self.tr("\n"))
        self.labelsp_version_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_version_paren, 438, 0, 1, 5)
        if self.tr("code_sp_version_paren")!="code_sp_version_paren":
            self.codesp_version_paren = QtWidgets.QLabel(self.tr("code_sp_version_paren"))
            self.codesp_version_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_version_paren, 439, 0, 1, 5)
        self.namesp_version_paren = QtWidgets.QLabel("sp_version_paren")
        self.namesp_version_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_version_paren, 440, 0)
        self.sp_version_paren = QtWidgets.QComboBox()
        self.sp_version_paren.addItems(['ignore','add','remove','force'])
        self.sp_version_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_version_paren, 440, 1, 1, 4)
        self.labelsp_scope_paren = QtWidgets.QLabel(self.tr("(D) Add or remove space between 'scope' and '(' in 'scope (something) { }'.")+' '+self.tr("If set to ignore, sp_before_sparen is used.")+' '+self.tr("\n"))
        self.labelsp_scope_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_scope_paren, 441, 0, 1, 5)
        if self.tr("code_sp_scope_paren")!="code_sp_scope_paren":
            self.codesp_scope_paren = QtWidgets.QLabel(self.tr("code_sp_scope_paren"))
            self.codesp_scope_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_scope_paren, 442, 0, 1, 5)
        self.namesp_scope_paren = QtWidgets.QLabel("sp_scope_paren")
        self.namesp_scope_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_scope_paren, 443, 0)
        self.sp_scope_paren = QtWidgets.QComboBox()
        self.sp_scope_paren.addItems(['ignore','add','remove','force'])
        self.sp_scope_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_scope_paren, 443, 1, 1, 4)
        self.labelsp_super_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'super' and '(' in 'super (something)'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_super_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_super_paren, 444, 0, 1, 5)
        if self.tr("code_sp_super_paren")!="code_sp_super_paren":
            self.codesp_super_paren = QtWidgets.QLabel(self.tr("code_sp_super_paren"))
            self.codesp_super_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_super_paren, 445, 0, 1, 5)
        self.namesp_super_paren = QtWidgets.QLabel("sp_super_paren")
        self.namesp_super_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_super_paren, 446, 0)
        self.sp_super_paren = QtWidgets.QComboBox()
        self.sp_super_paren.addItems(['ignore','add','remove','force'])
        self.sp_super_paren.setCurrentText('remove')
        self.lt2.addWidget(self.sp_super_paren, 446, 1, 1, 4)
        self.labelsp_this_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'this' and '(' in 'this (something)'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_this_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_this_paren, 447, 0, 1, 5)
        if self.tr("code_sp_this_paren")!="code_sp_this_paren":
            self.codesp_this_paren = QtWidgets.QLabel(self.tr("code_sp_this_paren"))
            self.codesp_this_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_this_paren, 448, 0, 1, 5)
        self.namesp_this_paren = QtWidgets.QLabel("sp_this_paren")
        self.namesp_this_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_this_paren, 449, 0)
        self.sp_this_paren = QtWidgets.QComboBox()
        self.sp_this_paren.addItems(['ignore','add','remove','force'])
        self.sp_this_paren.setCurrentText('remove')
        self.lt2.addWidget(self.sp_this_paren, 449, 1, 1, 4)
        self.labelsp_macro = QtWidgets.QLabel(self.tr("Add or remove space between a macro name and its definition.")+' '+self.tr("\n"))
        self.labelsp_macro.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_macro, 450, 0, 1, 5)
        if self.tr("code_sp_macro")!="code_sp_macro":
            self.codesp_macro = QtWidgets.QLabel(self.tr("code_sp_macro"))
            self.codesp_macro.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_macro, 451, 0, 1, 5)
        self.namesp_macro = QtWidgets.QLabel("sp_macro")
        self.namesp_macro.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_macro, 452, 0)
        self.sp_macro = QtWidgets.QComboBox()
        self.sp_macro.addItems(['ignore','add','remove','force'])
        self.sp_macro.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_macro, 452, 1, 1, 4)
        self.labelsp_macro_func = QtWidgets.QLabel(self.tr("Add or remove space between a macro function ')' and its definition.")+' '+self.tr("\n"))
        self.labelsp_macro_func.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_macro_func, 453, 0, 1, 5)
        if self.tr("code_sp_macro_func")!="code_sp_macro_func":
            self.codesp_macro_func = QtWidgets.QLabel(self.tr("code_sp_macro_func"))
            self.codesp_macro_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_macro_func, 454, 0, 1, 5)
        self.namesp_macro_func = QtWidgets.QLabel("sp_macro_func")
        self.namesp_macro_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_macro_func, 455, 0)
        self.sp_macro_func = QtWidgets.QComboBox()
        self.sp_macro_func.addItems(['ignore','add','remove','force'])
        self.sp_macro_func.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_macro_func, 455, 1, 1, 4)
        self.labelsp_else_brace = QtWidgets.QLabel(self.tr("Add or remove space between 'else' and '{' if on the same line.")+' '+self.tr("\n"))
        self.labelsp_else_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_else_brace, 456, 0, 1, 5)
        if self.tr("code_sp_else_brace")!="code_sp_else_brace":
            self.codesp_else_brace = QtWidgets.QLabel(self.tr("code_sp_else_brace"))
            self.codesp_else_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_else_brace, 457, 0, 1, 5)
        self.namesp_else_brace = QtWidgets.QLabel("sp_else_brace")
        self.namesp_else_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_else_brace, 458, 0)
        self.sp_else_brace = QtWidgets.QComboBox()
        self.sp_else_brace.addItems(['ignore','add','remove','force'])
        self.sp_else_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_else_brace, 458, 1, 1, 4)
        self.labelsp_brace_else = QtWidgets.QLabel(self.tr("Add or remove space between '}' and 'else' if on the same line.")+' '+self.tr("\n"))
        self.labelsp_brace_else.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_brace_else, 459, 0, 1, 5)
        if self.tr("code_sp_brace_else")!="code_sp_brace_else":
            self.codesp_brace_else = QtWidgets.QLabel(self.tr("code_sp_brace_else"))
            self.codesp_brace_else.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_brace_else, 460, 0, 1, 5)
        self.namesp_brace_else = QtWidgets.QLabel("sp_brace_else")
        self.namesp_brace_else.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_brace_else, 461, 0)
        self.sp_brace_else = QtWidgets.QComboBox()
        self.sp_brace_else.addItems(['ignore','add','remove','force'])
        self.sp_brace_else.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_else, 461, 1, 1, 4)
        self.labelsp_brace_typedef = QtWidgets.QLabel(self.tr("Add or remove space between '}' and the name of a typedef on the same line.")+' '+self.tr("\n"))
        self.labelsp_brace_typedef.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_brace_typedef, 462, 0, 1, 5)
        if self.tr("code_sp_brace_typedef")!="code_sp_brace_typedef":
            self.codesp_brace_typedef = QtWidgets.QLabel(self.tr("code_sp_brace_typedef"))
            self.codesp_brace_typedef.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_brace_typedef, 463, 0, 1, 5)
        self.namesp_brace_typedef = QtWidgets.QLabel("sp_brace_typedef")
        self.namesp_brace_typedef.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_brace_typedef, 464, 0)
        self.sp_brace_typedef = QtWidgets.QComboBox()
        self.sp_brace_typedef.addItems(['ignore','add','remove','force'])
        self.sp_brace_typedef.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_typedef, 464, 1, 1, 4)
        self.labelsp_catch_brace = QtWidgets.QLabel(self.tr("Add or remove space before the '{' of a 'catch' statement, if the '{' and 'catch' are on the same line, as in 'catch (decl) <here> {'.")+' '+self.tr("\n"))
        self.labelsp_catch_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_catch_brace, 465, 0, 1, 5)
        if self.tr("code_sp_catch_brace")!="code_sp_catch_brace":
            self.codesp_catch_brace = QtWidgets.QLabel(self.tr("code_sp_catch_brace"))
            self.codesp_catch_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_catch_brace, 466, 0, 1, 5)
        self.namesp_catch_brace = QtWidgets.QLabel("sp_catch_brace")
        self.namesp_catch_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_catch_brace, 467, 0)
        self.sp_catch_brace = QtWidgets.QComboBox()
        self.sp_catch_brace.addItems(['ignore','add','remove','force'])
        self.sp_catch_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_catch_brace, 467, 1, 1, 4)
        self.labelsp_oc_catch_brace = QtWidgets.QLabel(self.tr("(OC) Add or remove space before the '{' of a '@catch' statement, if the '{' and '@catch' are on the same line, as in '@catch (decl) <here> {'.")+' '+self.tr("If set to ignore, sp_catch_brace is used.")+' '+self.tr("\n"))
        self.labelsp_oc_catch_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_oc_catch_brace, 468, 0, 1, 5)
        if self.tr("code_sp_oc_catch_brace")!="code_sp_oc_catch_brace":
            self.codesp_oc_catch_brace = QtWidgets.QLabel(self.tr("code_sp_oc_catch_brace"))
            self.codesp_oc_catch_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_oc_catch_brace, 469, 0, 1, 5)
        self.namesp_oc_catch_brace = QtWidgets.QLabel("sp_oc_catch_brace")
        self.namesp_oc_catch_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_oc_catch_brace, 470, 0)
        self.sp_oc_catch_brace = QtWidgets.QComboBox()
        self.sp_oc_catch_brace.addItems(['ignore','add','remove','force'])
        self.sp_oc_catch_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_oc_catch_brace, 470, 1, 1, 4)
        self.labelsp_brace_catch = QtWidgets.QLabel(self.tr("Add or remove space between '}' and 'catch' if on the same line.")+' '+self.tr("\n"))
        self.labelsp_brace_catch.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_brace_catch, 471, 0, 1, 5)
        if self.tr("code_sp_brace_catch")!="code_sp_brace_catch":
            self.codesp_brace_catch = QtWidgets.QLabel(self.tr("code_sp_brace_catch"))
            self.codesp_brace_catch.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_brace_catch, 472, 0, 1, 5)
        self.namesp_brace_catch = QtWidgets.QLabel("sp_brace_catch")
        self.namesp_brace_catch.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_brace_catch, 473, 0)
        self.sp_brace_catch = QtWidgets.QComboBox()
        self.sp_brace_catch.addItems(['ignore','add','remove','force'])
        self.sp_brace_catch.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_catch, 473, 1, 1, 4)
        self.labelsp_oc_brace_catch = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '}' and '@catch' if on the same line.")+' '+self.tr("If set to ignore, sp_brace_catch is used.")+' '+self.tr("\n"))
        self.labelsp_oc_brace_catch.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_oc_brace_catch, 474, 0, 1, 5)
        if self.tr("code_sp_oc_brace_catch")!="code_sp_oc_brace_catch":
            self.codesp_oc_brace_catch = QtWidgets.QLabel(self.tr("code_sp_oc_brace_catch"))
            self.codesp_oc_brace_catch.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_oc_brace_catch, 475, 0, 1, 5)
        self.namesp_oc_brace_catch = QtWidgets.QLabel("sp_oc_brace_catch")
        self.namesp_oc_brace_catch.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_oc_brace_catch, 476, 0)
        self.sp_oc_brace_catch = QtWidgets.QComboBox()
        self.sp_oc_brace_catch.addItems(['ignore','add','remove','force'])
        self.sp_oc_brace_catch.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_oc_brace_catch, 476, 1, 1, 4)
        self.labelsp_finally_brace = QtWidgets.QLabel(self.tr("Add or remove space between 'finally' and '{' if on the same line.")+' '+self.tr("\n"))
        self.labelsp_finally_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_finally_brace, 477, 0, 1, 5)
        if self.tr("code_sp_finally_brace")!="code_sp_finally_brace":
            self.codesp_finally_brace = QtWidgets.QLabel(self.tr("code_sp_finally_brace"))
            self.codesp_finally_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_finally_brace, 478, 0, 1, 5)
        self.namesp_finally_brace = QtWidgets.QLabel("sp_finally_brace")
        self.namesp_finally_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_finally_brace, 479, 0)
        self.sp_finally_brace = QtWidgets.QComboBox()
        self.sp_finally_brace.addItems(['ignore','add','remove','force'])
        self.sp_finally_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_finally_brace, 479, 1, 1, 4)
        self.labelsp_brace_finally = QtWidgets.QLabel(self.tr("Add or remove space between '}' and 'finally' if on the same line.")+' '+self.tr("\n"))
        self.labelsp_brace_finally.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_brace_finally, 480, 0, 1, 5)
        if self.tr("code_sp_brace_finally")!="code_sp_brace_finally":
            self.codesp_brace_finally = QtWidgets.QLabel(self.tr("code_sp_brace_finally"))
            self.codesp_brace_finally.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_brace_finally, 481, 0, 1, 5)
        self.namesp_brace_finally = QtWidgets.QLabel("sp_brace_finally")
        self.namesp_brace_finally.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_brace_finally, 482, 0)
        self.sp_brace_finally = QtWidgets.QComboBox()
        self.sp_brace_finally.addItems(['ignore','add','remove','force'])
        self.sp_brace_finally.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_brace_finally, 482, 1, 1, 4)
        self.labelsp_try_brace = QtWidgets.QLabel(self.tr("Add or remove space between 'try' and '{' if on the same line.")+' '+self.tr("\n"))
        self.labelsp_try_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_try_brace, 483, 0, 1, 5)
        if self.tr("code_sp_try_brace")!="code_sp_try_brace":
            self.codesp_try_brace = QtWidgets.QLabel(self.tr("code_sp_try_brace"))
            self.codesp_try_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_try_brace, 484, 0, 1, 5)
        self.namesp_try_brace = QtWidgets.QLabel("sp_try_brace")
        self.namesp_try_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_try_brace, 485, 0)
        self.sp_try_brace = QtWidgets.QComboBox()
        self.sp_try_brace.addItems(['ignore','add','remove','force'])
        self.sp_try_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_try_brace, 485, 1, 1, 4)
        self.labelsp_getset_brace = QtWidgets.QLabel(self.tr("Add or remove space between get/set and '{' if on the same line.")+' '+self.tr("\n"))
        self.labelsp_getset_brace.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_getset_brace, 486, 0, 1, 5)
        if self.tr("code_sp_getset_brace")!="code_sp_getset_brace":
            self.codesp_getset_brace = QtWidgets.QLabel(self.tr("code_sp_getset_brace"))
            self.codesp_getset_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_getset_brace, 487, 0, 1, 5)
        self.namesp_getset_brace = QtWidgets.QLabel("sp_getset_brace")
        self.namesp_getset_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_getset_brace, 488, 0)
        self.sp_getset_brace = QtWidgets.QComboBox()
        self.sp_getset_brace.addItems(['ignore','add','remove','force'])
        self.sp_getset_brace.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_getset_brace, 488, 1, 1, 4)
        self.labelsp_word_brace_init_lst = QtWidgets.QLabel(self.tr("Add or remove space between a variable and '{' for C++ uniform initialization.")+' '+self.tr("\n"))
        self.labelsp_word_brace_init_lst.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_word_brace_init_lst, 489, 0, 1, 5)
        if self.tr("code_sp_word_brace_init_lst")!="code_sp_word_brace_init_lst":
            self.codesp_word_brace_init_lst = QtWidgets.QLabel(self.tr("code_sp_word_brace_init_lst"))
            self.codesp_word_brace_init_lst.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_word_brace_init_lst, 490, 0, 1, 5)
        self.namesp_word_brace_init_lst = QtWidgets.QLabel("sp_word_brace_init_lst")
        self.namesp_word_brace_init_lst.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_word_brace_init_lst, 491, 0)
        self.sp_word_brace_init_lst = QtWidgets.QComboBox()
        self.sp_word_brace_init_lst.addItems(['ignore','add','remove','force'])
        self.sp_word_brace_init_lst.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_word_brace_init_lst, 491, 1, 1, 4)
        self.labelsp_word_brace_ns = QtWidgets.QLabel(self.tr("Add or remove space between a variable and '{' for a namespace.")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n"))
        self.labelsp_word_brace_ns.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_word_brace_ns, 492, 0, 1, 5)
        if self.tr("code_sp_word_brace_ns")!="code_sp_word_brace_ns":
            self.codesp_word_brace_ns = QtWidgets.QLabel(self.tr("code_sp_word_brace_ns"))
            self.codesp_word_brace_ns.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_word_brace_ns, 493, 0, 1, 5)
        self.namesp_word_brace_ns = QtWidgets.QLabel("sp_word_brace_ns")
        self.namesp_word_brace_ns.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_word_brace_ns, 494, 0)
        self.sp_word_brace_ns = QtWidgets.QComboBox()
        self.sp_word_brace_ns.addItems(['ignore','add','remove','force'])
        self.sp_word_brace_ns.setCurrentText('add')
        self.lt2.addWidget(self.sp_word_brace_ns, 494, 1, 1, 4)
        self.labelsp_before_dc = QtWidgets.QLabel(self.tr("Add or remove space before the '::' operator.")+' '+self.tr("\n"))
        self.labelsp_before_dc.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_dc, 495, 0, 1, 5)
        if self.tr("code_sp_before_dc")!="code_sp_before_dc":
            self.codesp_before_dc = QtWidgets.QLabel(self.tr("code_sp_before_dc"))
            self.codesp_before_dc.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_dc, 496, 0, 1, 5)
        self.namesp_before_dc = QtWidgets.QLabel("sp_before_dc")
        self.namesp_before_dc.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_dc, 497, 0)
        self.sp_before_dc = QtWidgets.QComboBox()
        self.sp_before_dc.addItems(['ignore','add','remove','force'])
        self.sp_before_dc.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_dc, 497, 1, 1, 4)
        self.labelsp_after_dc = QtWidgets.QLabel(self.tr("Add or remove space after the '::' operator.")+' '+self.tr("\n"))
        self.labelsp_after_dc.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_dc, 498, 0, 1, 5)
        if self.tr("code_sp_after_dc")!="code_sp_after_dc":
            self.codesp_after_dc = QtWidgets.QLabel(self.tr("code_sp_after_dc"))
            self.codesp_after_dc.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_dc, 499, 0, 1, 5)
        self.namesp_after_dc = QtWidgets.QLabel("sp_after_dc")
        self.namesp_after_dc.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_dc, 500, 0)
        self.sp_after_dc = QtWidgets.QComboBox()
        self.sp_after_dc.addItems(['ignore','add','remove','force'])
        self.sp_after_dc.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_dc, 500, 1, 1, 4)
        self.labelsp_d_array_colon = QtWidgets.QLabel(self.tr("(D) Add or remove around the D named array initializer ':' operator.")+' '+self.tr("\n"))
        self.labelsp_d_array_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_d_array_colon, 501, 0, 1, 5)
        if self.tr("code_sp_d_array_colon")!="code_sp_d_array_colon":
            self.codesp_d_array_colon = QtWidgets.QLabel(self.tr("code_sp_d_array_colon"))
            self.codesp_d_array_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_d_array_colon, 502, 0, 1, 5)
        self.namesp_d_array_colon = QtWidgets.QLabel("sp_d_array_colon")
        self.namesp_d_array_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_d_array_colon, 503, 0)
        self.sp_d_array_colon = QtWidgets.QComboBox()
        self.sp_d_array_colon.addItems(['ignore','add','remove','force'])
        self.sp_d_array_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_d_array_colon, 503, 1, 1, 4)
        self.labelsp_not = QtWidgets.QLabel(self.tr("Add or remove space after the '!' (not) unary operator.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_not.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_not, 504, 0, 1, 5)
        if self.tr("code_sp_not")!="code_sp_not":
            self.codesp_not = QtWidgets.QLabel(self.tr("code_sp_not"))
            self.codesp_not.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_not, 505, 0, 1, 5)
        self.namesp_not = QtWidgets.QLabel("sp_not")
        self.namesp_not.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_not, 506, 0)
        self.sp_not = QtWidgets.QComboBox()
        self.sp_not.addItems(['ignore','add','remove','force'])
        self.sp_not.setCurrentText('remove')
        self.lt2.addWidget(self.sp_not, 506, 1, 1, 4)
        self.labelsp_inv = QtWidgets.QLabel(self.tr("Add or remove space after the '~' (invert) unary operator.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_inv.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inv, 507, 0, 1, 5)
        if self.tr("code_sp_inv")!="code_sp_inv":
            self.codesp_inv = QtWidgets.QLabel(self.tr("code_sp_inv"))
            self.codesp_inv.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inv, 508, 0, 1, 5)
        self.namesp_inv = QtWidgets.QLabel("sp_inv")
        self.namesp_inv.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inv, 509, 0)
        self.sp_inv = QtWidgets.QComboBox()
        self.sp_inv.addItems(['ignore','add','remove','force'])
        self.sp_inv.setCurrentText('remove')
        self.lt2.addWidget(self.sp_inv, 509, 1, 1, 4)
        self.labelsp_addr = QtWidgets.QLabel(self.tr("Add or remove space after the '&' (address-of) unary operator.")+' '+self.tr("This does not affect the spacing after a '&' that is part of a type.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_addr.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_addr, 510, 0, 1, 5)
        if self.tr("code_sp_addr")!="code_sp_addr":
            self.codesp_addr = QtWidgets.QLabel(self.tr("code_sp_addr"))
            self.codesp_addr.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_addr, 511, 0, 1, 5)
        self.namesp_addr = QtWidgets.QLabel("sp_addr")
        self.namesp_addr.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_addr, 512, 0)
        self.sp_addr = QtWidgets.QComboBox()
        self.sp_addr.addItems(['ignore','add','remove','force'])
        self.sp_addr.setCurrentText('remove')
        self.lt2.addWidget(self.sp_addr, 512, 1, 1, 4)
        self.labelsp_member = QtWidgets.QLabel(self.tr("Add or remove space around the '.' or '->' operators.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_member.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_member, 513, 0, 1, 5)
        if self.tr("code_sp_member")!="code_sp_member":
            self.codesp_member = QtWidgets.QLabel(self.tr("code_sp_member"))
            self.codesp_member.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_member, 514, 0, 1, 5)
        self.namesp_member = QtWidgets.QLabel("sp_member")
        self.namesp_member.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_member, 515, 0)
        self.sp_member = QtWidgets.QComboBox()
        self.sp_member.addItems(['ignore','add','remove','force'])
        self.sp_member.setCurrentText('remove')
        self.lt2.addWidget(self.sp_member, 515, 1, 1, 4)
        self.labelsp_deref = QtWidgets.QLabel(self.tr("Add or remove space after the '*' (dereference) unary operator.")+' '+self.tr("This does not affect the spacing after a '*' that is part of a type.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_deref.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_deref, 516, 0, 1, 5)
        if self.tr("code_sp_deref")!="code_sp_deref":
            self.codesp_deref = QtWidgets.QLabel(self.tr("code_sp_deref"))
            self.codesp_deref.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_deref, 517, 0, 1, 5)
        self.namesp_deref = QtWidgets.QLabel("sp_deref")
        self.namesp_deref.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_deref, 518, 0)
        self.sp_deref = QtWidgets.QComboBox()
        self.sp_deref.addItems(['ignore','add','remove','force'])
        self.sp_deref.setCurrentText('remove')
        self.lt2.addWidget(self.sp_deref, 518, 1, 1, 4)
        self.labelsp_sign = QtWidgets.QLabel(self.tr("Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_sign.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_sign, 519, 0, 1, 5)
        if self.tr("code_sp_sign")!="code_sp_sign":
            self.codesp_sign = QtWidgets.QLabel(self.tr("code_sp_sign"))
            self.codesp_sign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_sign, 520, 0, 1, 5)
        self.namesp_sign = QtWidgets.QLabel("sp_sign")
        self.namesp_sign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_sign, 521, 0)
        self.sp_sign = QtWidgets.QComboBox()
        self.sp_sign.addItems(['ignore','add','remove','force'])
        self.sp_sign.setCurrentText('remove')
        self.lt2.addWidget(self.sp_sign, 521, 1, 1, 4)
        self.labelsp_incdec = QtWidgets.QLabel(self.tr("Add or remove space between '++' and '--' the word to which it is being applied, as in '(--x)' or 'y++;'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n"))
        self.labelsp_incdec.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_incdec, 522, 0, 1, 5)
        if self.tr("code_sp_incdec")!="code_sp_incdec":
            self.codesp_incdec = QtWidgets.QLabel(self.tr("code_sp_incdec"))
            self.codesp_incdec.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_incdec, 523, 0, 1, 5)
        self.namesp_incdec = QtWidgets.QLabel("sp_incdec")
        self.namesp_incdec.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_incdec, 524, 0)
        self.sp_incdec = QtWidgets.QComboBox()
        self.sp_incdec.addItems(['ignore','add','remove','force'])
        self.sp_incdec.setCurrentText('remove')
        self.lt2.addWidget(self.sp_incdec, 524, 1, 1, 4)
        self.labelsp_before_nl_cont = QtWidgets.QLabel(self.tr("Add or remove space before a backslash-newline at the end of a line.")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n"))
        self.labelsp_before_nl_cont.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_nl_cont, 525, 0, 1, 5)
        if self.tr("code_sp_before_nl_cont")!="code_sp_before_nl_cont":
            self.codesp_before_nl_cont = QtWidgets.QLabel(self.tr("code_sp_before_nl_cont"))
            self.codesp_before_nl_cont.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_nl_cont, 526, 0, 1, 5)
        self.namesp_before_nl_cont = QtWidgets.QLabel("sp_before_nl_cont")
        self.namesp_before_nl_cont.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_nl_cont, 527, 0)
        self.sp_before_nl_cont = QtWidgets.QComboBox()
        self.sp_before_nl_cont.addItems(['ignore','add','remove','force'])
        self.sp_before_nl_cont.setCurrentText('add')
        self.lt2.addWidget(self.sp_before_nl_cont, 527, 1, 1, 4)
        self.labelsp_after_oc_scope = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_scope.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_scope, 528, 0, 1, 5)
        if self.tr("code_sp_after_oc_scope")!="code_sp_after_oc_scope":
            self.codesp_after_oc_scope = QtWidgets.QLabel(self.tr("code_sp_after_oc_scope"))
            self.codesp_after_oc_scope.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_scope, 529, 0, 1, 5)
        self.namesp_after_oc_scope = QtWidgets.QLabel("sp_after_oc_scope")
        self.namesp_after_oc_scope.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_scope, 530, 0)
        self.sp_after_oc_scope = QtWidgets.QComboBox()
        self.sp_after_oc_scope.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_scope.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_scope, 530, 1, 1, 4)
        self.labelsp_after_oc_colon = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the colon in message specs, i.e. '-(int) f:(int) x;' vs. '-(int) f: (int) x;'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_colon, 531, 0, 1, 5)
        if self.tr("code_sp_after_oc_colon")!="code_sp_after_oc_colon":
            self.codesp_after_oc_colon = QtWidgets.QLabel(self.tr("code_sp_after_oc_colon"))
            self.codesp_after_oc_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_colon, 532, 0, 1, 5)
        self.namesp_after_oc_colon = QtWidgets.QLabel("sp_after_oc_colon")
        self.namesp_after_oc_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_colon, 533, 0)
        self.sp_after_oc_colon = QtWidgets.QComboBox()
        self.sp_after_oc_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_colon, 533, 1, 1, 4)
        self.labelsp_before_oc_colon = QtWidgets.QLabel(self.tr("(OC) Add or remove space before the colon in message specs, i.e. '-(int) f: (int) x;' vs. '-(int) f : (int) x;'.")+' '+self.tr("\n"))
        self.labelsp_before_oc_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_oc_colon, 534, 0, 1, 5)
        if self.tr("code_sp_before_oc_colon")!="code_sp_before_oc_colon":
            self.codesp_before_oc_colon = QtWidgets.QLabel(self.tr("code_sp_before_oc_colon"))
            self.codesp_before_oc_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_oc_colon, 535, 0, 1, 5)
        self.namesp_before_oc_colon = QtWidgets.QLabel("sp_before_oc_colon")
        self.namesp_before_oc_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_oc_colon, 536, 0)
        self.sp_before_oc_colon = QtWidgets.QComboBox()
        self.sp_before_oc_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_oc_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_oc_colon, 536, 1, 1, 4)
        self.labelsp_after_oc_dict_colon = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the colon in immutable dictionary expression 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_dict_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_dict_colon, 537, 0, 1, 5)
        if self.tr("code_sp_after_oc_dict_colon")!="code_sp_after_oc_dict_colon":
            self.codesp_after_oc_dict_colon = QtWidgets.QLabel(self.tr("code_sp_after_oc_dict_colon"))
            self.codesp_after_oc_dict_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_dict_colon, 538, 0, 1, 5)
        self.namesp_after_oc_dict_colon = QtWidgets.QLabel("sp_after_oc_dict_colon")
        self.namesp_after_oc_dict_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_dict_colon, 539, 0)
        self.sp_after_oc_dict_colon = QtWidgets.QComboBox()
        self.sp_after_oc_dict_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_dict_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_dict_colon, 539, 1, 1, 4)
        self.labelsp_before_oc_dict_colon = QtWidgets.QLabel(self.tr("(OC) Add or remove space before the colon in immutable dictionary expression 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'.")+' '+self.tr("\n"))
        self.labelsp_before_oc_dict_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_oc_dict_colon, 540, 0, 1, 5)
        if self.tr("code_sp_before_oc_dict_colon")!="code_sp_before_oc_dict_colon":
            self.codesp_before_oc_dict_colon = QtWidgets.QLabel(self.tr("code_sp_before_oc_dict_colon"))
            self.codesp_before_oc_dict_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_oc_dict_colon, 541, 0, 1, 5)
        self.namesp_before_oc_dict_colon = QtWidgets.QLabel("sp_before_oc_dict_colon")
        self.namesp_before_oc_dict_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_oc_dict_colon, 542, 0)
        self.sp_before_oc_dict_colon = QtWidgets.QComboBox()
        self.sp_before_oc_dict_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_oc_dict_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_oc_dict_colon, 542, 1, 1, 4)
        self.labelsp_after_send_oc_colon = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the colon in message specs, i.e. '[object setValue:1];' vs. '[object setValue: 1];'.")+' '+self.tr("\n"))
        self.labelsp_after_send_oc_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_send_oc_colon, 543, 0, 1, 5)
        if self.tr("code_sp_after_send_oc_colon")!="code_sp_after_send_oc_colon":
            self.codesp_after_send_oc_colon = QtWidgets.QLabel(self.tr("code_sp_after_send_oc_colon"))
            self.codesp_after_send_oc_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_send_oc_colon, 544, 0, 1, 5)
        self.namesp_after_send_oc_colon = QtWidgets.QLabel("sp_after_send_oc_colon")
        self.namesp_after_send_oc_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_send_oc_colon, 545, 0)
        self.sp_after_send_oc_colon = QtWidgets.QComboBox()
        self.sp_after_send_oc_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_send_oc_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_send_oc_colon, 545, 1, 1, 4)
        self.labelsp_before_send_oc_colon = QtWidgets.QLabel(self.tr("(OC) Add or remove space before the colon in message specs, i.e. '[object setValue:1];' vs. '[object setValue :1];'.")+' '+self.tr("\n"))
        self.labelsp_before_send_oc_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_send_oc_colon, 546, 0, 1, 5)
        if self.tr("code_sp_before_send_oc_colon")!="code_sp_before_send_oc_colon":
            self.codesp_before_send_oc_colon = QtWidgets.QLabel(self.tr("code_sp_before_send_oc_colon"))
            self.codesp_before_send_oc_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_send_oc_colon, 547, 0, 1, 5)
        self.namesp_before_send_oc_colon = QtWidgets.QLabel("sp_before_send_oc_colon")
        self.namesp_before_send_oc_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_send_oc_colon, 548, 0)
        self.sp_before_send_oc_colon = QtWidgets.QComboBox()
        self.sp_before_send_oc_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_send_oc_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_send_oc_colon, 548, 1, 1, 4)
        self.labelsp_after_oc_type = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the (type) in message specs, i.e. '-(int)f: (int) x;' vs. '-(int)f: (int)x;'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_type.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_type, 549, 0, 1, 5)
        if self.tr("code_sp_after_oc_type")!="code_sp_after_oc_type":
            self.codesp_after_oc_type = QtWidgets.QLabel(self.tr("code_sp_after_oc_type"))
            self.codesp_after_oc_type.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_type, 550, 0, 1, 5)
        self.namesp_after_oc_type = QtWidgets.QLabel("sp_after_oc_type")
        self.namesp_after_oc_type.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_type, 551, 0)
        self.sp_after_oc_type = QtWidgets.QComboBox()
        self.sp_after_oc_type.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_type.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_type, 551, 1, 1, 4)
        self.labelsp_after_oc_return_type = QtWidgets.QLabel(self.tr("(OC) Add or remove space after the first (type) in message specs, i.e. '-(int) f:(int)x;' vs. '-(int)f:(int)x;'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_return_type.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_return_type, 552, 0, 1, 5)
        if self.tr("code_sp_after_oc_return_type")!="code_sp_after_oc_return_type":
            self.codesp_after_oc_return_type = QtWidgets.QLabel(self.tr("code_sp_after_oc_return_type"))
            self.codesp_after_oc_return_type.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_return_type, 553, 0, 1, 5)
        self.namesp_after_oc_return_type = QtWidgets.QLabel("sp_after_oc_return_type")
        self.namesp_after_oc_return_type.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_return_type, 554, 0)
        self.sp_after_oc_return_type = QtWidgets.QComboBox()
        self.sp_after_oc_return_type.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_return_type.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_return_type, 554, 1, 1, 4)
        self.labelsp_after_oc_at_sel = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '@selector' and '(', i.e. '@selector(msgName)' vs. '@selector (msgName)'.")+' '+self.tr("Also applies to '@protocol()' constructs.")+' '+self.tr("\n"))
        self.labelsp_after_oc_at_sel.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_at_sel, 555, 0, 1, 5)
        if self.tr("code_sp_after_oc_at_sel")!="code_sp_after_oc_at_sel":
            self.codesp_after_oc_at_sel = QtWidgets.QLabel(self.tr("code_sp_after_oc_at_sel"))
            self.codesp_after_oc_at_sel.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_at_sel, 556, 0, 1, 5)
        self.namesp_after_oc_at_sel = QtWidgets.QLabel("sp_after_oc_at_sel")
        self.namesp_after_oc_at_sel.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_at_sel, 557, 0)
        self.sp_after_oc_at_sel = QtWidgets.QComboBox()
        self.sp_after_oc_at_sel.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_at_sel.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_at_sel, 557, 1, 1, 4)
        self.labelsp_after_oc_at_sel_parens = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '@selector(x)' and the following word, i.e. '@selector(foo) a:' vs. '@selector(foo)a:'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_at_sel_parens.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_at_sel_parens, 558, 0, 1, 5)
        if self.tr("code_sp_after_oc_at_sel_parens")!="code_sp_after_oc_at_sel_parens":
            self.codesp_after_oc_at_sel_parens = QtWidgets.QLabel(self.tr("code_sp_after_oc_at_sel_parens"))
            self.codesp_after_oc_at_sel_parens.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_at_sel_parens, 559, 0, 1, 5)
        self.namesp_after_oc_at_sel_parens = QtWidgets.QLabel("sp_after_oc_at_sel_parens")
        self.namesp_after_oc_at_sel_parens.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_at_sel_parens, 560, 0)
        self.sp_after_oc_at_sel_parens = QtWidgets.QComboBox()
        self.sp_after_oc_at_sel_parens.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_at_sel_parens.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_at_sel_parens, 560, 1, 1, 4)
        self.labelsp_inside_oc_at_sel_parens = QtWidgets.QLabel(self.tr("(OC) Add or remove space inside '@selector' parentheses, i.e. '@selector(foo)' vs. '@selector( foo )'.")+' '+self.tr("Also applies to '@protocol()' constructs.")+' '+self.tr("\n"))
        self.labelsp_inside_oc_at_sel_parens.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_oc_at_sel_parens, 561, 0, 1, 5)
        if self.tr("code_sp_inside_oc_at_sel_parens")!="code_sp_inside_oc_at_sel_parens":
            self.codesp_inside_oc_at_sel_parens = QtWidgets.QLabel(self.tr("code_sp_inside_oc_at_sel_parens"))
            self.codesp_inside_oc_at_sel_parens.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_oc_at_sel_parens, 562, 0, 1, 5)
        self.namesp_inside_oc_at_sel_parens = QtWidgets.QLabel("sp_inside_oc_at_sel_parens")
        self.namesp_inside_oc_at_sel_parens.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_oc_at_sel_parens, 563, 0)
        self.sp_inside_oc_at_sel_parens = QtWidgets.QComboBox()
        self.sp_inside_oc_at_sel_parens.addItems(['ignore','add','remove','force'])
        self.sp_inside_oc_at_sel_parens.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_oc_at_sel_parens, 563, 1, 1, 4)
        self.labelsp_before_oc_block_caret = QtWidgets.QLabel(self.tr("(OC) Add or remove space before a block pointer caret, i.e. '^int (int arg){...}' vs. ' ^int (int arg){...}'.")+' '+self.tr("\n"))
        self.labelsp_before_oc_block_caret.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_oc_block_caret, 564, 0, 1, 5)
        if self.tr("code_sp_before_oc_block_caret")!="code_sp_before_oc_block_caret":
            self.codesp_before_oc_block_caret = QtWidgets.QLabel(self.tr("code_sp_before_oc_block_caret"))
            self.codesp_before_oc_block_caret.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_oc_block_caret, 565, 0, 1, 5)
        self.namesp_before_oc_block_caret = QtWidgets.QLabel("sp_before_oc_block_caret")
        self.namesp_before_oc_block_caret.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_oc_block_caret, 566, 0)
        self.sp_before_oc_block_caret = QtWidgets.QComboBox()
        self.sp_before_oc_block_caret.addItems(['ignore','add','remove','force'])
        self.sp_before_oc_block_caret.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_oc_block_caret, 566, 1, 1, 4)
        self.labelsp_after_oc_block_caret = QtWidgets.QLabel(self.tr("(OC) Add or remove space after a block pointer caret, i.e. '^int (int arg){...}' vs. '^ int (int arg){...}'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_block_caret.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_block_caret, 567, 0, 1, 5)
        if self.tr("code_sp_after_oc_block_caret")!="code_sp_after_oc_block_caret":
            self.codesp_after_oc_block_caret = QtWidgets.QLabel(self.tr("code_sp_after_oc_block_caret"))
            self.codesp_after_oc_block_caret.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_block_caret, 568, 0, 1, 5)
        self.namesp_after_oc_block_caret = QtWidgets.QLabel("sp_after_oc_block_caret")
        self.namesp_after_oc_block_caret.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_block_caret, 569, 0)
        self.sp_after_oc_block_caret = QtWidgets.QComboBox()
        self.sp_after_oc_block_caret.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_block_caret.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_block_caret, 569, 1, 1, 4)
        self.labelsp_after_oc_msg_receiver = QtWidgets.QLabel(self.tr("(OC) Add or remove space between the receiver and selector in a message, as in '[receiver selector ...]'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_msg_receiver.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_msg_receiver, 570, 0, 1, 5)
        if self.tr("code_sp_after_oc_msg_receiver")!="code_sp_after_oc_msg_receiver":
            self.codesp_after_oc_msg_receiver = QtWidgets.QLabel(self.tr("code_sp_after_oc_msg_receiver"))
            self.codesp_after_oc_msg_receiver.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_msg_receiver, 571, 0, 1, 5)
        self.namesp_after_oc_msg_receiver = QtWidgets.QLabel("sp_after_oc_msg_receiver")
        self.namesp_after_oc_msg_receiver.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_msg_receiver, 572, 0)
        self.sp_after_oc_msg_receiver = QtWidgets.QComboBox()
        self.sp_after_oc_msg_receiver.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_msg_receiver.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_msg_receiver, 572, 1, 1, 4)
        self.labelsp_after_oc_property = QtWidgets.QLabel(self.tr("(OC) Add or remove space after '@property'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_property.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_property, 573, 0, 1, 5)
        if self.tr("code_sp_after_oc_property")!="code_sp_after_oc_property":
            self.codesp_after_oc_property = QtWidgets.QLabel(self.tr("code_sp_after_oc_property"))
            self.codesp_after_oc_property.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_property, 574, 0, 1, 5)
        self.namesp_after_oc_property = QtWidgets.QLabel("sp_after_oc_property")
        self.namesp_after_oc_property.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_property, 575, 0)
        self.sp_after_oc_property = QtWidgets.QComboBox()
        self.sp_after_oc_property.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_property.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_property, 575, 1, 1, 4)
        self.labelsp_after_oc_synchronized = QtWidgets.QLabel(self.tr("(OC) Add or remove space between '@synchronized' and the open parenthesis, i.e. '@synchronized(foo)' vs. '@synchronized (foo)'.")+' '+self.tr("\n"))
        self.labelsp_after_oc_synchronized.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_oc_synchronized, 576, 0, 1, 5)
        if self.tr("code_sp_after_oc_synchronized")!="code_sp_after_oc_synchronized":
            self.codesp_after_oc_synchronized = QtWidgets.QLabel(self.tr("code_sp_after_oc_synchronized"))
            self.codesp_after_oc_synchronized.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_oc_synchronized, 577, 0, 1, 5)
        self.namesp_after_oc_synchronized = QtWidgets.QLabel("sp_after_oc_synchronized")
        self.namesp_after_oc_synchronized.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_oc_synchronized, 578, 0)
        self.sp_after_oc_synchronized = QtWidgets.QComboBox()
        self.sp_after_oc_synchronized.addItems(['ignore','add','remove','force'])
        self.sp_after_oc_synchronized.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_oc_synchronized, 578, 1, 1, 4)
        self.labelsp_cond_colon = QtWidgets.QLabel(self.tr("Add or remove space around the ':' in 'b ? t : f'.")+' '+self.tr("\n"))
        self.labelsp_cond_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cond_colon, 579, 0, 1, 5)
        if self.tr("code_sp_cond_colon")!="code_sp_cond_colon":
            self.codesp_cond_colon = QtWidgets.QLabel(self.tr("code_sp_cond_colon"))
            self.codesp_cond_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cond_colon, 580, 0, 1, 5)
        self.namesp_cond_colon = QtWidgets.QLabel("sp_cond_colon")
        self.namesp_cond_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cond_colon, 581, 0)
        self.sp_cond_colon = QtWidgets.QComboBox()
        self.sp_cond_colon.addItems(['ignore','add','remove','force'])
        self.sp_cond_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_colon, 581, 1, 1, 4)
        self.labelsp_cond_colon_before = QtWidgets.QLabel(self.tr("Add or remove space before the ':' in 'b ? t : f'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_cond_colon.")+' '+self.tr("\n"))
        self.labelsp_cond_colon_before.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cond_colon_before, 582, 0, 1, 5)
        if self.tr("code_sp_cond_colon_before")!="code_sp_cond_colon_before":
            self.codesp_cond_colon_before = QtWidgets.QLabel(self.tr("code_sp_cond_colon_before"))
            self.codesp_cond_colon_before.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cond_colon_before, 583, 0, 1, 5)
        self.namesp_cond_colon_before = QtWidgets.QLabel("sp_cond_colon_before")
        self.namesp_cond_colon_before.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cond_colon_before, 584, 0)
        self.sp_cond_colon_before = QtWidgets.QComboBox()
        self.sp_cond_colon_before.addItems(['ignore','add','remove','force'])
        self.sp_cond_colon_before.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_colon_before, 584, 1, 1, 4)
        self.labelsp_cond_colon_after = QtWidgets.QLabel(self.tr("Add or remove space after the ':' in 'b ? t : f'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_cond_colon.")+' '+self.tr("\n"))
        self.labelsp_cond_colon_after.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cond_colon_after, 585, 0, 1, 5)
        if self.tr("code_sp_cond_colon_after")!="code_sp_cond_colon_after":
            self.codesp_cond_colon_after = QtWidgets.QLabel(self.tr("code_sp_cond_colon_after"))
            self.codesp_cond_colon_after.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cond_colon_after, 586, 0, 1, 5)
        self.namesp_cond_colon_after = QtWidgets.QLabel("sp_cond_colon_after")
        self.namesp_cond_colon_after.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cond_colon_after, 587, 0)
        self.sp_cond_colon_after = QtWidgets.QComboBox()
        self.sp_cond_colon_after.addItems(['ignore','add','remove','force'])
        self.sp_cond_colon_after.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_colon_after, 587, 1, 1, 4)
        self.labelsp_cond_question = QtWidgets.QLabel(self.tr("Add or remove space around the '?' in 'b ? t : f'.")+' '+self.tr("\n"))
        self.labelsp_cond_question.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cond_question, 588, 0, 1, 5)
        if self.tr("code_sp_cond_question")!="code_sp_cond_question":
            self.codesp_cond_question = QtWidgets.QLabel(self.tr("code_sp_cond_question"))
            self.codesp_cond_question.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cond_question, 589, 0, 1, 5)
        self.namesp_cond_question = QtWidgets.QLabel("sp_cond_question")
        self.namesp_cond_question.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cond_question, 590, 0)
        self.sp_cond_question = QtWidgets.QComboBox()
        self.sp_cond_question.addItems(['ignore','add','remove','force'])
        self.sp_cond_question.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_question, 590, 1, 1, 4)
        self.labelsp_cond_question_before = QtWidgets.QLabel(self.tr("Add or remove space before the '?' in 'b ? t : f'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_cond_question.")+' '+self.tr("\n"))
        self.labelsp_cond_question_before.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cond_question_before, 591, 0, 1, 5)
        if self.tr("code_sp_cond_question_before")!="code_sp_cond_question_before":
            self.codesp_cond_question_before = QtWidgets.QLabel(self.tr("code_sp_cond_question_before"))
            self.codesp_cond_question_before.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cond_question_before, 592, 0, 1, 5)
        self.namesp_cond_question_before = QtWidgets.QLabel("sp_cond_question_before")
        self.namesp_cond_question_before.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cond_question_before, 593, 0)
        self.sp_cond_question_before = QtWidgets.QComboBox()
        self.sp_cond_question_before.addItems(['ignore','add','remove','force'])
        self.sp_cond_question_before.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_question_before, 593, 1, 1, 4)
        self.labelsp_cond_question_after = QtWidgets.QLabel(self.tr("Add or remove space after the '?' in 'b ? t : f'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_cond_question.")+' '+self.tr("\n"))
        self.labelsp_cond_question_after.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cond_question_after, 594, 0, 1, 5)
        if self.tr("code_sp_cond_question_after")!="code_sp_cond_question_after":
            self.codesp_cond_question_after = QtWidgets.QLabel(self.tr("code_sp_cond_question_after"))
            self.codesp_cond_question_after.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cond_question_after, 595, 0, 1, 5)
        self.namesp_cond_question_after = QtWidgets.QLabel("sp_cond_question_after")
        self.namesp_cond_question_after.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cond_question_after, 596, 0)
        self.sp_cond_question_after = QtWidgets.QComboBox()
        self.sp_cond_question_after.addItems(['ignore','add','remove','force'])
        self.sp_cond_question_after.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_question_after, 596, 1, 1, 4)
        self.labelsp_cond_ternary_short = QtWidgets.QLabel(self.tr("In the abbreviated ternary form '(a ?: b)', add or remove space between '?' and ':'.")+' '+self.tr("\n")+' '+self.tr("Overrides all other sp_cond_* options.")+' '+self.tr("\n"))
        self.labelsp_cond_ternary_short.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cond_ternary_short, 597, 0, 1, 5)
        if self.tr("code_sp_cond_ternary_short")!="code_sp_cond_ternary_short":
            self.codesp_cond_ternary_short = QtWidgets.QLabel(self.tr("code_sp_cond_ternary_short"))
            self.codesp_cond_ternary_short.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cond_ternary_short, 598, 0, 1, 5)
        self.namesp_cond_ternary_short = QtWidgets.QLabel("sp_cond_ternary_short")
        self.namesp_cond_ternary_short.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cond_ternary_short, 599, 0)
        self.sp_cond_ternary_short = QtWidgets.QComboBox()
        self.sp_cond_ternary_short.addItems(['ignore','add','remove','force'])
        self.sp_cond_ternary_short.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cond_ternary_short, 599, 1, 1, 4)
        self.labelsp_case_label = QtWidgets.QLabel(self.tr("Fix the spacing between 'case' and the label.")+' '+self.tr("Only 'ignore' and 'force' make sense here.")+' '+self.tr("\n"))
        self.labelsp_case_label.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_case_label, 600, 0, 1, 5)
        if self.tr("code_sp_case_label")!="code_sp_case_label":
            self.codesp_case_label = QtWidgets.QLabel(self.tr("code_sp_case_label"))
            self.codesp_case_label.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_case_label, 601, 0, 1, 5)
        self.namesp_case_label = QtWidgets.QLabel("sp_case_label")
        self.namesp_case_label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_case_label, 602, 0)
        self.sp_case_label = QtWidgets.QComboBox()
        self.sp_case_label.addItems(['ignore','add','remove','force'])
        self.sp_case_label.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_case_label, 602, 1, 1, 4)
        self.labelsp_range = QtWidgets.QLabel(self.tr("(D) Add or remove space around the D '..' operator.")+' '+self.tr("\n"))
        self.labelsp_range.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_range, 603, 0, 1, 5)
        if self.tr("code_sp_range")!="code_sp_range":
            self.codesp_range = QtWidgets.QLabel(self.tr("code_sp_range"))
            self.codesp_range.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_range, 604, 0, 1, 5)
        self.namesp_range = QtWidgets.QLabel("sp_range")
        self.namesp_range.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_range, 605, 0)
        self.sp_range = QtWidgets.QComboBox()
        self.sp_range.addItems(['ignore','add','remove','force'])
        self.sp_range.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_range, 605, 1, 1, 4)
        self.labelsp_after_for_colon = QtWidgets.QLabel(self.tr("Add or remove space after ':' in a Java/C++11 range-based 'for', as in 'for (Type var : expr)'.")+' '+self.tr("\n"))
        self.labelsp_after_for_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_for_colon, 606, 0, 1, 5)
        if self.tr("code_sp_after_for_colon")!="code_sp_after_for_colon":
            self.codesp_after_for_colon = QtWidgets.QLabel(self.tr("code_sp_after_for_colon"))
            self.codesp_after_for_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_for_colon, 607, 0, 1, 5)
        self.namesp_after_for_colon = QtWidgets.QLabel("sp_after_for_colon")
        self.namesp_after_for_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_for_colon, 608, 0)
        self.sp_after_for_colon = QtWidgets.QComboBox()
        self.sp_after_for_colon.addItems(['ignore','add','remove','force'])
        self.sp_after_for_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_for_colon, 608, 1, 1, 4)
        self.labelsp_before_for_colon = QtWidgets.QLabel(self.tr("Add or remove space before ':' in a Java/C++11 range-based 'for', as in 'for (Type var : expr)'.")+' '+self.tr("\n"))
        self.labelsp_before_for_colon.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_for_colon, 609, 0, 1, 5)
        if self.tr("code_sp_before_for_colon")!="code_sp_before_for_colon":
            self.codesp_before_for_colon = QtWidgets.QLabel(self.tr("code_sp_before_for_colon"))
            self.codesp_before_for_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_for_colon, 610, 0, 1, 5)
        self.namesp_before_for_colon = QtWidgets.QLabel("sp_before_for_colon")
        self.namesp_before_for_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_for_colon, 611, 0)
        self.sp_before_for_colon = QtWidgets.QComboBox()
        self.sp_before_for_colon.addItems(['ignore','add','remove','force'])
        self.sp_before_for_colon.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_for_colon, 611, 1, 1, 4)
        self.labelsp_extern_paren = QtWidgets.QLabel(self.tr("(D) Add or remove space between 'extern' and '(' as in 'extern (C)'.")+' '+self.tr("\n"))
        self.labelsp_extern_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_extern_paren, 612, 0, 1, 5)
        if self.tr("code_sp_extern_paren")!="code_sp_extern_paren":
            self.codesp_extern_paren = QtWidgets.QLabel(self.tr("code_sp_extern_paren"))
            self.codesp_extern_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_extern_paren, 613, 0, 1, 5)
        self.namesp_extern_paren = QtWidgets.QLabel("sp_extern_paren")
        self.namesp_extern_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_extern_paren, 614, 0)
        self.sp_extern_paren = QtWidgets.QComboBox()
        self.sp_extern_paren.addItems(['ignore','add','remove','force'])
        self.sp_extern_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_extern_paren, 614, 1, 1, 4)
        self.labelsp_cmt_cpp_start = QtWidgets.QLabel(self.tr("Add or remove space after the opening of a C++ comment, i.e. '// A' vs. '//A'.")+' '+self.tr("\n"))
        self.labelsp_cmt_cpp_start.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cmt_cpp_start, 615, 0, 1, 5)
        if self.tr("code_sp_cmt_cpp_start")!="code_sp_cmt_cpp_start":
            self.codesp_cmt_cpp_start = QtWidgets.QLabel(self.tr("code_sp_cmt_cpp_start"))
            self.codesp_cmt_cpp_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cmt_cpp_start, 616, 0, 1, 5)
        self.namesp_cmt_cpp_start = QtWidgets.QLabel("sp_cmt_cpp_start")
        self.namesp_cmt_cpp_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cmt_cpp_start, 617, 0)
        self.sp_cmt_cpp_start = QtWidgets.QComboBox()
        self.sp_cmt_cpp_start.addItems(['ignore','add','remove','force'])
        self.sp_cmt_cpp_start.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_cmt_cpp_start, 617, 1, 1, 4)
        self.labelsp_cmt_cpp_doxygen = QtWidgets.QLabel(self.tr("If true, space is added with sp_cmt_cpp_start will be added after doxygen sequences like '///', '///<', '//!' and '//!<'.")+' '+self.tr("\n"))
        self.labelsp_cmt_cpp_doxygen.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cmt_cpp_doxygen, 618, 0, 1, 5)
        if self.tr("code_sp_cmt_cpp_doxygen")!="code_sp_cmt_cpp_doxygen":
            self.codesp_cmt_cpp_doxygen = QtWidgets.QLabel(self.tr("code_sp_cmt_cpp_doxygen"))
            self.codesp_cmt_cpp_doxygen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cmt_cpp_doxygen, 619, 0, 1, 5)
        self.namesp_cmt_cpp_doxygen = QtWidgets.QLabel("sp_cmt_cpp_doxygen")
        self.namesp_cmt_cpp_doxygen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cmt_cpp_doxygen, 620, 0)
        self.sp_cmt_cpp_doxygen = QtWidgets.QComboBox()
        self.sp_cmt_cpp_doxygen.addItems(['true','false'])
        self.sp_cmt_cpp_doxygen.setCurrentText('false')
        self.lt2.addWidget(self.sp_cmt_cpp_doxygen, 620, 1, 1, 4)
        self.labelsp_cmt_cpp_qttr = QtWidgets.QLabel(self.tr("If true, space is added with sp_cmt_cpp_start will be added after Qt translator or meta-data comments like '//:', '//=', and '//~'.")+' '+self.tr("\n"))
        self.labelsp_cmt_cpp_qttr.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_cmt_cpp_qttr, 621, 0, 1, 5)
        if self.tr("code_sp_cmt_cpp_qttr")!="code_sp_cmt_cpp_qttr":
            self.codesp_cmt_cpp_qttr = QtWidgets.QLabel(self.tr("code_sp_cmt_cpp_qttr"))
            self.codesp_cmt_cpp_qttr.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_cmt_cpp_qttr, 622, 0, 1, 5)
        self.namesp_cmt_cpp_qttr = QtWidgets.QLabel("sp_cmt_cpp_qttr")
        self.namesp_cmt_cpp_qttr.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_cmt_cpp_qttr, 623, 0)
        self.sp_cmt_cpp_qttr = QtWidgets.QComboBox()
        self.sp_cmt_cpp_qttr.addItems(['true','false'])
        self.sp_cmt_cpp_qttr.setCurrentText('false')
        self.lt2.addWidget(self.sp_cmt_cpp_qttr, 623, 1, 1, 4)
        self.labelsp_endif_cmt = QtWidgets.QLabel(self.tr("Add or remove space between #else or #endif and a trailing comment.")+' '+self.tr("\n"))
        self.labelsp_endif_cmt.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_endif_cmt, 624, 0, 1, 5)
        if self.tr("code_sp_endif_cmt")!="code_sp_endif_cmt":
            self.codesp_endif_cmt = QtWidgets.QLabel(self.tr("code_sp_endif_cmt"))
            self.codesp_endif_cmt.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_endif_cmt, 625, 0, 1, 5)
        self.namesp_endif_cmt = QtWidgets.QLabel("sp_endif_cmt")
        self.namesp_endif_cmt.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_endif_cmt, 626, 0)
        self.sp_endif_cmt = QtWidgets.QComboBox()
        self.sp_endif_cmt.addItems(['ignore','add','remove','force'])
        self.sp_endif_cmt.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_endif_cmt, 626, 1, 1, 4)
        self.labelsp_after_new = QtWidgets.QLabel(self.tr("Add or remove space after 'new', 'delete' and 'delete[]'.")+' '+self.tr("\n"))
        self.labelsp_after_new.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_new, 627, 0, 1, 5)
        if self.tr("code_sp_after_new")!="code_sp_after_new":
            self.codesp_after_new = QtWidgets.QLabel(self.tr("code_sp_after_new"))
            self.codesp_after_new.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_new, 628, 0, 1, 5)
        self.namesp_after_new = QtWidgets.QLabel("sp_after_new")
        self.namesp_after_new.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_new, 629, 0)
        self.sp_after_new = QtWidgets.QComboBox()
        self.sp_after_new.addItems(['ignore','add','remove','force'])
        self.sp_after_new.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_new, 629, 1, 1, 4)
        self.labelsp_between_new_paren = QtWidgets.QLabel(self.tr("Add or remove space between 'new' and '(' in 'new()'.")+' '+self.tr("\n"))
        self.labelsp_between_new_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_between_new_paren, 630, 0, 1, 5)
        if self.tr("code_sp_between_new_paren")!="code_sp_between_new_paren":
            self.codesp_between_new_paren = QtWidgets.QLabel(self.tr("code_sp_between_new_paren"))
            self.codesp_between_new_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_between_new_paren, 631, 0, 1, 5)
        self.namesp_between_new_paren = QtWidgets.QLabel("sp_between_new_paren")
        self.namesp_between_new_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_between_new_paren, 632, 0)
        self.sp_between_new_paren = QtWidgets.QComboBox()
        self.sp_between_new_paren.addItems(['ignore','add','remove','force'])
        self.sp_between_new_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_between_new_paren, 632, 1, 1, 4)
        self.labelsp_after_newop_paren = QtWidgets.QLabel(self.tr("Add or remove space between ')' and type in 'new(foo) BAR'.")+' '+self.tr("\n"))
        self.labelsp_after_newop_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_newop_paren, 633, 0, 1, 5)
        if self.tr("code_sp_after_newop_paren")!="code_sp_after_newop_paren":
            self.codesp_after_newop_paren = QtWidgets.QLabel(self.tr("code_sp_after_newop_paren"))
            self.codesp_after_newop_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_newop_paren, 634, 0, 1, 5)
        self.namesp_after_newop_paren = QtWidgets.QLabel("sp_after_newop_paren")
        self.namesp_after_newop_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_newop_paren, 635, 0)
        self.sp_after_newop_paren = QtWidgets.QComboBox()
        self.sp_after_newop_paren.addItems(['ignore','add','remove','force'])
        self.sp_after_newop_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_newop_paren, 635, 1, 1, 4)
        self.labelsp_inside_newop_paren = QtWidgets.QLabel(self.tr("Add or remove space inside parenthesis of the new operator as in 'new(foo) BAR'.")+' '+self.tr("\n"))
        self.labelsp_inside_newop_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_newop_paren, 636, 0, 1, 5)
        if self.tr("code_sp_inside_newop_paren")!="code_sp_inside_newop_paren":
            self.codesp_inside_newop_paren = QtWidgets.QLabel(self.tr("code_sp_inside_newop_paren"))
            self.codesp_inside_newop_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_newop_paren, 637, 0, 1, 5)
        self.namesp_inside_newop_paren = QtWidgets.QLabel("sp_inside_newop_paren")
        self.namesp_inside_newop_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_newop_paren, 638, 0)
        self.sp_inside_newop_paren = QtWidgets.QComboBox()
        self.sp_inside_newop_paren.addItems(['ignore','add','remove','force'])
        self.sp_inside_newop_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_newop_paren, 638, 1, 1, 4)
        self.labelsp_inside_newop_paren_open = QtWidgets.QLabel(self.tr("Add or remove space after the open parenthesis of the new operator, as in 'new(foo) BAR'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_inside_newop_paren.")+' '+self.tr("\n"))
        self.labelsp_inside_newop_paren_open.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_newop_paren_open, 639, 0, 1, 5)
        if self.tr("code_sp_inside_newop_paren_open")!="code_sp_inside_newop_paren_open":
            self.codesp_inside_newop_paren_open = QtWidgets.QLabel(self.tr("code_sp_inside_newop_paren_open"))
            self.codesp_inside_newop_paren_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_newop_paren_open, 640, 0, 1, 5)
        self.namesp_inside_newop_paren_open = QtWidgets.QLabel("sp_inside_newop_paren_open")
        self.namesp_inside_newop_paren_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_newop_paren_open, 641, 0)
        self.sp_inside_newop_paren_open = QtWidgets.QComboBox()
        self.sp_inside_newop_paren_open.addItems(['ignore','add','remove','force'])
        self.sp_inside_newop_paren_open.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_newop_paren_open, 641, 1, 1, 4)
        self.labelsp_inside_newop_paren_close = QtWidgets.QLabel(self.tr("Add or remove space before the close parenthesis of the new operator, as in 'new(foo) BAR'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_inside_newop_paren.")+' '+self.tr("\n"))
        self.labelsp_inside_newop_paren_close.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_inside_newop_paren_close, 642, 0, 1, 5)
        if self.tr("code_sp_inside_newop_paren_close")!="code_sp_inside_newop_paren_close":
            self.codesp_inside_newop_paren_close = QtWidgets.QLabel(self.tr("code_sp_inside_newop_paren_close"))
            self.codesp_inside_newop_paren_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_inside_newop_paren_close, 643, 0, 1, 5)
        self.namesp_inside_newop_paren_close = QtWidgets.QLabel("sp_inside_newop_paren_close")
        self.namesp_inside_newop_paren_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_inside_newop_paren_close, 644, 0)
        self.sp_inside_newop_paren_close = QtWidgets.QComboBox()
        self.sp_inside_newop_paren_close.addItems(['ignore','add','remove','force'])
        self.sp_inside_newop_paren_close.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_inside_newop_paren_close, 644, 1, 1, 4)
        self.labelsp_before_tr_emb_cmt = QtWidgets.QLabel(self.tr("Add or remove space before a trailing or embedded comment.")+' '+self.tr("\n"))
        self.labelsp_before_tr_emb_cmt.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_before_tr_emb_cmt, 645, 0, 1, 5)
        if self.tr("code_sp_before_tr_emb_cmt")!="code_sp_before_tr_emb_cmt":
            self.codesp_before_tr_emb_cmt = QtWidgets.QLabel(self.tr("code_sp_before_tr_emb_cmt"))
            self.codesp_before_tr_emb_cmt.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_before_tr_emb_cmt, 646, 0, 1, 5)
        self.namesp_before_tr_emb_cmt = QtWidgets.QLabel("sp_before_tr_emb_cmt")
        self.namesp_before_tr_emb_cmt.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_before_tr_emb_cmt, 647, 0)
        self.sp_before_tr_emb_cmt = QtWidgets.QComboBox()
        self.sp_before_tr_emb_cmt.addItems(['ignore','add','remove','force'])
        self.sp_before_tr_emb_cmt.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_before_tr_emb_cmt, 647, 1, 1, 4)
        self.labelsp_num_before_tr_emb_cmt = QtWidgets.QLabel(self.tr("Number of spaces before a trailing or embedded comment.")+' '+self.tr("\n"))
        self.labelsp_num_before_tr_emb_cmt.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_num_before_tr_emb_cmt, 648, 0, 1, 5)
        if self.tr("code_sp_num_before_tr_emb_cmt")!="code_sp_num_before_tr_emb_cmt":
            self.codesp_num_before_tr_emb_cmt = QtWidgets.QLabel(self.tr("code_sp_num_before_tr_emb_cmt"))
            self.codesp_num_before_tr_emb_cmt.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_num_before_tr_emb_cmt, 649, 0, 1, 5)
        self.namesp_num_before_tr_emb_cmt = QtWidgets.QLabel("sp_num_before_tr_emb_cmt")
        self.namesp_num_before_tr_emb_cmt.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_num_before_tr_emb_cmt, 650, 0)
        self.sp_num_before_tr_emb_cmt = QtWidgets.QSpinBox()
        self.sp_num_before_tr_emb_cmt.setMinimum(0)
        self.sp_num_before_tr_emb_cmt.setMaximum(100)
        self.sp_num_before_tr_emb_cmt.setValue(0)
        self.lt2.addWidget(self.sp_num_before_tr_emb_cmt, 650, 1, 1, 4)
        self.labelsp_annotation_paren = QtWidgets.QLabel(self.tr("(Java) Add or remove space between an annotation and the open parenthesis.")+' '+self.tr("\n"))
        self.labelsp_annotation_paren.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_annotation_paren, 651, 0, 1, 5)
        if self.tr("code_sp_annotation_paren")!="code_sp_annotation_paren":
            self.codesp_annotation_paren = QtWidgets.QLabel(self.tr("code_sp_annotation_paren"))
            self.codesp_annotation_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_annotation_paren, 652, 0, 1, 5)
        self.namesp_annotation_paren = QtWidgets.QLabel("sp_annotation_paren")
        self.namesp_annotation_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_annotation_paren, 653, 0)
        self.sp_annotation_paren = QtWidgets.QComboBox()
        self.sp_annotation_paren.addItems(['ignore','add','remove','force'])
        self.sp_annotation_paren.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_annotation_paren, 653, 1, 1, 4)
        self.labelsp_skip_vbrace_tokens = QtWidgets.QLabel(self.tr("If true, vbrace tokens are dropped to the previous token and skipped.")+' '+self.tr("\n"))
        self.labelsp_skip_vbrace_tokens.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_skip_vbrace_tokens, 654, 0, 1, 5)
        if self.tr("code_sp_skip_vbrace_tokens")!="code_sp_skip_vbrace_tokens":
            self.codesp_skip_vbrace_tokens = QtWidgets.QLabel(self.tr("code_sp_skip_vbrace_tokens"))
            self.codesp_skip_vbrace_tokens.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_skip_vbrace_tokens, 655, 0, 1, 5)
        self.namesp_skip_vbrace_tokens = QtWidgets.QLabel("sp_skip_vbrace_tokens")
        self.namesp_skip_vbrace_tokens.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_skip_vbrace_tokens, 656, 0)
        self.sp_skip_vbrace_tokens = QtWidgets.QComboBox()
        self.sp_skip_vbrace_tokens.addItems(['true','false'])
        self.sp_skip_vbrace_tokens.setCurrentText('false')
        self.lt2.addWidget(self.sp_skip_vbrace_tokens, 656, 1, 1, 4)
        self.labelsp_after_noexcept = QtWidgets.QLabel(self.tr("Add or remove space after 'noexcept'.")+' '+self.tr("\n"))
        self.labelsp_after_noexcept.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_after_noexcept, 657, 0, 1, 5)
        if self.tr("code_sp_after_noexcept")!="code_sp_after_noexcept":
            self.codesp_after_noexcept = QtWidgets.QLabel(self.tr("code_sp_after_noexcept"))
            self.codesp_after_noexcept.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_after_noexcept, 658, 0, 1, 5)
        self.namesp_after_noexcept = QtWidgets.QLabel("sp_after_noexcept")
        self.namesp_after_noexcept.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_after_noexcept, 659, 0)
        self.sp_after_noexcept = QtWidgets.QComboBox()
        self.sp_after_noexcept.addItems(['ignore','add','remove','force'])
        self.sp_after_noexcept.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_after_noexcept, 659, 1, 1, 4)
        self.labelsp_vala_after_translation = QtWidgets.QLabel(self.tr("Add or remove space after '_'.")+' '+self.tr("\n"))
        self.labelsp_vala_after_translation.setWordWrap(True)
        self.lt2.addWidget(self.labelsp_vala_after_translation, 660, 0, 1, 5)
        if self.tr("code_sp_vala_after_translation")!="code_sp_vala_after_translation":
            self.codesp_vala_after_translation = QtWidgets.QLabel(self.tr("code_sp_vala_after_translation"))
            self.codesp_vala_after_translation.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codesp_vala_after_translation, 661, 0, 1, 5)
        self.namesp_vala_after_translation = QtWidgets.QLabel("sp_vala_after_translation")
        self.namesp_vala_after_translation.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.namesp_vala_after_translation, 662, 0)
        self.sp_vala_after_translation = QtWidgets.QComboBox()
        self.sp_vala_after_translation.addItems(['ignore','add','remove','force'])
        self.sp_vala_after_translation.setCurrentText('ignore')
        self.lt2.addWidget(self.sp_vala_after_translation, 662, 1, 1, 4)
        self.labelforce_tab_after_define = QtWidgets.QLabel(self.tr("If true, a <TAB> is inserted after #define.")+' '+self.tr("\n"))
        self.labelforce_tab_after_define.setWordWrap(True)
        self.lt2.addWidget(self.labelforce_tab_after_define, 663, 0, 1, 5)
        if self.tr("code_force_tab_after_define")!="code_force_tab_after_define":
            self.codeforce_tab_after_define = QtWidgets.QLabel(self.tr("code_force_tab_after_define"))
            self.codeforce_tab_after_define.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt2.addWidget(self.codeforce_tab_after_define, 664, 0, 1, 5)
        self.nameforce_tab_after_define = QtWidgets.QLabel("force_tab_after_define")
        self.nameforce_tab_after_define.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt2.addWidget(self.nameforce_tab_after_define, 665, 0)
        self.force_tab_after_define = QtWidgets.QComboBox()
        self.force_tab_after_define.addItems(['true','false'])
        self.force_tab_after_define.setCurrentText('false')
        self.lt2.addWidget(self.force_tab_after_define, 665, 1, 1, 4)
        self.widget3 = QtWidgets.QWidget()
        self.addItem(self.widget3, self.tr("Indenting options"))
        self.lt3 = QtWidgets.QGridLayout(self.widget3)
        self.labelindent_columns = QtWidgets.QLabel(self.tr("The number of columns to indent per level.")+' '+self.tr("Usually 2, 3, 4, or 8.")+' '+self.tr("\n")+' '+self.tr("Default: 8")+' '+self.tr("\n"))
        self.labelindent_columns.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_columns, 0, 0, 1, 5)
        if self.tr("code_indent_columns")!="code_indent_columns":
            self.codeindent_columns = QtWidgets.QLabel(self.tr("code_indent_columns"))
            self.codeindent_columns.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_columns, 1, 0, 1, 5)
        self.nameindent_columns = QtWidgets.QLabel("indent_columns")
        self.nameindent_columns.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_columns, 2, 0)
        self.indent_columns = QtWidgets.QSpinBox()
        self.indent_columns.setMinimum(0)
        self.indent_columns.setMaximum(100)
        self.indent_columns.setValue(8)
        self.lt3.addWidget(self.indent_columns, 2, 1, 1, 4)
        self.labelindent_continue = QtWidgets.QLabel(self.tr("The continuation indent.")+' '+self.tr("If non-zero, this overrides the indent of '(', '[' and '=' continuation indents.")+' '+self.tr("Negative values are OK; negative value is absolute and not increased for each '(' or '[' level.")+' '+self.tr("\n")+' '+self.tr("For FreeBSD, this is set to 4.")+' '+self.tr("\n"))
        self.labelindent_continue.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_continue, 3, 0, 1, 5)
        if self.tr("code_indent_continue")!="code_indent_continue":
            self.codeindent_continue = QtWidgets.QLabel(self.tr("code_indent_continue"))
            self.codeindent_continue.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_continue, 4, 0, 1, 5)
        self.nameindent_continue = QtWidgets.QLabel("indent_continue")
        self.nameindent_continue.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_continue, 5, 0)
        self.indent_continue = QtWidgets.QSpinBox()
        self.indent_continue.setMinimum(-100)
        self.indent_continue.setMaximum(100)
        self.indent_continue.setValue(0)
        self.lt3.addWidget(self.indent_continue, 5, 1, 1, 4)
        self.labelindent_continue_class_head = QtWidgets.QLabel(self.tr("The continuation indent, only for class header line(s).")+' '+self.tr("If non-zero, this overrides the indent of 'class' continuation indents.")+' '+self.tr("\n"))
        self.labelindent_continue_class_head.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_continue_class_head, 6, 0, 1, 5)
        if self.tr("code_indent_continue_class_head")!="code_indent_continue_class_head":
            self.codeindent_continue_class_head = QtWidgets.QLabel(self.tr("code_indent_continue_class_head"))
            self.codeindent_continue_class_head.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_continue_class_head, 7, 0, 1, 5)
        self.nameindent_continue_class_head = QtWidgets.QLabel("indent_continue_class_head")
        self.nameindent_continue_class_head.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_continue_class_head, 8, 0)
        self.indent_continue_class_head = QtWidgets.QSpinBox()
        self.indent_continue_class_head.setMinimum(0)
        self.indent_continue_class_head.setMaximum(100)
        self.indent_continue_class_head.setValue(0)
        self.lt3.addWidget(self.indent_continue_class_head, 8, 1, 1, 4)
        self.labelindent_single_newlines = QtWidgets.QLabel(self.tr("Whether to indent empty lines (i.e. lines which contain only spaces before the newline character).")+' '+self.tr("\n"))
        self.labelindent_single_newlines.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_single_newlines, 9, 0, 1, 5)
        if self.tr("code_indent_single_newlines")!="code_indent_single_newlines":
            self.codeindent_single_newlines = QtWidgets.QLabel(self.tr("code_indent_single_newlines"))
            self.codeindent_single_newlines.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_single_newlines, 10, 0, 1, 5)
        self.nameindent_single_newlines = QtWidgets.QLabel("indent_single_newlines")
        self.nameindent_single_newlines.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_single_newlines, 11, 0)
        self.indent_single_newlines = QtWidgets.QComboBox()
        self.indent_single_newlines.addItems(['true','false'])
        self.indent_single_newlines.setCurrentText('false')
        self.lt3.addWidget(self.indent_single_newlines, 11, 1, 1, 4)
        self.labelindent_param = QtWidgets.QLabel(self.tr("The continuation indent for func_*_param if they are true.")+' '+self.tr("If non-zero, this overrides the indent.")+' '+self.tr("\n"))
        self.labelindent_param.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_param, 12, 0, 1, 5)
        if self.tr("code_indent_param")!="code_indent_param":
            self.codeindent_param = QtWidgets.QLabel(self.tr("code_indent_param"))
            self.codeindent_param.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_param, 13, 0, 1, 5)
        self.nameindent_param = QtWidgets.QLabel("indent_param")
        self.nameindent_param.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_param, 14, 0)
        self.indent_param = QtWidgets.QSpinBox()
        self.indent_param.setMinimum(0)
        self.indent_param.setMaximum(100)
        self.indent_param.setValue(0)
        self.lt3.addWidget(self.indent_param, 14, 1, 1, 4)
        self.labelindent_with_tabs = QtWidgets.QLabel(self.tr("How to use tabs when indenting code.")+' '+self.tr("\n")+' '+self.tr("0: Spaces only 1: Indent with tabs to brace level, align with spaces (default) 2: Indent and align with tabs, using spaces when not on a tabstop")+' '+self.tr("\n")+' '+self.tr("Default: 1")+' '+self.tr("\n"))
        self.labelindent_with_tabs.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_with_tabs, 15, 0, 1, 5)
        if self.tr("code_indent_with_tabs")!="code_indent_with_tabs":
            self.codeindent_with_tabs = QtWidgets.QLabel(self.tr("code_indent_with_tabs"))
            self.codeindent_with_tabs.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_with_tabs, 16, 0, 1, 5)
        self.nameindent_with_tabs = QtWidgets.QLabel("indent_with_tabs")
        self.nameindent_with_tabs.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_with_tabs, 17, 0)
        self.indent_with_tabs = QtWidgets.QSpinBox()
        self.indent_with_tabs.setMinimum(0)
        self.indent_with_tabs.setMaximum(100)
        self.indent_with_tabs.setValue(1)
        self.lt3.addWidget(self.indent_with_tabs, 17, 1, 1, 4)
        self.labelindent_cmt_with_tabs = QtWidgets.QLabel(self.tr("Whether to indent comments that are not at a brace level with tabs on a tabstop.")+' '+self.tr("Requires indent_with_tabs=2.")+' '+self.tr("If false, will use spaces.")+' '+self.tr("\n"))
        self.labelindent_cmt_with_tabs.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_cmt_with_tabs, 18, 0, 1, 5)
        if self.tr("code_indent_cmt_with_tabs")!="code_indent_cmt_with_tabs":
            self.codeindent_cmt_with_tabs = QtWidgets.QLabel(self.tr("code_indent_cmt_with_tabs"))
            self.codeindent_cmt_with_tabs.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_cmt_with_tabs, 19, 0, 1, 5)
        self.nameindent_cmt_with_tabs = QtWidgets.QLabel("indent_cmt_with_tabs")
        self.nameindent_cmt_with_tabs.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_cmt_with_tabs, 20, 0)
        self.indent_cmt_with_tabs = QtWidgets.QComboBox()
        self.indent_cmt_with_tabs.addItems(['true','false'])
        self.indent_cmt_with_tabs.setCurrentText('false')
        self.lt3.addWidget(self.indent_cmt_with_tabs, 20, 1, 1, 4)
        self.labelindent_align_string = QtWidgets.QLabel(self.tr("Whether to indent strings broken by '\' so that they line up.")+' '+self.tr("\n"))
        self.labelindent_align_string.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_align_string, 21, 0, 1, 5)
        if self.tr("code_indent_align_string")!="code_indent_align_string":
            self.codeindent_align_string = QtWidgets.QLabel(self.tr("code_indent_align_string"))
            self.codeindent_align_string.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_align_string, 22, 0, 1, 5)
        self.nameindent_align_string = QtWidgets.QLabel("indent_align_string")
        self.nameindent_align_string.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_align_string, 23, 0)
        self.indent_align_string = QtWidgets.QComboBox()
        self.indent_align_string.addItems(['true','false'])
        self.indent_align_string.setCurrentText('false')
        self.lt3.addWidget(self.indent_align_string, 23, 1, 1, 4)
        self.labelindent_xml_string = QtWidgets.QLabel(self.tr("The number of spaces to indent multi-line XML strings.")+' '+self.tr("Requires indent_align_string=true.")+' '+self.tr("\n"))
        self.labelindent_xml_string.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_xml_string, 24, 0, 1, 5)
        if self.tr("code_indent_xml_string")!="code_indent_xml_string":
            self.codeindent_xml_string = QtWidgets.QLabel(self.tr("code_indent_xml_string"))
            self.codeindent_xml_string.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_xml_string, 25, 0, 1, 5)
        self.nameindent_xml_string = QtWidgets.QLabel("indent_xml_string")
        self.nameindent_xml_string.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_xml_string, 26, 0)
        self.indent_xml_string = QtWidgets.QSpinBox()
        self.indent_xml_string.setMinimum(0)
        self.indent_xml_string.setMaximum(100)
        self.indent_xml_string.setValue(0)
        self.lt3.addWidget(self.indent_xml_string, 26, 1, 1, 4)
        self.labelindent_brace = QtWidgets.QLabel(self.tr("Spaces to indent '{' from level.")+' '+self.tr("\n"))
        self.labelindent_brace.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_brace, 27, 0, 1, 5)
        if self.tr("code_indent_brace")!="code_indent_brace":
            self.codeindent_brace = QtWidgets.QLabel(self.tr("code_indent_brace"))
            self.codeindent_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_brace, 28, 0, 1, 5)
        self.nameindent_brace = QtWidgets.QLabel("indent_brace")
        self.nameindent_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_brace, 29, 0)
        self.indent_brace = QtWidgets.QSpinBox()
        self.indent_brace.setMinimum(0)
        self.indent_brace.setMaximum(100)
        self.indent_brace.setValue(0)
        self.lt3.addWidget(self.indent_brace, 29, 1, 1, 4)
        self.labelindent_braces = QtWidgets.QLabel(self.tr("Whether braces are indented to the body level.")+' '+self.tr("\n"))
        self.labelindent_braces.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_braces, 30, 0, 1, 5)
        if self.tr("code_indent_braces")!="code_indent_braces":
            self.codeindent_braces = QtWidgets.QLabel(self.tr("code_indent_braces"))
            self.codeindent_braces.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_braces, 31, 0, 1, 5)
        self.nameindent_braces = QtWidgets.QLabel("indent_braces")
        self.nameindent_braces.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_braces, 32, 0)
        self.indent_braces = QtWidgets.QComboBox()
        self.indent_braces.addItems(['true','false'])
        self.indent_braces.setCurrentText('false')
        self.lt3.addWidget(self.indent_braces, 32, 1, 1, 4)
        self.labelindent_braces_no_func = QtWidgets.QLabel(self.tr("Whether to disable indenting function braces if indent_braces=true.")+' '+self.tr("\n"))
        self.labelindent_braces_no_func.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_braces_no_func, 33, 0, 1, 5)
        if self.tr("code_indent_braces_no_func")!="code_indent_braces_no_func":
            self.codeindent_braces_no_func = QtWidgets.QLabel(self.tr("code_indent_braces_no_func"))
            self.codeindent_braces_no_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_braces_no_func, 34, 0, 1, 5)
        self.nameindent_braces_no_func = QtWidgets.QLabel("indent_braces_no_func")
        self.nameindent_braces_no_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_braces_no_func, 35, 0)
        self.indent_braces_no_func = QtWidgets.QComboBox()
        self.indent_braces_no_func.addItems(['true','false'])
        self.indent_braces_no_func.setCurrentText('false')
        self.lt3.addWidget(self.indent_braces_no_func, 35, 1, 1, 4)
        self.labelindent_braces_no_class = QtWidgets.QLabel(self.tr("Whether to disable indenting class braces if indent_braces=true.")+' '+self.tr("\n"))
        self.labelindent_braces_no_class.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_braces_no_class, 36, 0, 1, 5)
        if self.tr("code_indent_braces_no_class")!="code_indent_braces_no_class":
            self.codeindent_braces_no_class = QtWidgets.QLabel(self.tr("code_indent_braces_no_class"))
            self.codeindent_braces_no_class.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_braces_no_class, 37, 0, 1, 5)
        self.nameindent_braces_no_class = QtWidgets.QLabel("indent_braces_no_class")
        self.nameindent_braces_no_class.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_braces_no_class, 38, 0)
        self.indent_braces_no_class = QtWidgets.QComboBox()
        self.indent_braces_no_class.addItems(['true','false'])
        self.indent_braces_no_class.setCurrentText('false')
        self.lt3.addWidget(self.indent_braces_no_class, 38, 1, 1, 4)
        self.labelindent_braces_no_struct = QtWidgets.QLabel(self.tr("Whether to disable indenting struct braces if indent_braces=true.")+' '+self.tr("\n"))
        self.labelindent_braces_no_struct.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_braces_no_struct, 39, 0, 1, 5)
        if self.tr("code_indent_braces_no_struct")!="code_indent_braces_no_struct":
            self.codeindent_braces_no_struct = QtWidgets.QLabel(self.tr("code_indent_braces_no_struct"))
            self.codeindent_braces_no_struct.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_braces_no_struct, 40, 0, 1, 5)
        self.nameindent_braces_no_struct = QtWidgets.QLabel("indent_braces_no_struct")
        self.nameindent_braces_no_struct.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_braces_no_struct, 41, 0)
        self.indent_braces_no_struct = QtWidgets.QComboBox()
        self.indent_braces_no_struct.addItems(['true','false'])
        self.indent_braces_no_struct.setCurrentText('false')
        self.lt3.addWidget(self.indent_braces_no_struct, 41, 1, 1, 4)
        self.labelindent_brace_parent = QtWidgets.QLabel(self.tr("Whether to indent based on the size of the brace parent, i.e. 'if' => 3 spaces, 'for' => 4 spaces, etc.")+' '+self.tr("\n"))
        self.labelindent_brace_parent.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_brace_parent, 42, 0, 1, 5)
        if self.tr("code_indent_brace_parent")!="code_indent_brace_parent":
            self.codeindent_brace_parent = QtWidgets.QLabel(self.tr("code_indent_brace_parent"))
            self.codeindent_brace_parent.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_brace_parent, 43, 0, 1, 5)
        self.nameindent_brace_parent = QtWidgets.QLabel("indent_brace_parent")
        self.nameindent_brace_parent.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_brace_parent, 44, 0)
        self.indent_brace_parent = QtWidgets.QComboBox()
        self.indent_brace_parent.addItems(['true','false'])
        self.indent_brace_parent.setCurrentText('false')
        self.lt3.addWidget(self.indent_brace_parent, 44, 1, 1, 4)
        self.labelindent_paren_open_brace = QtWidgets.QLabel(self.tr("Whether to indent based on the open parenthesis instead of the open brace in '({\n'.")+' '+self.tr("\n"))
        self.labelindent_paren_open_brace.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_paren_open_brace, 45, 0, 1, 5)
        if self.tr("code_indent_paren_open_brace")!="code_indent_paren_open_brace":
            self.codeindent_paren_open_brace = QtWidgets.QLabel(self.tr("code_indent_paren_open_brace"))
            self.codeindent_paren_open_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_paren_open_brace, 46, 0, 1, 5)
        self.nameindent_paren_open_brace = QtWidgets.QLabel("indent_paren_open_brace")
        self.nameindent_paren_open_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_paren_open_brace, 47, 0)
        self.indent_paren_open_brace = QtWidgets.QComboBox()
        self.indent_paren_open_brace.addItems(['true','false'])
        self.indent_paren_open_brace.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_open_brace, 47, 1, 1, 4)
        self.labelindent_cs_delegate_brace = QtWidgets.QLabel(self.tr("(C#) Whether to indent the brace of a C# delegate by another level.")+' '+self.tr("\n"))
        self.labelindent_cs_delegate_brace.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_cs_delegate_brace, 48, 0, 1, 5)
        if self.tr("code_indent_cs_delegate_brace")!="code_indent_cs_delegate_brace":
            self.codeindent_cs_delegate_brace = QtWidgets.QLabel(self.tr("code_indent_cs_delegate_brace"))
            self.codeindent_cs_delegate_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_cs_delegate_brace, 49, 0, 1, 5)
        self.nameindent_cs_delegate_brace = QtWidgets.QLabel("indent_cs_delegate_brace")
        self.nameindent_cs_delegate_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_cs_delegate_brace, 50, 0)
        self.indent_cs_delegate_brace = QtWidgets.QComboBox()
        self.indent_cs_delegate_brace.addItems(['true','false'])
        self.indent_cs_delegate_brace.setCurrentText('false')
        self.lt3.addWidget(self.indent_cs_delegate_brace, 50, 1, 1, 4)
        self.labelindent_cs_delegate_body = QtWidgets.QLabel(self.tr("(C#) Whether to indent a C# delegate (to handle delegates with no brace) by another level.")+' '+self.tr("\n"))
        self.labelindent_cs_delegate_body.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_cs_delegate_body, 51, 0, 1, 5)
        if self.tr("code_indent_cs_delegate_body")!="code_indent_cs_delegate_body":
            self.codeindent_cs_delegate_body = QtWidgets.QLabel(self.tr("code_indent_cs_delegate_body"))
            self.codeindent_cs_delegate_body.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_cs_delegate_body, 52, 0, 1, 5)
        self.nameindent_cs_delegate_body = QtWidgets.QLabel("indent_cs_delegate_body")
        self.nameindent_cs_delegate_body.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_cs_delegate_body, 53, 0)
        self.indent_cs_delegate_body = QtWidgets.QComboBox()
        self.indent_cs_delegate_body.addItems(['true','false'])
        self.indent_cs_delegate_body.setCurrentText('false')
        self.lt3.addWidget(self.indent_cs_delegate_body, 53, 1, 1, 4)
        self.labelindent_namespace = QtWidgets.QLabel(self.tr("Whether to indent the body of a 'namespace'.")+' '+self.tr("\n"))
        self.labelindent_namespace.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_namespace, 54, 0, 1, 5)
        if self.tr("code_indent_namespace")!="code_indent_namespace":
            self.codeindent_namespace = QtWidgets.QLabel(self.tr("code_indent_namespace"))
            self.codeindent_namespace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_namespace, 55, 0, 1, 5)
        self.nameindent_namespace = QtWidgets.QLabel("indent_namespace")
        self.nameindent_namespace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_namespace, 56, 0)
        self.indent_namespace = QtWidgets.QComboBox()
        self.indent_namespace.addItems(['true','false'])
        self.indent_namespace.setCurrentText('false')
        self.lt3.addWidget(self.indent_namespace, 56, 1, 1, 4)
        self.labelindent_namespace_single_indent = QtWidgets.QLabel(self.tr("Whether to indent only the first namespace, and not any nested namespaces.")+' '+self.tr("Requires indent_namespace=true.")+' '+self.tr("\n"))
        self.labelindent_namespace_single_indent.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_namespace_single_indent, 57, 0, 1, 5)
        if self.tr("code_indent_namespace_single_indent")!="code_indent_namespace_single_indent":
            self.codeindent_namespace_single_indent = QtWidgets.QLabel(self.tr("code_indent_namespace_single_indent"))
            self.codeindent_namespace_single_indent.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_namespace_single_indent, 58, 0, 1, 5)
        self.nameindent_namespace_single_indent = QtWidgets.QLabel("indent_namespace_single_indent")
        self.nameindent_namespace_single_indent.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_namespace_single_indent, 59, 0)
        self.indent_namespace_single_indent = QtWidgets.QComboBox()
        self.indent_namespace_single_indent.addItems(['true','false'])
        self.indent_namespace_single_indent.setCurrentText('false')
        self.lt3.addWidget(self.indent_namespace_single_indent, 59, 1, 1, 4)
        self.labelindent_namespace_level = QtWidgets.QLabel(self.tr("The number of spaces to indent a namespace block.")+' '+self.tr("If set to zero, use the value indent_columns")+' '+self.tr("\n"))
        self.labelindent_namespace_level.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_namespace_level, 60, 0, 1, 5)
        if self.tr("code_indent_namespace_level")!="code_indent_namespace_level":
            self.codeindent_namespace_level = QtWidgets.QLabel(self.tr("code_indent_namespace_level"))
            self.codeindent_namespace_level.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_namespace_level, 61, 0, 1, 5)
        self.nameindent_namespace_level = QtWidgets.QLabel("indent_namespace_level")
        self.nameindent_namespace_level.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_namespace_level, 62, 0)
        self.indent_namespace_level = QtWidgets.QSpinBox()
        self.indent_namespace_level.setMinimum(0)
        self.indent_namespace_level.setMaximum(100)
        self.indent_namespace_level.setValue(0)
        self.lt3.addWidget(self.indent_namespace_level, 62, 1, 1, 4)
        self.labelindent_namespace_limit = QtWidgets.QLabel(self.tr("If the body of the namespace is longer than this number, it won't be indented.")+' '+self.tr("Requires indent_namespace=true. 0 means no limit.")+' '+self.tr("\n"))
        self.labelindent_namespace_limit.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_namespace_limit, 63, 0, 1, 5)
        if self.tr("code_indent_namespace_limit")!="code_indent_namespace_limit":
            self.codeindent_namespace_limit = QtWidgets.QLabel(self.tr("code_indent_namespace_limit"))
            self.codeindent_namespace_limit.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_namespace_limit, 64, 0, 1, 5)
        self.nameindent_namespace_limit = QtWidgets.QLabel("indent_namespace_limit")
        self.nameindent_namespace_limit.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_namespace_limit, 65, 0)
        self.indent_namespace_limit = QtWidgets.QSpinBox()
        self.indent_namespace_limit.setMinimum(0)
        self.indent_namespace_limit.setMaximum(100)
        self.indent_namespace_limit.setValue(0)
        self.lt3.addWidget(self.indent_namespace_limit, 65, 1, 1, 4)
        self.labelindent_extern = QtWidgets.QLabel(self.tr("Whether the 'extern \"C\"' body is indented.")+' '+self.tr("\n"))
        self.labelindent_extern.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_extern, 66, 0, 1, 5)
        if self.tr("code_indent_extern")!="code_indent_extern":
            self.codeindent_extern = QtWidgets.QLabel(self.tr("code_indent_extern"))
            self.codeindent_extern.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_extern, 67, 0, 1, 5)
        self.nameindent_extern = QtWidgets.QLabel("indent_extern")
        self.nameindent_extern.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_extern, 68, 0)
        self.indent_extern = QtWidgets.QComboBox()
        self.indent_extern.addItems(['true','false'])
        self.indent_extern.setCurrentText('false')
        self.lt3.addWidget(self.indent_extern, 68, 1, 1, 4)
        self.labelindent_class = QtWidgets.QLabel(self.tr("Whether the 'class' body is indented.")+' '+self.tr("\n"))
        self.labelindent_class.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_class, 69, 0, 1, 5)
        if self.tr("code_indent_class")!="code_indent_class":
            self.codeindent_class = QtWidgets.QLabel(self.tr("code_indent_class"))
            self.codeindent_class.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_class, 70, 0, 1, 5)
        self.nameindent_class = QtWidgets.QLabel("indent_class")
        self.nameindent_class.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_class, 71, 0)
        self.indent_class = QtWidgets.QComboBox()
        self.indent_class.addItems(['true','false'])
        self.indent_class.setCurrentText('false')
        self.lt3.addWidget(self.indent_class, 71, 1, 1, 4)
        self.labelindent_class_colon = QtWidgets.QLabel(self.tr("Whether to indent the stuff after a leading base class colon.")+' '+self.tr("\n"))
        self.labelindent_class_colon.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_class_colon, 72, 0, 1, 5)
        if self.tr("code_indent_class_colon")!="code_indent_class_colon":
            self.codeindent_class_colon = QtWidgets.QLabel(self.tr("code_indent_class_colon"))
            self.codeindent_class_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_class_colon, 73, 0, 1, 5)
        self.nameindent_class_colon = QtWidgets.QLabel("indent_class_colon")
        self.nameindent_class_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_class_colon, 74, 0)
        self.indent_class_colon = QtWidgets.QComboBox()
        self.indent_class_colon.addItems(['true','false'])
        self.indent_class_colon.setCurrentText('false')
        self.lt3.addWidget(self.indent_class_colon, 74, 1, 1, 4)
        self.labelindent_class_on_colon = QtWidgets.QLabel(self.tr("Whether to indent based on a class colon instead of the stuff after the colon.")+' '+self.tr("Requires indent_class_colon=true.")+' '+self.tr("\n"))
        self.labelindent_class_on_colon.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_class_on_colon, 75, 0, 1, 5)
        if self.tr("code_indent_class_on_colon")!="code_indent_class_on_colon":
            self.codeindent_class_on_colon = QtWidgets.QLabel(self.tr("code_indent_class_on_colon"))
            self.codeindent_class_on_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_class_on_colon, 76, 0, 1, 5)
        self.nameindent_class_on_colon = QtWidgets.QLabel("indent_class_on_colon")
        self.nameindent_class_on_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_class_on_colon, 77, 0)
        self.indent_class_on_colon = QtWidgets.QComboBox()
        self.indent_class_on_colon.addItems(['true','false'])
        self.indent_class_on_colon.setCurrentText('false')
        self.lt3.addWidget(self.indent_class_on_colon, 77, 1, 1, 4)
        self.labelindent_constr_colon = QtWidgets.QLabel(self.tr("Whether to indent the stuff after a leading class initializer colon.")+' '+self.tr("\n"))
        self.labelindent_constr_colon.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_constr_colon, 78, 0, 1, 5)
        if self.tr("code_indent_constr_colon")!="code_indent_constr_colon":
            self.codeindent_constr_colon = QtWidgets.QLabel(self.tr("code_indent_constr_colon"))
            self.codeindent_constr_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_constr_colon, 79, 0, 1, 5)
        self.nameindent_constr_colon = QtWidgets.QLabel("indent_constr_colon")
        self.nameindent_constr_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_constr_colon, 80, 0)
        self.indent_constr_colon = QtWidgets.QComboBox()
        self.indent_constr_colon.addItems(['true','false'])
        self.indent_constr_colon.setCurrentText('false')
        self.lt3.addWidget(self.indent_constr_colon, 80, 1, 1, 4)
        self.labelindent_ctor_init_leading = QtWidgets.QLabel(self.tr("Virtual indent from the ':' for member initializers.")+' '+self.tr("\n")+' '+self.tr("Default: 2")+' '+self.tr("\n"))
        self.labelindent_ctor_init_leading.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_ctor_init_leading, 81, 0, 1, 5)
        if self.tr("code_indent_ctor_init_leading")!="code_indent_ctor_init_leading":
            self.codeindent_ctor_init_leading = QtWidgets.QLabel(self.tr("code_indent_ctor_init_leading"))
            self.codeindent_ctor_init_leading.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_ctor_init_leading, 82, 0, 1, 5)
        self.nameindent_ctor_init_leading = QtWidgets.QLabel("indent_ctor_init_leading")
        self.nameindent_ctor_init_leading.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_ctor_init_leading, 83, 0)
        self.indent_ctor_init_leading = QtWidgets.QSpinBox()
        self.indent_ctor_init_leading.setMinimum(0)
        self.indent_ctor_init_leading.setMaximum(100)
        self.indent_ctor_init_leading.setValue(2)
        self.lt3.addWidget(self.indent_ctor_init_leading, 83, 1, 1, 4)
        self.labelindent_ctor_init = QtWidgets.QLabel(self.tr("Additional indent for constructor initializer list.")+' '+self.tr("Negative values decrease indent down to the first column.")+' '+self.tr("\n"))
        self.labelindent_ctor_init.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_ctor_init, 84, 0, 1, 5)
        if self.tr("code_indent_ctor_init")!="code_indent_ctor_init":
            self.codeindent_ctor_init = QtWidgets.QLabel(self.tr("code_indent_ctor_init"))
            self.codeindent_ctor_init.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_ctor_init, 85, 0, 1, 5)
        self.nameindent_ctor_init = QtWidgets.QLabel("indent_ctor_init")
        self.nameindent_ctor_init.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_ctor_init, 86, 0)
        self.indent_ctor_init = QtWidgets.QSpinBox()
        self.indent_ctor_init.setMinimum(-100)
        self.indent_ctor_init.setMaximum(100)
        self.indent_ctor_init.setValue(0)
        self.lt3.addWidget(self.indent_ctor_init, 86, 1, 1, 4)
        self.labelindent_else_if = QtWidgets.QLabel(self.tr("Whether to indent 'if' following 'else' as a new block under the 'else'.")+' '+self.tr("If false, 'else\nif' is treated as 'else if' for indenting purposes.")+' '+self.tr("\n"))
        self.labelindent_else_if.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_else_if, 87, 0, 1, 5)
        if self.tr("code_indent_else_if")!="code_indent_else_if":
            self.codeindent_else_if = QtWidgets.QLabel(self.tr("code_indent_else_if"))
            self.codeindent_else_if.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_else_if, 88, 0, 1, 5)
        self.nameindent_else_if = QtWidgets.QLabel("indent_else_if")
        self.nameindent_else_if.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_else_if, 89, 0)
        self.indent_else_if = QtWidgets.QComboBox()
        self.indent_else_if.addItems(['true','false'])
        self.indent_else_if.setCurrentText('false')
        self.lt3.addWidget(self.indent_else_if, 89, 1, 1, 4)
        self.labelindent_var_def_blk = QtWidgets.QLabel(self.tr("Amount to indent variable declarations after a open brace.")+' '+self.tr("\n")+' '+self.tr("<0: Relative >=0: Absolute")+' '+self.tr("\n"))
        self.labelindent_var_def_blk.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_var_def_blk, 90, 0, 1, 5)
        if self.tr("code_indent_var_def_blk")!="code_indent_var_def_blk":
            self.codeindent_var_def_blk = QtWidgets.QLabel(self.tr("code_indent_var_def_blk"))
            self.codeindent_var_def_blk.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_var_def_blk, 91, 0, 1, 5)
        self.nameindent_var_def_blk = QtWidgets.QLabel("indent_var_def_blk")
        self.nameindent_var_def_blk.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_var_def_blk, 92, 0)
        self.indent_var_def_blk = QtWidgets.QSpinBox()
        self.indent_var_def_blk.setMinimum(-100)
        self.indent_var_def_blk.setMaximum(100)
        self.indent_var_def_blk.setValue(0)
        self.lt3.addWidget(self.indent_var_def_blk, 92, 1, 1, 4)
        self.labelindent_var_def_cont = QtWidgets.QLabel(self.tr("Whether to indent continued variable declarations instead of aligning.")+' '+self.tr("\n"))
        self.labelindent_var_def_cont.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_var_def_cont, 93, 0, 1, 5)
        if self.tr("code_indent_var_def_cont")!="code_indent_var_def_cont":
            self.codeindent_var_def_cont = QtWidgets.QLabel(self.tr("code_indent_var_def_cont"))
            self.codeindent_var_def_cont.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_var_def_cont, 94, 0, 1, 5)
        self.nameindent_var_def_cont = QtWidgets.QLabel("indent_var_def_cont")
        self.nameindent_var_def_cont.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_var_def_cont, 95, 0)
        self.indent_var_def_cont = QtWidgets.QComboBox()
        self.indent_var_def_cont.addItems(['true','false'])
        self.indent_var_def_cont.setCurrentText('false')
        self.lt3.addWidget(self.indent_var_def_cont, 95, 1, 1, 4)
        self.labelindent_shift = QtWidgets.QLabel(self.tr("Whether to indent continued shift expressions ('<<' and '>>') instead of aligning.")+' '+self.tr("Set align_left_shift=false when enabling this.")+' '+self.tr("\n"))
        self.labelindent_shift.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_shift, 96, 0, 1, 5)
        if self.tr("code_indent_shift")!="code_indent_shift":
            self.codeindent_shift = QtWidgets.QLabel(self.tr("code_indent_shift"))
            self.codeindent_shift.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_shift, 97, 0, 1, 5)
        self.nameindent_shift = QtWidgets.QLabel("indent_shift")
        self.nameindent_shift.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_shift, 98, 0)
        self.indent_shift = QtWidgets.QComboBox()
        self.indent_shift.addItems(['true','false'])
        self.indent_shift.setCurrentText('false')
        self.lt3.addWidget(self.indent_shift, 98, 1, 1, 4)
        self.labelindent_func_def_force_col1 = QtWidgets.QLabel(self.tr("Whether to force indentation of function definitions to start in column 1.")+' '+self.tr("\n"))
        self.labelindent_func_def_force_col1.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_def_force_col1, 99, 0, 1, 5)
        if self.tr("code_indent_func_def_force_col1")!="code_indent_func_def_force_col1":
            self.codeindent_func_def_force_col1 = QtWidgets.QLabel(self.tr("code_indent_func_def_force_col1"))
            self.codeindent_func_def_force_col1.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_def_force_col1, 100, 0, 1, 5)
        self.nameindent_func_def_force_col1 = QtWidgets.QLabel("indent_func_def_force_col1")
        self.nameindent_func_def_force_col1.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_def_force_col1, 101, 0)
        self.indent_func_def_force_col1 = QtWidgets.QComboBox()
        self.indent_func_def_force_col1.addItems(['true','false'])
        self.indent_func_def_force_col1.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_def_force_col1, 101, 1, 1, 4)
        self.labelindent_func_call_param = QtWidgets.QLabel(self.tr("Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n"))
        self.labelindent_func_call_param.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_call_param, 102, 0, 1, 5)
        if self.tr("code_indent_func_call_param")!="code_indent_func_call_param":
            self.codeindent_func_call_param = QtWidgets.QLabel(self.tr("code_indent_func_call_param"))
            self.codeindent_func_call_param.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_call_param, 103, 0, 1, 5)
        self.nameindent_func_call_param = QtWidgets.QLabel("indent_func_call_param")
        self.nameindent_func_call_param.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_call_param, 104, 0)
        self.indent_func_call_param = QtWidgets.QComboBox()
        self.indent_func_call_param.addItems(['true','false'])
        self.indent_func_call_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_call_param, 104, 1, 1, 4)
        self.labelindent_func_def_param = QtWidgets.QLabel(self.tr("Whether to indent continued function definition parameters one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n"))
        self.labelindent_func_def_param.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_def_param, 105, 0, 1, 5)
        if self.tr("code_indent_func_def_param")!="code_indent_func_def_param":
            self.codeindent_func_def_param = QtWidgets.QLabel(self.tr("code_indent_func_def_param"))
            self.codeindent_func_def_param.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_def_param, 106, 0, 1, 5)
        self.nameindent_func_def_param = QtWidgets.QLabel("indent_func_def_param")
        self.nameindent_func_def_param.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_def_param, 107, 0)
        self.indent_func_def_param = QtWidgets.QComboBox()
        self.indent_func_def_param.addItems(['true','false'])
        self.indent_func_def_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_def_param, 107, 1, 1, 4)
        self.labelindent_func_def_param_paren_pos_threshold = QtWidgets.QLabel(self.tr("for function definitions, only if indent_func_def_param is false Allows to align params when appropriate and indent them when not behave as if it was true if paren position is more than this value if paren position is more than the option value")+' '+self.tr("\n"))
        self.labelindent_func_def_param_paren_pos_threshold.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_def_param_paren_pos_threshold, 108, 0, 1, 5)
        if self.tr("code_indent_func_def_param_paren_pos_threshold")!="code_indent_func_def_param_paren_pos_threshold":
            self.codeindent_func_def_param_paren_pos_threshold = QtWidgets.QLabel(self.tr("code_indent_func_def_param_paren_pos_threshold"))
            self.codeindent_func_def_param_paren_pos_threshold.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_def_param_paren_pos_threshold, 109, 0, 1, 5)
        self.nameindent_func_def_param_paren_pos_threshold = QtWidgets.QLabel("indent_func_def_param_paren_pos_threshold")
        self.nameindent_func_def_param_paren_pos_threshold.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_def_param_paren_pos_threshold, 110, 0)
        self.indent_func_def_param_paren_pos_threshold = QtWidgets.QSpinBox()
        self.indent_func_def_param_paren_pos_threshold.setMinimum(0)
        self.indent_func_def_param_paren_pos_threshold.setMaximum(100)
        self.indent_func_def_param_paren_pos_threshold.setValue(0)
        self.lt3.addWidget(self.indent_func_def_param_paren_pos_threshold, 110, 1, 1, 4)
        self.labelindent_func_proto_param = QtWidgets.QLabel(self.tr("Whether to indent continued function call prototype one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n"))
        self.labelindent_func_proto_param.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_proto_param, 111, 0, 1, 5)
        if self.tr("code_indent_func_proto_param")!="code_indent_func_proto_param":
            self.codeindent_func_proto_param = QtWidgets.QLabel(self.tr("code_indent_func_proto_param"))
            self.codeindent_func_proto_param.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_proto_param, 112, 0, 1, 5)
        self.nameindent_func_proto_param = QtWidgets.QLabel("indent_func_proto_param")
        self.nameindent_func_proto_param.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_proto_param, 113, 0)
        self.indent_func_proto_param = QtWidgets.QComboBox()
        self.indent_func_proto_param.addItems(['true','false'])
        self.indent_func_proto_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_proto_param, 113, 1, 1, 4)
        self.labelindent_func_class_param = QtWidgets.QLabel(self.tr("Whether to indent continued function call declaration one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n"))
        self.labelindent_func_class_param.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_class_param, 114, 0, 1, 5)
        if self.tr("code_indent_func_class_param")!="code_indent_func_class_param":
            self.codeindent_func_class_param = QtWidgets.QLabel(self.tr("code_indent_func_class_param"))
            self.codeindent_func_class_param.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_class_param, 115, 0, 1, 5)
        self.nameindent_func_class_param = QtWidgets.QLabel("indent_func_class_param")
        self.nameindent_func_class_param.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_class_param, 116, 0)
        self.indent_func_class_param = QtWidgets.QComboBox()
        self.indent_func_class_param.addItems(['true','false'])
        self.indent_func_class_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_class_param, 116, 1, 1, 4)
        self.labelindent_func_ctor_var_param = QtWidgets.QLabel(self.tr("Whether to indent continued class variable constructors one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n"))
        self.labelindent_func_ctor_var_param.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_ctor_var_param, 117, 0, 1, 5)
        if self.tr("code_indent_func_ctor_var_param")!="code_indent_func_ctor_var_param":
            self.codeindent_func_ctor_var_param = QtWidgets.QLabel(self.tr("code_indent_func_ctor_var_param"))
            self.codeindent_func_ctor_var_param.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_ctor_var_param, 118, 0, 1, 5)
        self.nameindent_func_ctor_var_param = QtWidgets.QLabel("indent_func_ctor_var_param")
        self.nameindent_func_ctor_var_param.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_ctor_var_param, 119, 0)
        self.indent_func_ctor_var_param = QtWidgets.QComboBox()
        self.indent_func_ctor_var_param.addItems(['true','false'])
        self.indent_func_ctor_var_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_ctor_var_param, 119, 1, 1, 4)
        self.labelindent_template_param = QtWidgets.QLabel(self.tr("Whether to indent continued template parameter list one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n"))
        self.labelindent_template_param.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_template_param, 120, 0, 1, 5)
        if self.tr("code_indent_template_param")!="code_indent_template_param":
            self.codeindent_template_param = QtWidgets.QLabel(self.tr("code_indent_template_param"))
            self.codeindent_template_param.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_template_param, 121, 0, 1, 5)
        self.nameindent_template_param = QtWidgets.QLabel("indent_template_param")
        self.nameindent_template_param.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_template_param, 122, 0)
        self.indent_template_param = QtWidgets.QComboBox()
        self.indent_template_param.addItems(['true','false'])
        self.indent_template_param.setCurrentText('false')
        self.lt3.addWidget(self.indent_template_param, 122, 1, 1, 4)
        self.labelindent_func_param_double = QtWidgets.QLabel(self.tr("Double the indent for indent_func_xxx_param options.")+' '+self.tr("Use both values of the options indent_columns and indent_param.")+' '+self.tr("\n"))
        self.labelindent_func_param_double.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_param_double, 123, 0, 1, 5)
        if self.tr("code_indent_func_param_double")!="code_indent_func_param_double":
            self.codeindent_func_param_double = QtWidgets.QLabel(self.tr("code_indent_func_param_double"))
            self.codeindent_func_param_double.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_param_double, 124, 0, 1, 5)
        self.nameindent_func_param_double = QtWidgets.QLabel("indent_func_param_double")
        self.nameindent_func_param_double.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_param_double, 125, 0)
        self.indent_func_param_double = QtWidgets.QComboBox()
        self.indent_func_param_double.addItems(['true','false'])
        self.indent_func_param_double.setCurrentText('false')
        self.lt3.addWidget(self.indent_func_param_double, 125, 1, 1, 4)
        self.labelindent_func_const = QtWidgets.QLabel(self.tr("Indentation column for standalone 'const' qualifier on a function prototype.")+' '+self.tr("\n"))
        self.labelindent_func_const.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_const, 126, 0, 1, 5)
        if self.tr("code_indent_func_const")!="code_indent_func_const":
            self.codeindent_func_const = QtWidgets.QLabel(self.tr("code_indent_func_const"))
            self.codeindent_func_const.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_const, 127, 0, 1, 5)
        self.nameindent_func_const = QtWidgets.QLabel("indent_func_const")
        self.nameindent_func_const.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_const, 128, 0)
        self.indent_func_const = QtWidgets.QSpinBox()
        self.indent_func_const.setMinimum(0)
        self.indent_func_const.setMaximum(100)
        self.indent_func_const.setValue(0)
        self.lt3.addWidget(self.indent_func_const, 128, 1, 1, 4)
        self.labelindent_func_throw = QtWidgets.QLabel(self.tr("Indentation column for standalone 'throw' qualifier on a function prototype.")+' '+self.tr("\n"))
        self.labelindent_func_throw.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_func_throw, 129, 0, 1, 5)
        if self.tr("code_indent_func_throw")!="code_indent_func_throw":
            self.codeindent_func_throw = QtWidgets.QLabel(self.tr("code_indent_func_throw"))
            self.codeindent_func_throw.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_func_throw, 130, 0, 1, 5)
        self.nameindent_func_throw = QtWidgets.QLabel("indent_func_throw")
        self.nameindent_func_throw.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_func_throw, 131, 0)
        self.indent_func_throw = QtWidgets.QSpinBox()
        self.indent_func_throw.setMinimum(0)
        self.indent_func_throw.setMaximum(100)
        self.indent_func_throw.setValue(0)
        self.lt3.addWidget(self.indent_func_throw, 131, 1, 1, 4)
        self.labelindent_macro_brace = QtWidgets.QLabel(self.tr("How to indent within a macro followed by a brace on the same line This allows reducing the indent in macros that have (for example) `do { ... } while (0)` blocks bracketing them.")+' '+self.tr("\n")+' '+self.tr("true:  add an indent for the brace on the same line as the macro false: do not add an indent for the brace on the same line as the macro")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelindent_macro_brace.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_macro_brace, 132, 0, 1, 5)
        if self.tr("code_indent_macro_brace")!="code_indent_macro_brace":
            self.codeindent_macro_brace = QtWidgets.QLabel(self.tr("code_indent_macro_brace"))
            self.codeindent_macro_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_macro_brace, 133, 0, 1, 5)
        self.nameindent_macro_brace = QtWidgets.QLabel("indent_macro_brace")
        self.nameindent_macro_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_macro_brace, 134, 0)
        self.indent_macro_brace = QtWidgets.QComboBox()
        self.indent_macro_brace.addItems(['true','false'])
        self.indent_macro_brace.setCurrentText('true')
        self.lt3.addWidget(self.indent_macro_brace, 134, 1, 1, 4)
        self.labelindent_member = QtWidgets.QLabel(self.tr("The number of spaces to indent a continued '->' or '.'.")+' '+self.tr("Usually set to 0, 1, or indent_columns.")+' '+self.tr("\n"))
        self.labelindent_member.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_member, 135, 0, 1, 5)
        if self.tr("code_indent_member")!="code_indent_member":
            self.codeindent_member = QtWidgets.QLabel(self.tr("code_indent_member"))
            self.codeindent_member.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_member, 136, 0, 1, 5)
        self.nameindent_member = QtWidgets.QLabel("indent_member")
        self.nameindent_member.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_member, 137, 0)
        self.indent_member = QtWidgets.QSpinBox()
        self.indent_member.setMinimum(0)
        self.indent_member.setMaximum(100)
        self.indent_member.setValue(0)
        self.lt3.addWidget(self.indent_member, 137, 1, 1, 4)
        self.labelindent_member_single = QtWidgets.QLabel(self.tr("Whether lines broken at '.' or '->' should be indented by a single indent.")+' '+self.tr("The indent_member option will not be effective if this is set to true.")+' '+self.tr("\n"))
        self.labelindent_member_single.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_member_single, 138, 0, 1, 5)
        if self.tr("code_indent_member_single")!="code_indent_member_single":
            self.codeindent_member_single = QtWidgets.QLabel(self.tr("code_indent_member_single"))
            self.codeindent_member_single.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_member_single, 139, 0, 1, 5)
        self.nameindent_member_single = QtWidgets.QLabel("indent_member_single")
        self.nameindent_member_single.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_member_single, 140, 0)
        self.indent_member_single = QtWidgets.QComboBox()
        self.indent_member_single.addItems(['true','false'])
        self.indent_member_single.setCurrentText('false')
        self.lt3.addWidget(self.indent_member_single, 140, 1, 1, 4)
        self.labelindent_sing_line_comments = QtWidgets.QLabel(self.tr("Spaces to indent single line ('//') comments on lines before code.")+' '+self.tr("\n"))
        self.labelindent_sing_line_comments.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_sing_line_comments, 141, 0, 1, 5)
        if self.tr("code_indent_sing_line_comments")!="code_indent_sing_line_comments":
            self.codeindent_sing_line_comments = QtWidgets.QLabel(self.tr("code_indent_sing_line_comments"))
            self.codeindent_sing_line_comments.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_sing_line_comments, 142, 0, 1, 5)
        self.nameindent_sing_line_comments = QtWidgets.QLabel("indent_sing_line_comments")
        self.nameindent_sing_line_comments.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_sing_line_comments, 143, 0)
        self.indent_sing_line_comments = QtWidgets.QSpinBox()
        self.indent_sing_line_comments.setMinimum(0)
        self.indent_sing_line_comments.setMaximum(100)
        self.indent_sing_line_comments.setValue(0)
        self.lt3.addWidget(self.indent_sing_line_comments, 143, 1, 1, 4)
        self.labelindent_sparen_extra = QtWidgets.QLabel(self.tr("When opening a paren for a control statement (if, for, while, etc), increase the indent level by this value.")+' '+self.tr("Negative values decrease the indent level.")+' '+self.tr("\n"))
        self.labelindent_sparen_extra.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_sparen_extra, 144, 0, 1, 5)
        if self.tr("code_indent_sparen_extra")!="code_indent_sparen_extra":
            self.codeindent_sparen_extra = QtWidgets.QLabel(self.tr("code_indent_sparen_extra"))
            self.codeindent_sparen_extra.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_sparen_extra, 145, 0, 1, 5)
        self.nameindent_sparen_extra = QtWidgets.QLabel("indent_sparen_extra")
        self.nameindent_sparen_extra.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_sparen_extra, 146, 0)
        self.indent_sparen_extra = QtWidgets.QSpinBox()
        self.indent_sparen_extra.setMinimum(-100)
        self.indent_sparen_extra.setMaximum(100)
        self.indent_sparen_extra.setValue(0)
        self.lt3.addWidget(self.indent_sparen_extra, 146, 1, 1, 4)
        self.labelindent_relative_single_line_comments = QtWidgets.QLabel(self.tr("Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column.")+' '+self.tr("\n"))
        self.labelindent_relative_single_line_comments.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_relative_single_line_comments, 147, 0, 1, 5)
        if self.tr("code_indent_relative_single_line_comments")!="code_indent_relative_single_line_comments":
            self.codeindent_relative_single_line_comments = QtWidgets.QLabel(self.tr("code_indent_relative_single_line_comments"))
            self.codeindent_relative_single_line_comments.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_relative_single_line_comments, 148, 0, 1, 5)
        self.nameindent_relative_single_line_comments = QtWidgets.QLabel("indent_relative_single_line_comments")
        self.nameindent_relative_single_line_comments.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_relative_single_line_comments, 149, 0)
        self.indent_relative_single_line_comments = QtWidgets.QComboBox()
        self.indent_relative_single_line_comments.addItems(['true','false'])
        self.indent_relative_single_line_comments.setCurrentText('false')
        self.lt3.addWidget(self.indent_relative_single_line_comments, 149, 1, 1, 4)
        self.labelindent_switch_case = QtWidgets.QLabel(self.tr("Spaces to indent 'case' from 'switch'.")+' '+self.tr("Usually 0 or indent_columns.")+' '+self.tr("\n"))
        self.labelindent_switch_case.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_switch_case, 150, 0, 1, 5)
        if self.tr("code_indent_switch_case")!="code_indent_switch_case":
            self.codeindent_switch_case = QtWidgets.QLabel(self.tr("code_indent_switch_case"))
            self.codeindent_switch_case.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_switch_case, 151, 0, 1, 5)
        self.nameindent_switch_case = QtWidgets.QLabel("indent_switch_case")
        self.nameindent_switch_case.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_switch_case, 152, 0)
        self.indent_switch_case = QtWidgets.QSpinBox()
        self.indent_switch_case.setMinimum(0)
        self.indent_switch_case.setMaximum(100)
        self.indent_switch_case.setValue(0)
        self.lt3.addWidget(self.indent_switch_case, 152, 1, 1, 4)
        self.labelindent_switch_break_with_case = QtWidgets.QLabel(self.tr("indent 'break' with 'case' from 'switch'.")+' '+self.tr("\n"))
        self.labelindent_switch_break_with_case.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_switch_break_with_case, 153, 0, 1, 5)
        if self.tr("code_indent_switch_break_with_case")!="code_indent_switch_break_with_case":
            self.codeindent_switch_break_with_case = QtWidgets.QLabel(self.tr("code_indent_switch_break_with_case"))
            self.codeindent_switch_break_with_case.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_switch_break_with_case, 154, 0, 1, 5)
        self.nameindent_switch_break_with_case = QtWidgets.QLabel("indent_switch_break_with_case")
        self.nameindent_switch_break_with_case.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_switch_break_with_case, 155, 0)
        self.indent_switch_break_with_case = QtWidgets.QComboBox()
        self.indent_switch_break_with_case.addItems(['true','false'])
        self.indent_switch_break_with_case.setCurrentText('false')
        self.lt3.addWidget(self.indent_switch_break_with_case, 155, 1, 1, 4)
        self.labelindent_switch_pp = QtWidgets.QLabel(self.tr("Whether to indent preprocessor statements inside of switch statements.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelindent_switch_pp.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_switch_pp, 156, 0, 1, 5)
        if self.tr("code_indent_switch_pp")!="code_indent_switch_pp":
            self.codeindent_switch_pp = QtWidgets.QLabel(self.tr("code_indent_switch_pp"))
            self.codeindent_switch_pp.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_switch_pp, 157, 0, 1, 5)
        self.nameindent_switch_pp = QtWidgets.QLabel("indent_switch_pp")
        self.nameindent_switch_pp.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_switch_pp, 158, 0)
        self.indent_switch_pp = QtWidgets.QComboBox()
        self.indent_switch_pp.addItems(['true','false'])
        self.indent_switch_pp.setCurrentText('true')
        self.lt3.addWidget(self.indent_switch_pp, 158, 1, 1, 4)
        self.labelindent_case_shift = QtWidgets.QLabel(self.tr("Spaces to shift the 'case' line, without affecting any other lines.")+' '+self.tr("Usually 0.")+' '+self.tr("\n"))
        self.labelindent_case_shift.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_case_shift, 159, 0, 1, 5)
        if self.tr("code_indent_case_shift")!="code_indent_case_shift":
            self.codeindent_case_shift = QtWidgets.QLabel(self.tr("code_indent_case_shift"))
            self.codeindent_case_shift.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_case_shift, 160, 0, 1, 5)
        self.nameindent_case_shift = QtWidgets.QLabel("indent_case_shift")
        self.nameindent_case_shift.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_case_shift, 161, 0)
        self.indent_case_shift = QtWidgets.QSpinBox()
        self.indent_case_shift.setMinimum(0)
        self.indent_case_shift.setMaximum(100)
        self.indent_case_shift.setValue(0)
        self.lt3.addWidget(self.indent_case_shift, 161, 1, 1, 4)
        self.labelindent_case_brace = QtWidgets.QLabel(self.tr("Spaces to indent '{' from 'case'.")+' '+self.tr("By default, the brace will appear under the 'c' in case.")+' '+self.tr("Usually set to 0 or indent_columns.")+' '+self.tr("Negative values are OK.")+' '+self.tr("\n"))
        self.labelindent_case_brace.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_case_brace, 162, 0, 1, 5)
        if self.tr("code_indent_case_brace")!="code_indent_case_brace":
            self.codeindent_case_brace = QtWidgets.QLabel(self.tr("code_indent_case_brace"))
            self.codeindent_case_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_case_brace, 163, 0, 1, 5)
        self.nameindent_case_brace = QtWidgets.QLabel("indent_case_brace")
        self.nameindent_case_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_case_brace, 164, 0)
        self.indent_case_brace = QtWidgets.QSpinBox()
        self.indent_case_brace.setMinimum(-100)
        self.indent_case_brace.setMaximum(100)
        self.indent_case_brace.setValue(0)
        self.lt3.addWidget(self.indent_case_brace, 164, 1, 1, 4)
        self.labelindent_col1_comment = QtWidgets.QLabel(self.tr("Whether to indent comments found in first column.")+' '+self.tr("\n"))
        self.labelindent_col1_comment.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_col1_comment, 165, 0, 1, 5)
        if self.tr("code_indent_col1_comment")!="code_indent_col1_comment":
            self.codeindent_col1_comment = QtWidgets.QLabel(self.tr("code_indent_col1_comment"))
            self.codeindent_col1_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_col1_comment, 166, 0, 1, 5)
        self.nameindent_col1_comment = QtWidgets.QLabel("indent_col1_comment")
        self.nameindent_col1_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_col1_comment, 167, 0)
        self.indent_col1_comment = QtWidgets.QComboBox()
        self.indent_col1_comment.addItems(['true','false'])
        self.indent_col1_comment.setCurrentText('false')
        self.lt3.addWidget(self.indent_col1_comment, 167, 1, 1, 4)
        self.labelindent_col1_multi_string_literal = QtWidgets.QLabel(self.tr("Whether to indent multi string literal in first column.")+' '+self.tr("\n"))
        self.labelindent_col1_multi_string_literal.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_col1_multi_string_literal, 168, 0, 1, 5)
        if self.tr("code_indent_col1_multi_string_literal")!="code_indent_col1_multi_string_literal":
            self.codeindent_col1_multi_string_literal = QtWidgets.QLabel(self.tr("code_indent_col1_multi_string_literal"))
            self.codeindent_col1_multi_string_literal.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_col1_multi_string_literal, 169, 0, 1, 5)
        self.nameindent_col1_multi_string_literal = QtWidgets.QLabel("indent_col1_multi_string_literal")
        self.nameindent_col1_multi_string_literal.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_col1_multi_string_literal, 170, 0)
        self.indent_col1_multi_string_literal = QtWidgets.QComboBox()
        self.indent_col1_multi_string_literal.addItems(['true','false'])
        self.indent_col1_multi_string_literal.setCurrentText('false')
        self.lt3.addWidget(self.indent_col1_multi_string_literal, 170, 1, 1, 4)
        self.labelindent_label = QtWidgets.QLabel(self.tr("How to indent goto labels.")+' '+self.tr("\n")+' '+self.tr(">0: Absolute column where 1 is the leftmost column <=0: Subtract from brace indent")+' '+self.tr("\n")+' '+self.tr("Default: 1")+' '+self.tr("\n"))
        self.labelindent_label.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_label, 171, 0, 1, 5)
        if self.tr("code_indent_label")!="code_indent_label":
            self.codeindent_label = QtWidgets.QLabel(self.tr("code_indent_label"))
            self.codeindent_label.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_label, 172, 0, 1, 5)
        self.nameindent_label = QtWidgets.QLabel("indent_label")
        self.nameindent_label.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_label, 173, 0)
        self.indent_label = QtWidgets.QSpinBox()
        self.indent_label.setMinimum(-100)
        self.indent_label.setMaximum(100)
        self.indent_label.setValue(1)
        self.lt3.addWidget(self.indent_label, 173, 1, 1, 4)
        self.labelindent_access_spec = QtWidgets.QLabel(self.tr("How to indent access specifiers that are followed by a colon.")+' '+self.tr("\n")+' '+self.tr(">0: Absolute column where 1 is the leftmost column <=0: Subtract from brace indent")+' '+self.tr("\n")+' '+self.tr("Default: 1")+' '+self.tr("\n"))
        self.labelindent_access_spec.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_access_spec, 174, 0, 1, 5)
        if self.tr("code_indent_access_spec")!="code_indent_access_spec":
            self.codeindent_access_spec = QtWidgets.QLabel(self.tr("code_indent_access_spec"))
            self.codeindent_access_spec.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_access_spec, 175, 0, 1, 5)
        self.nameindent_access_spec = QtWidgets.QLabel("indent_access_spec")
        self.nameindent_access_spec.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_access_spec, 176, 0)
        self.indent_access_spec = QtWidgets.QSpinBox()
        self.indent_access_spec.setMinimum(-100)
        self.indent_access_spec.setMaximum(100)
        self.indent_access_spec.setValue(1)
        self.lt3.addWidget(self.indent_access_spec, 176, 1, 1, 4)
        self.labelindent_access_spec_body = QtWidgets.QLabel(self.tr("Whether to indent the code after an access specifier by one level.")+' '+self.tr("If true, this option forces 'indent_access_spec=0'.")+' '+self.tr("\n"))
        self.labelindent_access_spec_body.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_access_spec_body, 177, 0, 1, 5)
        if self.tr("code_indent_access_spec_body")!="code_indent_access_spec_body":
            self.codeindent_access_spec_body = QtWidgets.QLabel(self.tr("code_indent_access_spec_body"))
            self.codeindent_access_spec_body.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_access_spec_body, 178, 0, 1, 5)
        self.nameindent_access_spec_body = QtWidgets.QLabel("indent_access_spec_body")
        self.nameindent_access_spec_body.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_access_spec_body, 179, 0)
        self.indent_access_spec_body = QtWidgets.QComboBox()
        self.indent_access_spec_body.addItems(['true','false'])
        self.indent_access_spec_body.setCurrentText('false')
        self.lt3.addWidget(self.indent_access_spec_body, 179, 1, 1, 4)
        self.labelindent_paren_nl = QtWidgets.QLabel(self.tr("If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis (not recommended).")+' '+self.tr("\n"))
        self.labelindent_paren_nl.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_paren_nl, 180, 0, 1, 5)
        if self.tr("code_indent_paren_nl")!="code_indent_paren_nl":
            self.codeindent_paren_nl = QtWidgets.QLabel(self.tr("code_indent_paren_nl"))
            self.codeindent_paren_nl.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_paren_nl, 181, 0, 1, 5)
        self.nameindent_paren_nl = QtWidgets.QLabel("indent_paren_nl")
        self.nameindent_paren_nl.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_paren_nl, 182, 0)
        self.indent_paren_nl = QtWidgets.QComboBox()
        self.indent_paren_nl.addItems(['true','false'])
        self.indent_paren_nl.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_nl, 182, 1, 1, 4)
        self.labelindent_paren_close = QtWidgets.QLabel(self.tr("How to indent a close parenthesis after a newline.")+' '+self.tr("\n")+' '+self.tr("0: Indent to body level (default) 1: Align under the open parenthesis 2: Indent to the brace level")+' '+self.tr("\n"))
        self.labelindent_paren_close.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_paren_close, 183, 0, 1, 5)
        if self.tr("code_indent_paren_close")!="code_indent_paren_close":
            self.codeindent_paren_close = QtWidgets.QLabel(self.tr("code_indent_paren_close"))
            self.codeindent_paren_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_paren_close, 184, 0, 1, 5)
        self.nameindent_paren_close = QtWidgets.QLabel("indent_paren_close")
        self.nameindent_paren_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_paren_close, 185, 0)
        self.indent_paren_close = QtWidgets.QSpinBox()
        self.indent_paren_close.setMinimum(0)
        self.indent_paren_close.setMaximum(100)
        self.indent_paren_close.setValue(0)
        self.lt3.addWidget(self.indent_paren_close, 185, 1, 1, 4)
        self.labelindent_paren_after_func_def = QtWidgets.QLabel(self.tr("Whether to indent the open parenthesis of a function definition, if the parenthesis is on its own line.")+' '+self.tr("\n"))
        self.labelindent_paren_after_func_def.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_paren_after_func_def, 186, 0, 1, 5)
        if self.tr("code_indent_paren_after_func_def")!="code_indent_paren_after_func_def":
            self.codeindent_paren_after_func_def = QtWidgets.QLabel(self.tr("code_indent_paren_after_func_def"))
            self.codeindent_paren_after_func_def.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_paren_after_func_def, 187, 0, 1, 5)
        self.nameindent_paren_after_func_def = QtWidgets.QLabel("indent_paren_after_func_def")
        self.nameindent_paren_after_func_def.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_paren_after_func_def, 188, 0)
        self.indent_paren_after_func_def = QtWidgets.QComboBox()
        self.indent_paren_after_func_def.addItems(['true','false'])
        self.indent_paren_after_func_def.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_after_func_def, 188, 1, 1, 4)
        self.labelindent_paren_after_func_decl = QtWidgets.QLabel(self.tr("Whether to indent the open parenthesis of a function declaration, if the parenthesis is on its own line.")+' '+self.tr("\n"))
        self.labelindent_paren_after_func_decl.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_paren_after_func_decl, 189, 0, 1, 5)
        if self.tr("code_indent_paren_after_func_decl")!="code_indent_paren_after_func_decl":
            self.codeindent_paren_after_func_decl = QtWidgets.QLabel(self.tr("code_indent_paren_after_func_decl"))
            self.codeindent_paren_after_func_decl.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_paren_after_func_decl, 190, 0, 1, 5)
        self.nameindent_paren_after_func_decl = QtWidgets.QLabel("indent_paren_after_func_decl")
        self.nameindent_paren_after_func_decl.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_paren_after_func_decl, 191, 0)
        self.indent_paren_after_func_decl = QtWidgets.QComboBox()
        self.indent_paren_after_func_decl.addItems(['true','false'])
        self.indent_paren_after_func_decl.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_after_func_decl, 191, 1, 1, 4)
        self.labelindent_paren_after_func_call = QtWidgets.QLabel(self.tr("Whether to indent the open parenthesis of a function call, if the parenthesis is on its own line.")+' '+self.tr("\n"))
        self.labelindent_paren_after_func_call.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_paren_after_func_call, 192, 0, 1, 5)
        if self.tr("code_indent_paren_after_func_call")!="code_indent_paren_after_func_call":
            self.codeindent_paren_after_func_call = QtWidgets.QLabel(self.tr("code_indent_paren_after_func_call"))
            self.codeindent_paren_after_func_call.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_paren_after_func_call, 193, 0, 1, 5)
        self.nameindent_paren_after_func_call = QtWidgets.QLabel("indent_paren_after_func_call")
        self.nameindent_paren_after_func_call.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_paren_after_func_call, 194, 0)
        self.indent_paren_after_func_call = QtWidgets.QComboBox()
        self.indent_paren_after_func_call.addItems(['true','false'])
        self.indent_paren_after_func_call.setCurrentText('false')
        self.lt3.addWidget(self.indent_paren_after_func_call, 194, 1, 1, 4)
        self.labelindent_comma_paren = QtWidgets.QLabel(self.tr("Whether to indent a comma when inside a parenthesis.")+' '+self.tr("If true, aligns under the open parenthesis.")+' '+self.tr("\n"))
        self.labelindent_comma_paren.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_comma_paren, 195, 0, 1, 5)
        if self.tr("code_indent_comma_paren")!="code_indent_comma_paren":
            self.codeindent_comma_paren = QtWidgets.QLabel(self.tr("code_indent_comma_paren"))
            self.codeindent_comma_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_comma_paren, 196, 0, 1, 5)
        self.nameindent_comma_paren = QtWidgets.QLabel("indent_comma_paren")
        self.nameindent_comma_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_comma_paren, 197, 0)
        self.indent_comma_paren = QtWidgets.QComboBox()
        self.indent_comma_paren.addItems(['true','false'])
        self.indent_comma_paren.setCurrentText('false')
        self.lt3.addWidget(self.indent_comma_paren, 197, 1, 1, 4)
        self.labelindent_bool_paren = QtWidgets.QLabel(self.tr("Whether to indent a Boolean operator when inside a parenthesis.")+' '+self.tr("If true, aligns under the open parenthesis.")+' '+self.tr("\n"))
        self.labelindent_bool_paren.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_bool_paren, 198, 0, 1, 5)
        if self.tr("code_indent_bool_paren")!="code_indent_bool_paren":
            self.codeindent_bool_paren = QtWidgets.QLabel(self.tr("code_indent_bool_paren"))
            self.codeindent_bool_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_bool_paren, 199, 0, 1, 5)
        self.nameindent_bool_paren = QtWidgets.QLabel("indent_bool_paren")
        self.nameindent_bool_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_bool_paren, 200, 0)
        self.indent_bool_paren = QtWidgets.QComboBox()
        self.indent_bool_paren.addItems(['true','false'])
        self.indent_bool_paren.setCurrentText('false')
        self.lt3.addWidget(self.indent_bool_paren, 200, 1, 1, 4)
        self.labelindent_semicolon_for_paren = QtWidgets.QLabel(self.tr("Whether to indent a semicolon when inside a for parenthesis.")+' '+self.tr("If true, aligns under the open for parenthesis.")+' '+self.tr("\n"))
        self.labelindent_semicolon_for_paren.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_semicolon_for_paren, 201, 0, 1, 5)
        if self.tr("code_indent_semicolon_for_paren")!="code_indent_semicolon_for_paren":
            self.codeindent_semicolon_for_paren = QtWidgets.QLabel(self.tr("code_indent_semicolon_for_paren"))
            self.codeindent_semicolon_for_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_semicolon_for_paren, 202, 0, 1, 5)
        self.nameindent_semicolon_for_paren = QtWidgets.QLabel("indent_semicolon_for_paren")
        self.nameindent_semicolon_for_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_semicolon_for_paren, 203, 0)
        self.indent_semicolon_for_paren = QtWidgets.QComboBox()
        self.indent_semicolon_for_paren.addItems(['true','false'])
        self.indent_semicolon_for_paren.setCurrentText('false')
        self.lt3.addWidget(self.indent_semicolon_for_paren, 203, 1, 1, 4)
        self.labelindent_first_bool_expr = QtWidgets.QLabel(self.tr("Whether to align the first expression to following ones if indent_bool_paren=true.")+' '+self.tr("\n"))
        self.labelindent_first_bool_expr.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_first_bool_expr, 204, 0, 1, 5)
        if self.tr("code_indent_first_bool_expr")!="code_indent_first_bool_expr":
            self.codeindent_first_bool_expr = QtWidgets.QLabel(self.tr("code_indent_first_bool_expr"))
            self.codeindent_first_bool_expr.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_first_bool_expr, 205, 0, 1, 5)
        self.nameindent_first_bool_expr = QtWidgets.QLabel("indent_first_bool_expr")
        self.nameindent_first_bool_expr.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_first_bool_expr, 206, 0)
        self.indent_first_bool_expr = QtWidgets.QComboBox()
        self.indent_first_bool_expr.addItems(['true','false'])
        self.indent_first_bool_expr.setCurrentText('false')
        self.lt3.addWidget(self.indent_first_bool_expr, 206, 1, 1, 4)
        self.labelindent_first_for_expr = QtWidgets.QLabel(self.tr("Whether to align the first expression to following ones if indent_semicolon_for_paren=true.")+' '+self.tr("\n"))
        self.labelindent_first_for_expr.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_first_for_expr, 207, 0, 1, 5)
        if self.tr("code_indent_first_for_expr")!="code_indent_first_for_expr":
            self.codeindent_first_for_expr = QtWidgets.QLabel(self.tr("code_indent_first_for_expr"))
            self.codeindent_first_for_expr.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_first_for_expr, 208, 0, 1, 5)
        self.nameindent_first_for_expr = QtWidgets.QLabel("indent_first_for_expr")
        self.nameindent_first_for_expr.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_first_for_expr, 209, 0)
        self.indent_first_for_expr = QtWidgets.QComboBox()
        self.indent_first_for_expr.addItems(['true','false'])
        self.indent_first_for_expr.setCurrentText('false')
        self.lt3.addWidget(self.indent_first_for_expr, 209, 1, 1, 4)
        self.labelindent_square_nl = QtWidgets.QLabel(self.tr("If an open square is followed by a newline, whether to indent the next line so that it lines up after the open square (not recommended).")+' '+self.tr("\n"))
        self.labelindent_square_nl.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_square_nl, 210, 0, 1, 5)
        if self.tr("code_indent_square_nl")!="code_indent_square_nl":
            self.codeindent_square_nl = QtWidgets.QLabel(self.tr("code_indent_square_nl"))
            self.codeindent_square_nl.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_square_nl, 211, 0, 1, 5)
        self.nameindent_square_nl = QtWidgets.QLabel("indent_square_nl")
        self.nameindent_square_nl.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_square_nl, 212, 0)
        self.indent_square_nl = QtWidgets.QComboBox()
        self.indent_square_nl.addItems(['true','false'])
        self.indent_square_nl.setCurrentText('false')
        self.lt3.addWidget(self.indent_square_nl, 212, 1, 1, 4)
        self.labelindent_preserve_sql = QtWidgets.QLabel(self.tr("(ESQL/C) Whether to preserve the relative indent of 'EXEC SQL' bodies.")+' '+self.tr("\n"))
        self.labelindent_preserve_sql.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_preserve_sql, 213, 0, 1, 5)
        if self.tr("code_indent_preserve_sql")!="code_indent_preserve_sql":
            self.codeindent_preserve_sql = QtWidgets.QLabel(self.tr("code_indent_preserve_sql"))
            self.codeindent_preserve_sql.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_preserve_sql, 214, 0, 1, 5)
        self.nameindent_preserve_sql = QtWidgets.QLabel("indent_preserve_sql")
        self.nameindent_preserve_sql.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_preserve_sql, 215, 0)
        self.indent_preserve_sql = QtWidgets.QComboBox()
        self.indent_preserve_sql.addItems(['true','false'])
        self.indent_preserve_sql.setCurrentText('false')
        self.lt3.addWidget(self.indent_preserve_sql, 215, 1, 1, 4)
        self.labelindent_align_assign = QtWidgets.QLabel(self.tr("Whether to align continued statements at the '='.")+' '+self.tr("If false or if the '=' is followed by a newline, the next line is indent one tab.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelindent_align_assign.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_align_assign, 216, 0, 1, 5)
        if self.tr("code_indent_align_assign")!="code_indent_align_assign":
            self.codeindent_align_assign = QtWidgets.QLabel(self.tr("code_indent_align_assign"))
            self.codeindent_align_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_align_assign, 217, 0, 1, 5)
        self.nameindent_align_assign = QtWidgets.QLabel("indent_align_assign")
        self.nameindent_align_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_align_assign, 218, 0)
        self.indent_align_assign = QtWidgets.QComboBox()
        self.indent_align_assign.addItems(['true','false'])
        self.indent_align_assign.setCurrentText('true')
        self.lt3.addWidget(self.indent_align_assign, 218, 1, 1, 4)
        self.labelindent_off_after_assign = QtWidgets.QLabel(self.tr("If true, the indentation of the chunks after a '=' sequence will be set at LHS token indentation column before '='.")+' '+self.tr("\n"))
        self.labelindent_off_after_assign.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_off_after_assign, 219, 0, 1, 5)
        if self.tr("code_indent_off_after_assign")!="code_indent_off_after_assign":
            self.codeindent_off_after_assign = QtWidgets.QLabel(self.tr("code_indent_off_after_assign"))
            self.codeindent_off_after_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_off_after_assign, 220, 0, 1, 5)
        self.nameindent_off_after_assign = QtWidgets.QLabel("indent_off_after_assign")
        self.nameindent_off_after_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_off_after_assign, 221, 0)
        self.indent_off_after_assign = QtWidgets.QComboBox()
        self.indent_off_after_assign.addItems(['true','false'])
        self.indent_off_after_assign.setCurrentText('false')
        self.lt3.addWidget(self.indent_off_after_assign, 221, 1, 1, 4)
        self.labelindent_align_paren = QtWidgets.QLabel(self.tr("Whether to align continued statements at the '('.")+' '+self.tr("If false or the '(' is followed by a newline, the next line indent is one tab.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelindent_align_paren.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_align_paren, 222, 0, 1, 5)
        if self.tr("code_indent_align_paren")!="code_indent_align_paren":
            self.codeindent_align_paren = QtWidgets.QLabel(self.tr("code_indent_align_paren"))
            self.codeindent_align_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_align_paren, 223, 0, 1, 5)
        self.nameindent_align_paren = QtWidgets.QLabel("indent_align_paren")
        self.nameindent_align_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_align_paren, 224, 0)
        self.indent_align_paren = QtWidgets.QComboBox()
        self.indent_align_paren.addItems(['true','false'])
        self.indent_align_paren.setCurrentText('true')
        self.lt3.addWidget(self.indent_align_paren, 224, 1, 1, 4)
        self.labelindent_oc_inside_msg_sel = QtWidgets.QLabel(self.tr("(OC) Whether to indent Objective-C code inside message selectors.")+' '+self.tr("\n"))
        self.labelindent_oc_inside_msg_sel.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_inside_msg_sel, 225, 0, 1, 5)
        if self.tr("code_indent_oc_inside_msg_sel")!="code_indent_oc_inside_msg_sel":
            self.codeindent_oc_inside_msg_sel = QtWidgets.QLabel(self.tr("code_indent_oc_inside_msg_sel"))
            self.codeindent_oc_inside_msg_sel.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_inside_msg_sel, 226, 0, 1, 5)
        self.nameindent_oc_inside_msg_sel = QtWidgets.QLabel("indent_oc_inside_msg_sel")
        self.nameindent_oc_inside_msg_sel.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_inside_msg_sel, 227, 0)
        self.indent_oc_inside_msg_sel = QtWidgets.QComboBox()
        self.indent_oc_inside_msg_sel.addItems(['true','false'])
        self.indent_oc_inside_msg_sel.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_inside_msg_sel, 227, 1, 1, 4)
        self.labelindent_oc_block = QtWidgets.QLabel(self.tr("(OC) Whether to indent Objective-C blocks at brace level instead of usual rules.")+' '+self.tr("\n"))
        self.labelindent_oc_block.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_block, 228, 0, 1, 5)
        if self.tr("code_indent_oc_block")!="code_indent_oc_block":
            self.codeindent_oc_block = QtWidgets.QLabel(self.tr("code_indent_oc_block"))
            self.codeindent_oc_block.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_block, 229, 0, 1, 5)
        self.nameindent_oc_block = QtWidgets.QLabel("indent_oc_block")
        self.nameindent_oc_block.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_block, 230, 0)
        self.indent_oc_block = QtWidgets.QComboBox()
        self.indent_oc_block.addItems(['true','false'])
        self.indent_oc_block.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block, 230, 1, 1, 4)
        self.labelindent_oc_block_msg = QtWidgets.QLabel(self.tr("(OC) Indent for Objective-C blocks in a message relative to the parameter name.")+' '+self.tr("\n")+' '+self.tr("=0: Use indent_oc_block rules >0: Use specified number of spaces to indent")+' '+self.tr("\n"))
        self.labelindent_oc_block_msg.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_block_msg, 231, 0, 1, 5)
        if self.tr("code_indent_oc_block_msg")!="code_indent_oc_block_msg":
            self.codeindent_oc_block_msg = QtWidgets.QLabel(self.tr("code_indent_oc_block_msg"))
            self.codeindent_oc_block_msg.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_block_msg, 232, 0, 1, 5)
        self.nameindent_oc_block_msg = QtWidgets.QLabel("indent_oc_block_msg")
        self.nameindent_oc_block_msg.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_block_msg, 233, 0)
        self.indent_oc_block_msg = QtWidgets.QSpinBox()
        self.indent_oc_block_msg.setMinimum(0)
        self.indent_oc_block_msg.setMaximum(100)
        self.indent_oc_block_msg.setValue(0)
        self.lt3.addWidget(self.indent_oc_block_msg, 233, 1, 1, 4)
        self.labelindent_oc_msg_colon = QtWidgets.QLabel(self.tr("(OC) Minimum indent for subsequent parameters")+' '+self.tr("\n"))
        self.labelindent_oc_msg_colon.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_msg_colon, 234, 0, 1, 5)
        if self.tr("code_indent_oc_msg_colon")!="code_indent_oc_msg_colon":
            self.codeindent_oc_msg_colon = QtWidgets.QLabel(self.tr("code_indent_oc_msg_colon"))
            self.codeindent_oc_msg_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_msg_colon, 235, 0, 1, 5)
        self.nameindent_oc_msg_colon = QtWidgets.QLabel("indent_oc_msg_colon")
        self.nameindent_oc_msg_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_msg_colon, 236, 0)
        self.indent_oc_msg_colon = QtWidgets.QSpinBox()
        self.indent_oc_msg_colon.setMinimum(0)
        self.indent_oc_msg_colon.setMaximum(100)
        self.indent_oc_msg_colon.setValue(0)
        self.lt3.addWidget(self.indent_oc_msg_colon, 236, 1, 1, 4)
        self.labelindent_oc_msg_prioritize_first_colon = QtWidgets.QLabel(self.tr("(OC) Whether to prioritize aligning with initial colon (and stripping spaces from lines, if necessary).")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelindent_oc_msg_prioritize_first_colon.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_msg_prioritize_first_colon, 237, 0, 1, 5)
        if self.tr("code_indent_oc_msg_prioritize_first_colon")!="code_indent_oc_msg_prioritize_first_colon":
            self.codeindent_oc_msg_prioritize_first_colon = QtWidgets.QLabel(self.tr("code_indent_oc_msg_prioritize_first_colon"))
            self.codeindent_oc_msg_prioritize_first_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_msg_prioritize_first_colon, 238, 0, 1, 5)
        self.nameindent_oc_msg_prioritize_first_colon = QtWidgets.QLabel("indent_oc_msg_prioritize_first_colon")
        self.nameindent_oc_msg_prioritize_first_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_msg_prioritize_first_colon, 239, 0)
        self.indent_oc_msg_prioritize_first_colon = QtWidgets.QComboBox()
        self.indent_oc_msg_prioritize_first_colon.addItems(['true','false'])
        self.indent_oc_msg_prioritize_first_colon.setCurrentText('true')
        self.lt3.addWidget(self.indent_oc_msg_prioritize_first_colon, 239, 1, 1, 4)
        self.labelindent_oc_block_msg_xcode_style = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks the way that Xcode does by default (from the keyword if the parameter is on its own line; otherwise, from the previous indentation level).")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n"))
        self.labelindent_oc_block_msg_xcode_style.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_block_msg_xcode_style, 240, 0, 1, 5)
        if self.tr("code_indent_oc_block_msg_xcode_style")!="code_indent_oc_block_msg_xcode_style":
            self.codeindent_oc_block_msg_xcode_style = QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_xcode_style"))
            self.codeindent_oc_block_msg_xcode_style.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_block_msg_xcode_style, 241, 0, 1, 5)
        self.nameindent_oc_block_msg_xcode_style = QtWidgets.QLabel("indent_oc_block_msg_xcode_style")
        self.nameindent_oc_block_msg_xcode_style.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_block_msg_xcode_style, 242, 0)
        self.indent_oc_block_msg_xcode_style = QtWidgets.QComboBox()
        self.indent_oc_block_msg_xcode_style.addItems(['true','false'])
        self.indent_oc_block_msg_xcode_style.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_xcode_style, 242, 1, 1, 4)
        self.labelindent_oc_block_msg_from_keyword = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks from where the brace is, relative to a message keyword.")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n"))
        self.labelindent_oc_block_msg_from_keyword.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_block_msg_from_keyword, 243, 0, 1, 5)
        if self.tr("code_indent_oc_block_msg_from_keyword")!="code_indent_oc_block_msg_from_keyword":
            self.codeindent_oc_block_msg_from_keyword = QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_from_keyword"))
            self.codeindent_oc_block_msg_from_keyword.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_block_msg_from_keyword, 244, 0, 1, 5)
        self.nameindent_oc_block_msg_from_keyword = QtWidgets.QLabel("indent_oc_block_msg_from_keyword")
        self.nameindent_oc_block_msg_from_keyword.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_block_msg_from_keyword, 245, 0)
        self.indent_oc_block_msg_from_keyword = QtWidgets.QComboBox()
        self.indent_oc_block_msg_from_keyword.addItems(['true','false'])
        self.indent_oc_block_msg_from_keyword.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_from_keyword, 245, 1, 1, 4)
        self.labelindent_oc_block_msg_from_colon = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks from where the brace is, relative to a message colon.")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n"))
        self.labelindent_oc_block_msg_from_colon.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_block_msg_from_colon, 246, 0, 1, 5)
        if self.tr("code_indent_oc_block_msg_from_colon")!="code_indent_oc_block_msg_from_colon":
            self.codeindent_oc_block_msg_from_colon = QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_from_colon"))
            self.codeindent_oc_block_msg_from_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_block_msg_from_colon, 247, 0, 1, 5)
        self.nameindent_oc_block_msg_from_colon = QtWidgets.QLabel("indent_oc_block_msg_from_colon")
        self.nameindent_oc_block_msg_from_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_block_msg_from_colon, 248, 0)
        self.indent_oc_block_msg_from_colon = QtWidgets.QComboBox()
        self.indent_oc_block_msg_from_colon.addItems(['true','false'])
        self.indent_oc_block_msg_from_colon.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_from_colon, 248, 1, 1, 4)
        self.labelindent_oc_block_msg_from_caret = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks from where the block caret is.")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n"))
        self.labelindent_oc_block_msg_from_caret.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_block_msg_from_caret, 249, 0, 1, 5)
        if self.tr("code_indent_oc_block_msg_from_caret")!="code_indent_oc_block_msg_from_caret":
            self.codeindent_oc_block_msg_from_caret = QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_from_caret"))
            self.codeindent_oc_block_msg_from_caret.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_block_msg_from_caret, 250, 0, 1, 5)
        self.nameindent_oc_block_msg_from_caret = QtWidgets.QLabel("indent_oc_block_msg_from_caret")
        self.nameindent_oc_block_msg_from_caret.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_block_msg_from_caret, 251, 0)
        self.indent_oc_block_msg_from_caret = QtWidgets.QComboBox()
        self.indent_oc_block_msg_from_caret.addItems(['true','false'])
        self.indent_oc_block_msg_from_caret.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_from_caret, 251, 1, 1, 4)
        self.labelindent_oc_block_msg_from_brace = QtWidgets.QLabel(self.tr("(OC) Whether to indent blocks from where the brace caret is.")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n"))
        self.labelindent_oc_block_msg_from_brace.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_oc_block_msg_from_brace, 252, 0, 1, 5)
        if self.tr("code_indent_oc_block_msg_from_brace")!="code_indent_oc_block_msg_from_brace":
            self.codeindent_oc_block_msg_from_brace = QtWidgets.QLabel(self.tr("code_indent_oc_block_msg_from_brace"))
            self.codeindent_oc_block_msg_from_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_oc_block_msg_from_brace, 253, 0, 1, 5)
        self.nameindent_oc_block_msg_from_brace = QtWidgets.QLabel("indent_oc_block_msg_from_brace")
        self.nameindent_oc_block_msg_from_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_oc_block_msg_from_brace, 254, 0)
        self.indent_oc_block_msg_from_brace = QtWidgets.QComboBox()
        self.indent_oc_block_msg_from_brace.addItems(['true','false'])
        self.indent_oc_block_msg_from_brace.setCurrentText('false')
        self.lt3.addWidget(self.indent_oc_block_msg_from_brace, 254, 1, 1, 4)
        self.labelindent_min_vbrace_open = QtWidgets.QLabel(self.tr("When indenting after virtual brace open and newline add further spaces to reach this minimum indent.")+' '+self.tr("\n"))
        self.labelindent_min_vbrace_open.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_min_vbrace_open, 255, 0, 1, 5)
        if self.tr("code_indent_min_vbrace_open")!="code_indent_min_vbrace_open":
            self.codeindent_min_vbrace_open = QtWidgets.QLabel(self.tr("code_indent_min_vbrace_open"))
            self.codeindent_min_vbrace_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_min_vbrace_open, 256, 0, 1, 5)
        self.nameindent_min_vbrace_open = QtWidgets.QLabel("indent_min_vbrace_open")
        self.nameindent_min_vbrace_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_min_vbrace_open, 257, 0)
        self.indent_min_vbrace_open = QtWidgets.QSpinBox()
        self.indent_min_vbrace_open.setMinimum(0)
        self.indent_min_vbrace_open.setMaximum(100)
        self.indent_min_vbrace_open.setValue(0)
        self.lt3.addWidget(self.indent_min_vbrace_open, 257, 1, 1, 4)
        self.labelindent_vbrace_open_on_tabstop = QtWidgets.QLabel(self.tr("Whether to add further spaces after regular indent to reach next tabstop when identing after virtual brace open and newline.")+' '+self.tr("\n"))
        self.labelindent_vbrace_open_on_tabstop.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_vbrace_open_on_tabstop, 258, 0, 1, 5)
        if self.tr("code_indent_vbrace_open_on_tabstop")!="code_indent_vbrace_open_on_tabstop":
            self.codeindent_vbrace_open_on_tabstop = QtWidgets.QLabel(self.tr("code_indent_vbrace_open_on_tabstop"))
            self.codeindent_vbrace_open_on_tabstop.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_vbrace_open_on_tabstop, 259, 0, 1, 5)
        self.nameindent_vbrace_open_on_tabstop = QtWidgets.QLabel("indent_vbrace_open_on_tabstop")
        self.nameindent_vbrace_open_on_tabstop.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_vbrace_open_on_tabstop, 260, 0)
        self.indent_vbrace_open_on_tabstop = QtWidgets.QComboBox()
        self.indent_vbrace_open_on_tabstop.addItems(['true','false'])
        self.indent_vbrace_open_on_tabstop.setCurrentText('false')
        self.lt3.addWidget(self.indent_vbrace_open_on_tabstop, 260, 1, 1, 4)
        self.labelindent_token_after_brace = QtWidgets.QLabel(self.tr("How to indent after a brace followed by another token (not a newline). true:  indent all contained lines to match the token false: indent all contained lines to match the brace")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelindent_token_after_brace.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_token_after_brace, 261, 0, 1, 5)
        if self.tr("code_indent_token_after_brace")!="code_indent_token_after_brace":
            self.codeindent_token_after_brace = QtWidgets.QLabel(self.tr("code_indent_token_after_brace"))
            self.codeindent_token_after_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_token_after_brace, 262, 0, 1, 5)
        self.nameindent_token_after_brace = QtWidgets.QLabel("indent_token_after_brace")
        self.nameindent_token_after_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_token_after_brace, 263, 0)
        self.indent_token_after_brace = QtWidgets.QComboBox()
        self.indent_token_after_brace.addItems(['true','false'])
        self.indent_token_after_brace.setCurrentText('true')
        self.lt3.addWidget(self.indent_token_after_brace, 263, 1, 1, 4)
        self.labelindent_cpp_lambda_body = QtWidgets.QLabel(self.tr("Whether to indent the body of a C++11 lambda.")+' '+self.tr("\n"))
        self.labelindent_cpp_lambda_body.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_cpp_lambda_body, 264, 0, 1, 5)
        if self.tr("code_indent_cpp_lambda_body")!="code_indent_cpp_lambda_body":
            self.codeindent_cpp_lambda_body = QtWidgets.QLabel(self.tr("code_indent_cpp_lambda_body"))
            self.codeindent_cpp_lambda_body.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_cpp_lambda_body, 265, 0, 1, 5)
        self.nameindent_cpp_lambda_body = QtWidgets.QLabel("indent_cpp_lambda_body")
        self.nameindent_cpp_lambda_body.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_cpp_lambda_body, 266, 0)
        self.indent_cpp_lambda_body = QtWidgets.QComboBox()
        self.indent_cpp_lambda_body.addItems(['true','false'])
        self.indent_cpp_lambda_body.setCurrentText('false')
        self.lt3.addWidget(self.indent_cpp_lambda_body, 266, 1, 1, 4)
        self.labelindent_compound_literal_return = QtWidgets.QLabel(self.tr("How to indent compound literals that are being returned. true: add both the indent from return & the compound literal open brace (ie:       2 indent levels) false: only indent 1 level, don't add the indent for the open brace, only add        the indent for the return.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelindent_compound_literal_return.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_compound_literal_return, 267, 0, 1, 5)
        if self.tr("code_indent_compound_literal_return")!="code_indent_compound_literal_return":
            self.codeindent_compound_literal_return = QtWidgets.QLabel(self.tr("code_indent_compound_literal_return"))
            self.codeindent_compound_literal_return.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_compound_literal_return, 268, 0, 1, 5)
        self.nameindent_compound_literal_return = QtWidgets.QLabel("indent_compound_literal_return")
        self.nameindent_compound_literal_return.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_compound_literal_return, 269, 0)
        self.indent_compound_literal_return = QtWidgets.QComboBox()
        self.indent_compound_literal_return.addItems(['true','false'])
        self.indent_compound_literal_return.setCurrentText('true')
        self.lt3.addWidget(self.indent_compound_literal_return, 269, 1, 1, 4)
        self.labelindent_using_block = QtWidgets.QLabel(self.tr("(C#) Whether to indent a 'using' block if no braces are used.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelindent_using_block.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_using_block, 270, 0, 1, 5)
        if self.tr("code_indent_using_block")!="code_indent_using_block":
            self.codeindent_using_block = QtWidgets.QLabel(self.tr("code_indent_using_block"))
            self.codeindent_using_block.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_using_block, 271, 0, 1, 5)
        self.nameindent_using_block = QtWidgets.QLabel("indent_using_block")
        self.nameindent_using_block.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_using_block, 272, 0)
        self.indent_using_block = QtWidgets.QComboBox()
        self.indent_using_block.addItems(['true','false'])
        self.indent_using_block.setCurrentText('true')
        self.lt3.addWidget(self.indent_using_block, 272, 1, 1, 4)
        self.labelindent_ternary_operator = QtWidgets.QLabel(self.tr("How to indent the continuation of ternary operator.")+' '+self.tr("\n")+' '+self.tr("0: Off (default) 1: When the `if_false` is a continuation, indent it under `if_false` 2: When the `:` is a continuation, indent it under `?`")+' '+self.tr("\n"))
        self.labelindent_ternary_operator.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_ternary_operator, 273, 0, 1, 5)
        if self.tr("code_indent_ternary_operator")!="code_indent_ternary_operator":
            self.codeindent_ternary_operator = QtWidgets.QLabel(self.tr("code_indent_ternary_operator"))
            self.codeindent_ternary_operator.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_ternary_operator, 274, 0, 1, 5)
        self.nameindent_ternary_operator = QtWidgets.QLabel("indent_ternary_operator")
        self.nameindent_ternary_operator.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_ternary_operator, 275, 0)
        self.indent_ternary_operator = QtWidgets.QSpinBox()
        self.indent_ternary_operator.setMinimum(0)
        self.indent_ternary_operator.setMaximum(100)
        self.indent_ternary_operator.setValue(0)
        self.lt3.addWidget(self.indent_ternary_operator, 275, 1, 1, 4)
        self.labelindent_inside_ternary_operator = QtWidgets.QLabel(self.tr("Whether to indent the statments inside ternary operator.")+' '+self.tr("\n"))
        self.labelindent_inside_ternary_operator.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_inside_ternary_operator, 276, 0, 1, 5)
        if self.tr("code_indent_inside_ternary_operator")!="code_indent_inside_ternary_operator":
            self.codeindent_inside_ternary_operator = QtWidgets.QLabel(self.tr("code_indent_inside_ternary_operator"))
            self.codeindent_inside_ternary_operator.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_inside_ternary_operator, 277, 0, 1, 5)
        self.nameindent_inside_ternary_operator = QtWidgets.QLabel("indent_inside_ternary_operator")
        self.nameindent_inside_ternary_operator.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_inside_ternary_operator, 278, 0)
        self.indent_inside_ternary_operator = QtWidgets.QComboBox()
        self.indent_inside_ternary_operator.addItems(['true','false'])
        self.indent_inside_ternary_operator.setCurrentText('false')
        self.lt3.addWidget(self.indent_inside_ternary_operator, 278, 1, 1, 4)
        self.labelindent_off_after_return = QtWidgets.QLabel(self.tr("If true, the indentation of the chunks after a `return` sequence will be set at return indentation column.")+' '+self.tr("\n"))
        self.labelindent_off_after_return.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_off_after_return, 279, 0, 1, 5)
        if self.tr("code_indent_off_after_return")!="code_indent_off_after_return":
            self.codeindent_off_after_return = QtWidgets.QLabel(self.tr("code_indent_off_after_return"))
            self.codeindent_off_after_return.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_off_after_return, 280, 0, 1, 5)
        self.nameindent_off_after_return = QtWidgets.QLabel("indent_off_after_return")
        self.nameindent_off_after_return.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_off_after_return, 281, 0)
        self.indent_off_after_return = QtWidgets.QComboBox()
        self.indent_off_after_return.addItems(['true','false'])
        self.indent_off_after_return.setCurrentText('false')
        self.lt3.addWidget(self.indent_off_after_return, 281, 1, 1, 4)
        self.labelindent_off_after_return_new = QtWidgets.QLabel(self.tr("If true, the indentation of the chunks after a `return new` sequence will be set at return indentation column.")+' '+self.tr("\n"))
        self.labelindent_off_after_return_new.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_off_after_return_new, 282, 0, 1, 5)
        if self.tr("code_indent_off_after_return_new")!="code_indent_off_after_return_new":
            self.codeindent_off_after_return_new = QtWidgets.QLabel(self.tr("code_indent_off_after_return_new"))
            self.codeindent_off_after_return_new.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_off_after_return_new, 283, 0, 1, 5)
        self.nameindent_off_after_return_new = QtWidgets.QLabel("indent_off_after_return_new")
        self.nameindent_off_after_return_new.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_off_after_return_new, 284, 0)
        self.indent_off_after_return_new = QtWidgets.QComboBox()
        self.indent_off_after_return_new.addItems(['true','false'])
        self.indent_off_after_return_new.setCurrentText('false')
        self.lt3.addWidget(self.indent_off_after_return_new, 284, 1, 1, 4)
        self.labelindent_single_after_return = QtWidgets.QLabel(self.tr("If true, the tokens after return are indented with regular single indentation.")+' '+self.tr("By default (false) the indentation is after the return token.")+' '+self.tr("\n"))
        self.labelindent_single_after_return.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_single_after_return, 285, 0, 1, 5)
        if self.tr("code_indent_single_after_return")!="code_indent_single_after_return":
            self.codeindent_single_after_return = QtWidgets.QLabel(self.tr("code_indent_single_after_return"))
            self.codeindent_single_after_return.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_single_after_return, 286, 0, 1, 5)
        self.nameindent_single_after_return = QtWidgets.QLabel("indent_single_after_return")
        self.nameindent_single_after_return.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_single_after_return, 287, 0)
        self.indent_single_after_return = QtWidgets.QComboBox()
        self.indent_single_after_return.addItems(['true','false'])
        self.indent_single_after_return.setCurrentText('false')
        self.lt3.addWidget(self.indent_single_after_return, 287, 1, 1, 4)
        self.labelindent_ignore_asm_block = QtWidgets.QLabel(self.tr("Whether to ignore indent and alignment for 'asm' blocks (i.e. assume they have their own indentation).")+' '+self.tr("\n"))
        self.labelindent_ignore_asm_block.setWordWrap(True)
        self.lt3.addWidget(self.labelindent_ignore_asm_block, 288, 0, 1, 5)
        if self.tr("code_indent_ignore_asm_block")!="code_indent_ignore_asm_block":
            self.codeindent_ignore_asm_block = QtWidgets.QLabel(self.tr("code_indent_ignore_asm_block"))
            self.codeindent_ignore_asm_block.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt3.addWidget(self.codeindent_ignore_asm_block, 289, 0, 1, 5)
        self.nameindent_ignore_asm_block = QtWidgets.QLabel("indent_ignore_asm_block")
        self.nameindent_ignore_asm_block.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt3.addWidget(self.nameindent_ignore_asm_block, 290, 0)
        self.indent_ignore_asm_block = QtWidgets.QComboBox()
        self.indent_ignore_asm_block.addItems(['true','false'])
        self.indent_ignore_asm_block.setCurrentText('false')
        self.lt3.addWidget(self.indent_ignore_asm_block, 290, 1, 1, 4)
        self.widget4 = QtWidgets.QWidget()
        self.addItem(self.widget4, self.tr("Newline adding and removing options"))
        self.lt4 = QtWidgets.QGridLayout(self.widget4)
        self.labelnl_collapse_empty_body = QtWidgets.QLabel(self.tr("Whether to collapse empty blocks between '{' and '}'.")+' '+self.tr("\n"))
        self.labelnl_collapse_empty_body.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_collapse_empty_body, 0, 0, 1, 5)
        if self.tr("code_nl_collapse_empty_body")!="code_nl_collapse_empty_body":
            self.codenl_collapse_empty_body = QtWidgets.QLabel(self.tr("code_nl_collapse_empty_body"))
            self.codenl_collapse_empty_body.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_collapse_empty_body, 1, 0, 1, 5)
        self.namenl_collapse_empty_body = QtWidgets.QLabel("nl_collapse_empty_body")
        self.namenl_collapse_empty_body.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_collapse_empty_body, 2, 0)
        self.nl_collapse_empty_body = QtWidgets.QComboBox()
        self.nl_collapse_empty_body.addItems(['true','false'])
        self.nl_collapse_empty_body.setCurrentText('false')
        self.lt4.addWidget(self.nl_collapse_empty_body, 2, 1, 1, 4)
        self.labelnl_assign_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'.")+' '+self.tr("\n"))
        self.labelnl_assign_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_assign_leave_one_liners, 3, 0, 1, 5)
        if self.tr("code_nl_assign_leave_one_liners")!="code_nl_assign_leave_one_liners":
            self.codenl_assign_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_assign_leave_one_liners"))
            self.codenl_assign_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_assign_leave_one_liners, 4, 0, 1, 5)
        self.namenl_assign_leave_one_liners = QtWidgets.QLabel("nl_assign_leave_one_liners")
        self.namenl_assign_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_assign_leave_one_liners, 5, 0)
        self.nl_assign_leave_one_liners = QtWidgets.QComboBox()
        self.nl_assign_leave_one_liners.addItems(['true','false'])
        self.nl_assign_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_assign_leave_one_liners, 5, 1, 1, 4)
        self.labelnl_class_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line braced statements inside a 'class xx { }' body.")+' '+self.tr("\n"))
        self.labelnl_class_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_class_leave_one_liners, 6, 0, 1, 5)
        if self.tr("code_nl_class_leave_one_liners")!="code_nl_class_leave_one_liners":
            self.codenl_class_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_class_leave_one_liners"))
            self.codenl_class_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_class_leave_one_liners, 7, 0, 1, 5)
        self.namenl_class_leave_one_liners = QtWidgets.QLabel("nl_class_leave_one_liners")
        self.namenl_class_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_class_leave_one_liners, 8, 0)
        self.nl_class_leave_one_liners = QtWidgets.QComboBox()
        self.nl_class_leave_one_liners.addItems(['true','false'])
        self.nl_class_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_class_leave_one_liners, 8, 1, 1, 4)
        self.labelnl_enum_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line enums, as in 'enum foo { BAR = 15 };'")+' '+self.tr("\n"))
        self.labelnl_enum_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_enum_leave_one_liners, 9, 0, 1, 5)
        if self.tr("code_nl_enum_leave_one_liners")!="code_nl_enum_leave_one_liners":
            self.codenl_enum_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_enum_leave_one_liners"))
            self.codenl_enum_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_enum_leave_one_liners, 10, 0, 1, 5)
        self.namenl_enum_leave_one_liners = QtWidgets.QLabel("nl_enum_leave_one_liners")
        self.namenl_enum_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_enum_leave_one_liners, 11, 0)
        self.nl_enum_leave_one_liners = QtWidgets.QComboBox()
        self.nl_enum_leave_one_liners.addItems(['true','false'])
        self.nl_enum_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_enum_leave_one_liners, 11, 1, 1, 4)
        self.labelnl_getset_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line get or set functions.")+' '+self.tr("\n"))
        self.labelnl_getset_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_getset_leave_one_liners, 12, 0, 1, 5)
        if self.tr("code_nl_getset_leave_one_liners")!="code_nl_getset_leave_one_liners":
            self.codenl_getset_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_getset_leave_one_liners"))
            self.codenl_getset_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_getset_leave_one_liners, 13, 0, 1, 5)
        self.namenl_getset_leave_one_liners = QtWidgets.QLabel("nl_getset_leave_one_liners")
        self.namenl_getset_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_getset_leave_one_liners, 14, 0)
        self.nl_getset_leave_one_liners = QtWidgets.QComboBox()
        self.nl_getset_leave_one_liners.addItems(['true','false'])
        self.nl_getset_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_getset_leave_one_liners, 14, 1, 1, 4)
        self.labelnl_cs_property_leave_one_liners = QtWidgets.QLabel(self.tr("(C#) Don't split one-line property get or set functions.")+' '+self.tr("\n"))
        self.labelnl_cs_property_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_cs_property_leave_one_liners, 15, 0, 1, 5)
        if self.tr("code_nl_cs_property_leave_one_liners")!="code_nl_cs_property_leave_one_liners":
            self.codenl_cs_property_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_cs_property_leave_one_liners"))
            self.codenl_cs_property_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_cs_property_leave_one_liners, 16, 0, 1, 5)
        self.namenl_cs_property_leave_one_liners = QtWidgets.QLabel("nl_cs_property_leave_one_liners")
        self.namenl_cs_property_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_cs_property_leave_one_liners, 17, 0)
        self.nl_cs_property_leave_one_liners = QtWidgets.QComboBox()
        self.nl_cs_property_leave_one_liners.addItems(['true','false'])
        self.nl_cs_property_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_cs_property_leave_one_liners, 17, 1, 1, 4)
        self.labelnl_func_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line function definitions, as in 'int foo() { return 0; }'. might modify nl_func_type_name")+' '+self.tr("\n"))
        self.labelnl_func_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_leave_one_liners, 18, 0, 1, 5)
        if self.tr("code_nl_func_leave_one_liners")!="code_nl_func_leave_one_liners":
            self.codenl_func_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_func_leave_one_liners"))
            self.codenl_func_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_leave_one_liners, 19, 0, 1, 5)
        self.namenl_func_leave_one_liners = QtWidgets.QLabel("nl_func_leave_one_liners")
        self.namenl_func_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_leave_one_liners, 20, 0)
        self.nl_func_leave_one_liners = QtWidgets.QComboBox()
        self.nl_func_leave_one_liners.addItems(['true','false'])
        self.nl_func_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_leave_one_liners, 20, 1, 1, 4)
        self.labelnl_cpp_lambda_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line C++11 lambdas, as in '[]() { return 0; }'.")+' '+self.tr("\n"))
        self.labelnl_cpp_lambda_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_cpp_lambda_leave_one_liners, 21, 0, 1, 5)
        if self.tr("code_nl_cpp_lambda_leave_one_liners")!="code_nl_cpp_lambda_leave_one_liners":
            self.codenl_cpp_lambda_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_cpp_lambda_leave_one_liners"))
            self.codenl_cpp_lambda_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_cpp_lambda_leave_one_liners, 22, 0, 1, 5)
        self.namenl_cpp_lambda_leave_one_liners = QtWidgets.QLabel("nl_cpp_lambda_leave_one_liners")
        self.namenl_cpp_lambda_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_cpp_lambda_leave_one_liners, 23, 0)
        self.nl_cpp_lambda_leave_one_liners = QtWidgets.QComboBox()
        self.nl_cpp_lambda_leave_one_liners.addItems(['true','false'])
        self.nl_cpp_lambda_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_cpp_lambda_leave_one_liners, 23, 1, 1, 4)
        self.labelnl_if_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line if/else statements, as in 'if(...) b++;'.")+' '+self.tr("\n"))
        self.labelnl_if_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_if_leave_one_liners, 24, 0, 1, 5)
        if self.tr("code_nl_if_leave_one_liners")!="code_nl_if_leave_one_liners":
            self.codenl_if_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_if_leave_one_liners"))
            self.codenl_if_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_if_leave_one_liners, 25, 0, 1, 5)
        self.namenl_if_leave_one_liners = QtWidgets.QLabel("nl_if_leave_one_liners")
        self.namenl_if_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_if_leave_one_liners, 26, 0)
        self.nl_if_leave_one_liners = QtWidgets.QComboBox()
        self.nl_if_leave_one_liners.addItems(['true','false'])
        self.nl_if_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_if_leave_one_liners, 26, 1, 1, 4)
        self.labelnl_while_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line while statements, as in 'while(...) b++;'.")+' '+self.tr("\n"))
        self.labelnl_while_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_while_leave_one_liners, 27, 0, 1, 5)
        if self.tr("code_nl_while_leave_one_liners")!="code_nl_while_leave_one_liners":
            self.codenl_while_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_while_leave_one_liners"))
            self.codenl_while_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_while_leave_one_liners, 28, 0, 1, 5)
        self.namenl_while_leave_one_liners = QtWidgets.QLabel("nl_while_leave_one_liners")
        self.namenl_while_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_while_leave_one_liners, 29, 0)
        self.nl_while_leave_one_liners = QtWidgets.QComboBox()
        self.nl_while_leave_one_liners.addItems(['true','false'])
        self.nl_while_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_while_leave_one_liners, 29, 1, 1, 4)
        self.labelnl_for_leave_one_liners = QtWidgets.QLabel(self.tr("Don't split one-line for statements, as in 'for(...) b++;'.")+' '+self.tr("\n"))
        self.labelnl_for_leave_one_liners.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_for_leave_one_liners, 30, 0, 1, 5)
        if self.tr("code_nl_for_leave_one_liners")!="code_nl_for_leave_one_liners":
            self.codenl_for_leave_one_liners = QtWidgets.QLabel(self.tr("code_nl_for_leave_one_liners"))
            self.codenl_for_leave_one_liners.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_for_leave_one_liners, 31, 0, 1, 5)
        self.namenl_for_leave_one_liners = QtWidgets.QLabel("nl_for_leave_one_liners")
        self.namenl_for_leave_one_liners.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_for_leave_one_liners, 32, 0)
        self.nl_for_leave_one_liners = QtWidgets.QComboBox()
        self.nl_for_leave_one_liners.addItems(['true','false'])
        self.nl_for_leave_one_liners.setCurrentText('false')
        self.lt4.addWidget(self.nl_for_leave_one_liners, 32, 1, 1, 4)
        self.labelnl_oc_msg_leave_one_liner = QtWidgets.QLabel(self.tr("(OC) Don't split one-line Objective-C messages.")+' '+self.tr("\n"))
        self.labelnl_oc_msg_leave_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_msg_leave_one_liner, 33, 0, 1, 5)
        if self.tr("code_nl_oc_msg_leave_one_liner")!="code_nl_oc_msg_leave_one_liner":
            self.codenl_oc_msg_leave_one_liner = QtWidgets.QLabel(self.tr("code_nl_oc_msg_leave_one_liner"))
            self.codenl_oc_msg_leave_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_msg_leave_one_liner, 34, 0, 1, 5)
        self.namenl_oc_msg_leave_one_liner = QtWidgets.QLabel("nl_oc_msg_leave_one_liner")
        self.namenl_oc_msg_leave_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_msg_leave_one_liner, 35, 0)
        self.nl_oc_msg_leave_one_liner = QtWidgets.QComboBox()
        self.nl_oc_msg_leave_one_liner.addItems(['true','false'])
        self.nl_oc_msg_leave_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_oc_msg_leave_one_liner, 35, 1, 1, 4)
        self.labelnl_oc_mdef_brace = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between method declaration and '{'.")+' '+self.tr("\n"))
        self.labelnl_oc_mdef_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_mdef_brace, 36, 0, 1, 5)
        if self.tr("code_nl_oc_mdef_brace")!="code_nl_oc_mdef_brace":
            self.codenl_oc_mdef_brace = QtWidgets.QLabel(self.tr("code_nl_oc_mdef_brace"))
            self.codenl_oc_mdef_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_mdef_brace, 37, 0, 1, 5)
        self.namenl_oc_mdef_brace = QtWidgets.QLabel("nl_oc_mdef_brace")
        self.namenl_oc_mdef_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_mdef_brace, 38, 0)
        self.nl_oc_mdef_brace = QtWidgets.QComboBox()
        self.nl_oc_mdef_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_mdef_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_mdef_brace, 38, 1, 1, 4)
        self.labelnl_oc_block_brace = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between Objective-C block signature and '{'.")+' '+self.tr("\n"))
        self.labelnl_oc_block_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_block_brace, 39, 0, 1, 5)
        if self.tr("code_nl_oc_block_brace")!="code_nl_oc_block_brace":
            self.codenl_oc_block_brace = QtWidgets.QLabel(self.tr("code_nl_oc_block_brace"))
            self.codenl_oc_block_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_block_brace, 40, 0, 1, 5)
        self.namenl_oc_block_brace = QtWidgets.QLabel("nl_oc_block_brace")
        self.namenl_oc_block_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_block_brace, 41, 0)
        self.nl_oc_block_brace = QtWidgets.QComboBox()
        self.nl_oc_block_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_block_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_block_brace, 41, 1, 1, 4)
        self.labelnl_oc_before_interface = QtWidgets.QLabel(self.tr("(OC) Add or remove blank line before '@interface' statement.")+' '+self.tr("\n"))
        self.labelnl_oc_before_interface.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_before_interface, 42, 0, 1, 5)
        if self.tr("code_nl_oc_before_interface")!="code_nl_oc_before_interface":
            self.codenl_oc_before_interface = QtWidgets.QLabel(self.tr("code_nl_oc_before_interface"))
            self.codenl_oc_before_interface.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_before_interface, 43, 0, 1, 5)
        self.namenl_oc_before_interface = QtWidgets.QLabel("nl_oc_before_interface")
        self.namenl_oc_before_interface.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_before_interface, 44, 0)
        self.nl_oc_before_interface = QtWidgets.QComboBox()
        self.nl_oc_before_interface.addItems(['ignore','add','remove','force'])
        self.nl_oc_before_interface.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_before_interface, 44, 1, 1, 4)
        self.labelnl_oc_before_implementation = QtWidgets.QLabel(self.tr("(OC) Add or remove blank line before '@implementation' statement.")+' '+self.tr("\n"))
        self.labelnl_oc_before_implementation.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_before_implementation, 45, 0, 1, 5)
        if self.tr("code_nl_oc_before_implementation")!="code_nl_oc_before_implementation":
            self.codenl_oc_before_implementation = QtWidgets.QLabel(self.tr("code_nl_oc_before_implementation"))
            self.codenl_oc_before_implementation.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_before_implementation, 46, 0, 1, 5)
        self.namenl_oc_before_implementation = QtWidgets.QLabel("nl_oc_before_implementation")
        self.namenl_oc_before_implementation.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_before_implementation, 47, 0)
        self.nl_oc_before_implementation = QtWidgets.QComboBox()
        self.nl_oc_before_implementation.addItems(['ignore','add','remove','force'])
        self.nl_oc_before_implementation.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_before_implementation, 47, 1, 1, 4)
        self.labelnl_oc_before_end = QtWidgets.QLabel(self.tr("(OC) Add or remove blank line before '@end' statement.")+' '+self.tr("\n"))
        self.labelnl_oc_before_end.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_before_end, 48, 0, 1, 5)
        if self.tr("code_nl_oc_before_end")!="code_nl_oc_before_end":
            self.codenl_oc_before_end = QtWidgets.QLabel(self.tr("code_nl_oc_before_end"))
            self.codenl_oc_before_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_before_end, 49, 0, 1, 5)
        self.namenl_oc_before_end = QtWidgets.QLabel("nl_oc_before_end")
        self.namenl_oc_before_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_before_end, 50, 0)
        self.nl_oc_before_end = QtWidgets.QComboBox()
        self.nl_oc_before_end.addItems(['ignore','add','remove','force'])
        self.nl_oc_before_end.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_before_end, 50, 1, 1, 4)
        self.labelnl_oc_interface_brace = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between '@interface' and '{'.")+' '+self.tr("\n"))
        self.labelnl_oc_interface_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_interface_brace, 51, 0, 1, 5)
        if self.tr("code_nl_oc_interface_brace")!="code_nl_oc_interface_brace":
            self.codenl_oc_interface_brace = QtWidgets.QLabel(self.tr("code_nl_oc_interface_brace"))
            self.codenl_oc_interface_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_interface_brace, 52, 0, 1, 5)
        self.namenl_oc_interface_brace = QtWidgets.QLabel("nl_oc_interface_brace")
        self.namenl_oc_interface_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_interface_brace, 53, 0)
        self.nl_oc_interface_brace = QtWidgets.QComboBox()
        self.nl_oc_interface_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_interface_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_interface_brace, 53, 1, 1, 4)
        self.labelnl_oc_implementation_brace = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between '@implementation' and '{'.")+' '+self.tr("\n"))
        self.labelnl_oc_implementation_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_implementation_brace, 54, 0, 1, 5)
        if self.tr("code_nl_oc_implementation_brace")!="code_nl_oc_implementation_brace":
            self.codenl_oc_implementation_brace = QtWidgets.QLabel(self.tr("code_nl_oc_implementation_brace"))
            self.codenl_oc_implementation_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_implementation_brace, 55, 0, 1, 5)
        self.namenl_oc_implementation_brace = QtWidgets.QLabel("nl_oc_implementation_brace")
        self.namenl_oc_implementation_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_implementation_brace, 56, 0)
        self.nl_oc_implementation_brace = QtWidgets.QComboBox()
        self.nl_oc_implementation_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_implementation_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_implementation_brace, 56, 1, 1, 4)
        self.labelnl_start_of_file = QtWidgets.QLabel(self.tr("Add or remove newlines at the start of the file.")+' '+self.tr("\n"))
        self.labelnl_start_of_file.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_start_of_file, 57, 0, 1, 5)
        if self.tr("code_nl_start_of_file")!="code_nl_start_of_file":
            self.codenl_start_of_file = QtWidgets.QLabel(self.tr("code_nl_start_of_file"))
            self.codenl_start_of_file.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_start_of_file, 58, 0, 1, 5)
        self.namenl_start_of_file = QtWidgets.QLabel("nl_start_of_file")
        self.namenl_start_of_file.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_start_of_file, 59, 0)
        self.nl_start_of_file = QtWidgets.QComboBox()
        self.nl_start_of_file.addItems(['ignore','add','remove','force'])
        self.nl_start_of_file.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_start_of_file, 59, 1, 1, 4)
        self.labelnl_start_of_file_min = QtWidgets.QLabel(self.tr("The minimum number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force').")+' '+self.tr("\n"))
        self.labelnl_start_of_file_min.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_start_of_file_min, 60, 0, 1, 5)
        if self.tr("code_nl_start_of_file_min")!="code_nl_start_of_file_min":
            self.codenl_start_of_file_min = QtWidgets.QLabel(self.tr("code_nl_start_of_file_min"))
            self.codenl_start_of_file_min.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_start_of_file_min, 61, 0, 1, 5)
        self.namenl_start_of_file_min = QtWidgets.QLabel("nl_start_of_file_min")
        self.namenl_start_of_file_min.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_start_of_file_min, 62, 0)
        self.nl_start_of_file_min = QtWidgets.QSpinBox()
        self.nl_start_of_file_min.setMinimum(0)
        self.nl_start_of_file_min.setMaximum(100)
        self.nl_start_of_file_min.setValue(0)
        self.lt4.addWidget(self.nl_start_of_file_min, 62, 1, 1, 4)
        self.labelnl_end_of_file = QtWidgets.QLabel(self.tr("Add or remove newline at the end of the file.")+' '+self.tr("\n"))
        self.labelnl_end_of_file.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_end_of_file, 63, 0, 1, 5)
        if self.tr("code_nl_end_of_file")!="code_nl_end_of_file":
            self.codenl_end_of_file = QtWidgets.QLabel(self.tr("code_nl_end_of_file"))
            self.codenl_end_of_file.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_end_of_file, 64, 0, 1, 5)
        self.namenl_end_of_file = QtWidgets.QLabel("nl_end_of_file")
        self.namenl_end_of_file.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_end_of_file, 65, 0)
        self.nl_end_of_file = QtWidgets.QComboBox()
        self.nl_end_of_file.addItems(['ignore','add','remove','force'])
        self.nl_end_of_file.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_end_of_file, 65, 1, 1, 4)
        self.labelnl_end_of_file_min = QtWidgets.QLabel(self.tr("The minimum number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force').")+' '+self.tr("\n"))
        self.labelnl_end_of_file_min.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_end_of_file_min, 66, 0, 1, 5)
        if self.tr("code_nl_end_of_file_min")!="code_nl_end_of_file_min":
            self.codenl_end_of_file_min = QtWidgets.QLabel(self.tr("code_nl_end_of_file_min"))
            self.codenl_end_of_file_min.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_end_of_file_min, 67, 0, 1, 5)
        self.namenl_end_of_file_min = QtWidgets.QLabel("nl_end_of_file_min")
        self.namenl_end_of_file_min.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_end_of_file_min, 68, 0)
        self.nl_end_of_file_min = QtWidgets.QSpinBox()
        self.nl_end_of_file_min.setMinimum(0)
        self.nl_end_of_file_min.setMaximum(100)
        self.nl_end_of_file_min.setValue(0)
        self.lt4.addWidget(self.nl_end_of_file_min, 68, 1, 1, 4)
        self.labelnl_assign_brace = QtWidgets.QLabel(self.tr("Add or remove newline between '=' and '{'.")+' '+self.tr("\n"))
        self.labelnl_assign_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_assign_brace, 69, 0, 1, 5)
        if self.tr("code_nl_assign_brace")!="code_nl_assign_brace":
            self.codenl_assign_brace = QtWidgets.QLabel(self.tr("code_nl_assign_brace"))
            self.codenl_assign_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_assign_brace, 70, 0, 1, 5)
        self.namenl_assign_brace = QtWidgets.QLabel("nl_assign_brace")
        self.namenl_assign_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_assign_brace, 71, 0)
        self.nl_assign_brace = QtWidgets.QComboBox()
        self.nl_assign_brace.addItems(['ignore','add','remove','force'])
        self.nl_assign_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_assign_brace, 71, 1, 1, 4)
        self.labelnl_assign_square = QtWidgets.QLabel(self.tr("(D) Add or remove newline between '=' and '['.")+' '+self.tr("\n"))
        self.labelnl_assign_square.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_assign_square, 72, 0, 1, 5)
        if self.tr("code_nl_assign_square")!="code_nl_assign_square":
            self.codenl_assign_square = QtWidgets.QLabel(self.tr("code_nl_assign_square"))
            self.codenl_assign_square.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_assign_square, 73, 0, 1, 5)
        self.namenl_assign_square = QtWidgets.QLabel("nl_assign_square")
        self.namenl_assign_square.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_assign_square, 74, 0)
        self.nl_assign_square = QtWidgets.QComboBox()
        self.nl_assign_square.addItems(['ignore','add','remove','force'])
        self.nl_assign_square.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_assign_square, 74, 1, 1, 4)
        self.labelnl_tsquare_brace = QtWidgets.QLabel(self.tr("Add or remove newline between '[]' and '{'.")+' '+self.tr("\n"))
        self.labelnl_tsquare_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_tsquare_brace, 75, 0, 1, 5)
        if self.tr("code_nl_tsquare_brace")!="code_nl_tsquare_brace":
            self.codenl_tsquare_brace = QtWidgets.QLabel(self.tr("code_nl_tsquare_brace"))
            self.codenl_tsquare_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_tsquare_brace, 76, 0, 1, 5)
        self.namenl_tsquare_brace = QtWidgets.QLabel("nl_tsquare_brace")
        self.namenl_tsquare_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_tsquare_brace, 77, 0)
        self.nl_tsquare_brace = QtWidgets.QComboBox()
        self.nl_tsquare_brace.addItems(['ignore','add','remove','force'])
        self.nl_tsquare_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_tsquare_brace, 77, 1, 1, 4)
        self.labelnl_after_square_assign = QtWidgets.QLabel(self.tr("(D) Add or remove newline after '= ['.")+' '+self.tr("Will also affect the newline before the ']'.")+' '+self.tr("\n"))
        self.labelnl_after_square_assign.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_square_assign, 78, 0, 1, 5)
        if self.tr("code_nl_after_square_assign")!="code_nl_after_square_assign":
            self.codenl_after_square_assign = QtWidgets.QLabel(self.tr("code_nl_after_square_assign"))
            self.codenl_after_square_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_square_assign, 79, 0, 1, 5)
        self.namenl_after_square_assign = QtWidgets.QLabel("nl_after_square_assign")
        self.namenl_after_square_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_square_assign, 80, 0)
        self.nl_after_square_assign = QtWidgets.QComboBox()
        self.nl_after_square_assign.addItems(['ignore','add','remove','force'])
        self.nl_after_square_assign.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_square_assign, 80, 1, 1, 4)
        self.labelnl_fcall_brace = QtWidgets.QLabel(self.tr("Add or remove newline between a function call's ')' and '{', as in 'list_for_each(item, &list) { }'.")+' '+self.tr("\n"))
        self.labelnl_fcall_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_fcall_brace, 81, 0, 1, 5)
        if self.tr("code_nl_fcall_brace")!="code_nl_fcall_brace":
            self.codenl_fcall_brace = QtWidgets.QLabel(self.tr("code_nl_fcall_brace"))
            self.codenl_fcall_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_fcall_brace, 82, 0, 1, 5)
        self.namenl_fcall_brace = QtWidgets.QLabel("nl_fcall_brace")
        self.namenl_fcall_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_fcall_brace, 83, 0)
        self.nl_fcall_brace = QtWidgets.QComboBox()
        self.nl_fcall_brace.addItems(['ignore','add','remove','force'])
        self.nl_fcall_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_fcall_brace, 83, 1, 1, 4)
        self.labelnl_enum_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum' and '{'.")+' '+self.tr("\n"))
        self.labelnl_enum_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_enum_brace, 84, 0, 1, 5)
        if self.tr("code_nl_enum_brace")!="code_nl_enum_brace":
            self.codenl_enum_brace = QtWidgets.QLabel(self.tr("code_nl_enum_brace"))
            self.codenl_enum_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_enum_brace, 85, 0, 1, 5)
        self.namenl_enum_brace = QtWidgets.QLabel("nl_enum_brace")
        self.namenl_enum_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_enum_brace, 86, 0)
        self.nl_enum_brace = QtWidgets.QComboBox()
        self.nl_enum_brace.addItems(['ignore','add','remove','force'])
        self.nl_enum_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_brace, 86, 1, 1, 4)
        self.labelnl_enum_class = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum' and 'class'.")+' '+self.tr("\n"))
        self.labelnl_enum_class.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_enum_class, 87, 0, 1, 5)
        if self.tr("code_nl_enum_class")!="code_nl_enum_class":
            self.codenl_enum_class = QtWidgets.QLabel(self.tr("code_nl_enum_class"))
            self.codenl_enum_class.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_enum_class, 88, 0, 1, 5)
        self.namenl_enum_class = QtWidgets.QLabel("nl_enum_class")
        self.namenl_enum_class.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_enum_class, 89, 0)
        self.nl_enum_class = QtWidgets.QComboBox()
        self.nl_enum_class.addItems(['ignore','add','remove','force'])
        self.nl_enum_class.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_class, 89, 1, 1, 4)
        self.labelnl_enum_class_identifier = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum class' and the identifier.")+' '+self.tr("\n"))
        self.labelnl_enum_class_identifier.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_enum_class_identifier, 90, 0, 1, 5)
        if self.tr("code_nl_enum_class_identifier")!="code_nl_enum_class_identifier":
            self.codenl_enum_class_identifier = QtWidgets.QLabel(self.tr("code_nl_enum_class_identifier"))
            self.codenl_enum_class_identifier.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_enum_class_identifier, 91, 0, 1, 5)
        self.namenl_enum_class_identifier = QtWidgets.QLabel("nl_enum_class_identifier")
        self.namenl_enum_class_identifier.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_enum_class_identifier, 92, 0)
        self.nl_enum_class_identifier = QtWidgets.QComboBox()
        self.nl_enum_class_identifier.addItems(['ignore','add','remove','force'])
        self.nl_enum_class_identifier.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_class_identifier, 92, 1, 1, 4)
        self.labelnl_enum_identifier_colon = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum class' type and ':'.")+' '+self.tr("\n"))
        self.labelnl_enum_identifier_colon.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_enum_identifier_colon, 93, 0, 1, 5)
        if self.tr("code_nl_enum_identifier_colon")!="code_nl_enum_identifier_colon":
            self.codenl_enum_identifier_colon = QtWidgets.QLabel(self.tr("code_nl_enum_identifier_colon"))
            self.codenl_enum_identifier_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_enum_identifier_colon, 94, 0, 1, 5)
        self.namenl_enum_identifier_colon = QtWidgets.QLabel("nl_enum_identifier_colon")
        self.namenl_enum_identifier_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_enum_identifier_colon, 95, 0)
        self.nl_enum_identifier_colon = QtWidgets.QComboBox()
        self.nl_enum_identifier_colon.addItems(['ignore','add','remove','force'])
        self.nl_enum_identifier_colon.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_identifier_colon, 95, 1, 1, 4)
        self.labelnl_enum_colon_type = QtWidgets.QLabel(self.tr("Add or remove newline between 'enum class identifier :' and type.")+' '+self.tr("\n"))
        self.labelnl_enum_colon_type.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_enum_colon_type, 96, 0, 1, 5)
        if self.tr("code_nl_enum_colon_type")!="code_nl_enum_colon_type":
            self.codenl_enum_colon_type = QtWidgets.QLabel(self.tr("code_nl_enum_colon_type"))
            self.codenl_enum_colon_type.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_enum_colon_type, 97, 0, 1, 5)
        self.namenl_enum_colon_type = QtWidgets.QLabel("nl_enum_colon_type")
        self.namenl_enum_colon_type.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_enum_colon_type, 98, 0)
        self.nl_enum_colon_type = QtWidgets.QComboBox()
        self.nl_enum_colon_type.addItems(['ignore','add','remove','force'])
        self.nl_enum_colon_type.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_colon_type, 98, 1, 1, 4)
        self.labelnl_struct_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'struct and '{'.")+' '+self.tr("\n"))
        self.labelnl_struct_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_struct_brace, 99, 0, 1, 5)
        if self.tr("code_nl_struct_brace")!="code_nl_struct_brace":
            self.codenl_struct_brace = QtWidgets.QLabel(self.tr("code_nl_struct_brace"))
            self.codenl_struct_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_struct_brace, 100, 0, 1, 5)
        self.namenl_struct_brace = QtWidgets.QLabel("nl_struct_brace")
        self.namenl_struct_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_struct_brace, 101, 0)
        self.nl_struct_brace = QtWidgets.QComboBox()
        self.nl_struct_brace.addItems(['ignore','add','remove','force'])
        self.nl_struct_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_struct_brace, 101, 1, 1, 4)
        self.labelnl_union_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'union' and '{'.")+' '+self.tr("\n"))
        self.labelnl_union_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_union_brace, 102, 0, 1, 5)
        if self.tr("code_nl_union_brace")!="code_nl_union_brace":
            self.codenl_union_brace = QtWidgets.QLabel(self.tr("code_nl_union_brace"))
            self.codenl_union_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_union_brace, 103, 0, 1, 5)
        self.namenl_union_brace = QtWidgets.QLabel("nl_union_brace")
        self.namenl_union_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_union_brace, 104, 0)
        self.nl_union_brace = QtWidgets.QComboBox()
        self.nl_union_brace.addItems(['ignore','add','remove','force'])
        self.nl_union_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_union_brace, 104, 1, 1, 4)
        self.labelnl_if_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'if' and '{'.")+' '+self.tr("\n"))
        self.labelnl_if_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_if_brace, 105, 0, 1, 5)
        if self.tr("code_nl_if_brace")!="code_nl_if_brace":
            self.codenl_if_brace = QtWidgets.QLabel(self.tr("code_nl_if_brace"))
            self.codenl_if_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_if_brace, 106, 0, 1, 5)
        self.namenl_if_brace = QtWidgets.QLabel("nl_if_brace")
        self.namenl_if_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_if_brace, 107, 0)
        self.nl_if_brace = QtWidgets.QComboBox()
        self.nl_if_brace.addItems(['ignore','add','remove','force'])
        self.nl_if_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_if_brace, 107, 1, 1, 4)
        self.labelnl_brace_else = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and 'else'.")+' '+self.tr("\n"))
        self.labelnl_brace_else.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_brace_else, 108, 0, 1, 5)
        if self.tr("code_nl_brace_else")!="code_nl_brace_else":
            self.codenl_brace_else = QtWidgets.QLabel(self.tr("code_nl_brace_else"))
            self.codenl_brace_else.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_brace_else, 109, 0, 1, 5)
        self.namenl_brace_else = QtWidgets.QLabel("nl_brace_else")
        self.namenl_brace_else.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_brace_else, 110, 0)
        self.nl_brace_else = QtWidgets.QComboBox()
        self.nl_brace_else.addItems(['ignore','add','remove','force'])
        self.nl_brace_else.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_else, 110, 1, 1, 4)
        self.labelnl_elseif_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'else if' and '{'.")+' '+self.tr("If set to ignore, nl_if_brace is used instead.")+' '+self.tr("\n"))
        self.labelnl_elseif_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_elseif_brace, 111, 0, 1, 5)
        if self.tr("code_nl_elseif_brace")!="code_nl_elseif_brace":
            self.codenl_elseif_brace = QtWidgets.QLabel(self.tr("code_nl_elseif_brace"))
            self.codenl_elseif_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_elseif_brace, 112, 0, 1, 5)
        self.namenl_elseif_brace = QtWidgets.QLabel("nl_elseif_brace")
        self.namenl_elseif_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_elseif_brace, 113, 0)
        self.nl_elseif_brace = QtWidgets.QComboBox()
        self.nl_elseif_brace.addItems(['ignore','add','remove','force'])
        self.nl_elseif_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_elseif_brace, 113, 1, 1, 4)
        self.labelnl_else_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'else' and '{'.")+' '+self.tr("\n"))
        self.labelnl_else_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_else_brace, 114, 0, 1, 5)
        if self.tr("code_nl_else_brace")!="code_nl_else_brace":
            self.codenl_else_brace = QtWidgets.QLabel(self.tr("code_nl_else_brace"))
            self.codenl_else_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_else_brace, 115, 0, 1, 5)
        self.namenl_else_brace = QtWidgets.QLabel("nl_else_brace")
        self.namenl_else_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_else_brace, 116, 0)
        self.nl_else_brace = QtWidgets.QComboBox()
        self.nl_else_brace.addItems(['ignore','add','remove','force'])
        self.nl_else_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_else_brace, 116, 1, 1, 4)
        self.labelnl_else_if = QtWidgets.QLabel(self.tr("Add or remove newline between 'else' and 'if'.")+' '+self.tr("\n"))
        self.labelnl_else_if.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_else_if, 117, 0, 1, 5)
        if self.tr("code_nl_else_if")!="code_nl_else_if":
            self.codenl_else_if = QtWidgets.QLabel(self.tr("code_nl_else_if"))
            self.codenl_else_if.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_else_if, 118, 0, 1, 5)
        self.namenl_else_if = QtWidgets.QLabel("nl_else_if")
        self.namenl_else_if.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_else_if, 119, 0)
        self.nl_else_if = QtWidgets.QComboBox()
        self.nl_else_if.addItems(['ignore','add','remove','force'])
        self.nl_else_if.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_else_if, 119, 1, 1, 4)
        self.labelnl_before_opening_brace_func_class_def = QtWidgets.QLabel(self.tr("Add or remove newline before '{' opening brace")+' '+self.tr("\n"))
        self.labelnl_before_opening_brace_func_class_def.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_opening_brace_func_class_def, 120, 0, 1, 5)
        if self.tr("code_nl_before_opening_brace_func_class_def")!="code_nl_before_opening_brace_func_class_def":
            self.codenl_before_opening_brace_func_class_def = QtWidgets.QLabel(self.tr("code_nl_before_opening_brace_func_class_def"))
            self.codenl_before_opening_brace_func_class_def.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_opening_brace_func_class_def, 121, 0, 1, 5)
        self.namenl_before_opening_brace_func_class_def = QtWidgets.QLabel("nl_before_opening_brace_func_class_def")
        self.namenl_before_opening_brace_func_class_def.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_opening_brace_func_class_def, 122, 0)
        self.nl_before_opening_brace_func_class_def = QtWidgets.QComboBox()
        self.nl_before_opening_brace_func_class_def.addItems(['ignore','add','remove','force'])
        self.nl_before_opening_brace_func_class_def.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_opening_brace_func_class_def, 122, 1, 1, 4)
        self.labelnl_before_if_closing_paren = QtWidgets.QLabel(self.tr("Add or remove newline before 'if'/'else if' closing parenthesis.")+' '+self.tr("\n"))
        self.labelnl_before_if_closing_paren.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_if_closing_paren, 123, 0, 1, 5)
        if self.tr("code_nl_before_if_closing_paren")!="code_nl_before_if_closing_paren":
            self.codenl_before_if_closing_paren = QtWidgets.QLabel(self.tr("code_nl_before_if_closing_paren"))
            self.codenl_before_if_closing_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_if_closing_paren, 124, 0, 1, 5)
        self.namenl_before_if_closing_paren = QtWidgets.QLabel("nl_before_if_closing_paren")
        self.namenl_before_if_closing_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_if_closing_paren, 125, 0)
        self.nl_before_if_closing_paren = QtWidgets.QComboBox()
        self.nl_before_if_closing_paren.addItems(['ignore','add','remove','force'])
        self.nl_before_if_closing_paren.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_if_closing_paren, 125, 1, 1, 4)
        self.labelnl_brace_finally = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and 'finally'.")+' '+self.tr("\n"))
        self.labelnl_brace_finally.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_brace_finally, 126, 0, 1, 5)
        if self.tr("code_nl_brace_finally")!="code_nl_brace_finally":
            self.codenl_brace_finally = QtWidgets.QLabel(self.tr("code_nl_brace_finally"))
            self.codenl_brace_finally.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_brace_finally, 127, 0, 1, 5)
        self.namenl_brace_finally = QtWidgets.QLabel("nl_brace_finally")
        self.namenl_brace_finally.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_brace_finally, 128, 0)
        self.nl_brace_finally = QtWidgets.QComboBox()
        self.nl_brace_finally.addItems(['ignore','add','remove','force'])
        self.nl_brace_finally.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_finally, 128, 1, 1, 4)
        self.labelnl_finally_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'finally' and '{'.")+' '+self.tr("\n"))
        self.labelnl_finally_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_finally_brace, 129, 0, 1, 5)
        if self.tr("code_nl_finally_brace")!="code_nl_finally_brace":
            self.codenl_finally_brace = QtWidgets.QLabel(self.tr("code_nl_finally_brace"))
            self.codenl_finally_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_finally_brace, 130, 0, 1, 5)
        self.namenl_finally_brace = QtWidgets.QLabel("nl_finally_brace")
        self.namenl_finally_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_finally_brace, 131, 0)
        self.nl_finally_brace = QtWidgets.QComboBox()
        self.nl_finally_brace.addItems(['ignore','add','remove','force'])
        self.nl_finally_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_finally_brace, 131, 1, 1, 4)
        self.labelnl_try_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'try' and '{'.")+' '+self.tr("\n"))
        self.labelnl_try_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_try_brace, 132, 0, 1, 5)
        if self.tr("code_nl_try_brace")!="code_nl_try_brace":
            self.codenl_try_brace = QtWidgets.QLabel(self.tr("code_nl_try_brace"))
            self.codenl_try_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_try_brace, 133, 0, 1, 5)
        self.namenl_try_brace = QtWidgets.QLabel("nl_try_brace")
        self.namenl_try_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_try_brace, 134, 0)
        self.nl_try_brace = QtWidgets.QComboBox()
        self.nl_try_brace.addItems(['ignore','add','remove','force'])
        self.nl_try_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_try_brace, 134, 1, 1, 4)
        self.labelnl_getset_brace = QtWidgets.QLabel(self.tr("Add or remove newline between get/set and '{'.")+' '+self.tr("\n"))
        self.labelnl_getset_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_getset_brace, 135, 0, 1, 5)
        if self.tr("code_nl_getset_brace")!="code_nl_getset_brace":
            self.codenl_getset_brace = QtWidgets.QLabel(self.tr("code_nl_getset_brace"))
            self.codenl_getset_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_getset_brace, 136, 0, 1, 5)
        self.namenl_getset_brace = QtWidgets.QLabel("nl_getset_brace")
        self.namenl_getset_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_getset_brace, 137, 0)
        self.nl_getset_brace = QtWidgets.QComboBox()
        self.nl_getset_brace.addItems(['ignore','add','remove','force'])
        self.nl_getset_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_getset_brace, 137, 1, 1, 4)
        self.labelnl_for_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'for' and '{'.")+' '+self.tr("\n"))
        self.labelnl_for_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_for_brace, 138, 0, 1, 5)
        if self.tr("code_nl_for_brace")!="code_nl_for_brace":
            self.codenl_for_brace = QtWidgets.QLabel(self.tr("code_nl_for_brace"))
            self.codenl_for_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_for_brace, 139, 0, 1, 5)
        self.namenl_for_brace = QtWidgets.QLabel("nl_for_brace")
        self.namenl_for_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_for_brace, 140, 0)
        self.nl_for_brace = QtWidgets.QComboBox()
        self.nl_for_brace.addItems(['ignore','add','remove','force'])
        self.nl_for_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_for_brace, 140, 1, 1, 4)
        self.labelnl_catch_brace = QtWidgets.QLabel(self.tr("Add or remove newline before the '{' of a 'catch' statement, as in 'catch (decl) <here> {'.")+' '+self.tr("\n"))
        self.labelnl_catch_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_catch_brace, 141, 0, 1, 5)
        if self.tr("code_nl_catch_brace")!="code_nl_catch_brace":
            self.codenl_catch_brace = QtWidgets.QLabel(self.tr("code_nl_catch_brace"))
            self.codenl_catch_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_catch_brace, 142, 0, 1, 5)
        self.namenl_catch_brace = QtWidgets.QLabel("nl_catch_brace")
        self.namenl_catch_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_catch_brace, 143, 0)
        self.nl_catch_brace = QtWidgets.QComboBox()
        self.nl_catch_brace.addItems(['ignore','add','remove','force'])
        self.nl_catch_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_catch_brace, 143, 1, 1, 4)
        self.labelnl_oc_catch_brace = QtWidgets.QLabel(self.tr("(OC) Add or remove newline before the '{' of a '@catch' statement, as in '@catch (decl) <here> {'.")+' '+self.tr("If set to ignore, nl_catch_brace is used.")+' '+self.tr("\n"))
        self.labelnl_oc_catch_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_catch_brace, 144, 0, 1, 5)
        if self.tr("code_nl_oc_catch_brace")!="code_nl_oc_catch_brace":
            self.codenl_oc_catch_brace = QtWidgets.QLabel(self.tr("code_nl_oc_catch_brace"))
            self.codenl_oc_catch_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_catch_brace, 145, 0, 1, 5)
        self.namenl_oc_catch_brace = QtWidgets.QLabel("nl_oc_catch_brace")
        self.namenl_oc_catch_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_catch_brace, 146, 0)
        self.nl_oc_catch_brace = QtWidgets.QComboBox()
        self.nl_oc_catch_brace.addItems(['ignore','add','remove','force'])
        self.nl_oc_catch_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_catch_brace, 146, 1, 1, 4)
        self.labelnl_brace_catch = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and 'catch'.")+' '+self.tr("\n"))
        self.labelnl_brace_catch.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_brace_catch, 147, 0, 1, 5)
        if self.tr("code_nl_brace_catch")!="code_nl_brace_catch":
            self.codenl_brace_catch = QtWidgets.QLabel(self.tr("code_nl_brace_catch"))
            self.codenl_brace_catch.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_brace_catch, 148, 0, 1, 5)
        self.namenl_brace_catch = QtWidgets.QLabel("nl_brace_catch")
        self.namenl_brace_catch.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_brace_catch, 149, 0)
        self.nl_brace_catch = QtWidgets.QComboBox()
        self.nl_brace_catch.addItems(['ignore','add','remove','force'])
        self.nl_brace_catch.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_catch, 149, 1, 1, 4)
        self.labelnl_oc_brace_catch = QtWidgets.QLabel(self.tr("(OC) Add or remove newline between '}' and '@catch'.")+' '+self.tr("If set to ignore, nl_brace_catch is used.")+' '+self.tr("\n"))
        self.labelnl_oc_brace_catch.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_brace_catch, 150, 0, 1, 5)
        if self.tr("code_nl_oc_brace_catch")!="code_nl_oc_brace_catch":
            self.codenl_oc_brace_catch = QtWidgets.QLabel(self.tr("code_nl_oc_brace_catch"))
            self.codenl_oc_brace_catch.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_brace_catch, 151, 0, 1, 5)
        self.namenl_oc_brace_catch = QtWidgets.QLabel("nl_oc_brace_catch")
        self.namenl_oc_brace_catch.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_brace_catch, 152, 0)
        self.nl_oc_brace_catch = QtWidgets.QComboBox()
        self.nl_oc_brace_catch.addItems(['ignore','add','remove','force'])
        self.nl_oc_brace_catch.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_oc_brace_catch, 152, 1, 1, 4)
        self.labelnl_brace_square = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and ']'.")+' '+self.tr("\n"))
        self.labelnl_brace_square.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_brace_square, 153, 0, 1, 5)
        if self.tr("code_nl_brace_square")!="code_nl_brace_square":
            self.codenl_brace_square = QtWidgets.QLabel(self.tr("code_nl_brace_square"))
            self.codenl_brace_square.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_brace_square, 154, 0, 1, 5)
        self.namenl_brace_square = QtWidgets.QLabel("nl_brace_square")
        self.namenl_brace_square.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_brace_square, 155, 0)
        self.nl_brace_square = QtWidgets.QComboBox()
        self.nl_brace_square.addItems(['ignore','add','remove','force'])
        self.nl_brace_square.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_square, 155, 1, 1, 4)
        self.labelnl_brace_fparen = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and ')' in a function invocation.")+' '+self.tr("\n"))
        self.labelnl_brace_fparen.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_brace_fparen, 156, 0, 1, 5)
        if self.tr("code_nl_brace_fparen")!="code_nl_brace_fparen":
            self.codenl_brace_fparen = QtWidgets.QLabel(self.tr("code_nl_brace_fparen"))
            self.codenl_brace_fparen.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_brace_fparen, 157, 0, 1, 5)
        self.namenl_brace_fparen = QtWidgets.QLabel("nl_brace_fparen")
        self.namenl_brace_fparen.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_brace_fparen, 158, 0)
        self.nl_brace_fparen = QtWidgets.QComboBox()
        self.nl_brace_fparen.addItems(['ignore','add','remove','force'])
        self.nl_brace_fparen.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_fparen, 158, 1, 1, 4)
        self.labelnl_while_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'while' and '{'.")+' '+self.tr("\n"))
        self.labelnl_while_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_while_brace, 159, 0, 1, 5)
        if self.tr("code_nl_while_brace")!="code_nl_while_brace":
            self.codenl_while_brace = QtWidgets.QLabel(self.tr("code_nl_while_brace"))
            self.codenl_while_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_while_brace, 160, 0, 1, 5)
        self.namenl_while_brace = QtWidgets.QLabel("nl_while_brace")
        self.namenl_while_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_while_brace, 161, 0)
        self.nl_while_brace = QtWidgets.QComboBox()
        self.nl_while_brace.addItems(['ignore','add','remove','force'])
        self.nl_while_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_while_brace, 161, 1, 1, 4)
        self.labelnl_scope_brace = QtWidgets.QLabel(self.tr("(D) Add or remove newline between 'scope (x)' and '{'.")+' '+self.tr("\n"))
        self.labelnl_scope_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_scope_brace, 162, 0, 1, 5)
        if self.tr("code_nl_scope_brace")!="code_nl_scope_brace":
            self.codenl_scope_brace = QtWidgets.QLabel(self.tr("code_nl_scope_brace"))
            self.codenl_scope_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_scope_brace, 163, 0, 1, 5)
        self.namenl_scope_brace = QtWidgets.QLabel("nl_scope_brace")
        self.namenl_scope_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_scope_brace, 164, 0)
        self.nl_scope_brace = QtWidgets.QComboBox()
        self.nl_scope_brace.addItems(['ignore','add','remove','force'])
        self.nl_scope_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_scope_brace, 164, 1, 1, 4)
        self.labelnl_unittest_brace = QtWidgets.QLabel(self.tr("(D) Add or remove newline between 'unittest' and '{'.")+' '+self.tr("\n"))
        self.labelnl_unittest_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_unittest_brace, 165, 0, 1, 5)
        if self.tr("code_nl_unittest_brace")!="code_nl_unittest_brace":
            self.codenl_unittest_brace = QtWidgets.QLabel(self.tr("code_nl_unittest_brace"))
            self.codenl_unittest_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_unittest_brace, 166, 0, 1, 5)
        self.namenl_unittest_brace = QtWidgets.QLabel("nl_unittest_brace")
        self.namenl_unittest_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_unittest_brace, 167, 0)
        self.nl_unittest_brace = QtWidgets.QComboBox()
        self.nl_unittest_brace.addItems(['ignore','add','remove','force'])
        self.nl_unittest_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_unittest_brace, 167, 1, 1, 4)
        self.labelnl_version_brace = QtWidgets.QLabel(self.tr("(D) Add or remove newline between 'version (x)' and '{'.")+' '+self.tr("\n"))
        self.labelnl_version_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_version_brace, 168, 0, 1, 5)
        if self.tr("code_nl_version_brace")!="code_nl_version_brace":
            self.codenl_version_brace = QtWidgets.QLabel(self.tr("code_nl_version_brace"))
            self.codenl_version_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_version_brace, 169, 0, 1, 5)
        self.namenl_version_brace = QtWidgets.QLabel("nl_version_brace")
        self.namenl_version_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_version_brace, 170, 0)
        self.nl_version_brace = QtWidgets.QComboBox()
        self.nl_version_brace.addItems(['ignore','add','remove','force'])
        self.nl_version_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_version_brace, 170, 1, 1, 4)
        self.labelnl_using_brace = QtWidgets.QLabel(self.tr("(C#) Add or remove newline between 'using' and '{'.")+' '+self.tr("\n"))
        self.labelnl_using_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_using_brace, 171, 0, 1, 5)
        if self.tr("code_nl_using_brace")!="code_nl_using_brace":
            self.codenl_using_brace = QtWidgets.QLabel(self.tr("code_nl_using_brace"))
            self.codenl_using_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_using_brace, 172, 0, 1, 5)
        self.namenl_using_brace = QtWidgets.QLabel("nl_using_brace")
        self.namenl_using_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_using_brace, 173, 0)
        self.nl_using_brace = QtWidgets.QComboBox()
        self.nl_using_brace.addItems(['ignore','add','remove','force'])
        self.nl_using_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_using_brace, 173, 1, 1, 4)
        self.labelnl_brace_brace = QtWidgets.QLabel(self.tr("Add or remove newline between two open or close braces.")+' '+self.tr("Due to general newline/brace handling, REMOVE may not work.")+' '+self.tr("\n"))
        self.labelnl_brace_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_brace_brace, 174, 0, 1, 5)
        if self.tr("code_nl_brace_brace")!="code_nl_brace_brace":
            self.codenl_brace_brace = QtWidgets.QLabel(self.tr("code_nl_brace_brace"))
            self.codenl_brace_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_brace_brace, 175, 0, 1, 5)
        self.namenl_brace_brace = QtWidgets.QLabel("nl_brace_brace")
        self.namenl_brace_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_brace_brace, 176, 0)
        self.nl_brace_brace = QtWidgets.QComboBox()
        self.nl_brace_brace.addItems(['ignore','add','remove','force'])
        self.nl_brace_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_brace, 176, 1, 1, 4)
        self.labelnl_do_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'do' and '{'.")+' '+self.tr("\n"))
        self.labelnl_do_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_do_brace, 177, 0, 1, 5)
        if self.tr("code_nl_do_brace")!="code_nl_do_brace":
            self.codenl_do_brace = QtWidgets.QLabel(self.tr("code_nl_do_brace"))
            self.codenl_do_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_do_brace, 178, 0, 1, 5)
        self.namenl_do_brace = QtWidgets.QLabel("nl_do_brace")
        self.namenl_do_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_do_brace, 179, 0)
        self.nl_do_brace = QtWidgets.QComboBox()
        self.nl_do_brace.addItems(['ignore','add','remove','force'])
        self.nl_do_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_do_brace, 179, 1, 1, 4)
        self.labelnl_brace_while = QtWidgets.QLabel(self.tr("Add or remove newline between '}' and 'while' of 'do' statement.")+' '+self.tr("\n"))
        self.labelnl_brace_while.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_brace_while, 180, 0, 1, 5)
        if self.tr("code_nl_brace_while")!="code_nl_brace_while":
            self.codenl_brace_while = QtWidgets.QLabel(self.tr("code_nl_brace_while"))
            self.codenl_brace_while.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_brace_while, 181, 0, 1, 5)
        self.namenl_brace_while = QtWidgets.QLabel("nl_brace_while")
        self.namenl_brace_while.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_brace_while, 182, 0)
        self.nl_brace_while = QtWidgets.QComboBox()
        self.nl_brace_while.addItems(['ignore','add','remove','force'])
        self.nl_brace_while.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_while, 182, 1, 1, 4)
        self.labelnl_switch_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'switch' and '{'.")+' '+self.tr("\n"))
        self.labelnl_switch_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_switch_brace, 183, 0, 1, 5)
        if self.tr("code_nl_switch_brace")!="code_nl_switch_brace":
            self.codenl_switch_brace = QtWidgets.QLabel(self.tr("code_nl_switch_brace"))
            self.codenl_switch_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_switch_brace, 184, 0, 1, 5)
        self.namenl_switch_brace = QtWidgets.QLabel("nl_switch_brace")
        self.namenl_switch_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_switch_brace, 185, 0)
        self.nl_switch_brace = QtWidgets.QComboBox()
        self.nl_switch_brace.addItems(['ignore','add','remove','force'])
        self.nl_switch_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_switch_brace, 185, 1, 1, 4)
        self.labelnl_synchronized_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'synchronized' and '{'.")+' '+self.tr("\n"))
        self.labelnl_synchronized_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_synchronized_brace, 186, 0, 1, 5)
        if self.tr("code_nl_synchronized_brace")!="code_nl_synchronized_brace":
            self.codenl_synchronized_brace = QtWidgets.QLabel(self.tr("code_nl_synchronized_brace"))
            self.codenl_synchronized_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_synchronized_brace, 187, 0, 1, 5)
        self.namenl_synchronized_brace = QtWidgets.QLabel("nl_synchronized_brace")
        self.namenl_synchronized_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_synchronized_brace, 188, 0)
        self.nl_synchronized_brace = QtWidgets.QComboBox()
        self.nl_synchronized_brace.addItems(['ignore','add','remove','force'])
        self.nl_synchronized_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_synchronized_brace, 188, 1, 1, 4)
        self.labelnl_multi_line_cond = QtWidgets.QLabel(self.tr("Add a newline between ')' and '{' if the ')' is on a different line than the if/for/etc.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch and nl_catch_brace.")+' '+self.tr("\n"))
        self.labelnl_multi_line_cond.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_multi_line_cond, 189, 0, 1, 5)
        if self.tr("code_nl_multi_line_cond")!="code_nl_multi_line_cond":
            self.codenl_multi_line_cond = QtWidgets.QLabel(self.tr("code_nl_multi_line_cond"))
            self.codenl_multi_line_cond.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_multi_line_cond, 190, 0, 1, 5)
        self.namenl_multi_line_cond = QtWidgets.QLabel("nl_multi_line_cond")
        self.namenl_multi_line_cond.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_multi_line_cond, 191, 0)
        self.nl_multi_line_cond = QtWidgets.QComboBox()
        self.nl_multi_line_cond.addItems(['true','false'])
        self.nl_multi_line_cond.setCurrentText('false')
        self.lt4.addWidget(self.nl_multi_line_cond, 191, 1, 1, 4)
        self.labelnl_multi_line_sparen_open = QtWidgets.QLabel(self.tr("Add a newline after '(' if an if/for/while/switch condition spans multiple lines")+' '+self.tr("\n"))
        self.labelnl_multi_line_sparen_open.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_multi_line_sparen_open, 192, 0, 1, 5)
        if self.tr("code_nl_multi_line_sparen_open")!="code_nl_multi_line_sparen_open":
            self.codenl_multi_line_sparen_open = QtWidgets.QLabel(self.tr("code_nl_multi_line_sparen_open"))
            self.codenl_multi_line_sparen_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_multi_line_sparen_open, 193, 0, 1, 5)
        self.namenl_multi_line_sparen_open = QtWidgets.QLabel("nl_multi_line_sparen_open")
        self.namenl_multi_line_sparen_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_multi_line_sparen_open, 194, 0)
        self.nl_multi_line_sparen_open = QtWidgets.QComboBox()
        self.nl_multi_line_sparen_open.addItems(['ignore','add','remove','force'])
        self.nl_multi_line_sparen_open.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_multi_line_sparen_open, 194, 1, 1, 4)
        self.labelnl_multi_line_sparen_close = QtWidgets.QLabel(self.tr("Add a newline before ')' if an if/for/while/switch condition spans multiple lines.")+' '+self.tr("Overrides nl_before_if_closing_paren if both are specified.")+' '+self.tr("\n"))
        self.labelnl_multi_line_sparen_close.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_multi_line_sparen_close, 195, 0, 1, 5)
        if self.tr("code_nl_multi_line_sparen_close")!="code_nl_multi_line_sparen_close":
            self.codenl_multi_line_sparen_close = QtWidgets.QLabel(self.tr("code_nl_multi_line_sparen_close"))
            self.codenl_multi_line_sparen_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_multi_line_sparen_close, 196, 0, 1, 5)
        self.namenl_multi_line_sparen_close = QtWidgets.QLabel("nl_multi_line_sparen_close")
        self.namenl_multi_line_sparen_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_multi_line_sparen_close, 197, 0)
        self.nl_multi_line_sparen_close = QtWidgets.QComboBox()
        self.nl_multi_line_sparen_close.addItems(['ignore','add','remove','force'])
        self.nl_multi_line_sparen_close.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_multi_line_sparen_close, 197, 1, 1, 4)
        self.labelnl_multi_line_define = QtWidgets.QLabel(self.tr("Force a newline in a define after the macro name for multi-line defines.")+' '+self.tr("\n"))
        self.labelnl_multi_line_define.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_multi_line_define, 198, 0, 1, 5)
        if self.tr("code_nl_multi_line_define")!="code_nl_multi_line_define":
            self.codenl_multi_line_define = QtWidgets.QLabel(self.tr("code_nl_multi_line_define"))
            self.codenl_multi_line_define.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_multi_line_define, 199, 0, 1, 5)
        self.namenl_multi_line_define = QtWidgets.QLabel("nl_multi_line_define")
        self.namenl_multi_line_define.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_multi_line_define, 200, 0)
        self.nl_multi_line_define = QtWidgets.QComboBox()
        self.nl_multi_line_define.addItems(['true','false'])
        self.nl_multi_line_define.setCurrentText('false')
        self.lt4.addWidget(self.nl_multi_line_define, 200, 1, 1, 4)
        self.labelnl_before_case = QtWidgets.QLabel(self.tr("Whether to add a newline before 'case', and a blank line before a 'case' statement that follows a ';' or '}'.")+' '+self.tr("\n"))
        self.labelnl_before_case.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_case, 201, 0, 1, 5)
        if self.tr("code_nl_before_case")!="code_nl_before_case":
            self.codenl_before_case = QtWidgets.QLabel(self.tr("code_nl_before_case"))
            self.codenl_before_case.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_case, 202, 0, 1, 5)
        self.namenl_before_case = QtWidgets.QLabel("nl_before_case")
        self.namenl_before_case.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_case, 203, 0)
        self.nl_before_case = QtWidgets.QComboBox()
        self.nl_before_case.addItems(['true','false'])
        self.nl_before_case.setCurrentText('false')
        self.lt4.addWidget(self.nl_before_case, 203, 1, 1, 4)
        self.labelnl_after_case = QtWidgets.QLabel(self.tr("Whether to add a newline after a 'case' statement.")+' '+self.tr("\n"))
        self.labelnl_after_case.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_case, 204, 0, 1, 5)
        if self.tr("code_nl_after_case")!="code_nl_after_case":
            self.codenl_after_case = QtWidgets.QLabel(self.tr("code_nl_after_case"))
            self.codenl_after_case.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_case, 205, 0, 1, 5)
        self.namenl_after_case = QtWidgets.QLabel("nl_after_case")
        self.namenl_after_case.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_case, 206, 0)
        self.nl_after_case = QtWidgets.QComboBox()
        self.nl_after_case.addItems(['true','false'])
        self.nl_after_case.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_case, 206, 1, 1, 4)
        self.labelnl_case_colon_brace = QtWidgets.QLabel(self.tr("Add or remove newline between a case ':' and '{'.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_after_case.")+' '+self.tr("\n"))
        self.labelnl_case_colon_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_case_colon_brace, 207, 0, 1, 5)
        if self.tr("code_nl_case_colon_brace")!="code_nl_case_colon_brace":
            self.codenl_case_colon_brace = QtWidgets.QLabel(self.tr("code_nl_case_colon_brace"))
            self.codenl_case_colon_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_case_colon_brace, 208, 0, 1, 5)
        self.namenl_case_colon_brace = QtWidgets.QLabel("nl_case_colon_brace")
        self.namenl_case_colon_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_case_colon_brace, 209, 0)
        self.nl_case_colon_brace = QtWidgets.QComboBox()
        self.nl_case_colon_brace.addItems(['ignore','add','remove','force'])
        self.nl_case_colon_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_case_colon_brace, 209, 1, 1, 4)
        self.labelnl_before_throw = QtWidgets.QLabel(self.tr("Add or remove newline between ')' and 'throw'.")+' '+self.tr("\n"))
        self.labelnl_before_throw.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_throw, 210, 0, 1, 5)
        if self.tr("code_nl_before_throw")!="code_nl_before_throw":
            self.codenl_before_throw = QtWidgets.QLabel(self.tr("code_nl_before_throw"))
            self.codenl_before_throw.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_throw, 211, 0, 1, 5)
        self.namenl_before_throw = QtWidgets.QLabel("nl_before_throw")
        self.namenl_before_throw.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_throw, 212, 0)
        self.nl_before_throw = QtWidgets.QComboBox()
        self.nl_before_throw.addItems(['ignore','add','remove','force'])
        self.nl_before_throw.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_throw, 212, 1, 1, 4)
        self.labelnl_namespace_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'namespace' and '{'.")+' '+self.tr("\n"))
        self.labelnl_namespace_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_namespace_brace, 213, 0, 1, 5)
        if self.tr("code_nl_namespace_brace")!="code_nl_namespace_brace":
            self.codenl_namespace_brace = QtWidgets.QLabel(self.tr("code_nl_namespace_brace"))
            self.codenl_namespace_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_namespace_brace, 214, 0, 1, 5)
        self.namenl_namespace_brace = QtWidgets.QLabel("nl_namespace_brace")
        self.namenl_namespace_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_namespace_brace, 215, 0)
        self.nl_namespace_brace = QtWidgets.QComboBox()
        self.nl_namespace_brace.addItems(['ignore','add','remove','force'])
        self.nl_namespace_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_namespace_brace, 215, 1, 1, 4)
        self.labelnl_template_class = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template class.")+' '+self.tr("\n"))
        self.labelnl_template_class.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_class, 216, 0, 1, 5)
        if self.tr("code_nl_template_class")!="code_nl_template_class":
            self.codenl_template_class = QtWidgets.QLabel(self.tr("code_nl_template_class"))
            self.codenl_template_class.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_class, 217, 0, 1, 5)
        self.namenl_template_class = QtWidgets.QLabel("nl_template_class")
        self.namenl_template_class.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_class, 218, 0)
        self.nl_template_class = QtWidgets.QComboBox()
        self.nl_template_class.addItems(['ignore','add','remove','force'])
        self.nl_template_class.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class, 218, 1, 1, 4)
        self.labelnl_template_class_decl = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template class declaration.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_class.")+' '+self.tr("\n"))
        self.labelnl_template_class_decl.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_class_decl, 219, 0, 1, 5)
        if self.tr("code_nl_template_class_decl")!="code_nl_template_class_decl":
            self.codenl_template_class_decl = QtWidgets.QLabel(self.tr("code_nl_template_class_decl"))
            self.codenl_template_class_decl.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_class_decl, 220, 0, 1, 5)
        self.namenl_template_class_decl = QtWidgets.QLabel("nl_template_class_decl")
        self.namenl_template_class_decl.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_class_decl, 221, 0)
        self.nl_template_class_decl = QtWidgets.QComboBox()
        self.nl_template_class_decl.addItems(['ignore','add','remove','force'])
        self.nl_template_class_decl.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class_decl, 221, 1, 1, 4)
        self.labelnl_template_class_decl_special = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<>' of a specialized class declaration.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_class_decl.")+' '+self.tr("\n"))
        self.labelnl_template_class_decl_special.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_class_decl_special, 222, 0, 1, 5)
        if self.tr("code_nl_template_class_decl_special")!="code_nl_template_class_decl_special":
            self.codenl_template_class_decl_special = QtWidgets.QLabel(self.tr("code_nl_template_class_decl_special"))
            self.codenl_template_class_decl_special.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_class_decl_special, 223, 0, 1, 5)
        self.namenl_template_class_decl_special = QtWidgets.QLabel("nl_template_class_decl_special")
        self.namenl_template_class_decl_special.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_class_decl_special, 224, 0)
        self.nl_template_class_decl_special = QtWidgets.QComboBox()
        self.nl_template_class_decl_special.addItems(['ignore','add','remove','force'])
        self.nl_template_class_decl_special.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class_decl_special, 224, 1, 1, 4)
        self.labelnl_template_class_def = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template class definition.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_class.")+' '+self.tr("\n"))
        self.labelnl_template_class_def.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_class_def, 225, 0, 1, 5)
        if self.tr("code_nl_template_class_def")!="code_nl_template_class_def":
            self.codenl_template_class_def = QtWidgets.QLabel(self.tr("code_nl_template_class_def"))
            self.codenl_template_class_def.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_class_def, 226, 0, 1, 5)
        self.namenl_template_class_def = QtWidgets.QLabel("nl_template_class_def")
        self.namenl_template_class_def.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_class_def, 227, 0)
        self.nl_template_class_def = QtWidgets.QComboBox()
        self.nl_template_class_def.addItems(['ignore','add','remove','force'])
        self.nl_template_class_def.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class_def, 227, 1, 1, 4)
        self.labelnl_template_class_def_special = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<>' of a specialized class definition.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_class_def.")+' '+self.tr("\n"))
        self.labelnl_template_class_def_special.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_class_def_special, 228, 0, 1, 5)
        if self.tr("code_nl_template_class_def_special")!="code_nl_template_class_def_special":
            self.codenl_template_class_def_special = QtWidgets.QLabel(self.tr("code_nl_template_class_def_special"))
            self.codenl_template_class_def_special.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_class_def_special, 229, 0, 1, 5)
        self.namenl_template_class_def_special = QtWidgets.QLabel("nl_template_class_def_special")
        self.namenl_template_class_def_special.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_class_def_special, 230, 0)
        self.nl_template_class_def_special = QtWidgets.QComboBox()
        self.nl_template_class_def_special.addItems(['ignore','add','remove','force'])
        self.nl_template_class_def_special.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_class_def_special, 230, 1, 1, 4)
        self.labelnl_template_func = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template function.")+' '+self.tr("\n"))
        self.labelnl_template_func.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_func, 231, 0, 1, 5)
        if self.tr("code_nl_template_func")!="code_nl_template_func":
            self.codenl_template_func = QtWidgets.QLabel(self.tr("code_nl_template_func"))
            self.codenl_template_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_func, 232, 0, 1, 5)
        self.namenl_template_func = QtWidgets.QLabel("nl_template_func")
        self.namenl_template_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_func, 233, 0)
        self.nl_template_func = QtWidgets.QComboBox()
        self.nl_template_func.addItems(['ignore','add','remove','force'])
        self.nl_template_func.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func, 233, 1, 1, 4)
        self.labelnl_template_func_decl = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template function declaration.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_func.")+' '+self.tr("\n"))
        self.labelnl_template_func_decl.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_func_decl, 234, 0, 1, 5)
        if self.tr("code_nl_template_func_decl")!="code_nl_template_func_decl":
            self.codenl_template_func_decl = QtWidgets.QLabel(self.tr("code_nl_template_func_decl"))
            self.codenl_template_func_decl.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_func_decl, 235, 0, 1, 5)
        self.namenl_template_func_decl = QtWidgets.QLabel("nl_template_func_decl")
        self.namenl_template_func_decl.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_func_decl, 236, 0)
        self.nl_template_func_decl = QtWidgets.QComboBox()
        self.nl_template_func_decl.addItems(['ignore','add','remove','force'])
        self.nl_template_func_decl.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func_decl, 236, 1, 1, 4)
        self.labelnl_template_func_decl_special = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<>' of a specialized function declaration.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_func_decl.")+' '+self.tr("\n"))
        self.labelnl_template_func_decl_special.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_func_decl_special, 237, 0, 1, 5)
        if self.tr("code_nl_template_func_decl_special")!="code_nl_template_func_decl_special":
            self.codenl_template_func_decl_special = QtWidgets.QLabel(self.tr("code_nl_template_func_decl_special"))
            self.codenl_template_func_decl_special.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_func_decl_special, 238, 0, 1, 5)
        self.namenl_template_func_decl_special = QtWidgets.QLabel("nl_template_func_decl_special")
        self.namenl_template_func_decl_special.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_func_decl_special, 239, 0)
        self.nl_template_func_decl_special = QtWidgets.QComboBox()
        self.nl_template_func_decl_special.addItems(['ignore','add','remove','force'])
        self.nl_template_func_decl_special.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func_decl_special, 239, 1, 1, 4)
        self.labelnl_template_func_def = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template function definition.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_func.")+' '+self.tr("\n"))
        self.labelnl_template_func_def.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_func_def, 240, 0, 1, 5)
        if self.tr("code_nl_template_func_def")!="code_nl_template_func_def":
            self.codenl_template_func_def = QtWidgets.QLabel(self.tr("code_nl_template_func_def"))
            self.codenl_template_func_def.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_func_def, 241, 0, 1, 5)
        self.namenl_template_func_def = QtWidgets.QLabel("nl_template_func_def")
        self.namenl_template_func_def.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_func_def, 242, 0)
        self.nl_template_func_def = QtWidgets.QComboBox()
        self.nl_template_func_def.addItems(['ignore','add','remove','force'])
        self.nl_template_func_def.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func_def, 242, 1, 1, 4)
        self.labelnl_template_func_def_special = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<>' of a specialized function definition.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_func_def.")+' '+self.tr("\n"))
        self.labelnl_template_func_def_special.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_func_def_special, 243, 0, 1, 5)
        if self.tr("code_nl_template_func_def_special")!="code_nl_template_func_def_special":
            self.codenl_template_func_def_special = QtWidgets.QLabel(self.tr("code_nl_template_func_def_special"))
            self.codenl_template_func_def_special.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_func_def_special, 244, 0, 1, 5)
        self.namenl_template_func_def_special = QtWidgets.QLabel("nl_template_func_def_special")
        self.namenl_template_func_def_special.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_func_def_special, 245, 0)
        self.nl_template_func_def_special = QtWidgets.QComboBox()
        self.nl_template_func_def_special.addItems(['ignore','add','remove','force'])
        self.nl_template_func_def_special.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_func_def_special, 245, 1, 1, 4)
        self.labelnl_template_var = QtWidgets.QLabel(self.tr("Add or remove newline after 'template<...>' of a template variable.")+' '+self.tr("\n"))
        self.labelnl_template_var.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_var, 246, 0, 1, 5)
        if self.tr("code_nl_template_var")!="code_nl_template_var":
            self.codenl_template_var = QtWidgets.QLabel(self.tr("code_nl_template_var"))
            self.codenl_template_var.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_var, 247, 0, 1, 5)
        self.namenl_template_var = QtWidgets.QLabel("nl_template_var")
        self.namenl_template_var.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_var, 248, 0)
        self.nl_template_var = QtWidgets.QComboBox()
        self.nl_template_var.addItems(['ignore','add','remove','force'])
        self.nl_template_var.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_var, 248, 1, 1, 4)
        self.labelnl_template_using = QtWidgets.QLabel(self.tr("Add or remove newline between 'template<...>' and 'using' of a templated type alias.")+' '+self.tr("\n"))
        self.labelnl_template_using.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_using, 249, 0, 1, 5)
        if self.tr("code_nl_template_using")!="code_nl_template_using":
            self.codenl_template_using = QtWidgets.QLabel(self.tr("code_nl_template_using"))
            self.codenl_template_using.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_using, 250, 0, 1, 5)
        self.namenl_template_using = QtWidgets.QLabel("nl_template_using")
        self.namenl_template_using.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_using, 251, 0)
        self.nl_template_using = QtWidgets.QComboBox()
        self.nl_template_using.addItems(['ignore','add','remove','force'])
        self.nl_template_using.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_template_using, 251, 1, 1, 4)
        self.labelnl_class_brace = QtWidgets.QLabel(self.tr("Add or remove newline between 'class' and '{'.")+' '+self.tr("\n"))
        self.labelnl_class_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_class_brace, 252, 0, 1, 5)
        if self.tr("code_nl_class_brace")!="code_nl_class_brace":
            self.codenl_class_brace = QtWidgets.QLabel(self.tr("code_nl_class_brace"))
            self.codenl_class_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_class_brace, 253, 0, 1, 5)
        self.namenl_class_brace = QtWidgets.QLabel("nl_class_brace")
        self.namenl_class_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_class_brace, 254, 0)
        self.nl_class_brace = QtWidgets.QComboBox()
        self.nl_class_brace.addItems(['ignore','add','remove','force'])
        self.nl_class_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_class_brace, 254, 1, 1, 4)
        self.labelnl_class_init_args = QtWidgets.QLabel(self.tr("Add or remove newline before or after (depending on pos_class_comma, may not be IGNORE) each',' in the base class list.")+' '+self.tr("\n"))
        self.labelnl_class_init_args.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_class_init_args, 255, 0, 1, 5)
        if self.tr("code_nl_class_init_args")!="code_nl_class_init_args":
            self.codenl_class_init_args = QtWidgets.QLabel(self.tr("code_nl_class_init_args"))
            self.codenl_class_init_args.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_class_init_args, 256, 0, 1, 5)
        self.namenl_class_init_args = QtWidgets.QLabel("nl_class_init_args")
        self.namenl_class_init_args.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_class_init_args, 257, 0)
        self.nl_class_init_args = QtWidgets.QComboBox()
        self.nl_class_init_args.addItems(['ignore','add','remove','force'])
        self.nl_class_init_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_class_init_args, 257, 1, 1, 4)
        self.labelnl_constr_init_args = QtWidgets.QLabel(self.tr("Add or remove newline after each ',' in the constructor member initialization.")+' '+self.tr("Related to nl_constr_colon, pos_constr_colon and pos_constr_comma.")+' '+self.tr("\n"))
        self.labelnl_constr_init_args.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_constr_init_args, 258, 0, 1, 5)
        if self.tr("code_nl_constr_init_args")!="code_nl_constr_init_args":
            self.codenl_constr_init_args = QtWidgets.QLabel(self.tr("code_nl_constr_init_args"))
            self.codenl_constr_init_args.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_constr_init_args, 259, 0, 1, 5)
        self.namenl_constr_init_args = QtWidgets.QLabel("nl_constr_init_args")
        self.namenl_constr_init_args.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_constr_init_args, 260, 0)
        self.nl_constr_init_args = QtWidgets.QComboBox()
        self.nl_constr_init_args.addItems(['ignore','add','remove','force'])
        self.nl_constr_init_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_constr_init_args, 260, 1, 1, 4)
        self.labelnl_enum_own_lines = QtWidgets.QLabel(self.tr("Add or remove newline before first element, after comma, and after last element, in 'enum'.")+' '+self.tr("\n"))
        self.labelnl_enum_own_lines.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_enum_own_lines, 261, 0, 1, 5)
        if self.tr("code_nl_enum_own_lines")!="code_nl_enum_own_lines":
            self.codenl_enum_own_lines = QtWidgets.QLabel(self.tr("code_nl_enum_own_lines"))
            self.codenl_enum_own_lines.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_enum_own_lines, 262, 0, 1, 5)
        self.namenl_enum_own_lines = QtWidgets.QLabel("nl_enum_own_lines")
        self.namenl_enum_own_lines.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_enum_own_lines, 263, 0)
        self.nl_enum_own_lines = QtWidgets.QComboBox()
        self.nl_enum_own_lines.addItems(['ignore','add','remove','force'])
        self.nl_enum_own_lines.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_enum_own_lines, 263, 1, 1, 4)
        self.labelnl_func_type_name = QtWidgets.QLabel(self.tr("Add or remove newline between return type and function name in a function definition. might be modified by nl_func_leave_one_liners")+' '+self.tr("\n"))
        self.labelnl_func_type_name.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_type_name, 264, 0, 1, 5)
        if self.tr("code_nl_func_type_name")!="code_nl_func_type_name":
            self.codenl_func_type_name = QtWidgets.QLabel(self.tr("code_nl_func_type_name"))
            self.codenl_func_type_name.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_type_name, 265, 0, 1, 5)
        self.namenl_func_type_name = QtWidgets.QLabel("nl_func_type_name")
        self.namenl_func_type_name.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_type_name, 266, 0)
        self.nl_func_type_name = QtWidgets.QComboBox()
        self.nl_func_type_name.addItems(['ignore','add','remove','force'])
        self.nl_func_type_name.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_type_name, 266, 1, 1, 4)
        self.labelnl_func_type_name_class = QtWidgets.QLabel(self.tr("Add or remove newline between return type and function name inside a class definition.")+' '+self.tr("If set to ignore, nl_func_type_name or nl_func_proto_type_name is used instead.")+' '+self.tr("\n"))
        self.labelnl_func_type_name_class.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_type_name_class, 267, 0, 1, 5)
        if self.tr("code_nl_func_type_name_class")!="code_nl_func_type_name_class":
            self.codenl_func_type_name_class = QtWidgets.QLabel(self.tr("code_nl_func_type_name_class"))
            self.codenl_func_type_name_class.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_type_name_class, 268, 0, 1, 5)
        self.namenl_func_type_name_class = QtWidgets.QLabel("nl_func_type_name_class")
        self.namenl_func_type_name_class.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_type_name_class, 269, 0)
        self.nl_func_type_name_class = QtWidgets.QComboBox()
        self.nl_func_type_name_class.addItems(['ignore','add','remove','force'])
        self.nl_func_type_name_class.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_type_name_class, 269, 1, 1, 4)
        self.labelnl_func_class_scope = QtWidgets.QLabel(self.tr("Add or remove newline between class specification and '::' in 'void A::f() { }'.")+' '+self.tr("Only appears in separate member implementation (does not appear with in-line implementation).")+' '+self.tr("\n"))
        self.labelnl_func_class_scope.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_class_scope, 270, 0, 1, 5)
        if self.tr("code_nl_func_class_scope")!="code_nl_func_class_scope":
            self.codenl_func_class_scope = QtWidgets.QLabel(self.tr("code_nl_func_class_scope"))
            self.codenl_func_class_scope.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_class_scope, 271, 0, 1, 5)
        self.namenl_func_class_scope = QtWidgets.QLabel("nl_func_class_scope")
        self.namenl_func_class_scope.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_class_scope, 272, 0)
        self.nl_func_class_scope = QtWidgets.QComboBox()
        self.nl_func_class_scope.addItems(['ignore','add','remove','force'])
        self.nl_func_class_scope.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_class_scope, 272, 1, 1, 4)
        self.labelnl_func_scope_name = QtWidgets.QLabel(self.tr("Add or remove newline between function scope and name, as in 'void A :: <here> f() { }'.")+' '+self.tr("\n"))
        self.labelnl_func_scope_name.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_scope_name, 273, 0, 1, 5)
        if self.tr("code_nl_func_scope_name")!="code_nl_func_scope_name":
            self.codenl_func_scope_name = QtWidgets.QLabel(self.tr("code_nl_func_scope_name"))
            self.codenl_func_scope_name.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_scope_name, 274, 0, 1, 5)
        self.namenl_func_scope_name = QtWidgets.QLabel("nl_func_scope_name")
        self.namenl_func_scope_name.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_scope_name, 275, 0)
        self.nl_func_scope_name = QtWidgets.QComboBox()
        self.nl_func_scope_name.addItems(['ignore','add','remove','force'])
        self.nl_func_scope_name.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_scope_name, 275, 1, 1, 4)
        self.labelnl_func_proto_type_name = QtWidgets.QLabel(self.tr("Add or remove newline between return type and function name in a prototype.")+' '+self.tr("\n"))
        self.labelnl_func_proto_type_name.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_proto_type_name, 276, 0, 1, 5)
        if self.tr("code_nl_func_proto_type_name")!="code_nl_func_proto_type_name":
            self.codenl_func_proto_type_name = QtWidgets.QLabel(self.tr("code_nl_func_proto_type_name"))
            self.codenl_func_proto_type_name.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_proto_type_name, 277, 0, 1, 5)
        self.namenl_func_proto_type_name = QtWidgets.QLabel("nl_func_proto_type_name")
        self.namenl_func_proto_type_name.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_proto_type_name, 278, 0)
        self.nl_func_proto_type_name = QtWidgets.QComboBox()
        self.nl_func_proto_type_name.addItems(['ignore','add','remove','force'])
        self.nl_func_proto_type_name.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_proto_type_name, 278, 1, 1, 4)
        self.labelnl_func_paren = QtWidgets.QLabel(self.tr("Add or remove newline between a function name and the opening '(' in the declaration.")+' '+self.tr("\n"))
        self.labelnl_func_paren.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_paren, 279, 0, 1, 5)
        if self.tr("code_nl_func_paren")!="code_nl_func_paren":
            self.codenl_func_paren = QtWidgets.QLabel(self.tr("code_nl_func_paren"))
            self.codenl_func_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_paren, 280, 0, 1, 5)
        self.namenl_func_paren = QtWidgets.QLabel("nl_func_paren")
        self.namenl_func_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_paren, 281, 0)
        self.nl_func_paren = QtWidgets.QComboBox()
        self.nl_func_paren.addItems(['ignore','add','remove','force'])
        self.nl_func_paren.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_paren, 281, 1, 1, 4)
        self.labelnl_func_paren_empty = QtWidgets.QLabel(self.tr("Overrides nl_func_paren for functions with no parameters.")+' '+self.tr("\n"))
        self.labelnl_func_paren_empty.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_paren_empty, 282, 0, 1, 5)
        if self.tr("code_nl_func_paren_empty")!="code_nl_func_paren_empty":
            self.codenl_func_paren_empty = QtWidgets.QLabel(self.tr("code_nl_func_paren_empty"))
            self.codenl_func_paren_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_paren_empty, 283, 0, 1, 5)
        self.namenl_func_paren_empty = QtWidgets.QLabel("nl_func_paren_empty")
        self.namenl_func_paren_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_paren_empty, 284, 0)
        self.nl_func_paren_empty = QtWidgets.QComboBox()
        self.nl_func_paren_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_paren_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_paren_empty, 284, 1, 1, 4)
        self.labelnl_func_def_paren = QtWidgets.QLabel(self.tr("Add or remove newline between a function name and the opening '(' in the definition.")+' '+self.tr("\n"))
        self.labelnl_func_def_paren.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_paren, 285, 0, 1, 5)
        if self.tr("code_nl_func_def_paren")!="code_nl_func_def_paren":
            self.codenl_func_def_paren = QtWidgets.QLabel(self.tr("code_nl_func_def_paren"))
            self.codenl_func_def_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_paren, 286, 0, 1, 5)
        self.namenl_func_def_paren = QtWidgets.QLabel("nl_func_def_paren")
        self.namenl_func_def_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_paren, 287, 0)
        self.nl_func_def_paren = QtWidgets.QComboBox()
        self.nl_func_def_paren.addItems(['ignore','add','remove','force'])
        self.nl_func_def_paren.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_paren, 287, 1, 1, 4)
        self.labelnl_func_def_paren_empty = QtWidgets.QLabel(self.tr("Overrides nl_func_def_paren for functions with no parameters.")+' '+self.tr("\n"))
        self.labelnl_func_def_paren_empty.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_paren_empty, 288, 0, 1, 5)
        if self.tr("code_nl_func_def_paren_empty")!="code_nl_func_def_paren_empty":
            self.codenl_func_def_paren_empty = QtWidgets.QLabel(self.tr("code_nl_func_def_paren_empty"))
            self.codenl_func_def_paren_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_paren_empty, 289, 0, 1, 5)
        self.namenl_func_def_paren_empty = QtWidgets.QLabel("nl_func_def_paren_empty")
        self.namenl_func_def_paren_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_paren_empty, 290, 0)
        self.nl_func_def_paren_empty = QtWidgets.QComboBox()
        self.nl_func_def_paren_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_def_paren_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_paren_empty, 290, 1, 1, 4)
        self.labelnl_func_call_paren = QtWidgets.QLabel(self.tr("Add or remove newline between a function name and the opening '(' in the call.")+' '+self.tr("\n"))
        self.labelnl_func_call_paren.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_paren, 291, 0, 1, 5)
        if self.tr("code_nl_func_call_paren")!="code_nl_func_call_paren":
            self.codenl_func_call_paren = QtWidgets.QLabel(self.tr("code_nl_func_call_paren"))
            self.codenl_func_call_paren.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_paren, 292, 0, 1, 5)
        self.namenl_func_call_paren = QtWidgets.QLabel("nl_func_call_paren")
        self.namenl_func_call_paren.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_paren, 293, 0)
        self.nl_func_call_paren = QtWidgets.QComboBox()
        self.nl_func_call_paren.addItems(['ignore','add','remove','force'])
        self.nl_func_call_paren.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_paren, 293, 1, 1, 4)
        self.labelnl_func_call_paren_empty = QtWidgets.QLabel(self.tr("Overrides nl_func_call_paren for functions with no parameters.")+' '+self.tr("\n"))
        self.labelnl_func_call_paren_empty.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_paren_empty, 294, 0, 1, 5)
        if self.tr("code_nl_func_call_paren_empty")!="code_nl_func_call_paren_empty":
            self.codenl_func_call_paren_empty = QtWidgets.QLabel(self.tr("code_nl_func_call_paren_empty"))
            self.codenl_func_call_paren_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_paren_empty, 295, 0, 1, 5)
        self.namenl_func_call_paren_empty = QtWidgets.QLabel("nl_func_call_paren_empty")
        self.namenl_func_call_paren_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_paren_empty, 296, 0)
        self.nl_func_call_paren_empty = QtWidgets.QComboBox()
        self.nl_func_call_paren_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_call_paren_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_paren_empty, 296, 1, 1, 4)
        self.labelnl_func_decl_start = QtWidgets.QLabel(self.tr("Add or remove newline after '(' in a function declaration.")+' '+self.tr("\n"))
        self.labelnl_func_decl_start.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_start, 297, 0, 1, 5)
        if self.tr("code_nl_func_decl_start")!="code_nl_func_decl_start":
            self.codenl_func_decl_start = QtWidgets.QLabel(self.tr("code_nl_func_decl_start"))
            self.codenl_func_decl_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_start, 298, 0, 1, 5)
        self.namenl_func_decl_start = QtWidgets.QLabel("nl_func_decl_start")
        self.namenl_func_decl_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_start, 299, 0)
        self.nl_func_decl_start = QtWidgets.QComboBox()
        self.nl_func_decl_start.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_start.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_start, 299, 1, 1, 4)
        self.labelnl_func_def_start = QtWidgets.QLabel(self.tr("Add or remove newline after '(' in a function definition.")+' '+self.tr("\n"))
        self.labelnl_func_def_start.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_start, 300, 0, 1, 5)
        if self.tr("code_nl_func_def_start")!="code_nl_func_def_start":
            self.codenl_func_def_start = QtWidgets.QLabel(self.tr("code_nl_func_def_start"))
            self.codenl_func_def_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_start, 301, 0, 1, 5)
        self.namenl_func_def_start = QtWidgets.QLabel("nl_func_def_start")
        self.namenl_func_def_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_start, 302, 0)
        self.nl_func_def_start = QtWidgets.QComboBox()
        self.nl_func_def_start.addItems(['ignore','add','remove','force'])
        self.nl_func_def_start.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_start, 302, 1, 1, 4)
        self.labelnl_func_decl_start_single = QtWidgets.QLabel(self.tr("Overrides nl_func_decl_start when there is only one parameter.")+' '+self.tr("\n"))
        self.labelnl_func_decl_start_single.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_start_single, 303, 0, 1, 5)
        if self.tr("code_nl_func_decl_start_single")!="code_nl_func_decl_start_single":
            self.codenl_func_decl_start_single = QtWidgets.QLabel(self.tr("code_nl_func_decl_start_single"))
            self.codenl_func_decl_start_single.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_start_single, 304, 0, 1, 5)
        self.namenl_func_decl_start_single = QtWidgets.QLabel("nl_func_decl_start_single")
        self.namenl_func_decl_start_single.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_start_single, 305, 0)
        self.nl_func_decl_start_single = QtWidgets.QComboBox()
        self.nl_func_decl_start_single.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_start_single.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_start_single, 305, 1, 1, 4)
        self.labelnl_func_def_start_single = QtWidgets.QLabel(self.tr("Overrides nl_func_def_start when there is only one parameter.")+' '+self.tr("\n"))
        self.labelnl_func_def_start_single.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_start_single, 306, 0, 1, 5)
        if self.tr("code_nl_func_def_start_single")!="code_nl_func_def_start_single":
            self.codenl_func_def_start_single = QtWidgets.QLabel(self.tr("code_nl_func_def_start_single"))
            self.codenl_func_def_start_single.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_start_single, 307, 0, 1, 5)
        self.namenl_func_def_start_single = QtWidgets.QLabel("nl_func_def_start_single")
        self.namenl_func_def_start_single.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_start_single, 308, 0)
        self.nl_func_def_start_single = QtWidgets.QComboBox()
        self.nl_func_def_start_single.addItems(['ignore','add','remove','force'])
        self.nl_func_def_start_single.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_start_single, 308, 1, 1, 4)
        self.labelnl_func_decl_start_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline after '(' in a function declaration if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_decl_start is used instead.")+' '+self.tr("\n"))
        self.labelnl_func_decl_start_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_start_multi_line, 309, 0, 1, 5)
        if self.tr("code_nl_func_decl_start_multi_line")!="code_nl_func_decl_start_multi_line":
            self.codenl_func_decl_start_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_decl_start_multi_line"))
            self.codenl_func_decl_start_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_start_multi_line, 310, 0, 1, 5)
        self.namenl_func_decl_start_multi_line = QtWidgets.QLabel("nl_func_decl_start_multi_line")
        self.namenl_func_decl_start_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_start_multi_line, 311, 0)
        self.nl_func_decl_start_multi_line = QtWidgets.QComboBox()
        self.nl_func_decl_start_multi_line.addItems(['true','false'])
        self.nl_func_decl_start_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_decl_start_multi_line, 311, 1, 1, 4)
        self.labelnl_func_def_start_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline after '(' in a function definition if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_def_start is used instead.")+' '+self.tr("\n"))
        self.labelnl_func_def_start_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_start_multi_line, 312, 0, 1, 5)
        if self.tr("code_nl_func_def_start_multi_line")!="code_nl_func_def_start_multi_line":
            self.codenl_func_def_start_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_def_start_multi_line"))
            self.codenl_func_def_start_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_start_multi_line, 313, 0, 1, 5)
        self.namenl_func_def_start_multi_line = QtWidgets.QLabel("nl_func_def_start_multi_line")
        self.namenl_func_def_start_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_start_multi_line, 314, 0)
        self.nl_func_def_start_multi_line = QtWidgets.QComboBox()
        self.nl_func_def_start_multi_line.addItems(['true','false'])
        self.nl_func_def_start_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_def_start_multi_line, 314, 1, 1, 4)
        self.labelnl_func_decl_args = QtWidgets.QLabel(self.tr("Add or remove newline after each ',' in a function declaration.")+' '+self.tr("\n"))
        self.labelnl_func_decl_args.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_args, 315, 0, 1, 5)
        if self.tr("code_nl_func_decl_args")!="code_nl_func_decl_args":
            self.codenl_func_decl_args = QtWidgets.QLabel(self.tr("code_nl_func_decl_args"))
            self.codenl_func_decl_args.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_args, 316, 0, 1, 5)
        self.namenl_func_decl_args = QtWidgets.QLabel("nl_func_decl_args")
        self.namenl_func_decl_args.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_args, 317, 0)
        self.nl_func_decl_args = QtWidgets.QComboBox()
        self.nl_func_decl_args.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_args, 317, 1, 1, 4)
        self.labelnl_func_def_args = QtWidgets.QLabel(self.tr("Add or remove newline after each ',' in a function definition.")+' '+self.tr("\n"))
        self.labelnl_func_def_args.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_args, 318, 0, 1, 5)
        if self.tr("code_nl_func_def_args")!="code_nl_func_def_args":
            self.codenl_func_def_args = QtWidgets.QLabel(self.tr("code_nl_func_def_args"))
            self.codenl_func_def_args.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_args, 319, 0, 1, 5)
        self.namenl_func_def_args = QtWidgets.QLabel("nl_func_def_args")
        self.namenl_func_def_args.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_args, 320, 0)
        self.nl_func_def_args = QtWidgets.QComboBox()
        self.nl_func_def_args.addItems(['ignore','add','remove','force'])
        self.nl_func_def_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_args, 320, 1, 1, 4)
        self.labelnl_func_call_args = QtWidgets.QLabel(self.tr("Add or remove newline after each ',' in a function call.")+' '+self.tr("\n"))
        self.labelnl_func_call_args.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_args, 321, 0, 1, 5)
        if self.tr("code_nl_func_call_args")!="code_nl_func_call_args":
            self.codenl_func_call_args = QtWidgets.QLabel(self.tr("code_nl_func_call_args"))
            self.codenl_func_call_args.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_args, 322, 0, 1, 5)
        self.namenl_func_call_args = QtWidgets.QLabel("nl_func_call_args")
        self.namenl_func_call_args.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_args, 323, 0)
        self.nl_func_call_args = QtWidgets.QComboBox()
        self.nl_func_call_args.addItems(['ignore','add','remove','force'])
        self.nl_func_call_args.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_args, 323, 1, 1, 4)
        self.labelnl_func_decl_args_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline after each ',' in a function declaration if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_decl_args is used instead.")+' '+self.tr("\n"))
        self.labelnl_func_decl_args_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_args_multi_line, 324, 0, 1, 5)
        if self.tr("code_nl_func_decl_args_multi_line")!="code_nl_func_decl_args_multi_line":
            self.codenl_func_decl_args_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_decl_args_multi_line"))
            self.codenl_func_decl_args_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_args_multi_line, 325, 0, 1, 5)
        self.namenl_func_decl_args_multi_line = QtWidgets.QLabel("nl_func_decl_args_multi_line")
        self.namenl_func_decl_args_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_args_multi_line, 326, 0)
        self.nl_func_decl_args_multi_line = QtWidgets.QComboBox()
        self.nl_func_decl_args_multi_line.addItems(['true','false'])
        self.nl_func_decl_args_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_decl_args_multi_line, 326, 1, 1, 4)
        self.labelnl_func_def_args_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline after each ',' in a function definition if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_def_args is used instead.")+' '+self.tr("\n"))
        self.labelnl_func_def_args_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_args_multi_line, 327, 0, 1, 5)
        if self.tr("code_nl_func_def_args_multi_line")!="code_nl_func_def_args_multi_line":
            self.codenl_func_def_args_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_def_args_multi_line"))
            self.codenl_func_def_args_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_args_multi_line, 328, 0, 1, 5)
        self.namenl_func_def_args_multi_line = QtWidgets.QLabel("nl_func_def_args_multi_line")
        self.namenl_func_def_args_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_args_multi_line, 329, 0)
        self.nl_func_def_args_multi_line = QtWidgets.QComboBox()
        self.nl_func_def_args_multi_line.addItems(['true','false'])
        self.nl_func_def_args_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_def_args_multi_line, 329, 1, 1, 4)
        self.labelnl_func_decl_end = QtWidgets.QLabel(self.tr("Add or remove newline before the ')' in a function declaration.")+' '+self.tr("\n"))
        self.labelnl_func_decl_end.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_end, 330, 0, 1, 5)
        if self.tr("code_nl_func_decl_end")!="code_nl_func_decl_end":
            self.codenl_func_decl_end = QtWidgets.QLabel(self.tr("code_nl_func_decl_end"))
            self.codenl_func_decl_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_end, 331, 0, 1, 5)
        self.namenl_func_decl_end = QtWidgets.QLabel("nl_func_decl_end")
        self.namenl_func_decl_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_end, 332, 0)
        self.nl_func_decl_end = QtWidgets.QComboBox()
        self.nl_func_decl_end.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_end.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_end, 332, 1, 1, 4)
        self.labelnl_func_def_end = QtWidgets.QLabel(self.tr("Add or remove newline before the ')' in a function definition.")+' '+self.tr("\n"))
        self.labelnl_func_def_end.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_end, 333, 0, 1, 5)
        if self.tr("code_nl_func_def_end")!="code_nl_func_def_end":
            self.codenl_func_def_end = QtWidgets.QLabel(self.tr("code_nl_func_def_end"))
            self.codenl_func_def_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_end, 334, 0, 1, 5)
        self.namenl_func_def_end = QtWidgets.QLabel("nl_func_def_end")
        self.namenl_func_def_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_end, 335, 0)
        self.nl_func_def_end = QtWidgets.QComboBox()
        self.nl_func_def_end.addItems(['ignore','add','remove','force'])
        self.nl_func_def_end.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_end, 335, 1, 1, 4)
        self.labelnl_func_decl_end_single = QtWidgets.QLabel(self.tr("Overrides nl_func_decl_end when there is only one parameter.")+' '+self.tr("\n"))
        self.labelnl_func_decl_end_single.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_end_single, 336, 0, 1, 5)
        if self.tr("code_nl_func_decl_end_single")!="code_nl_func_decl_end_single":
            self.codenl_func_decl_end_single = QtWidgets.QLabel(self.tr("code_nl_func_decl_end_single"))
            self.codenl_func_decl_end_single.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_end_single, 337, 0, 1, 5)
        self.namenl_func_decl_end_single = QtWidgets.QLabel("nl_func_decl_end_single")
        self.namenl_func_decl_end_single.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_end_single, 338, 0)
        self.nl_func_decl_end_single = QtWidgets.QComboBox()
        self.nl_func_decl_end_single.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_end_single.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_end_single, 338, 1, 1, 4)
        self.labelnl_func_def_end_single = QtWidgets.QLabel(self.tr("Overrides nl_func_def_end when there is only one parameter.")+' '+self.tr("\n"))
        self.labelnl_func_def_end_single.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_end_single, 339, 0, 1, 5)
        if self.tr("code_nl_func_def_end_single")!="code_nl_func_def_end_single":
            self.codenl_func_def_end_single = QtWidgets.QLabel(self.tr("code_nl_func_def_end_single"))
            self.codenl_func_def_end_single.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_end_single, 340, 0, 1, 5)
        self.namenl_func_def_end_single = QtWidgets.QLabel("nl_func_def_end_single")
        self.namenl_func_def_end_single.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_end_single, 341, 0)
        self.nl_func_def_end_single = QtWidgets.QComboBox()
        self.nl_func_def_end_single.addItems(['ignore','add','remove','force'])
        self.nl_func_def_end_single.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_end_single, 341, 1, 1, 4)
        self.labelnl_func_decl_end_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline before ')' in a function declaration if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_decl_end is used instead.")+' '+self.tr("\n"))
        self.labelnl_func_decl_end_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_end_multi_line, 342, 0, 1, 5)
        if self.tr("code_nl_func_decl_end_multi_line")!="code_nl_func_decl_end_multi_line":
            self.codenl_func_decl_end_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_decl_end_multi_line"))
            self.codenl_func_decl_end_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_end_multi_line, 343, 0, 1, 5)
        self.namenl_func_decl_end_multi_line = QtWidgets.QLabel("nl_func_decl_end_multi_line")
        self.namenl_func_decl_end_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_end_multi_line, 344, 0)
        self.nl_func_decl_end_multi_line = QtWidgets.QComboBox()
        self.nl_func_decl_end_multi_line.addItems(['true','false'])
        self.nl_func_decl_end_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_decl_end_multi_line, 344, 1, 1, 4)
        self.labelnl_func_def_end_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline before ')' in a function definition if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_def_end is used instead.")+' '+self.tr("\n"))
        self.labelnl_func_def_end_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_end_multi_line, 345, 0, 1, 5)
        if self.tr("code_nl_func_def_end_multi_line")!="code_nl_func_def_end_multi_line":
            self.codenl_func_def_end_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_def_end_multi_line"))
            self.codenl_func_def_end_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_end_multi_line, 346, 0, 1, 5)
        self.namenl_func_def_end_multi_line = QtWidgets.QLabel("nl_func_def_end_multi_line")
        self.namenl_func_def_end_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_end_multi_line, 347, 0)
        self.nl_func_def_end_multi_line = QtWidgets.QComboBox()
        self.nl_func_def_end_multi_line.addItems(['true','false'])
        self.nl_func_def_end_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_def_end_multi_line, 347, 1, 1, 4)
        self.labelnl_func_decl_empty = QtWidgets.QLabel(self.tr("Add or remove newline between '()' in a function declaration.")+' '+self.tr("\n"))
        self.labelnl_func_decl_empty.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_decl_empty, 348, 0, 1, 5)
        if self.tr("code_nl_func_decl_empty")!="code_nl_func_decl_empty":
            self.codenl_func_decl_empty = QtWidgets.QLabel(self.tr("code_nl_func_decl_empty"))
            self.codenl_func_decl_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_decl_empty, 349, 0, 1, 5)
        self.namenl_func_decl_empty = QtWidgets.QLabel("nl_func_decl_empty")
        self.namenl_func_decl_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_decl_empty, 350, 0)
        self.nl_func_decl_empty = QtWidgets.QComboBox()
        self.nl_func_decl_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_decl_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_decl_empty, 350, 1, 1, 4)
        self.labelnl_func_def_empty = QtWidgets.QLabel(self.tr("Add or remove newline between '()' in a function definition.")+' '+self.tr("\n"))
        self.labelnl_func_def_empty.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_def_empty, 351, 0, 1, 5)
        if self.tr("code_nl_func_def_empty")!="code_nl_func_def_empty":
            self.codenl_func_def_empty = QtWidgets.QLabel(self.tr("code_nl_func_def_empty"))
            self.codenl_func_def_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_def_empty, 352, 0, 1, 5)
        self.namenl_func_def_empty = QtWidgets.QLabel("nl_func_def_empty")
        self.namenl_func_def_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_def_empty, 353, 0)
        self.nl_func_def_empty = QtWidgets.QComboBox()
        self.nl_func_def_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_def_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_def_empty, 353, 1, 1, 4)
        self.labelnl_func_call_empty = QtWidgets.QLabel(self.tr("Add or remove newline between '()' in a function call.")+' '+self.tr("\n"))
        self.labelnl_func_call_empty.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_empty, 354, 0, 1, 5)
        if self.tr("code_nl_func_call_empty")!="code_nl_func_call_empty":
            self.codenl_func_call_empty = QtWidgets.QLabel(self.tr("code_nl_func_call_empty"))
            self.codenl_func_call_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_empty, 355, 0, 1, 5)
        self.namenl_func_call_empty = QtWidgets.QLabel("nl_func_call_empty")
        self.namenl_func_call_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_empty, 356, 0)
        self.nl_func_call_empty = QtWidgets.QComboBox()
        self.nl_func_call_empty.addItems(['ignore','add','remove','force'])
        self.nl_func_call_empty.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_empty, 356, 1, 1, 4)
        self.labelnl_func_call_start = QtWidgets.QLabel(self.tr("Whether to add a newline after '(' in a function call, has preference over nl_func_call_start_multi_line.")+' '+self.tr("\n"))
        self.labelnl_func_call_start.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_start, 357, 0, 1, 5)
        if self.tr("code_nl_func_call_start")!="code_nl_func_call_start":
            self.codenl_func_call_start = QtWidgets.QLabel(self.tr("code_nl_func_call_start"))
            self.codenl_func_call_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_start, 358, 0, 1, 5)
        self.namenl_func_call_start = QtWidgets.QLabel("nl_func_call_start")
        self.namenl_func_call_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_start, 359, 0)
        self.nl_func_call_start = QtWidgets.QComboBox()
        self.nl_func_call_start.addItems(['ignore','add','remove','force'])
        self.nl_func_call_start.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_start, 359, 1, 1, 4)
        self.labelnl_func_call_end = QtWidgets.QLabel(self.tr("Whether to add a newline before ')' in a function call.")+' '+self.tr("\n"))
        self.labelnl_func_call_end.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_end, 360, 0, 1, 5)
        if self.tr("code_nl_func_call_end")!="code_nl_func_call_end":
            self.codenl_func_call_end = QtWidgets.QLabel(self.tr("code_nl_func_call_end"))
            self.codenl_func_call_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_end, 361, 0, 1, 5)
        self.namenl_func_call_end = QtWidgets.QLabel("nl_func_call_end")
        self.namenl_func_call_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_end, 362, 0)
        self.nl_func_call_end = QtWidgets.QComboBox()
        self.nl_func_call_end.addItems(['ignore','add','remove','force'])
        self.nl_func_call_end.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_func_call_end, 362, 1, 1, 4)
        self.labelnl_func_call_start_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline after '(' in a function call if '(' and ')' are in different lines.")+' '+self.tr("\n"))
        self.labelnl_func_call_start_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_start_multi_line, 363, 0, 1, 5)
        if self.tr("code_nl_func_call_start_multi_line")!="code_nl_func_call_start_multi_line":
            self.codenl_func_call_start_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_call_start_multi_line"))
            self.codenl_func_call_start_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_start_multi_line, 364, 0, 1, 5)
        self.namenl_func_call_start_multi_line = QtWidgets.QLabel("nl_func_call_start_multi_line")
        self.namenl_func_call_start_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_start_multi_line, 365, 0)
        self.nl_func_call_start_multi_line = QtWidgets.QComboBox()
        self.nl_func_call_start_multi_line.addItems(['true','false'])
        self.nl_func_call_start_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_call_start_multi_line, 365, 1, 1, 4)
        self.labelnl_func_call_args_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline after each ',' in a function call if '(' and ')' are in different lines.")+' '+self.tr("\n"))
        self.labelnl_func_call_args_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_args_multi_line, 366, 0, 1, 5)
        if self.tr("code_nl_func_call_args_multi_line")!="code_nl_func_call_args_multi_line":
            self.codenl_func_call_args_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_call_args_multi_line"))
            self.codenl_func_call_args_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_args_multi_line, 367, 0, 1, 5)
        self.namenl_func_call_args_multi_line = QtWidgets.QLabel("nl_func_call_args_multi_line")
        self.namenl_func_call_args_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_args_multi_line, 368, 0)
        self.nl_func_call_args_multi_line = QtWidgets.QComboBox()
        self.nl_func_call_args_multi_line.addItems(['true','false'])
        self.nl_func_call_args_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_call_args_multi_line, 368, 1, 1, 4)
        self.labelnl_func_call_end_multi_line = QtWidgets.QLabel(self.tr("Whether to add a newline before ')' in a function call if '(' and ')' are in different lines.")+' '+self.tr("\n"))
        self.labelnl_func_call_end_multi_line.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_end_multi_line, 369, 0, 1, 5)
        if self.tr("code_nl_func_call_end_multi_line")!="code_nl_func_call_end_multi_line":
            self.codenl_func_call_end_multi_line = QtWidgets.QLabel(self.tr("code_nl_func_call_end_multi_line"))
            self.codenl_func_call_end_multi_line.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_end_multi_line, 370, 0, 1, 5)
        self.namenl_func_call_end_multi_line = QtWidgets.QLabel("nl_func_call_end_multi_line")
        self.namenl_func_call_end_multi_line.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_end_multi_line, 371, 0)
        self.nl_func_call_end_multi_line = QtWidgets.QComboBox()
        self.nl_func_call_end_multi_line.addItems(['true','false'])
        self.nl_func_call_end_multi_line.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_call_end_multi_line, 371, 1, 1, 4)
        self.labelnl_func_call_args_multi_line_ignore_closures = QtWidgets.QLabel(self.tr("Whether to respect nl_func_call_XXX option incase of closure args.")+' '+self.tr("\n"))
        self.labelnl_func_call_args_multi_line_ignore_closures.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_func_call_args_multi_line_ignore_closures, 372, 0, 1, 5)
        if self.tr("code_nl_func_call_args_multi_line_ignore_closures")!="code_nl_func_call_args_multi_line_ignore_closures":
            self.codenl_func_call_args_multi_line_ignore_closures = QtWidgets.QLabel(self.tr("code_nl_func_call_args_multi_line_ignore_closures"))
            self.codenl_func_call_args_multi_line_ignore_closures.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_func_call_args_multi_line_ignore_closures, 373, 0, 1, 5)
        self.namenl_func_call_args_multi_line_ignore_closures = QtWidgets.QLabel("nl_func_call_args_multi_line_ignore_closures")
        self.namenl_func_call_args_multi_line_ignore_closures.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_func_call_args_multi_line_ignore_closures, 374, 0)
        self.nl_func_call_args_multi_line_ignore_closures = QtWidgets.QComboBox()
        self.nl_func_call_args_multi_line_ignore_closures.addItems(['true','false'])
        self.nl_func_call_args_multi_line_ignore_closures.setCurrentText('false')
        self.lt4.addWidget(self.nl_func_call_args_multi_line_ignore_closures, 374, 1, 1, 4)
        self.labelnl_template_start = QtWidgets.QLabel(self.tr("Whether to add a newline after '<' of a template parameter list.")+' '+self.tr("\n"))
        self.labelnl_template_start.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_start, 375, 0, 1, 5)
        if self.tr("code_nl_template_start")!="code_nl_template_start":
            self.codenl_template_start = QtWidgets.QLabel(self.tr("code_nl_template_start"))
            self.codenl_template_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_start, 376, 0, 1, 5)
        self.namenl_template_start = QtWidgets.QLabel("nl_template_start")
        self.namenl_template_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_start, 377, 0)
        self.nl_template_start = QtWidgets.QComboBox()
        self.nl_template_start.addItems(['true','false'])
        self.nl_template_start.setCurrentText('false')
        self.lt4.addWidget(self.nl_template_start, 377, 1, 1, 4)
        self.labelnl_template_args = QtWidgets.QLabel(self.tr("Whether to add a newline after each ',' in a template parameter list.")+' '+self.tr("\n"))
        self.labelnl_template_args.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_args, 378, 0, 1, 5)
        if self.tr("code_nl_template_args")!="code_nl_template_args":
            self.codenl_template_args = QtWidgets.QLabel(self.tr("code_nl_template_args"))
            self.codenl_template_args.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_args, 379, 0, 1, 5)
        self.namenl_template_args = QtWidgets.QLabel("nl_template_args")
        self.namenl_template_args.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_args, 380, 0)
        self.nl_template_args = QtWidgets.QComboBox()
        self.nl_template_args.addItems(['true','false'])
        self.nl_template_args.setCurrentText('false')
        self.lt4.addWidget(self.nl_template_args, 380, 1, 1, 4)
        self.labelnl_template_end = QtWidgets.QLabel(self.tr("Whether to add a newline before '>' of a template parameter list.")+' '+self.tr("\n"))
        self.labelnl_template_end.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_template_end, 381, 0, 1, 5)
        if self.tr("code_nl_template_end")!="code_nl_template_end":
            self.codenl_template_end = QtWidgets.QLabel(self.tr("code_nl_template_end"))
            self.codenl_template_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_template_end, 382, 0, 1, 5)
        self.namenl_template_end = QtWidgets.QLabel("nl_template_end")
        self.namenl_template_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_template_end, 383, 0)
        self.nl_template_end = QtWidgets.QComboBox()
        self.nl_template_end.addItems(['true','false'])
        self.nl_template_end.setCurrentText('false')
        self.lt4.addWidget(self.nl_template_end, 383, 1, 1, 4)
        self.labelnl_oc_msg_args = QtWidgets.QLabel(self.tr("(OC) Whether to put each Objective-C message parameter on a separate line.")+' '+self.tr("See nl_oc_msg_leave_one_liner.")+' '+self.tr("\n"))
        self.labelnl_oc_msg_args.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_oc_msg_args, 384, 0, 1, 5)
        if self.tr("code_nl_oc_msg_args")!="code_nl_oc_msg_args":
            self.codenl_oc_msg_args = QtWidgets.QLabel(self.tr("code_nl_oc_msg_args"))
            self.codenl_oc_msg_args.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_oc_msg_args, 385, 0, 1, 5)
        self.namenl_oc_msg_args = QtWidgets.QLabel("nl_oc_msg_args")
        self.namenl_oc_msg_args.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_oc_msg_args, 386, 0)
        self.nl_oc_msg_args = QtWidgets.QComboBox()
        self.nl_oc_msg_args.addItems(['true','false'])
        self.nl_oc_msg_args.setCurrentText('false')
        self.lt4.addWidget(self.nl_oc_msg_args, 386, 1, 1, 4)
        self.labelnl_fdef_brace = QtWidgets.QLabel(self.tr("Add or remove newline between function signature and '{'.")+' '+self.tr("\n"))
        self.labelnl_fdef_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_fdef_brace, 387, 0, 1, 5)
        if self.tr("code_nl_fdef_brace")!="code_nl_fdef_brace":
            self.codenl_fdef_brace = QtWidgets.QLabel(self.tr("code_nl_fdef_brace"))
            self.codenl_fdef_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_fdef_brace, 388, 0, 1, 5)
        self.namenl_fdef_brace = QtWidgets.QLabel("nl_fdef_brace")
        self.namenl_fdef_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_fdef_brace, 389, 0)
        self.nl_fdef_brace = QtWidgets.QComboBox()
        self.nl_fdef_brace.addItems(['ignore','add','remove','force'])
        self.nl_fdef_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_fdef_brace, 389, 1, 1, 4)
        self.labelnl_fdef_brace_cond = QtWidgets.QLabel(self.tr("Add or remove newline between function signature and '{', if signature ends with ')'.")+' '+self.tr("Overrides nl_fdef_brace.")+' '+self.tr("\n"))
        self.labelnl_fdef_brace_cond.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_fdef_brace_cond, 390, 0, 1, 5)
        if self.tr("code_nl_fdef_brace_cond")!="code_nl_fdef_brace_cond":
            self.codenl_fdef_brace_cond = QtWidgets.QLabel(self.tr("code_nl_fdef_brace_cond"))
            self.codenl_fdef_brace_cond.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_fdef_brace_cond, 391, 0, 1, 5)
        self.namenl_fdef_brace_cond = QtWidgets.QLabel("nl_fdef_brace_cond")
        self.namenl_fdef_brace_cond.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_fdef_brace_cond, 392, 0)
        self.nl_fdef_brace_cond = QtWidgets.QComboBox()
        self.nl_fdef_brace_cond.addItems(['ignore','add','remove','force'])
        self.nl_fdef_brace_cond.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_fdef_brace_cond, 392, 1, 1, 4)
        self.labelnl_cpp_ldef_brace = QtWidgets.QLabel(self.tr("Add or remove newline between C++11 lambda signature and '{'.")+' '+self.tr("\n"))
        self.labelnl_cpp_ldef_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_cpp_ldef_brace, 393, 0, 1, 5)
        if self.tr("code_nl_cpp_ldef_brace")!="code_nl_cpp_ldef_brace":
            self.codenl_cpp_ldef_brace = QtWidgets.QLabel(self.tr("code_nl_cpp_ldef_brace"))
            self.codenl_cpp_ldef_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_cpp_ldef_brace, 394, 0, 1, 5)
        self.namenl_cpp_ldef_brace = QtWidgets.QLabel("nl_cpp_ldef_brace")
        self.namenl_cpp_ldef_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_cpp_ldef_brace, 395, 0)
        self.nl_cpp_ldef_brace = QtWidgets.QComboBox()
        self.nl_cpp_ldef_brace.addItems(['ignore','add','remove','force'])
        self.nl_cpp_ldef_brace.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_cpp_ldef_brace, 395, 1, 1, 4)
        self.labelnl_return_expr = QtWidgets.QLabel(self.tr("Add or remove newline between 'return' and the return expression.")+' '+self.tr("\n"))
        self.labelnl_return_expr.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_return_expr, 396, 0, 1, 5)
        if self.tr("code_nl_return_expr")!="code_nl_return_expr":
            self.codenl_return_expr = QtWidgets.QLabel(self.tr("code_nl_return_expr"))
            self.codenl_return_expr.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_return_expr, 397, 0, 1, 5)
        self.namenl_return_expr = QtWidgets.QLabel("nl_return_expr")
        self.namenl_return_expr.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_return_expr, 398, 0)
        self.nl_return_expr = QtWidgets.QComboBox()
        self.nl_return_expr.addItems(['ignore','add','remove','force'])
        self.nl_return_expr.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_return_expr, 398, 1, 1, 4)
        self.labelnl_after_semicolon = QtWidgets.QLabel(self.tr("Whether to add a newline after semicolons, except in 'for' statements.")+' '+self.tr("\n"))
        self.labelnl_after_semicolon.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_semicolon, 399, 0, 1, 5)
        if self.tr("code_nl_after_semicolon")!="code_nl_after_semicolon":
            self.codenl_after_semicolon = QtWidgets.QLabel(self.tr("code_nl_after_semicolon"))
            self.codenl_after_semicolon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_semicolon, 400, 0, 1, 5)
        self.namenl_after_semicolon = QtWidgets.QLabel("nl_after_semicolon")
        self.namenl_after_semicolon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_semicolon, 401, 0)
        self.nl_after_semicolon = QtWidgets.QComboBox()
        self.nl_after_semicolon.addItems(['true','false'])
        self.nl_after_semicolon.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_semicolon, 401, 1, 1, 4)
        self.labelnl_paren_dbrace_open = QtWidgets.QLabel(self.tr("(Java) Add or remove newline between the ')' and '{{' of the double brace initializer.")+' '+self.tr("\n"))
        self.labelnl_paren_dbrace_open.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_paren_dbrace_open, 402, 0, 1, 5)
        if self.tr("code_nl_paren_dbrace_open")!="code_nl_paren_dbrace_open":
            self.codenl_paren_dbrace_open = QtWidgets.QLabel(self.tr("code_nl_paren_dbrace_open"))
            self.codenl_paren_dbrace_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_paren_dbrace_open, 403, 0, 1, 5)
        self.namenl_paren_dbrace_open = QtWidgets.QLabel("nl_paren_dbrace_open")
        self.namenl_paren_dbrace_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_paren_dbrace_open, 404, 0)
        self.nl_paren_dbrace_open = QtWidgets.QComboBox()
        self.nl_paren_dbrace_open.addItems(['ignore','add','remove','force'])
        self.nl_paren_dbrace_open.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_paren_dbrace_open, 404, 1, 1, 4)
        self.labelnl_type_brace_init_lst = QtWidgets.QLabel(self.tr("Whether to add a newline after the type in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n"))
        self.labelnl_type_brace_init_lst.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_type_brace_init_lst, 405, 0, 1, 5)
        if self.tr("code_nl_type_brace_init_lst")!="code_nl_type_brace_init_lst":
            self.codenl_type_brace_init_lst = QtWidgets.QLabel(self.tr("code_nl_type_brace_init_lst"))
            self.codenl_type_brace_init_lst.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_type_brace_init_lst, 406, 0, 1, 5)
        self.namenl_type_brace_init_lst = QtWidgets.QLabel("nl_type_brace_init_lst")
        self.namenl_type_brace_init_lst.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_type_brace_init_lst, 407, 0)
        self.nl_type_brace_init_lst = QtWidgets.QComboBox()
        self.nl_type_brace_init_lst.addItems(['ignore','add','remove','force'])
        self.nl_type_brace_init_lst.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_type_brace_init_lst, 407, 1, 1, 4)
        self.labelnl_type_brace_init_lst_open = QtWidgets.QLabel(self.tr("Whether to add a newline after the open brace in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n"))
        self.labelnl_type_brace_init_lst_open.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_type_brace_init_lst_open, 408, 0, 1, 5)
        if self.tr("code_nl_type_brace_init_lst_open")!="code_nl_type_brace_init_lst_open":
            self.codenl_type_brace_init_lst_open = QtWidgets.QLabel(self.tr("code_nl_type_brace_init_lst_open"))
            self.codenl_type_brace_init_lst_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_type_brace_init_lst_open, 409, 0, 1, 5)
        self.namenl_type_brace_init_lst_open = QtWidgets.QLabel("nl_type_brace_init_lst_open")
        self.namenl_type_brace_init_lst_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_type_brace_init_lst_open, 410, 0)
        self.nl_type_brace_init_lst_open = QtWidgets.QComboBox()
        self.nl_type_brace_init_lst_open.addItems(['ignore','add','remove','force'])
        self.nl_type_brace_init_lst_open.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_type_brace_init_lst_open, 410, 1, 1, 4)
        self.labelnl_type_brace_init_lst_close = QtWidgets.QLabel(self.tr("Whether to add a newline before the close brace in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n"))
        self.labelnl_type_brace_init_lst_close.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_type_brace_init_lst_close, 411, 0, 1, 5)
        if self.tr("code_nl_type_brace_init_lst_close")!="code_nl_type_brace_init_lst_close":
            self.codenl_type_brace_init_lst_close = QtWidgets.QLabel(self.tr("code_nl_type_brace_init_lst_close"))
            self.codenl_type_brace_init_lst_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_type_brace_init_lst_close, 412, 0, 1, 5)
        self.namenl_type_brace_init_lst_close = QtWidgets.QLabel("nl_type_brace_init_lst_close")
        self.namenl_type_brace_init_lst_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_type_brace_init_lst_close, 413, 0)
        self.nl_type_brace_init_lst_close = QtWidgets.QComboBox()
        self.nl_type_brace_init_lst_close.addItems(['ignore','add','remove','force'])
        self.nl_type_brace_init_lst_close.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_type_brace_init_lst_close, 413, 1, 1, 4)
        self.labelnl_after_brace_open = QtWidgets.QLabel(self.tr("Whether to add a newline after '{'.")+' '+self.tr("This also adds a newline before the matching '}'.")+' '+self.tr("\n"))
        self.labelnl_after_brace_open.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_brace_open, 414, 0, 1, 5)
        if self.tr("code_nl_after_brace_open")!="code_nl_after_brace_open":
            self.codenl_after_brace_open = QtWidgets.QLabel(self.tr("code_nl_after_brace_open"))
            self.codenl_after_brace_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_brace_open, 415, 0, 1, 5)
        self.namenl_after_brace_open = QtWidgets.QLabel("nl_after_brace_open")
        self.namenl_after_brace_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_brace_open, 416, 0)
        self.nl_after_brace_open = QtWidgets.QComboBox()
        self.nl_after_brace_open.addItems(['true','false'])
        self.nl_after_brace_open.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_brace_open, 416, 1, 1, 4)
        self.labelnl_after_brace_open_cmt = QtWidgets.QLabel(self.tr("Whether to add a newline between the open brace and a trailing single-line comment.")+' '+self.tr("Requires nl_after_brace_open=true.")+' '+self.tr("\n"))
        self.labelnl_after_brace_open_cmt.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_brace_open_cmt, 417, 0, 1, 5)
        if self.tr("code_nl_after_brace_open_cmt")!="code_nl_after_brace_open_cmt":
            self.codenl_after_brace_open_cmt = QtWidgets.QLabel(self.tr("code_nl_after_brace_open_cmt"))
            self.codenl_after_brace_open_cmt.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_brace_open_cmt, 418, 0, 1, 5)
        self.namenl_after_brace_open_cmt = QtWidgets.QLabel("nl_after_brace_open_cmt")
        self.namenl_after_brace_open_cmt.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_brace_open_cmt, 419, 0)
        self.nl_after_brace_open_cmt = QtWidgets.QComboBox()
        self.nl_after_brace_open_cmt.addItems(['true','false'])
        self.nl_after_brace_open_cmt.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_brace_open_cmt, 419, 1, 1, 4)
        self.labelnl_after_vbrace_open = QtWidgets.QLabel(self.tr("Whether to add a newline after a virtual brace open with a non-empty body.")+' '+self.tr("These occur in un-braced if/while/do/for statement bodies.")+' '+self.tr("\n"))
        self.labelnl_after_vbrace_open.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_vbrace_open, 420, 0, 1, 5)
        if self.tr("code_nl_after_vbrace_open")!="code_nl_after_vbrace_open":
            self.codenl_after_vbrace_open = QtWidgets.QLabel(self.tr("code_nl_after_vbrace_open"))
            self.codenl_after_vbrace_open.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_vbrace_open, 421, 0, 1, 5)
        self.namenl_after_vbrace_open = QtWidgets.QLabel("nl_after_vbrace_open")
        self.namenl_after_vbrace_open.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_vbrace_open, 422, 0)
        self.nl_after_vbrace_open = QtWidgets.QComboBox()
        self.nl_after_vbrace_open.addItems(['true','false'])
        self.nl_after_vbrace_open.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_vbrace_open, 422, 1, 1, 4)
        self.labelnl_after_vbrace_open_empty = QtWidgets.QLabel(self.tr("Whether to add a newline after a virtual brace open with an empty body.")+' '+self.tr("These occur in un-braced if/while/do/for statement bodies.")+' '+self.tr("\n"))
        self.labelnl_after_vbrace_open_empty.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_vbrace_open_empty, 423, 0, 1, 5)
        if self.tr("code_nl_after_vbrace_open_empty")!="code_nl_after_vbrace_open_empty":
            self.codenl_after_vbrace_open_empty = QtWidgets.QLabel(self.tr("code_nl_after_vbrace_open_empty"))
            self.codenl_after_vbrace_open_empty.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_vbrace_open_empty, 424, 0, 1, 5)
        self.namenl_after_vbrace_open_empty = QtWidgets.QLabel("nl_after_vbrace_open_empty")
        self.namenl_after_vbrace_open_empty.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_vbrace_open_empty, 425, 0)
        self.nl_after_vbrace_open_empty = QtWidgets.QComboBox()
        self.nl_after_vbrace_open_empty.addItems(['true','false'])
        self.nl_after_vbrace_open_empty.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_vbrace_open_empty, 425, 1, 1, 4)
        self.labelnl_after_brace_close = QtWidgets.QLabel(self.tr("Whether to add a newline after '}'.")+' '+self.tr("Does not apply if followed by a necessary ';'.")+' '+self.tr("\n"))
        self.labelnl_after_brace_close.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_brace_close, 426, 0, 1, 5)
        if self.tr("code_nl_after_brace_close")!="code_nl_after_brace_close":
            self.codenl_after_brace_close = QtWidgets.QLabel(self.tr("code_nl_after_brace_close"))
            self.codenl_after_brace_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_brace_close, 427, 0, 1, 5)
        self.namenl_after_brace_close = QtWidgets.QLabel("nl_after_brace_close")
        self.namenl_after_brace_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_brace_close, 428, 0)
        self.nl_after_brace_close = QtWidgets.QComboBox()
        self.nl_after_brace_close.addItems(['true','false'])
        self.nl_after_brace_close.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_brace_close, 428, 1, 1, 4)
        self.labelnl_after_vbrace_close = QtWidgets.QLabel(self.tr("Whether to add a newline after a virtual brace close, as in 'if (foo) a++; <here> return;'.")+' '+self.tr("\n"))
        self.labelnl_after_vbrace_close.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_vbrace_close, 429, 0, 1, 5)
        if self.tr("code_nl_after_vbrace_close")!="code_nl_after_vbrace_close":
            self.codenl_after_vbrace_close = QtWidgets.QLabel(self.tr("code_nl_after_vbrace_close"))
            self.codenl_after_vbrace_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_vbrace_close, 430, 0, 1, 5)
        self.namenl_after_vbrace_close = QtWidgets.QLabel("nl_after_vbrace_close")
        self.namenl_after_vbrace_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_vbrace_close, 431, 0)
        self.nl_after_vbrace_close = QtWidgets.QComboBox()
        self.nl_after_vbrace_close.addItems(['true','false'])
        self.nl_after_vbrace_close.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_vbrace_close, 431, 1, 1, 4)
        self.labelnl_brace_struct_var = QtWidgets.QLabel(self.tr("Add or remove newline between the close brace and identifier, as in 'struct { int a; } <here> b;'.")+' '+self.tr("Affects enumerations, unions and structures.")+' '+self.tr("If set to ignore, uses nl_after_brace_close.")+' '+self.tr("\n"))
        self.labelnl_brace_struct_var.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_brace_struct_var, 432, 0, 1, 5)
        if self.tr("code_nl_brace_struct_var")!="code_nl_brace_struct_var":
            self.codenl_brace_struct_var = QtWidgets.QLabel(self.tr("code_nl_brace_struct_var"))
            self.codenl_brace_struct_var.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_brace_struct_var, 433, 0, 1, 5)
        self.namenl_brace_struct_var = QtWidgets.QLabel("nl_brace_struct_var")
        self.namenl_brace_struct_var.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_brace_struct_var, 434, 0)
        self.nl_brace_struct_var = QtWidgets.QComboBox()
        self.nl_brace_struct_var.addItems(['ignore','add','remove','force'])
        self.nl_brace_struct_var.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_brace_struct_var, 434, 1, 1, 4)
        self.labelnl_define_macro = QtWidgets.QLabel(self.tr("Whether to alter newlines in '#define' macros.")+' '+self.tr("\n"))
        self.labelnl_define_macro.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_define_macro, 435, 0, 1, 5)
        if self.tr("code_nl_define_macro")!="code_nl_define_macro":
            self.codenl_define_macro = QtWidgets.QLabel(self.tr("code_nl_define_macro"))
            self.codenl_define_macro.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_define_macro, 436, 0, 1, 5)
        self.namenl_define_macro = QtWidgets.QLabel("nl_define_macro")
        self.namenl_define_macro.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_define_macro, 437, 0)
        self.nl_define_macro = QtWidgets.QComboBox()
        self.nl_define_macro.addItems(['true','false'])
        self.nl_define_macro.setCurrentText('false')
        self.lt4.addWidget(self.nl_define_macro, 437, 1, 1, 4)
        self.labelnl_squeeze_paren_close = QtWidgets.QLabel(self.tr("Whether to alter newlines between consecutive parenthesis closes.")+' '+self.tr("The number of closing parentheses in a line will depend on respective open parenthesis lines.")+' '+self.tr("\n"))
        self.labelnl_squeeze_paren_close.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_squeeze_paren_close, 438, 0, 1, 5)
        if self.tr("code_nl_squeeze_paren_close")!="code_nl_squeeze_paren_close":
            self.codenl_squeeze_paren_close = QtWidgets.QLabel(self.tr("code_nl_squeeze_paren_close"))
            self.codenl_squeeze_paren_close.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_squeeze_paren_close, 439, 0, 1, 5)
        self.namenl_squeeze_paren_close = QtWidgets.QLabel("nl_squeeze_paren_close")
        self.namenl_squeeze_paren_close.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_squeeze_paren_close, 440, 0)
        self.nl_squeeze_paren_close = QtWidgets.QComboBox()
        self.nl_squeeze_paren_close.addItems(['true','false'])
        self.nl_squeeze_paren_close.setCurrentText('false')
        self.lt4.addWidget(self.nl_squeeze_paren_close, 440, 1, 1, 4)
        self.labelnl_squeeze_ifdef = QtWidgets.QLabel(self.tr("Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and '#endif'.")+' '+self.tr("Does not affect top-level #ifdefs.")+' '+self.tr("\n"))
        self.labelnl_squeeze_ifdef.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_squeeze_ifdef, 441, 0, 1, 5)
        if self.tr("code_nl_squeeze_ifdef")!="code_nl_squeeze_ifdef":
            self.codenl_squeeze_ifdef = QtWidgets.QLabel(self.tr("code_nl_squeeze_ifdef"))
            self.codenl_squeeze_ifdef.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_squeeze_ifdef, 442, 0, 1, 5)
        self.namenl_squeeze_ifdef = QtWidgets.QLabel("nl_squeeze_ifdef")
        self.namenl_squeeze_ifdef.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_squeeze_ifdef, 443, 0)
        self.nl_squeeze_ifdef = QtWidgets.QComboBox()
        self.nl_squeeze_ifdef.addItems(['true','false'])
        self.nl_squeeze_ifdef.setCurrentText('false')
        self.lt4.addWidget(self.nl_squeeze_ifdef, 443, 1, 1, 4)
        self.labelnl_squeeze_ifdef_top_level = QtWidgets.QLabel(self.tr("Makes the nl_squeeze_ifdef option affect the top-level #ifdefs as well.")+' '+self.tr("\n"))
        self.labelnl_squeeze_ifdef_top_level.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_squeeze_ifdef_top_level, 444, 0, 1, 5)
        if self.tr("code_nl_squeeze_ifdef_top_level")!="code_nl_squeeze_ifdef_top_level":
            self.codenl_squeeze_ifdef_top_level = QtWidgets.QLabel(self.tr("code_nl_squeeze_ifdef_top_level"))
            self.codenl_squeeze_ifdef_top_level.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_squeeze_ifdef_top_level, 445, 0, 1, 5)
        self.namenl_squeeze_ifdef_top_level = QtWidgets.QLabel("nl_squeeze_ifdef_top_level")
        self.namenl_squeeze_ifdef_top_level.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_squeeze_ifdef_top_level, 446, 0)
        self.nl_squeeze_ifdef_top_level = QtWidgets.QComboBox()
        self.nl_squeeze_ifdef_top_level.addItems(['true','false'])
        self.nl_squeeze_ifdef_top_level.setCurrentText('false')
        self.lt4.addWidget(self.nl_squeeze_ifdef_top_level, 446, 1, 1, 4)
        self.labelnl_before_if = QtWidgets.QLabel(self.tr("Add or remove blank line before 'if'.")+' '+self.tr("\n"))
        self.labelnl_before_if.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_if, 447, 0, 1, 5)
        if self.tr("code_nl_before_if")!="code_nl_before_if":
            self.codenl_before_if = QtWidgets.QLabel(self.tr("code_nl_before_if"))
            self.codenl_before_if.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_if, 448, 0, 1, 5)
        self.namenl_before_if = QtWidgets.QLabel("nl_before_if")
        self.namenl_before_if.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_if, 449, 0)
        self.nl_before_if = QtWidgets.QComboBox()
        self.nl_before_if.addItems(['ignore','add','remove','force'])
        self.nl_before_if.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_if, 449, 1, 1, 4)
        self.labelnl_after_if = QtWidgets.QLabel(self.tr("Add or remove blank line after 'if' statement.")+' '+self.tr("Add/Force work only if the next token is not a closing brace.")+' '+self.tr("\n"))
        self.labelnl_after_if.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_if, 450, 0, 1, 5)
        if self.tr("code_nl_after_if")!="code_nl_after_if":
            self.codenl_after_if = QtWidgets.QLabel(self.tr("code_nl_after_if"))
            self.codenl_after_if.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_if, 451, 0, 1, 5)
        self.namenl_after_if = QtWidgets.QLabel("nl_after_if")
        self.namenl_after_if.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_if, 452, 0)
        self.nl_after_if = QtWidgets.QComboBox()
        self.nl_after_if.addItems(['ignore','add','remove','force'])
        self.nl_after_if.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_if, 452, 1, 1, 4)
        self.labelnl_before_for = QtWidgets.QLabel(self.tr("Add or remove blank line before 'for'.")+' '+self.tr("\n"))
        self.labelnl_before_for.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_for, 453, 0, 1, 5)
        if self.tr("code_nl_before_for")!="code_nl_before_for":
            self.codenl_before_for = QtWidgets.QLabel(self.tr("code_nl_before_for"))
            self.codenl_before_for.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_for, 454, 0, 1, 5)
        self.namenl_before_for = QtWidgets.QLabel("nl_before_for")
        self.namenl_before_for.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_for, 455, 0)
        self.nl_before_for = QtWidgets.QComboBox()
        self.nl_before_for.addItems(['ignore','add','remove','force'])
        self.nl_before_for.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_for, 455, 1, 1, 4)
        self.labelnl_after_for = QtWidgets.QLabel(self.tr("Add or remove blank line after 'for' statement.")+' '+self.tr("\n"))
        self.labelnl_after_for.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_for, 456, 0, 1, 5)
        if self.tr("code_nl_after_for")!="code_nl_after_for":
            self.codenl_after_for = QtWidgets.QLabel(self.tr("code_nl_after_for"))
            self.codenl_after_for.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_for, 457, 0, 1, 5)
        self.namenl_after_for = QtWidgets.QLabel("nl_after_for")
        self.namenl_after_for.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_for, 458, 0)
        self.nl_after_for = QtWidgets.QComboBox()
        self.nl_after_for.addItems(['ignore','add','remove','force'])
        self.nl_after_for.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_for, 458, 1, 1, 4)
        self.labelnl_before_while = QtWidgets.QLabel(self.tr("Add or remove blank line before 'while'.")+' '+self.tr("\n"))
        self.labelnl_before_while.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_while, 459, 0, 1, 5)
        if self.tr("code_nl_before_while")!="code_nl_before_while":
            self.codenl_before_while = QtWidgets.QLabel(self.tr("code_nl_before_while"))
            self.codenl_before_while.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_while, 460, 0, 1, 5)
        self.namenl_before_while = QtWidgets.QLabel("nl_before_while")
        self.namenl_before_while.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_while, 461, 0)
        self.nl_before_while = QtWidgets.QComboBox()
        self.nl_before_while.addItems(['ignore','add','remove','force'])
        self.nl_before_while.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_while, 461, 1, 1, 4)
        self.labelnl_after_while = QtWidgets.QLabel(self.tr("Add or remove blank line after 'while' statement.")+' '+self.tr("\n"))
        self.labelnl_after_while.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_while, 462, 0, 1, 5)
        if self.tr("code_nl_after_while")!="code_nl_after_while":
            self.codenl_after_while = QtWidgets.QLabel(self.tr("code_nl_after_while"))
            self.codenl_after_while.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_while, 463, 0, 1, 5)
        self.namenl_after_while = QtWidgets.QLabel("nl_after_while")
        self.namenl_after_while.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_while, 464, 0)
        self.nl_after_while = QtWidgets.QComboBox()
        self.nl_after_while.addItems(['ignore','add','remove','force'])
        self.nl_after_while.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_while, 464, 1, 1, 4)
        self.labelnl_before_switch = QtWidgets.QLabel(self.tr("Add or remove blank line before 'switch'.")+' '+self.tr("\n"))
        self.labelnl_before_switch.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_switch, 465, 0, 1, 5)
        if self.tr("code_nl_before_switch")!="code_nl_before_switch":
            self.codenl_before_switch = QtWidgets.QLabel(self.tr("code_nl_before_switch"))
            self.codenl_before_switch.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_switch, 466, 0, 1, 5)
        self.namenl_before_switch = QtWidgets.QLabel("nl_before_switch")
        self.namenl_before_switch.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_switch, 467, 0)
        self.nl_before_switch = QtWidgets.QComboBox()
        self.nl_before_switch.addItems(['ignore','add','remove','force'])
        self.nl_before_switch.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_switch, 467, 1, 1, 4)
        self.labelnl_after_switch = QtWidgets.QLabel(self.tr("Add or remove blank line after 'switch' statement.")+' '+self.tr("\n"))
        self.labelnl_after_switch.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_switch, 468, 0, 1, 5)
        if self.tr("code_nl_after_switch")!="code_nl_after_switch":
            self.codenl_after_switch = QtWidgets.QLabel(self.tr("code_nl_after_switch"))
            self.codenl_after_switch.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_switch, 469, 0, 1, 5)
        self.namenl_after_switch = QtWidgets.QLabel("nl_after_switch")
        self.namenl_after_switch.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_switch, 470, 0)
        self.nl_after_switch = QtWidgets.QComboBox()
        self.nl_after_switch.addItems(['ignore','add','remove','force'])
        self.nl_after_switch.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_switch, 470, 1, 1, 4)
        self.labelnl_before_synchronized = QtWidgets.QLabel(self.tr("Add or remove blank line before 'synchronized'.")+' '+self.tr("\n"))
        self.labelnl_before_synchronized.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_synchronized, 471, 0, 1, 5)
        if self.tr("code_nl_before_synchronized")!="code_nl_before_synchronized":
            self.codenl_before_synchronized = QtWidgets.QLabel(self.tr("code_nl_before_synchronized"))
            self.codenl_before_synchronized.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_synchronized, 472, 0, 1, 5)
        self.namenl_before_synchronized = QtWidgets.QLabel("nl_before_synchronized")
        self.namenl_before_synchronized.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_synchronized, 473, 0)
        self.nl_before_synchronized = QtWidgets.QComboBox()
        self.nl_before_synchronized.addItems(['ignore','add','remove','force'])
        self.nl_before_synchronized.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_synchronized, 473, 1, 1, 4)
        self.labelnl_after_synchronized = QtWidgets.QLabel(self.tr("Add or remove blank line after 'synchronized' statement.")+' '+self.tr("\n"))
        self.labelnl_after_synchronized.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_synchronized, 474, 0, 1, 5)
        if self.tr("code_nl_after_synchronized")!="code_nl_after_synchronized":
            self.codenl_after_synchronized = QtWidgets.QLabel(self.tr("code_nl_after_synchronized"))
            self.codenl_after_synchronized.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_synchronized, 475, 0, 1, 5)
        self.namenl_after_synchronized = QtWidgets.QLabel("nl_after_synchronized")
        self.namenl_after_synchronized.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_synchronized, 476, 0)
        self.nl_after_synchronized = QtWidgets.QComboBox()
        self.nl_after_synchronized.addItems(['ignore','add','remove','force'])
        self.nl_after_synchronized.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_synchronized, 476, 1, 1, 4)
        self.labelnl_before_do = QtWidgets.QLabel(self.tr("Add or remove blank line before 'do'.")+' '+self.tr("\n"))
        self.labelnl_before_do.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_do, 477, 0, 1, 5)
        if self.tr("code_nl_before_do")!="code_nl_before_do":
            self.codenl_before_do = QtWidgets.QLabel(self.tr("code_nl_before_do"))
            self.codenl_before_do.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_do, 478, 0, 1, 5)
        self.namenl_before_do = QtWidgets.QLabel("nl_before_do")
        self.namenl_before_do.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_do, 479, 0)
        self.nl_before_do = QtWidgets.QComboBox()
        self.nl_before_do.addItems(['ignore','add','remove','force'])
        self.nl_before_do.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_do, 479, 1, 1, 4)
        self.labelnl_after_do = QtWidgets.QLabel(self.tr("Add or remove blank line after 'do/while' statement.")+' '+self.tr("\n"))
        self.labelnl_after_do.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_do, 480, 0, 1, 5)
        if self.tr("code_nl_after_do")!="code_nl_after_do":
            self.codenl_after_do = QtWidgets.QLabel(self.tr("code_nl_after_do"))
            self.codenl_after_do.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_do, 481, 0, 1, 5)
        self.namenl_after_do = QtWidgets.QLabel("nl_after_do")
        self.namenl_after_do.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_do, 482, 0)
        self.nl_after_do = QtWidgets.QComboBox()
        self.nl_after_do.addItems(['ignore','add','remove','force'])
        self.nl_after_do.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_do, 482, 1, 1, 4)
        self.labelnl_before_return = QtWidgets.QLabel(self.tr("Whether to put a blank line before 'return' statements, unless after an open brace.")+' '+self.tr("\n"))
        self.labelnl_before_return.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_return, 483, 0, 1, 5)
        if self.tr("code_nl_before_return")!="code_nl_before_return":
            self.codenl_before_return = QtWidgets.QLabel(self.tr("code_nl_before_return"))
            self.codenl_before_return.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_return, 484, 0, 1, 5)
        self.namenl_before_return = QtWidgets.QLabel("nl_before_return")
        self.namenl_before_return.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_return, 485, 0)
        self.nl_before_return = QtWidgets.QComboBox()
        self.nl_before_return.addItems(['true','false'])
        self.nl_before_return.setCurrentText('false')
        self.lt4.addWidget(self.nl_before_return, 485, 1, 1, 4)
        self.labelnl_after_return = QtWidgets.QLabel(self.tr("Whether to put a blank line after 'return' statements, unless followed by a close brace.")+' '+self.tr("\n"))
        self.labelnl_after_return.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_return, 486, 0, 1, 5)
        if self.tr("code_nl_after_return")!="code_nl_after_return":
            self.codenl_after_return = QtWidgets.QLabel(self.tr("code_nl_after_return"))
            self.codenl_after_return.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_return, 487, 0, 1, 5)
        self.namenl_after_return = QtWidgets.QLabel("nl_after_return")
        self.namenl_after_return.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_return, 488, 0)
        self.nl_after_return = QtWidgets.QComboBox()
        self.nl_after_return.addItems(['true','false'])
        self.nl_after_return.setCurrentText('false')
        self.lt4.addWidget(self.nl_after_return, 488, 1, 1, 4)
        self.labelnl_before_member = QtWidgets.QLabel(self.tr("Whether to put a blank line before a member '.' or '->' operators.")+' '+self.tr("\n"))
        self.labelnl_before_member.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_before_member, 489, 0, 1, 5)
        if self.tr("code_nl_before_member")!="code_nl_before_member":
            self.codenl_before_member = QtWidgets.QLabel(self.tr("code_nl_before_member"))
            self.codenl_before_member.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_before_member, 490, 0, 1, 5)
        self.namenl_before_member = QtWidgets.QLabel("nl_before_member")
        self.namenl_before_member.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_before_member, 491, 0)
        self.nl_before_member = QtWidgets.QComboBox()
        self.nl_before_member.addItems(['ignore','add','remove','force'])
        self.nl_before_member.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_before_member, 491, 1, 1, 4)
        self.labelnl_after_member = QtWidgets.QLabel(self.tr("(Java) Whether to put a blank line after a member '.' or '->' operators.")+' '+self.tr("\n"))
        self.labelnl_after_member.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_after_member, 492, 0, 1, 5)
        if self.tr("code_nl_after_member")!="code_nl_after_member":
            self.codenl_after_member = QtWidgets.QLabel(self.tr("code_nl_after_member"))
            self.codenl_after_member.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_after_member, 493, 0, 1, 5)
        self.namenl_after_member = QtWidgets.QLabel("nl_after_member")
        self.namenl_after_member.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_after_member, 494, 0)
        self.nl_after_member = QtWidgets.QComboBox()
        self.nl_after_member.addItems(['ignore','add','remove','force'])
        self.nl_after_member.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_after_member, 494, 1, 1, 4)
        self.labelnl_ds_struct_enum_cmt = QtWidgets.QLabel(self.tr("Whether to double-space commented-entries in 'struct'/'union'/'enum'.")+' '+self.tr("\n"))
        self.labelnl_ds_struct_enum_cmt.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_ds_struct_enum_cmt, 495, 0, 1, 5)
        if self.tr("code_nl_ds_struct_enum_cmt")!="code_nl_ds_struct_enum_cmt":
            self.codenl_ds_struct_enum_cmt = QtWidgets.QLabel(self.tr("code_nl_ds_struct_enum_cmt"))
            self.codenl_ds_struct_enum_cmt.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_ds_struct_enum_cmt, 496, 0, 1, 5)
        self.namenl_ds_struct_enum_cmt = QtWidgets.QLabel("nl_ds_struct_enum_cmt")
        self.namenl_ds_struct_enum_cmt.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_ds_struct_enum_cmt, 497, 0)
        self.nl_ds_struct_enum_cmt = QtWidgets.QComboBox()
        self.nl_ds_struct_enum_cmt.addItems(['true','false'])
        self.nl_ds_struct_enum_cmt.setCurrentText('false')
        self.lt4.addWidget(self.nl_ds_struct_enum_cmt, 497, 1, 1, 4)
        self.labelnl_ds_struct_enum_close_brace = QtWidgets.QLabel(self.tr("Whether to force a newline before '}' of a 'struct'/'union'/'enum'. (Lower priority than eat_blanks_before_close_brace.)")+' '+self.tr("\n"))
        self.labelnl_ds_struct_enum_close_brace.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_ds_struct_enum_close_brace, 498, 0, 1, 5)
        if self.tr("code_nl_ds_struct_enum_close_brace")!="code_nl_ds_struct_enum_close_brace":
            self.codenl_ds_struct_enum_close_brace = QtWidgets.QLabel(self.tr("code_nl_ds_struct_enum_close_brace"))
            self.codenl_ds_struct_enum_close_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_ds_struct_enum_close_brace, 499, 0, 1, 5)
        self.namenl_ds_struct_enum_close_brace = QtWidgets.QLabel("nl_ds_struct_enum_close_brace")
        self.namenl_ds_struct_enum_close_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_ds_struct_enum_close_brace, 500, 0)
        self.nl_ds_struct_enum_close_brace = QtWidgets.QComboBox()
        self.nl_ds_struct_enum_close_brace.addItems(['true','false'])
        self.nl_ds_struct_enum_close_brace.setCurrentText('false')
        self.lt4.addWidget(self.nl_ds_struct_enum_close_brace, 500, 1, 1, 4)
        self.labelnl_class_colon = QtWidgets.QLabel(self.tr("Add or remove newline before or after (depending on pos_class_colon) a class colon, as in 'class Foo <here> : <or here> public Bar'.")+' '+self.tr("\n"))
        self.labelnl_class_colon.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_class_colon, 501, 0, 1, 5)
        if self.tr("code_nl_class_colon")!="code_nl_class_colon":
            self.codenl_class_colon = QtWidgets.QLabel(self.tr("code_nl_class_colon"))
            self.codenl_class_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_class_colon, 502, 0, 1, 5)
        self.namenl_class_colon = QtWidgets.QLabel("nl_class_colon")
        self.namenl_class_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_class_colon, 503, 0)
        self.nl_class_colon = QtWidgets.QComboBox()
        self.nl_class_colon.addItems(['ignore','add','remove','force'])
        self.nl_class_colon.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_class_colon, 503, 1, 1, 4)
        self.labelnl_constr_colon = QtWidgets.QLabel(self.tr("Add or remove newline around a class constructor colon.")+' '+self.tr("The exact position depends on nl_constr_init_args, pos_constr_colon and pos_constr_comma.")+' '+self.tr("\n"))
        self.labelnl_constr_colon.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_constr_colon, 504, 0, 1, 5)
        if self.tr("code_nl_constr_colon")!="code_nl_constr_colon":
            self.codenl_constr_colon = QtWidgets.QLabel(self.tr("code_nl_constr_colon"))
            self.codenl_constr_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_constr_colon, 505, 0, 1, 5)
        self.namenl_constr_colon = QtWidgets.QLabel("nl_constr_colon")
        self.namenl_constr_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_constr_colon, 506, 0)
        self.nl_constr_colon = QtWidgets.QComboBox()
        self.nl_constr_colon.addItems(['ignore','add','remove','force'])
        self.nl_constr_colon.setCurrentText('ignore')
        self.lt4.addWidget(self.nl_constr_colon, 506, 1, 1, 4)
        self.labelnl_namespace_two_to_one_liner = QtWidgets.QLabel(self.tr("Whether to collapse a two-line namespace, like 'namespace foo\n{ decl; }' into a single line.")+' '+self.tr("If true, prevents other brace newline rules from turning such code into four lines.")+' '+self.tr("\n"))
        self.labelnl_namespace_two_to_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_namespace_two_to_one_liner, 507, 0, 1, 5)
        if self.tr("code_nl_namespace_two_to_one_liner")!="code_nl_namespace_two_to_one_liner":
            self.codenl_namespace_two_to_one_liner = QtWidgets.QLabel(self.tr("code_nl_namespace_two_to_one_liner"))
            self.codenl_namespace_two_to_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_namespace_two_to_one_liner, 508, 0, 1, 5)
        self.namenl_namespace_two_to_one_liner = QtWidgets.QLabel("nl_namespace_two_to_one_liner")
        self.namenl_namespace_two_to_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_namespace_two_to_one_liner, 509, 0)
        self.nl_namespace_two_to_one_liner = QtWidgets.QComboBox()
        self.nl_namespace_two_to_one_liner.addItems(['true','false'])
        self.nl_namespace_two_to_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_namespace_two_to_one_liner, 509, 1, 1, 4)
        self.labelnl_create_if_one_liner = QtWidgets.QLabel(self.tr("Whether to remove a newline in simple unbraced if statements, turning them into one-liners, as in 'if(b)\n i++;' => 'if(b) i++;'.")+' '+self.tr("\n"))
        self.labelnl_create_if_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_create_if_one_liner, 510, 0, 1, 5)
        if self.tr("code_nl_create_if_one_liner")!="code_nl_create_if_one_liner":
            self.codenl_create_if_one_liner = QtWidgets.QLabel(self.tr("code_nl_create_if_one_liner"))
            self.codenl_create_if_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_create_if_one_liner, 511, 0, 1, 5)
        self.namenl_create_if_one_liner = QtWidgets.QLabel("nl_create_if_one_liner")
        self.namenl_create_if_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_create_if_one_liner, 512, 0)
        self.nl_create_if_one_liner = QtWidgets.QComboBox()
        self.nl_create_if_one_liner.addItems(['true','false'])
        self.nl_create_if_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_if_one_liner, 512, 1, 1, 4)
        self.labelnl_create_for_one_liner = QtWidgets.QLabel(self.tr("Whether to remove a newline in simple unbraced for statements, turning them into one-liners, as in 'for (...)\n stmt;' => 'for (...) stmt;'.")+' '+self.tr("\n"))
        self.labelnl_create_for_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_create_for_one_liner, 513, 0, 1, 5)
        if self.tr("code_nl_create_for_one_liner")!="code_nl_create_for_one_liner":
            self.codenl_create_for_one_liner = QtWidgets.QLabel(self.tr("code_nl_create_for_one_liner"))
            self.codenl_create_for_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_create_for_one_liner, 514, 0, 1, 5)
        self.namenl_create_for_one_liner = QtWidgets.QLabel("nl_create_for_one_liner")
        self.namenl_create_for_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_create_for_one_liner, 515, 0)
        self.nl_create_for_one_liner = QtWidgets.QComboBox()
        self.nl_create_for_one_liner.addItems(['true','false'])
        self.nl_create_for_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_for_one_liner, 515, 1, 1, 4)
        self.labelnl_create_while_one_liner = QtWidgets.QLabel(self.tr("Whether to remove a newline in simple unbraced while statements, turning them into one-liners, as in 'while (expr)\n stmt;' => 'while (expr) stmt;'.")+' '+self.tr("\n"))
        self.labelnl_create_while_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_create_while_one_liner, 516, 0, 1, 5)
        if self.tr("code_nl_create_while_one_liner")!="code_nl_create_while_one_liner":
            self.codenl_create_while_one_liner = QtWidgets.QLabel(self.tr("code_nl_create_while_one_liner"))
            self.codenl_create_while_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_create_while_one_liner, 517, 0, 1, 5)
        self.namenl_create_while_one_liner = QtWidgets.QLabel("nl_create_while_one_liner")
        self.namenl_create_while_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_create_while_one_liner, 518, 0)
        self.nl_create_while_one_liner = QtWidgets.QComboBox()
        self.nl_create_while_one_liner.addItems(['true','false'])
        self.nl_create_while_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_while_one_liner, 518, 1, 1, 4)
        self.labelnl_create_func_def_one_liner = QtWidgets.QLabel(self.tr("Whether to collapse a function definition whose body (not counting braces) is only one line so that the entire definition (prototype, braces, body) is a single line.")+' '+self.tr("\n"))
        self.labelnl_create_func_def_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_create_func_def_one_liner, 519, 0, 1, 5)
        if self.tr("code_nl_create_func_def_one_liner")!="code_nl_create_func_def_one_liner":
            self.codenl_create_func_def_one_liner = QtWidgets.QLabel(self.tr("code_nl_create_func_def_one_liner"))
            self.codenl_create_func_def_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_create_func_def_one_liner, 520, 0, 1, 5)
        self.namenl_create_func_def_one_liner = QtWidgets.QLabel("nl_create_func_def_one_liner")
        self.namenl_create_func_def_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_create_func_def_one_liner, 521, 0)
        self.nl_create_func_def_one_liner = QtWidgets.QComboBox()
        self.nl_create_func_def_one_liner.addItems(['true','false'])
        self.nl_create_func_def_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_func_def_one_liner, 521, 1, 1, 4)
        self.labelnl_create_list_one_liner = QtWidgets.QLabel(self.tr("Whether to collapse a function definition whose body (not counting braces) is only one line so that the entire definition (prototype, braces, body) is a single line.")+' '+self.tr("\n"))
        self.labelnl_create_list_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_create_list_one_liner, 522, 0, 1, 5)
        if self.tr("code_nl_create_list_one_liner")!="code_nl_create_list_one_liner":
            self.codenl_create_list_one_liner = QtWidgets.QLabel(self.tr("code_nl_create_list_one_liner"))
            self.codenl_create_list_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_create_list_one_liner, 523, 0, 1, 5)
        self.namenl_create_list_one_liner = QtWidgets.QLabel("nl_create_list_one_liner")
        self.namenl_create_list_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_create_list_one_liner, 524, 0)
        self.nl_create_list_one_liner = QtWidgets.QComboBox()
        self.nl_create_list_one_liner.addItems(['true','false'])
        self.nl_create_list_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_create_list_one_liner, 524, 1, 1, 4)
        self.labelnl_split_if_one_liner = QtWidgets.QLabel(self.tr("Whether to split one-line simple unbraced if statements into two lines by adding a newline, as in 'if(b) <here> i++;'.")+' '+self.tr("\n"))
        self.labelnl_split_if_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_split_if_one_liner, 525, 0, 1, 5)
        if self.tr("code_nl_split_if_one_liner")!="code_nl_split_if_one_liner":
            self.codenl_split_if_one_liner = QtWidgets.QLabel(self.tr("code_nl_split_if_one_liner"))
            self.codenl_split_if_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_split_if_one_liner, 526, 0, 1, 5)
        self.namenl_split_if_one_liner = QtWidgets.QLabel("nl_split_if_one_liner")
        self.namenl_split_if_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_split_if_one_liner, 527, 0)
        self.nl_split_if_one_liner = QtWidgets.QComboBox()
        self.nl_split_if_one_liner.addItems(['true','false'])
        self.nl_split_if_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_split_if_one_liner, 527, 1, 1, 4)
        self.labelnl_split_for_one_liner = QtWidgets.QLabel(self.tr("Whether to split one-line simple unbraced for statements into two lines by adding a newline, as in 'for (...) <here> stmt;'.")+' '+self.tr("\n"))
        self.labelnl_split_for_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_split_for_one_liner, 528, 0, 1, 5)
        if self.tr("code_nl_split_for_one_liner")!="code_nl_split_for_one_liner":
            self.codenl_split_for_one_liner = QtWidgets.QLabel(self.tr("code_nl_split_for_one_liner"))
            self.codenl_split_for_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_split_for_one_liner, 529, 0, 1, 5)
        self.namenl_split_for_one_liner = QtWidgets.QLabel("nl_split_for_one_liner")
        self.namenl_split_for_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_split_for_one_liner, 530, 0)
        self.nl_split_for_one_liner = QtWidgets.QComboBox()
        self.nl_split_for_one_liner.addItems(['true','false'])
        self.nl_split_for_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_split_for_one_liner, 530, 1, 1, 4)
        self.labelnl_split_while_one_liner = QtWidgets.QLabel(self.tr("Whether to split one-line simple unbraced while statements into two lines by adding a newline, as in 'while (expr) <here> stmt;'.")+' '+self.tr("\n"))
        self.labelnl_split_while_one_liner.setWordWrap(True)
        self.lt4.addWidget(self.labelnl_split_while_one_liner, 531, 0, 1, 5)
        if self.tr("code_nl_split_while_one_liner")!="code_nl_split_while_one_liner":
            self.codenl_split_while_one_liner = QtWidgets.QLabel(self.tr("code_nl_split_while_one_liner"))
            self.codenl_split_while_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt4.addWidget(self.codenl_split_while_one_liner, 532, 0, 1, 5)
        self.namenl_split_while_one_liner = QtWidgets.QLabel("nl_split_while_one_liner")
        self.namenl_split_while_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt4.addWidget(self.namenl_split_while_one_liner, 533, 0)
        self.nl_split_while_one_liner = QtWidgets.QComboBox()
        self.nl_split_while_one_liner.addItems(['true','false'])
        self.nl_split_while_one_liner.setCurrentText('false')
        self.lt4.addWidget(self.nl_split_while_one_liner, 533, 1, 1, 4)
        self.widget5 = QtWidgets.QWidget()
        self.addItem(self.widget5, self.tr("Blank line options"))
        self.lt5 = QtWidgets.QGridLayout(self.widget5)
        self.labelnl_max = QtWidgets.QLabel(self.tr("The maximum number of consecutive newlines (3 = 2 blank lines).")+' '+self.tr("\n"))
        self.labelnl_max.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_max, 0, 0, 1, 5)
        if self.tr("code_nl_max")!="code_nl_max":
            self.codenl_max = QtWidgets.QLabel(self.tr("code_nl_max"))
            self.codenl_max.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_max, 1, 0, 1, 5)
        self.namenl_max = QtWidgets.QLabel("nl_max")
        self.namenl_max.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_max, 2, 0)
        self.nl_max = QtWidgets.QSpinBox()
        self.nl_max.setMinimum(0)
        self.nl_max.setMaximum(100)
        self.nl_max.setValue(0)
        self.lt5.addWidget(self.nl_max, 2, 1, 1, 4)
        self.labelnl_max_blank_in_func = QtWidgets.QLabel(self.tr("The maximum number of consecutive newlines in a function.")+' '+self.tr("\n"))
        self.labelnl_max_blank_in_func.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_max_blank_in_func, 3, 0, 1, 5)
        if self.tr("code_nl_max_blank_in_func")!="code_nl_max_blank_in_func":
            self.codenl_max_blank_in_func = QtWidgets.QLabel(self.tr("code_nl_max_blank_in_func"))
            self.codenl_max_blank_in_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_max_blank_in_func, 4, 0, 1, 5)
        self.namenl_max_blank_in_func = QtWidgets.QLabel("nl_max_blank_in_func")
        self.namenl_max_blank_in_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_max_blank_in_func, 5, 0)
        self.nl_max_blank_in_func = QtWidgets.QSpinBox()
        self.nl_max_blank_in_func.setMinimum(0)
        self.nl_max_blank_in_func.setMaximum(100)
        self.nl_max_blank_in_func.setValue(0)
        self.lt5.addWidget(self.nl_max_blank_in_func, 5, 1, 1, 4)
        self.labelnl_before_func_body_proto = QtWidgets.QLabel(self.tr("The number of newlines before a function prototype.")+' '+self.tr("\n"))
        self.labelnl_before_func_body_proto.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_func_body_proto, 6, 0, 1, 5)
        if self.tr("code_nl_before_func_body_proto")!="code_nl_before_func_body_proto":
            self.codenl_before_func_body_proto = QtWidgets.QLabel(self.tr("code_nl_before_func_body_proto"))
            self.codenl_before_func_body_proto.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_func_body_proto, 7, 0, 1, 5)
        self.namenl_before_func_body_proto = QtWidgets.QLabel("nl_before_func_body_proto")
        self.namenl_before_func_body_proto.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_func_body_proto, 8, 0)
        self.nl_before_func_body_proto = QtWidgets.QSpinBox()
        self.nl_before_func_body_proto.setMinimum(0)
        self.nl_before_func_body_proto.setMaximum(100)
        self.nl_before_func_body_proto.setValue(0)
        self.lt5.addWidget(self.nl_before_func_body_proto, 8, 1, 1, 4)
        self.labelnl_before_func_body_def = QtWidgets.QLabel(self.tr("The number of newlines before a multi-line function definition.")+' '+self.tr("\n"))
        self.labelnl_before_func_body_def.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_func_body_def, 9, 0, 1, 5)
        if self.tr("code_nl_before_func_body_def")!="code_nl_before_func_body_def":
            self.codenl_before_func_body_def = QtWidgets.QLabel(self.tr("code_nl_before_func_body_def"))
            self.codenl_before_func_body_def.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_func_body_def, 10, 0, 1, 5)
        self.namenl_before_func_body_def = QtWidgets.QLabel("nl_before_func_body_def")
        self.namenl_before_func_body_def.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_func_body_def, 11, 0)
        self.nl_before_func_body_def = QtWidgets.QSpinBox()
        self.nl_before_func_body_def.setMinimum(0)
        self.nl_before_func_body_def.setMaximum(100)
        self.nl_before_func_body_def.setValue(0)
        self.lt5.addWidget(self.nl_before_func_body_def, 11, 1, 1, 4)
        self.labelnl_before_func_class_proto = QtWidgets.QLabel(self.tr("The number of newlines before a class constructor/destructor prototype.")+' '+self.tr("\n"))
        self.labelnl_before_func_class_proto.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_func_class_proto, 12, 0, 1, 5)
        if self.tr("code_nl_before_func_class_proto")!="code_nl_before_func_class_proto":
            self.codenl_before_func_class_proto = QtWidgets.QLabel(self.tr("code_nl_before_func_class_proto"))
            self.codenl_before_func_class_proto.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_func_class_proto, 13, 0, 1, 5)
        self.namenl_before_func_class_proto = QtWidgets.QLabel("nl_before_func_class_proto")
        self.namenl_before_func_class_proto.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_func_class_proto, 14, 0)
        self.nl_before_func_class_proto = QtWidgets.QSpinBox()
        self.nl_before_func_class_proto.setMinimum(0)
        self.nl_before_func_class_proto.setMaximum(100)
        self.nl_before_func_class_proto.setValue(0)
        self.lt5.addWidget(self.nl_before_func_class_proto, 14, 1, 1, 4)
        self.labelnl_before_func_class_def = QtWidgets.QLabel(self.tr("The number of newlines before a class constructor/destructor definition.")+' '+self.tr("\n"))
        self.labelnl_before_func_class_def.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_func_class_def, 15, 0, 1, 5)
        if self.tr("code_nl_before_func_class_def")!="code_nl_before_func_class_def":
            self.codenl_before_func_class_def = QtWidgets.QLabel(self.tr("code_nl_before_func_class_def"))
            self.codenl_before_func_class_def.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_func_class_def, 16, 0, 1, 5)
        self.namenl_before_func_class_def = QtWidgets.QLabel("nl_before_func_class_def")
        self.namenl_before_func_class_def.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_func_class_def, 17, 0)
        self.nl_before_func_class_def = QtWidgets.QSpinBox()
        self.nl_before_func_class_def.setMinimum(0)
        self.nl_before_func_class_def.setMaximum(100)
        self.nl_before_func_class_def.setValue(0)
        self.lt5.addWidget(self.nl_before_func_class_def, 17, 1, 1, 4)
        self.labelnl_after_func_proto = QtWidgets.QLabel(self.tr("The number of newlines after a function prototype.")+' '+self.tr("\n"))
        self.labelnl_after_func_proto.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_func_proto, 18, 0, 1, 5)
        if self.tr("code_nl_after_func_proto")!="code_nl_after_func_proto":
            self.codenl_after_func_proto = QtWidgets.QLabel(self.tr("code_nl_after_func_proto"))
            self.codenl_after_func_proto.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_func_proto, 19, 0, 1, 5)
        self.namenl_after_func_proto = QtWidgets.QLabel("nl_after_func_proto")
        self.namenl_after_func_proto.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_func_proto, 20, 0)
        self.nl_after_func_proto = QtWidgets.QSpinBox()
        self.nl_after_func_proto.setMinimum(0)
        self.nl_after_func_proto.setMaximum(100)
        self.nl_after_func_proto.setValue(0)
        self.lt5.addWidget(self.nl_after_func_proto, 20, 1, 1, 4)
        self.labelnl_after_func_proto_group = QtWidgets.QLabel(self.tr("The number of newlines after a function prototype, if not followed by another function prototype.")+' '+self.tr("\n"))
        self.labelnl_after_func_proto_group.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_func_proto_group, 21, 0, 1, 5)
        if self.tr("code_nl_after_func_proto_group")!="code_nl_after_func_proto_group":
            self.codenl_after_func_proto_group = QtWidgets.QLabel(self.tr("code_nl_after_func_proto_group"))
            self.codenl_after_func_proto_group.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_func_proto_group, 22, 0, 1, 5)
        self.namenl_after_func_proto_group = QtWidgets.QLabel("nl_after_func_proto_group")
        self.namenl_after_func_proto_group.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_func_proto_group, 23, 0)
        self.nl_after_func_proto_group = QtWidgets.QSpinBox()
        self.nl_after_func_proto_group.setMinimum(0)
        self.nl_after_func_proto_group.setMaximum(100)
        self.nl_after_func_proto_group.setValue(0)
        self.lt5.addWidget(self.nl_after_func_proto_group, 23, 1, 1, 4)
        self.labelnl_after_func_class_proto = QtWidgets.QLabel(self.tr("The number of newlines after a class constructor/destructor prototype.")+' '+self.tr("\n"))
        self.labelnl_after_func_class_proto.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_func_class_proto, 24, 0, 1, 5)
        if self.tr("code_nl_after_func_class_proto")!="code_nl_after_func_class_proto":
            self.codenl_after_func_class_proto = QtWidgets.QLabel(self.tr("code_nl_after_func_class_proto"))
            self.codenl_after_func_class_proto.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_func_class_proto, 25, 0, 1, 5)
        self.namenl_after_func_class_proto = QtWidgets.QLabel("nl_after_func_class_proto")
        self.namenl_after_func_class_proto.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_func_class_proto, 26, 0)
        self.nl_after_func_class_proto = QtWidgets.QSpinBox()
        self.nl_after_func_class_proto.setMinimum(0)
        self.nl_after_func_class_proto.setMaximum(100)
        self.nl_after_func_class_proto.setValue(0)
        self.lt5.addWidget(self.nl_after_func_class_proto, 26, 1, 1, 4)
        self.labelnl_after_func_class_proto_group = QtWidgets.QLabel(self.tr("The number of newlines after a class constructor/destructor prototype, if not followed by another constructor/destructor prototype.")+' '+self.tr("\n"))
        self.labelnl_after_func_class_proto_group.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_func_class_proto_group, 27, 0, 1, 5)
        if self.tr("code_nl_after_func_class_proto_group")!="code_nl_after_func_class_proto_group":
            self.codenl_after_func_class_proto_group = QtWidgets.QLabel(self.tr("code_nl_after_func_class_proto_group"))
            self.codenl_after_func_class_proto_group.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_func_class_proto_group, 28, 0, 1, 5)
        self.namenl_after_func_class_proto_group = QtWidgets.QLabel("nl_after_func_class_proto_group")
        self.namenl_after_func_class_proto_group.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_func_class_proto_group, 29, 0)
        self.nl_after_func_class_proto_group = QtWidgets.QSpinBox()
        self.nl_after_func_class_proto_group.setMinimum(0)
        self.nl_after_func_class_proto_group.setMaximum(100)
        self.nl_after_func_class_proto_group.setValue(0)
        self.lt5.addWidget(self.nl_after_func_class_proto_group, 29, 1, 1, 4)
        self.labelnl_class_leave_one_liner_groups = QtWidgets.QLabel(self.tr("Whether one-line method definitions inside a class body should be treated as if they were prototypes for the purposes of adding newlines.")+' '+self.tr("\n")+' '+self.tr("Requires nl_class_leave_one_liners=true.")+' '+self.tr("Overrides nl_before_func_body_def and nl_before_func_class_def for one-liners.")+' '+self.tr("\n"))
        self.labelnl_class_leave_one_liner_groups.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_class_leave_one_liner_groups, 30, 0, 1, 5)
        if self.tr("code_nl_class_leave_one_liner_groups")!="code_nl_class_leave_one_liner_groups":
            self.codenl_class_leave_one_liner_groups = QtWidgets.QLabel(self.tr("code_nl_class_leave_one_liner_groups"))
            self.codenl_class_leave_one_liner_groups.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_class_leave_one_liner_groups, 31, 0, 1, 5)
        self.namenl_class_leave_one_liner_groups = QtWidgets.QLabel("nl_class_leave_one_liner_groups")
        self.namenl_class_leave_one_liner_groups.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_class_leave_one_liner_groups, 32, 0)
        self.nl_class_leave_one_liner_groups = QtWidgets.QComboBox()
        self.nl_class_leave_one_liner_groups.addItems(['true','false'])
        self.nl_class_leave_one_liner_groups.setCurrentText('false')
        self.lt5.addWidget(self.nl_class_leave_one_liner_groups, 32, 1, 1, 4)
        self.labelnl_after_func_body = QtWidgets.QLabel(self.tr("The number of newlines after '}' of a multi-line function body.")+' '+self.tr("\n"))
        self.labelnl_after_func_body.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_func_body, 33, 0, 1, 5)
        if self.tr("code_nl_after_func_body")!="code_nl_after_func_body":
            self.codenl_after_func_body = QtWidgets.QLabel(self.tr("code_nl_after_func_body"))
            self.codenl_after_func_body.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_func_body, 34, 0, 1, 5)
        self.namenl_after_func_body = QtWidgets.QLabel("nl_after_func_body")
        self.namenl_after_func_body.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_func_body, 35, 0)
        self.nl_after_func_body = QtWidgets.QSpinBox()
        self.nl_after_func_body.setMinimum(0)
        self.nl_after_func_body.setMaximum(100)
        self.nl_after_func_body.setValue(0)
        self.lt5.addWidget(self.nl_after_func_body, 35, 1, 1, 4)
        self.labelnl_after_func_body_class = QtWidgets.QLabel(self.tr("The number of newlines after '}' of a multi-line function body in a class declaration.")+' '+self.tr("Also affects class constructors/destructors.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_after_func_body.")+' '+self.tr("\n"))
        self.labelnl_after_func_body_class.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_func_body_class, 36, 0, 1, 5)
        if self.tr("code_nl_after_func_body_class")!="code_nl_after_func_body_class":
            self.codenl_after_func_body_class = QtWidgets.QLabel(self.tr("code_nl_after_func_body_class"))
            self.codenl_after_func_body_class.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_func_body_class, 37, 0, 1, 5)
        self.namenl_after_func_body_class = QtWidgets.QLabel("nl_after_func_body_class")
        self.namenl_after_func_body_class.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_func_body_class, 38, 0)
        self.nl_after_func_body_class = QtWidgets.QSpinBox()
        self.nl_after_func_body_class.setMinimum(0)
        self.nl_after_func_body_class.setMaximum(100)
        self.nl_after_func_body_class.setValue(0)
        self.lt5.addWidget(self.nl_after_func_body_class, 38, 1, 1, 4)
        self.labelnl_after_func_body_one_liner = QtWidgets.QLabel(self.tr("The number of newlines after '}' of a single line function body.")+' '+self.tr("Also affects class constructors/destructors.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_after_func_body and nl_after_func_body_class.")+' '+self.tr("\n"))
        self.labelnl_after_func_body_one_liner.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_func_body_one_liner, 39, 0, 1, 5)
        if self.tr("code_nl_after_func_body_one_liner")!="code_nl_after_func_body_one_liner":
            self.codenl_after_func_body_one_liner = QtWidgets.QLabel(self.tr("code_nl_after_func_body_one_liner"))
            self.codenl_after_func_body_one_liner.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_func_body_one_liner, 40, 0, 1, 5)
        self.namenl_after_func_body_one_liner = QtWidgets.QLabel("nl_after_func_body_one_liner")
        self.namenl_after_func_body_one_liner.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_func_body_one_liner, 41, 0)
        self.nl_after_func_body_one_liner = QtWidgets.QSpinBox()
        self.nl_after_func_body_one_liner.setMinimum(0)
        self.nl_after_func_body_one_liner.setMaximum(100)
        self.nl_after_func_body_one_liner.setValue(0)
        self.lt5.addWidget(self.nl_after_func_body_one_liner, 41, 1, 1, 4)
        self.labelnl_func_var_def_blk = QtWidgets.QLabel(self.tr("The number of blank lines after a block of variable definitions at the top of a function body.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_func_var_def_blk.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_func_var_def_blk, 42, 0, 1, 5)
        if self.tr("code_nl_func_var_def_blk")!="code_nl_func_var_def_blk":
            self.codenl_func_var_def_blk = QtWidgets.QLabel(self.tr("code_nl_func_var_def_blk"))
            self.codenl_func_var_def_blk.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_func_var_def_blk, 43, 0, 1, 5)
        self.namenl_func_var_def_blk = QtWidgets.QLabel("nl_func_var_def_blk")
        self.namenl_func_var_def_blk.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_func_var_def_blk, 44, 0)
        self.nl_func_var_def_blk = QtWidgets.QSpinBox()
        self.nl_func_var_def_blk.setMinimum(0)
        self.nl_func_var_def_blk.setMaximum(100)
        self.nl_func_var_def_blk.setValue(0)
        self.lt5.addWidget(self.nl_func_var_def_blk, 44, 1, 1, 4)
        self.labelnl_typedef_blk_start = QtWidgets.QLabel(self.tr("The number of newlines before a block of typedefs.")+' '+self.tr("If nl_after_access_spec is non-zero, that option takes precedence.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_typedef_blk_start.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_typedef_blk_start, 45, 0, 1, 5)
        if self.tr("code_nl_typedef_blk_start")!="code_nl_typedef_blk_start":
            self.codenl_typedef_blk_start = QtWidgets.QLabel(self.tr("code_nl_typedef_blk_start"))
            self.codenl_typedef_blk_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_typedef_blk_start, 46, 0, 1, 5)
        self.namenl_typedef_blk_start = QtWidgets.QLabel("nl_typedef_blk_start")
        self.namenl_typedef_blk_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_typedef_blk_start, 47, 0)
        self.nl_typedef_blk_start = QtWidgets.QSpinBox()
        self.nl_typedef_blk_start.setMinimum(0)
        self.nl_typedef_blk_start.setMaximum(100)
        self.nl_typedef_blk_start.setValue(0)
        self.lt5.addWidget(self.nl_typedef_blk_start, 47, 1, 1, 4)
        self.labelnl_typedef_blk_end = QtWidgets.QLabel(self.tr("The number of newlines after a block of typedefs.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_typedef_blk_end.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_typedef_blk_end, 48, 0, 1, 5)
        if self.tr("code_nl_typedef_blk_end")!="code_nl_typedef_blk_end":
            self.codenl_typedef_blk_end = QtWidgets.QLabel(self.tr("code_nl_typedef_blk_end"))
            self.codenl_typedef_blk_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_typedef_blk_end, 49, 0, 1, 5)
        self.namenl_typedef_blk_end = QtWidgets.QLabel("nl_typedef_blk_end")
        self.namenl_typedef_blk_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_typedef_blk_end, 50, 0)
        self.nl_typedef_blk_end = QtWidgets.QSpinBox()
        self.nl_typedef_blk_end.setMinimum(0)
        self.nl_typedef_blk_end.setMaximum(100)
        self.nl_typedef_blk_end.setValue(0)
        self.lt5.addWidget(self.nl_typedef_blk_end, 50, 1, 1, 4)
        self.labelnl_typedef_blk_in = QtWidgets.QLabel(self.tr("The maximum number of consecutive newlines within a block of typedefs.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_typedef_blk_in.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_typedef_blk_in, 51, 0, 1, 5)
        if self.tr("code_nl_typedef_blk_in")!="code_nl_typedef_blk_in":
            self.codenl_typedef_blk_in = QtWidgets.QLabel(self.tr("code_nl_typedef_blk_in"))
            self.codenl_typedef_blk_in.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_typedef_blk_in, 52, 0, 1, 5)
        self.namenl_typedef_blk_in = QtWidgets.QLabel("nl_typedef_blk_in")
        self.namenl_typedef_blk_in.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_typedef_blk_in, 53, 0)
        self.nl_typedef_blk_in = QtWidgets.QSpinBox()
        self.nl_typedef_blk_in.setMinimum(0)
        self.nl_typedef_blk_in.setMaximum(100)
        self.nl_typedef_blk_in.setValue(0)
        self.lt5.addWidget(self.nl_typedef_blk_in, 53, 1, 1, 4)
        self.labelnl_var_def_blk_start = QtWidgets.QLabel(self.tr("The number of newlines before a block of variable definitions not at the top of a function body.")+' '+self.tr("If nl_after_access_spec is non-zero, that option takes precedence.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_var_def_blk_start.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_var_def_blk_start, 54, 0, 1, 5)
        if self.tr("code_nl_var_def_blk_start")!="code_nl_var_def_blk_start":
            self.codenl_var_def_blk_start = QtWidgets.QLabel(self.tr("code_nl_var_def_blk_start"))
            self.codenl_var_def_blk_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_var_def_blk_start, 55, 0, 1, 5)
        self.namenl_var_def_blk_start = QtWidgets.QLabel("nl_var_def_blk_start")
        self.namenl_var_def_blk_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_var_def_blk_start, 56, 0)
        self.nl_var_def_blk_start = QtWidgets.QSpinBox()
        self.nl_var_def_blk_start.setMinimum(0)
        self.nl_var_def_blk_start.setMaximum(100)
        self.nl_var_def_blk_start.setValue(0)
        self.lt5.addWidget(self.nl_var_def_blk_start, 56, 1, 1, 4)
        self.labelnl_var_def_blk_end = QtWidgets.QLabel(self.tr("The number of newlines after a block of variable definitions not at the top of a function body.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_var_def_blk_end.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_var_def_blk_end, 57, 0, 1, 5)
        if self.tr("code_nl_var_def_blk_end")!="code_nl_var_def_blk_end":
            self.codenl_var_def_blk_end = QtWidgets.QLabel(self.tr("code_nl_var_def_blk_end"))
            self.codenl_var_def_blk_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_var_def_blk_end, 58, 0, 1, 5)
        self.namenl_var_def_blk_end = QtWidgets.QLabel("nl_var_def_blk_end")
        self.namenl_var_def_blk_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_var_def_blk_end, 59, 0)
        self.nl_var_def_blk_end = QtWidgets.QSpinBox()
        self.nl_var_def_blk_end.setMinimum(0)
        self.nl_var_def_blk_end.setMaximum(100)
        self.nl_var_def_blk_end.setValue(0)
        self.lt5.addWidget(self.nl_var_def_blk_end, 59, 1, 1, 4)
        self.labelnl_var_def_blk_in = QtWidgets.QLabel(self.tr("The maximum number of consecutive newlines within a block of variable definitions.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_var_def_blk_in.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_var_def_blk_in, 60, 0, 1, 5)
        if self.tr("code_nl_var_def_blk_in")!="code_nl_var_def_blk_in":
            self.codenl_var_def_blk_in = QtWidgets.QLabel(self.tr("code_nl_var_def_blk_in"))
            self.codenl_var_def_blk_in.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_var_def_blk_in, 61, 0, 1, 5)
        self.namenl_var_def_blk_in = QtWidgets.QLabel("nl_var_def_blk_in")
        self.namenl_var_def_blk_in.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_var_def_blk_in, 62, 0)
        self.nl_var_def_blk_in = QtWidgets.QSpinBox()
        self.nl_var_def_blk_in.setMinimum(0)
        self.nl_var_def_blk_in.setMaximum(100)
        self.nl_var_def_blk_in.setValue(0)
        self.lt5.addWidget(self.nl_var_def_blk_in, 62, 1, 1, 4)
        self.labelnl_before_block_comment = QtWidgets.QLabel(self.tr("The minimum number of newlines before a multi-line comment.")+' '+self.tr("Doesn't apply if after a brace open or another multi-line comment.")+' '+self.tr("\n"))
        self.labelnl_before_block_comment.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_block_comment, 63, 0, 1, 5)
        if self.tr("code_nl_before_block_comment")!="code_nl_before_block_comment":
            self.codenl_before_block_comment = QtWidgets.QLabel(self.tr("code_nl_before_block_comment"))
            self.codenl_before_block_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_block_comment, 64, 0, 1, 5)
        self.namenl_before_block_comment = QtWidgets.QLabel("nl_before_block_comment")
        self.namenl_before_block_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_block_comment, 65, 0)
        self.nl_before_block_comment = QtWidgets.QSpinBox()
        self.nl_before_block_comment.setMinimum(0)
        self.nl_before_block_comment.setMaximum(100)
        self.nl_before_block_comment.setValue(0)
        self.lt5.addWidget(self.nl_before_block_comment, 65, 1, 1, 4)
        self.labelnl_before_c_comment = QtWidgets.QLabel(self.tr("The minimum number of newlines before a single-line C comment.")+' '+self.tr("Doesn't apply if after a brace open or other single-line C comments.")+' '+self.tr("\n"))
        self.labelnl_before_c_comment.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_c_comment, 66, 0, 1, 5)
        if self.tr("code_nl_before_c_comment")!="code_nl_before_c_comment":
            self.codenl_before_c_comment = QtWidgets.QLabel(self.tr("code_nl_before_c_comment"))
            self.codenl_before_c_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_c_comment, 67, 0, 1, 5)
        self.namenl_before_c_comment = QtWidgets.QLabel("nl_before_c_comment")
        self.namenl_before_c_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_c_comment, 68, 0)
        self.nl_before_c_comment = QtWidgets.QSpinBox()
        self.nl_before_c_comment.setMinimum(0)
        self.nl_before_c_comment.setMaximum(100)
        self.nl_before_c_comment.setValue(0)
        self.lt5.addWidget(self.nl_before_c_comment, 68, 1, 1, 4)
        self.labelnl_before_cpp_comment = QtWidgets.QLabel(self.tr("The minimum number of newlines before a CPP comment.")+' '+self.tr("Doesn't apply if after a brace open or other CPP comments.")+' '+self.tr("\n"))
        self.labelnl_before_cpp_comment.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_cpp_comment, 69, 0, 1, 5)
        if self.tr("code_nl_before_cpp_comment")!="code_nl_before_cpp_comment":
            self.codenl_before_cpp_comment = QtWidgets.QLabel(self.tr("code_nl_before_cpp_comment"))
            self.codenl_before_cpp_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_cpp_comment, 70, 0, 1, 5)
        self.namenl_before_cpp_comment = QtWidgets.QLabel("nl_before_cpp_comment")
        self.namenl_before_cpp_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_cpp_comment, 71, 0)
        self.nl_before_cpp_comment = QtWidgets.QSpinBox()
        self.nl_before_cpp_comment.setMinimum(0)
        self.nl_before_cpp_comment.setMaximum(100)
        self.nl_before_cpp_comment.setValue(0)
        self.lt5.addWidget(self.nl_before_cpp_comment, 71, 1, 1, 4)
        self.labelnl_after_multiline_comment = QtWidgets.QLabel(self.tr("Whether to force a newline after a multi-line comment.")+' '+self.tr("\n"))
        self.labelnl_after_multiline_comment.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_multiline_comment, 72, 0, 1, 5)
        if self.tr("code_nl_after_multiline_comment")!="code_nl_after_multiline_comment":
            self.codenl_after_multiline_comment = QtWidgets.QLabel(self.tr("code_nl_after_multiline_comment"))
            self.codenl_after_multiline_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_multiline_comment, 73, 0, 1, 5)
        self.namenl_after_multiline_comment = QtWidgets.QLabel("nl_after_multiline_comment")
        self.namenl_after_multiline_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_multiline_comment, 74, 0)
        self.nl_after_multiline_comment = QtWidgets.QComboBox()
        self.nl_after_multiline_comment.addItems(['true','false'])
        self.nl_after_multiline_comment.setCurrentText('false')
        self.lt5.addWidget(self.nl_after_multiline_comment, 74, 1, 1, 4)
        self.labelnl_after_label_colon = QtWidgets.QLabel(self.tr("Whether to force a newline after a label's colon.")+' '+self.tr("\n"))
        self.labelnl_after_label_colon.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_label_colon, 75, 0, 1, 5)
        if self.tr("code_nl_after_label_colon")!="code_nl_after_label_colon":
            self.codenl_after_label_colon = QtWidgets.QLabel(self.tr("code_nl_after_label_colon"))
            self.codenl_after_label_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_label_colon, 76, 0, 1, 5)
        self.namenl_after_label_colon = QtWidgets.QLabel("nl_after_label_colon")
        self.namenl_after_label_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_label_colon, 77, 0)
        self.nl_after_label_colon = QtWidgets.QComboBox()
        self.nl_after_label_colon.addItems(['true','false'])
        self.nl_after_label_colon.setCurrentText('false')
        self.lt5.addWidget(self.nl_after_label_colon, 77, 1, 1, 4)
        self.labelnl_after_struct = QtWidgets.QLabel(self.tr("The number of newlines after '}' or ';' of a struct/enum/union definition.")+' '+self.tr("\n"))
        self.labelnl_after_struct.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_struct, 78, 0, 1, 5)
        if self.tr("code_nl_after_struct")!="code_nl_after_struct":
            self.codenl_after_struct = QtWidgets.QLabel(self.tr("code_nl_after_struct"))
            self.codenl_after_struct.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_struct, 79, 0, 1, 5)
        self.namenl_after_struct = QtWidgets.QLabel("nl_after_struct")
        self.namenl_after_struct.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_struct, 80, 0)
        self.nl_after_struct = QtWidgets.QSpinBox()
        self.nl_after_struct.setMinimum(0)
        self.nl_after_struct.setMaximum(100)
        self.nl_after_struct.setValue(0)
        self.lt5.addWidget(self.nl_after_struct, 80, 1, 1, 4)
        self.labelnl_before_class = QtWidgets.QLabel(self.tr("The number of newlines before a class definition.")+' '+self.tr("\n"))
        self.labelnl_before_class.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_class, 81, 0, 1, 5)
        if self.tr("code_nl_before_class")!="code_nl_before_class":
            self.codenl_before_class = QtWidgets.QLabel(self.tr("code_nl_before_class"))
            self.codenl_before_class.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_class, 82, 0, 1, 5)
        self.namenl_before_class = QtWidgets.QLabel("nl_before_class")
        self.namenl_before_class.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_class, 83, 0)
        self.nl_before_class = QtWidgets.QSpinBox()
        self.nl_before_class.setMinimum(0)
        self.nl_before_class.setMaximum(100)
        self.nl_before_class.setValue(0)
        self.lt5.addWidget(self.nl_before_class, 83, 1, 1, 4)
        self.labelnl_after_class = QtWidgets.QLabel(self.tr("The number of newlines after '}' or ';' of a class definition.")+' '+self.tr("\n"))
        self.labelnl_after_class.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_class, 84, 0, 1, 5)
        if self.tr("code_nl_after_class")!="code_nl_after_class":
            self.codenl_after_class = QtWidgets.QLabel(self.tr("code_nl_after_class"))
            self.codenl_after_class.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_class, 85, 0, 1, 5)
        self.namenl_after_class = QtWidgets.QLabel("nl_after_class")
        self.namenl_after_class.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_class, 86, 0)
        self.nl_after_class = QtWidgets.QSpinBox()
        self.nl_after_class.setMinimum(0)
        self.nl_after_class.setMaximum(100)
        self.nl_after_class.setValue(0)
        self.lt5.addWidget(self.nl_after_class, 86, 1, 1, 4)
        self.labelnl_before_namespace = QtWidgets.QLabel(self.tr("The number of newlines before a namespace.")+' '+self.tr("\n"))
        self.labelnl_before_namespace.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_namespace, 87, 0, 1, 5)
        if self.tr("code_nl_before_namespace")!="code_nl_before_namespace":
            self.codenl_before_namespace = QtWidgets.QLabel(self.tr("code_nl_before_namespace"))
            self.codenl_before_namespace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_namespace, 88, 0, 1, 5)
        self.namenl_before_namespace = QtWidgets.QLabel("nl_before_namespace")
        self.namenl_before_namespace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_namespace, 89, 0)
        self.nl_before_namespace = QtWidgets.QSpinBox()
        self.nl_before_namespace.setMinimum(0)
        self.nl_before_namespace.setMaximum(100)
        self.nl_before_namespace.setValue(0)
        self.lt5.addWidget(self.nl_before_namespace, 89, 1, 1, 4)
        self.labelnl_inside_namespace = QtWidgets.QLabel(self.tr("The number of newlines after '{' of a namespace.")+' '+self.tr("This also adds newlines before the matching '}'.")+' '+self.tr("\n")+' '+self.tr("0: Apply eat_blanks_after_open_brace or eat_blanks_before_close_brace if     applicable, otherwise no change.")+' '+self.tr("\n")+' '+self.tr("Overrides eat_blanks_after_open_brace and eat_blanks_before_close_brace.")+' '+self.tr("\n"))
        self.labelnl_inside_namespace.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_inside_namespace, 90, 0, 1, 5)
        if self.tr("code_nl_inside_namespace")!="code_nl_inside_namespace":
            self.codenl_inside_namespace = QtWidgets.QLabel(self.tr("code_nl_inside_namespace"))
            self.codenl_inside_namespace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_inside_namespace, 91, 0, 1, 5)
        self.namenl_inside_namespace = QtWidgets.QLabel("nl_inside_namespace")
        self.namenl_inside_namespace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_inside_namespace, 92, 0)
        self.nl_inside_namespace = QtWidgets.QSpinBox()
        self.nl_inside_namespace.setMinimum(0)
        self.nl_inside_namespace.setMaximum(100)
        self.nl_inside_namespace.setValue(0)
        self.lt5.addWidget(self.nl_inside_namespace, 92, 1, 1, 4)
        self.labelnl_after_namespace = QtWidgets.QLabel(self.tr("The number of newlines after '}' of a namespace.")+' '+self.tr("\n"))
        self.labelnl_after_namespace.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_namespace, 93, 0, 1, 5)
        if self.tr("code_nl_after_namespace")!="code_nl_after_namespace":
            self.codenl_after_namespace = QtWidgets.QLabel(self.tr("code_nl_after_namespace"))
            self.codenl_after_namespace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_namespace, 94, 0, 1, 5)
        self.namenl_after_namespace = QtWidgets.QLabel("nl_after_namespace")
        self.namenl_after_namespace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_namespace, 95, 0)
        self.nl_after_namespace = QtWidgets.QSpinBox()
        self.nl_after_namespace.setMinimum(0)
        self.nl_after_namespace.setMaximum(100)
        self.nl_after_namespace.setValue(0)
        self.lt5.addWidget(self.nl_after_namespace, 95, 1, 1, 4)
        self.labelnl_before_access_spec = QtWidgets.QLabel(self.tr("The number of newlines before an access specifier label.")+' '+self.tr("This also includes the Qt-specific 'signals:' and 'slots:'.")+' '+self.tr("Will not change the newline count if after a brace open.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_before_access_spec.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_access_spec, 96, 0, 1, 5)
        if self.tr("code_nl_before_access_spec")!="code_nl_before_access_spec":
            self.codenl_before_access_spec = QtWidgets.QLabel(self.tr("code_nl_before_access_spec"))
            self.codenl_before_access_spec.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_access_spec, 97, 0, 1, 5)
        self.namenl_before_access_spec = QtWidgets.QLabel("nl_before_access_spec")
        self.namenl_before_access_spec.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_access_spec, 98, 0)
        self.nl_before_access_spec = QtWidgets.QSpinBox()
        self.nl_before_access_spec.setMinimum(0)
        self.nl_before_access_spec.setMaximum(100)
        self.nl_before_access_spec.setValue(0)
        self.lt5.addWidget(self.nl_before_access_spec, 98, 1, 1, 4)
        self.labelnl_after_access_spec = QtWidgets.QLabel(self.tr("The number of newlines after an access specifier label.")+' '+self.tr("This also includes the Qt-specific 'signals:' and 'slots:'.")+' '+self.tr("Will not change the newline count if after a brace open.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")+' '+self.tr("Overrides nl_typedef_blk_start and nl_var_def_blk_start.")+' '+self.tr("\n"))
        self.labelnl_after_access_spec.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_access_spec, 99, 0, 1, 5)
        if self.tr("code_nl_after_access_spec")!="code_nl_after_access_spec":
            self.codenl_after_access_spec = QtWidgets.QLabel(self.tr("code_nl_after_access_spec"))
            self.codenl_after_access_spec.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_access_spec, 100, 0, 1, 5)
        self.namenl_after_access_spec = QtWidgets.QLabel("nl_after_access_spec")
        self.namenl_after_access_spec.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_access_spec, 101, 0)
        self.nl_after_access_spec = QtWidgets.QSpinBox()
        self.nl_after_access_spec.setMinimum(0)
        self.nl_after_access_spec.setMaximum(100)
        self.nl_after_access_spec.setValue(0)
        self.lt5.addWidget(self.nl_after_access_spec, 101, 1, 1, 4)
        self.labelnl_comment_func_def = QtWidgets.QLabel(self.tr("The number of newlines between a function definition and the function comment, as in '// comment\n <here> void foo() {...}'.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_comment_func_def.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_comment_func_def, 102, 0, 1, 5)
        if self.tr("code_nl_comment_func_def")!="code_nl_comment_func_def":
            self.codenl_comment_func_def = QtWidgets.QLabel(self.tr("code_nl_comment_func_def"))
            self.codenl_comment_func_def.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_comment_func_def, 103, 0, 1, 5)
        self.namenl_comment_func_def = QtWidgets.QLabel("nl_comment_func_def")
        self.namenl_comment_func_def.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_comment_func_def, 104, 0)
        self.nl_comment_func_def = QtWidgets.QSpinBox()
        self.nl_comment_func_def.setMinimum(0)
        self.nl_comment_func_def.setMaximum(100)
        self.nl_comment_func_def.setValue(0)
        self.lt5.addWidget(self.nl_comment_func_def, 104, 1, 1, 4)
        self.labelnl_after_try_catch_finally = QtWidgets.QLabel(self.tr("The number of newlines after a try-catch-finally block that isn't followed by a brace close.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_after_try_catch_finally.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_try_catch_finally, 105, 0, 1, 5)
        if self.tr("code_nl_after_try_catch_finally")!="code_nl_after_try_catch_finally":
            self.codenl_after_try_catch_finally = QtWidgets.QLabel(self.tr("code_nl_after_try_catch_finally"))
            self.codenl_after_try_catch_finally.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_try_catch_finally, 106, 0, 1, 5)
        self.namenl_after_try_catch_finally = QtWidgets.QLabel("nl_after_try_catch_finally")
        self.namenl_after_try_catch_finally.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_try_catch_finally, 107, 0)
        self.nl_after_try_catch_finally = QtWidgets.QSpinBox()
        self.nl_after_try_catch_finally.setMinimum(0)
        self.nl_after_try_catch_finally.setMaximum(100)
        self.nl_after_try_catch_finally.setValue(0)
        self.lt5.addWidget(self.nl_after_try_catch_finally, 107, 1, 1, 4)
        self.labelnl_around_cs_property = QtWidgets.QLabel(self.tr("(C#) The number of newlines before and after a property, indexer or event declaration.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_around_cs_property.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_around_cs_property, 108, 0, 1, 5)
        if self.tr("code_nl_around_cs_property")!="code_nl_around_cs_property":
            self.codenl_around_cs_property = QtWidgets.QLabel(self.tr("code_nl_around_cs_property"))
            self.codenl_around_cs_property.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_around_cs_property, 109, 0, 1, 5)
        self.namenl_around_cs_property = QtWidgets.QLabel("nl_around_cs_property")
        self.namenl_around_cs_property.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_around_cs_property, 110, 0)
        self.nl_around_cs_property = QtWidgets.QSpinBox()
        self.nl_around_cs_property.setMinimum(0)
        self.nl_around_cs_property.setMaximum(100)
        self.nl_around_cs_property.setValue(0)
        self.lt5.addWidget(self.nl_around_cs_property, 110, 1, 1, 4)
        self.labelnl_between_get_set = QtWidgets.QLabel(self.tr("(C#) The number of newlines between the get/set/add/remove handlers.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_between_get_set.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_between_get_set, 111, 0, 1, 5)
        if self.tr("code_nl_between_get_set")!="code_nl_between_get_set":
            self.codenl_between_get_set = QtWidgets.QLabel(self.tr("code_nl_between_get_set"))
            self.codenl_between_get_set.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_between_get_set, 112, 0, 1, 5)
        self.namenl_between_get_set = QtWidgets.QLabel("nl_between_get_set")
        self.namenl_between_get_set.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_between_get_set, 113, 0)
        self.nl_between_get_set = QtWidgets.QSpinBox()
        self.nl_between_get_set.setMinimum(0)
        self.nl_between_get_set.setMaximum(100)
        self.nl_between_get_set.setValue(0)
        self.lt5.addWidget(self.nl_between_get_set, 113, 1, 1, 4)
        self.labelnl_property_brace = QtWidgets.QLabel(self.tr("(C#) Add or remove newline between property and the '{'.")+' '+self.tr("\n"))
        self.labelnl_property_brace.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_property_brace, 114, 0, 1, 5)
        if self.tr("code_nl_property_brace")!="code_nl_property_brace":
            self.codenl_property_brace = QtWidgets.QLabel(self.tr("code_nl_property_brace"))
            self.codenl_property_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_property_brace, 115, 0, 1, 5)
        self.namenl_property_brace = QtWidgets.QLabel("nl_property_brace")
        self.namenl_property_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_property_brace, 116, 0)
        self.nl_property_brace = QtWidgets.QComboBox()
        self.nl_property_brace.addItems(['ignore','add','remove','force'])
        self.nl_property_brace.setCurrentText('ignore')
        self.lt5.addWidget(self.nl_property_brace, 116, 1, 1, 4)
        self.labeleat_blanks_after_open_brace = QtWidgets.QLabel(self.tr("Whether to remove blank lines after '{'.")+' '+self.tr("\n"))
        self.labeleat_blanks_after_open_brace.setWordWrap(True)
        self.lt5.addWidget(self.labeleat_blanks_after_open_brace, 117, 0, 1, 5)
        if self.tr("code_eat_blanks_after_open_brace")!="code_eat_blanks_after_open_brace":
            self.codeeat_blanks_after_open_brace = QtWidgets.QLabel(self.tr("code_eat_blanks_after_open_brace"))
            self.codeeat_blanks_after_open_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codeeat_blanks_after_open_brace, 118, 0, 1, 5)
        self.nameeat_blanks_after_open_brace = QtWidgets.QLabel("eat_blanks_after_open_brace")
        self.nameeat_blanks_after_open_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.nameeat_blanks_after_open_brace, 119, 0)
        self.eat_blanks_after_open_brace = QtWidgets.QComboBox()
        self.eat_blanks_after_open_brace.addItems(['true','false'])
        self.eat_blanks_after_open_brace.setCurrentText('false')
        self.lt5.addWidget(self.eat_blanks_after_open_brace, 119, 1, 1, 4)
        self.labeleat_blanks_before_close_brace = QtWidgets.QLabel(self.tr("Whether to remove blank lines before '}'.")+' '+self.tr("\n"))
        self.labeleat_blanks_before_close_brace.setWordWrap(True)
        self.lt5.addWidget(self.labeleat_blanks_before_close_brace, 120, 0, 1, 5)
        if self.tr("code_eat_blanks_before_close_brace")!="code_eat_blanks_before_close_brace":
            self.codeeat_blanks_before_close_brace = QtWidgets.QLabel(self.tr("code_eat_blanks_before_close_brace"))
            self.codeeat_blanks_before_close_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codeeat_blanks_before_close_brace, 121, 0, 1, 5)
        self.nameeat_blanks_before_close_brace = QtWidgets.QLabel("eat_blanks_before_close_brace")
        self.nameeat_blanks_before_close_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.nameeat_blanks_before_close_brace, 122, 0)
        self.eat_blanks_before_close_brace = QtWidgets.QComboBox()
        self.eat_blanks_before_close_brace.addItems(['true','false'])
        self.eat_blanks_before_close_brace.setCurrentText('false')
        self.lt5.addWidget(self.eat_blanks_before_close_brace, 122, 1, 1, 4)
        self.labelnl_remove_extra_newlines = QtWidgets.QLabel(self.tr("How aggressively to remove extra newlines not in preprocessor.")+' '+self.tr("\n")+' '+self.tr("0: No change (default) 1: Remove most newlines not handled by other config 2: Remove all newlines and reformat completely by config")+' '+self.tr("\n"))
        self.labelnl_remove_extra_newlines.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_remove_extra_newlines, 123, 0, 1, 5)
        if self.tr("code_nl_remove_extra_newlines")!="code_nl_remove_extra_newlines":
            self.codenl_remove_extra_newlines = QtWidgets.QLabel(self.tr("code_nl_remove_extra_newlines"))
            self.codenl_remove_extra_newlines.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_remove_extra_newlines, 124, 0, 1, 5)
        self.namenl_remove_extra_newlines = QtWidgets.QLabel("nl_remove_extra_newlines")
        self.namenl_remove_extra_newlines.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_remove_extra_newlines, 125, 0)
        self.nl_remove_extra_newlines = QtWidgets.QSpinBox()
        self.nl_remove_extra_newlines.setMinimum(0)
        self.nl_remove_extra_newlines.setMaximum(100)
        self.nl_remove_extra_newlines.setValue(0)
        self.lt5.addWidget(self.nl_remove_extra_newlines, 125, 1, 1, 4)
        self.labelnl_after_annotation = QtWidgets.QLabel(self.tr("(Java) Add or remove newline after an annotation statement.")+' '+self.tr("Only affects annotations that are after a newline.")+' '+self.tr("\n"))
        self.labelnl_after_annotation.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_annotation, 126, 0, 1, 5)
        if self.tr("code_nl_after_annotation")!="code_nl_after_annotation":
            self.codenl_after_annotation = QtWidgets.QLabel(self.tr("code_nl_after_annotation"))
            self.codenl_after_annotation.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_annotation, 127, 0, 1, 5)
        self.namenl_after_annotation = QtWidgets.QLabel("nl_after_annotation")
        self.namenl_after_annotation.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_annotation, 128, 0)
        self.nl_after_annotation = QtWidgets.QComboBox()
        self.nl_after_annotation.addItems(['ignore','add','remove','force'])
        self.nl_after_annotation.setCurrentText('ignore')
        self.lt5.addWidget(self.nl_after_annotation, 128, 1, 1, 4)
        self.labelnl_between_annotation = QtWidgets.QLabel(self.tr("(Java) Add or remove newline between two annotations.")+' '+self.tr("\n"))
        self.labelnl_between_annotation.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_between_annotation, 129, 0, 1, 5)
        if self.tr("code_nl_between_annotation")!="code_nl_between_annotation":
            self.codenl_between_annotation = QtWidgets.QLabel(self.tr("code_nl_between_annotation"))
            self.codenl_between_annotation.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_between_annotation, 130, 0, 1, 5)
        self.namenl_between_annotation = QtWidgets.QLabel("nl_between_annotation")
        self.namenl_between_annotation.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_between_annotation, 131, 0)
        self.nl_between_annotation = QtWidgets.QComboBox()
        self.nl_between_annotation.addItems(['ignore','add','remove','force'])
        self.nl_between_annotation.setCurrentText('ignore')
        self.lt5.addWidget(self.nl_between_annotation, 131, 1, 1, 4)
        self.labelnl_before_whole_file_ifdef = QtWidgets.QLabel(self.tr("The number of newlines before a whole-file #ifdef.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_before_whole_file_ifdef.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_whole_file_ifdef, 132, 0, 1, 5)
        if self.tr("code_nl_before_whole_file_ifdef")!="code_nl_before_whole_file_ifdef":
            self.codenl_before_whole_file_ifdef = QtWidgets.QLabel(self.tr("code_nl_before_whole_file_ifdef"))
            self.codenl_before_whole_file_ifdef.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_whole_file_ifdef, 133, 0, 1, 5)
        self.namenl_before_whole_file_ifdef = QtWidgets.QLabel("nl_before_whole_file_ifdef")
        self.namenl_before_whole_file_ifdef.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_whole_file_ifdef, 134, 0)
        self.nl_before_whole_file_ifdef = QtWidgets.QSpinBox()
        self.nl_before_whole_file_ifdef.setMinimum(0)
        self.nl_before_whole_file_ifdef.setMaximum(100)
        self.nl_before_whole_file_ifdef.setValue(0)
        self.lt5.addWidget(self.nl_before_whole_file_ifdef, 134, 1, 1, 4)
        self.labelnl_after_whole_file_ifdef = QtWidgets.QLabel(self.tr("The number of newlines after a whole-file #ifdef.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_after_whole_file_ifdef.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_whole_file_ifdef, 135, 0, 1, 5)
        if self.tr("code_nl_after_whole_file_ifdef")!="code_nl_after_whole_file_ifdef":
            self.codenl_after_whole_file_ifdef = QtWidgets.QLabel(self.tr("code_nl_after_whole_file_ifdef"))
            self.codenl_after_whole_file_ifdef.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_whole_file_ifdef, 136, 0, 1, 5)
        self.namenl_after_whole_file_ifdef = QtWidgets.QLabel("nl_after_whole_file_ifdef")
        self.namenl_after_whole_file_ifdef.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_whole_file_ifdef, 137, 0)
        self.nl_after_whole_file_ifdef = QtWidgets.QSpinBox()
        self.nl_after_whole_file_ifdef.setMinimum(0)
        self.nl_after_whole_file_ifdef.setMaximum(100)
        self.nl_after_whole_file_ifdef.setValue(0)
        self.lt5.addWidget(self.nl_after_whole_file_ifdef, 137, 1, 1, 4)
        self.labelnl_before_whole_file_endif = QtWidgets.QLabel(self.tr("The number of newlines before a whole-file #endif.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_before_whole_file_endif.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_before_whole_file_endif, 138, 0, 1, 5)
        if self.tr("code_nl_before_whole_file_endif")!="code_nl_before_whole_file_endif":
            self.codenl_before_whole_file_endif = QtWidgets.QLabel(self.tr("code_nl_before_whole_file_endif"))
            self.codenl_before_whole_file_endif.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_before_whole_file_endif, 139, 0, 1, 5)
        self.namenl_before_whole_file_endif = QtWidgets.QLabel("nl_before_whole_file_endif")
        self.namenl_before_whole_file_endif.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_before_whole_file_endif, 140, 0)
        self.nl_before_whole_file_endif = QtWidgets.QSpinBox()
        self.nl_before_whole_file_endif.setMinimum(0)
        self.nl_before_whole_file_endif.setMaximum(100)
        self.nl_before_whole_file_endif.setValue(0)
        self.lt5.addWidget(self.nl_before_whole_file_endif, 140, 1, 1, 4)
        self.labelnl_after_whole_file_endif = QtWidgets.QLabel(self.tr("The number of newlines after a whole-file #endif.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n"))
        self.labelnl_after_whole_file_endif.setWordWrap(True)
        self.lt5.addWidget(self.labelnl_after_whole_file_endif, 141, 0, 1, 5)
        if self.tr("code_nl_after_whole_file_endif")!="code_nl_after_whole_file_endif":
            self.codenl_after_whole_file_endif = QtWidgets.QLabel(self.tr("code_nl_after_whole_file_endif"))
            self.codenl_after_whole_file_endif.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt5.addWidget(self.codenl_after_whole_file_endif, 142, 0, 1, 5)
        self.namenl_after_whole_file_endif = QtWidgets.QLabel("nl_after_whole_file_endif")
        self.namenl_after_whole_file_endif.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt5.addWidget(self.namenl_after_whole_file_endif, 143, 0)
        self.nl_after_whole_file_endif = QtWidgets.QSpinBox()
        self.nl_after_whole_file_endif.setMinimum(0)
        self.nl_after_whole_file_endif.setMaximum(100)
        self.nl_after_whole_file_endif.setValue(0)
        self.lt5.addWidget(self.nl_after_whole_file_endif, 143, 1, 1, 4)
        self.widget6 = QtWidgets.QWidget()
        self.addItem(self.widget6, self.tr("Positioning options"))
        self.lt6 = QtWidgets.QGridLayout(self.widget6)
        self.labelpos_arith = QtWidgets.QLabel(self.tr("The position of arithmetic operators in wrapped expressions.")+' '+self.tr("\n"))
        self.labelpos_arith.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_arith, 0, 0, 1, 5)
        if self.tr("code_pos_arith")!="code_pos_arith":
            self.codepos_arith = QtWidgets.QLabel(self.tr("code_pos_arith"))
            self.codepos_arith.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_arith, 1, 0, 1, 5)
        self.namepos_arith = QtWidgets.QLabel("pos_arith")
        self.namepos_arith.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_arith, 2, 0)
        self.pos_arith = QtWidgets.QComboBox()
        self.pos_arith.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_arith.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_arith, 2, 1, 1, 4)
        self.labelpos_assign = QtWidgets.QLabel(self.tr("The position of assignment in wrapped expressions.")+' '+self.tr("Do not affect '=' followed by '{'.")+' '+self.tr("\n"))
        self.labelpos_assign.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_assign, 3, 0, 1, 5)
        if self.tr("code_pos_assign")!="code_pos_assign":
            self.codepos_assign = QtWidgets.QLabel(self.tr("code_pos_assign"))
            self.codepos_assign.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_assign, 4, 0, 1, 5)
        self.namepos_assign = QtWidgets.QLabel("pos_assign")
        self.namepos_assign.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_assign, 5, 0)
        self.pos_assign = QtWidgets.QComboBox()
        self.pos_assign.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_assign.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_assign, 5, 1, 1, 4)
        self.labelpos_bool = QtWidgets.QLabel(self.tr("The position of Boolean operators in wrapped expressions.")+' '+self.tr("\n"))
        self.labelpos_bool.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_bool, 6, 0, 1, 5)
        if self.tr("code_pos_bool")!="code_pos_bool":
            self.codepos_bool = QtWidgets.QLabel(self.tr("code_pos_bool"))
            self.codepos_bool.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_bool, 7, 0, 1, 5)
        self.namepos_bool = QtWidgets.QLabel("pos_bool")
        self.namepos_bool.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_bool, 8, 0)
        self.pos_bool = QtWidgets.QComboBox()
        self.pos_bool.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_bool.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_bool, 8, 1, 1, 4)
        self.labelpos_compare = QtWidgets.QLabel(self.tr("The position of comparison operators in wrapped expressions.")+' '+self.tr("\n"))
        self.labelpos_compare.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_compare, 9, 0, 1, 5)
        if self.tr("code_pos_compare")!="code_pos_compare":
            self.codepos_compare = QtWidgets.QLabel(self.tr("code_pos_compare"))
            self.codepos_compare.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_compare, 10, 0, 1, 5)
        self.namepos_compare = QtWidgets.QLabel("pos_compare")
        self.namepos_compare.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_compare, 11, 0)
        self.pos_compare = QtWidgets.QComboBox()
        self.pos_compare.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_compare.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_compare, 11, 1, 1, 4)
        self.labelpos_conditional = QtWidgets.QLabel(self.tr("The position of conditional operators, as in the '?' and ':' of 'expr ? stmt : stmt', in wrapped expressions.")+' '+self.tr("\n"))
        self.labelpos_conditional.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_conditional, 12, 0, 1, 5)
        if self.tr("code_pos_conditional")!="code_pos_conditional":
            self.codepos_conditional = QtWidgets.QLabel(self.tr("code_pos_conditional"))
            self.codepos_conditional.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_conditional, 13, 0, 1, 5)
        self.namepos_conditional = QtWidgets.QLabel("pos_conditional")
        self.namepos_conditional.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_conditional, 14, 0)
        self.pos_conditional = QtWidgets.QComboBox()
        self.pos_conditional.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_conditional.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_conditional, 14, 1, 1, 4)
        self.labelpos_comma = QtWidgets.QLabel(self.tr("The position of the comma in wrapped expressions.")+' '+self.tr("\n"))
        self.labelpos_comma.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_comma, 15, 0, 1, 5)
        if self.tr("code_pos_comma")!="code_pos_comma":
            self.codepos_comma = QtWidgets.QLabel(self.tr("code_pos_comma"))
            self.codepos_comma.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_comma, 16, 0, 1, 5)
        self.namepos_comma = QtWidgets.QLabel("pos_comma")
        self.namepos_comma.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_comma, 17, 0)
        self.pos_comma = QtWidgets.QComboBox()
        self.pos_comma.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_comma.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_comma, 17, 1, 1, 4)
        self.labelpos_enum_comma = QtWidgets.QLabel(self.tr("The position of the comma in enum entries.")+' '+self.tr("\n"))
        self.labelpos_enum_comma.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_enum_comma, 18, 0, 1, 5)
        if self.tr("code_pos_enum_comma")!="code_pos_enum_comma":
            self.codepos_enum_comma = QtWidgets.QLabel(self.tr("code_pos_enum_comma"))
            self.codepos_enum_comma.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_enum_comma, 19, 0, 1, 5)
        self.namepos_enum_comma = QtWidgets.QLabel("pos_enum_comma")
        self.namepos_enum_comma.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_enum_comma, 20, 0)
        self.pos_enum_comma = QtWidgets.QComboBox()
        self.pos_enum_comma.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_enum_comma.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_enum_comma, 20, 1, 1, 4)
        self.labelpos_class_comma = QtWidgets.QLabel(self.tr("The position of the comma in the base class list if there is more than one line.")+' '+self.tr("Affects nl_class_init_args.")+' '+self.tr("\n"))
        self.labelpos_class_comma.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_class_comma, 21, 0, 1, 5)
        if self.tr("code_pos_class_comma")!="code_pos_class_comma":
            self.codepos_class_comma = QtWidgets.QLabel(self.tr("code_pos_class_comma"))
            self.codepos_class_comma.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_class_comma, 22, 0, 1, 5)
        self.namepos_class_comma = QtWidgets.QLabel("pos_class_comma")
        self.namepos_class_comma.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_class_comma, 23, 0)
        self.pos_class_comma = QtWidgets.QComboBox()
        self.pos_class_comma.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_class_comma.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_class_comma, 23, 1, 1, 4)
        self.labelpos_constr_comma = QtWidgets.QLabel(self.tr("The position of the comma in the constructor initialization list.")+' '+self.tr("Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon.")+' '+self.tr("\n"))
        self.labelpos_constr_comma.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_constr_comma, 24, 0, 1, 5)
        if self.tr("code_pos_constr_comma")!="code_pos_constr_comma":
            self.codepos_constr_comma = QtWidgets.QLabel(self.tr("code_pos_constr_comma"))
            self.codepos_constr_comma.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_constr_comma, 25, 0, 1, 5)
        self.namepos_constr_comma = QtWidgets.QLabel("pos_constr_comma")
        self.namepos_constr_comma.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_constr_comma, 26, 0)
        self.pos_constr_comma = QtWidgets.QComboBox()
        self.pos_constr_comma.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_constr_comma.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_constr_comma, 26, 1, 1, 4)
        self.labelpos_class_colon = QtWidgets.QLabel(self.tr("The position of trailing/leading class colon, between class and base class list.")+' '+self.tr("Affects nl_class_colon.")+' '+self.tr("\n"))
        self.labelpos_class_colon.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_class_colon, 27, 0, 1, 5)
        if self.tr("code_pos_class_colon")!="code_pos_class_colon":
            self.codepos_class_colon = QtWidgets.QLabel(self.tr("code_pos_class_colon"))
            self.codepos_class_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_class_colon, 28, 0, 1, 5)
        self.namepos_class_colon = QtWidgets.QLabel("pos_class_colon")
        self.namepos_class_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_class_colon, 29, 0)
        self.pos_class_colon = QtWidgets.QComboBox()
        self.pos_class_colon.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_class_colon.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_class_colon, 29, 1, 1, 4)
        self.labelpos_constr_colon = QtWidgets.QLabel(self.tr("The position of colons between constructor and member initialization.")+' '+self.tr("Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma.")+' '+self.tr("\n"))
        self.labelpos_constr_colon.setWordWrap(True)
        self.lt6.addWidget(self.labelpos_constr_colon, 30, 0, 1, 5)
        if self.tr("code_pos_constr_colon")!="code_pos_constr_colon":
            self.codepos_constr_colon = QtWidgets.QLabel(self.tr("code_pos_constr_colon"))
            self.codepos_constr_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt6.addWidget(self.codepos_constr_colon, 31, 0, 1, 5)
        self.namepos_constr_colon = QtWidgets.QLabel("pos_constr_colon")
        self.namepos_constr_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt6.addWidget(self.namepos_constr_colon, 32, 0)
        self.pos_constr_colon = QtWidgets.QComboBox()
        self.pos_constr_colon.addItems(['ignore','break','force','lead','trail','join','lead_break','lead_force','trail_break','trail_force'])
        self.pos_constr_colon.setCurrentText('ignore')
        self.lt6.addWidget(self.pos_constr_colon, 32, 1, 1, 4)
        self.widget7 = QtWidgets.QWidget()
        self.addItem(self.widget7, self.tr("Line splitting options"))
        self.lt7 = QtWidgets.QGridLayout(self.widget7)
        self.labelcode_width = QtWidgets.QLabel(self.tr("Try to limit code width to N columns.")+' '+self.tr("\n"))
        self.labelcode_width.setWordWrap(True)
        self.lt7.addWidget(self.labelcode_width, 0, 0, 1, 5)
        if self.tr("code_code_width")!="code_code_width":
            self.codecode_width = QtWidgets.QLabel(self.tr("code_code_width"))
            self.codecode_width.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt7.addWidget(self.codecode_width, 1, 0, 1, 5)
        self.namecode_width = QtWidgets.QLabel("code_width")
        self.namecode_width.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt7.addWidget(self.namecode_width, 2, 0)
        self.code_width = QtWidgets.QSpinBox()
        self.code_width.setMinimum(0)
        self.code_width.setMaximum(100)
        self.code_width.setValue(0)
        self.lt7.addWidget(self.code_width, 2, 1, 1, 4)
        self.labells_for_split_full = QtWidgets.QLabel(self.tr("Whether to fully split long 'for' statements at semi-colons.")+' '+self.tr("\n"))
        self.labells_for_split_full.setWordWrap(True)
        self.lt7.addWidget(self.labells_for_split_full, 3, 0, 1, 5)
        if self.tr("code_ls_for_split_full")!="code_ls_for_split_full":
            self.codels_for_split_full = QtWidgets.QLabel(self.tr("code_ls_for_split_full"))
            self.codels_for_split_full.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt7.addWidget(self.codels_for_split_full, 4, 0, 1, 5)
        self.namels_for_split_full = QtWidgets.QLabel("ls_for_split_full")
        self.namels_for_split_full.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt7.addWidget(self.namels_for_split_full, 5, 0)
        self.ls_for_split_full = QtWidgets.QComboBox()
        self.ls_for_split_full.addItems(['true','false'])
        self.ls_for_split_full.setCurrentText('false')
        self.lt7.addWidget(self.ls_for_split_full, 5, 1, 1, 4)
        self.labells_func_split_full = QtWidgets.QLabel(self.tr("Whether to fully split long function prototypes/calls at commas.")+' '+self.tr("The option ls_code_width has priority over the option ls_func_split_full.")+' '+self.tr("\n"))
        self.labells_func_split_full.setWordWrap(True)
        self.lt7.addWidget(self.labells_func_split_full, 6, 0, 1, 5)
        if self.tr("code_ls_func_split_full")!="code_ls_func_split_full":
            self.codels_func_split_full = QtWidgets.QLabel(self.tr("code_ls_func_split_full"))
            self.codels_func_split_full.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt7.addWidget(self.codels_func_split_full, 7, 0, 1, 5)
        self.namels_func_split_full = QtWidgets.QLabel("ls_func_split_full")
        self.namels_func_split_full.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt7.addWidget(self.namels_func_split_full, 8, 0)
        self.ls_func_split_full = QtWidgets.QComboBox()
        self.ls_func_split_full.addItems(['true','false'])
        self.ls_func_split_full.setCurrentText('false')
        self.lt7.addWidget(self.ls_func_split_full, 8, 1, 1, 4)
        self.labells_code_width = QtWidgets.QLabel(self.tr("Whether to split lines as close to code_width as possible and ignore some groupings.")+' '+self.tr("The option ls_code_width has priority over the option ls_func_split_full.")+' '+self.tr("\n"))
        self.labells_code_width.setWordWrap(True)
        self.lt7.addWidget(self.labells_code_width, 9, 0, 1, 5)
        if self.tr("code_ls_code_width")!="code_ls_code_width":
            self.codels_code_width = QtWidgets.QLabel(self.tr("code_ls_code_width"))
            self.codels_code_width.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt7.addWidget(self.codels_code_width, 10, 0, 1, 5)
        self.namels_code_width = QtWidgets.QLabel("ls_code_width")
        self.namels_code_width.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt7.addWidget(self.namels_code_width, 11, 0)
        self.ls_code_width = QtWidgets.QComboBox()
        self.ls_code_width.addItems(['true','false'])
        self.ls_code_width.setCurrentText('false')
        self.lt7.addWidget(self.ls_code_width, 11, 1, 1, 4)
        self.widget8 = QtWidgets.QWidget()
        self.addItem(self.widget8, self.tr("Code alignment options (not left column spaces/tabs)"))
        self.lt8 = QtWidgets.QGridLayout(self.widget8)
        self.labelalign_keep_tabs = QtWidgets.QLabel(self.tr("Whether to keep non-indenting tabs.")+' '+self.tr("\n"))
        self.labelalign_keep_tabs.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_keep_tabs, 0, 0, 1, 5)
        if self.tr("code_align_keep_tabs")!="code_align_keep_tabs":
            self.codealign_keep_tabs = QtWidgets.QLabel(self.tr("code_align_keep_tabs"))
            self.codealign_keep_tabs.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_keep_tabs, 1, 0, 1, 5)
        self.namealign_keep_tabs = QtWidgets.QLabel("align_keep_tabs")
        self.namealign_keep_tabs.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_keep_tabs, 2, 0)
        self.align_keep_tabs = QtWidgets.QComboBox()
        self.align_keep_tabs.addItems(['true','false'])
        self.align_keep_tabs.setCurrentText('false')
        self.lt8.addWidget(self.align_keep_tabs, 2, 1, 1, 4)
        self.labelalign_with_tabs = QtWidgets.QLabel(self.tr("Whether to use tabs for aligning.")+' '+self.tr("\n"))
        self.labelalign_with_tabs.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_with_tabs, 3, 0, 1, 5)
        if self.tr("code_align_with_tabs")!="code_align_with_tabs":
            self.codealign_with_tabs = QtWidgets.QLabel(self.tr("code_align_with_tabs"))
            self.codealign_with_tabs.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_with_tabs, 4, 0, 1, 5)
        self.namealign_with_tabs = QtWidgets.QLabel("align_with_tabs")
        self.namealign_with_tabs.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_with_tabs, 5, 0)
        self.align_with_tabs = QtWidgets.QComboBox()
        self.align_with_tabs.addItems(['true','false'])
        self.align_with_tabs.setCurrentText('false')
        self.lt8.addWidget(self.align_with_tabs, 5, 1, 1, 4)
        self.labelalign_on_tabstop = QtWidgets.QLabel(self.tr("Whether to bump out to the next tab when aligning.")+' '+self.tr("\n"))
        self.labelalign_on_tabstop.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_on_tabstop, 6, 0, 1, 5)
        if self.tr("code_align_on_tabstop")!="code_align_on_tabstop":
            self.codealign_on_tabstop = QtWidgets.QLabel(self.tr("code_align_on_tabstop"))
            self.codealign_on_tabstop.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_on_tabstop, 7, 0, 1, 5)
        self.namealign_on_tabstop = QtWidgets.QLabel("align_on_tabstop")
        self.namealign_on_tabstop.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_on_tabstop, 8, 0)
        self.align_on_tabstop = QtWidgets.QComboBox()
        self.align_on_tabstop.addItems(['true','false'])
        self.align_on_tabstop.setCurrentText('false')
        self.lt8.addWidget(self.align_on_tabstop, 8, 1, 1, 4)
        self.labelalign_number_right = QtWidgets.QLabel(self.tr("Whether to right-align numbers.")+' '+self.tr("\n"))
        self.labelalign_number_right.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_number_right, 9, 0, 1, 5)
        if self.tr("code_align_number_right")!="code_align_number_right":
            self.codealign_number_right = QtWidgets.QLabel(self.tr("code_align_number_right"))
            self.codealign_number_right.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_number_right, 10, 0, 1, 5)
        self.namealign_number_right = QtWidgets.QLabel("align_number_right")
        self.namealign_number_right.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_number_right, 11, 0)
        self.align_number_right = QtWidgets.QComboBox()
        self.align_number_right.addItems(['true','false'])
        self.align_number_right.setCurrentText('false')
        self.lt8.addWidget(self.align_number_right, 11, 1, 1, 4)
        self.labelalign_keep_extra_space = QtWidgets.QLabel(self.tr("Whether to keep whitespace not required for alignment.")+' '+self.tr("\n"))
        self.labelalign_keep_extra_space.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_keep_extra_space, 12, 0, 1, 5)
        if self.tr("code_align_keep_extra_space")!="code_align_keep_extra_space":
            self.codealign_keep_extra_space = QtWidgets.QLabel(self.tr("code_align_keep_extra_space"))
            self.codealign_keep_extra_space.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_keep_extra_space, 13, 0, 1, 5)
        self.namealign_keep_extra_space = QtWidgets.QLabel("align_keep_extra_space")
        self.namealign_keep_extra_space.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_keep_extra_space, 14, 0)
        self.align_keep_extra_space = QtWidgets.QComboBox()
        self.align_keep_extra_space.addItems(['true','false'])
        self.align_keep_extra_space.setCurrentText('false')
        self.lt8.addWidget(self.align_keep_extra_space, 14, 1, 1, 4)
        self.labelalign_func_params = QtWidgets.QLabel(self.tr("Whether to align variable definitions in prototypes and functions.")+' '+self.tr("\n"))
        self.labelalign_func_params.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_func_params, 15, 0, 1, 5)
        if self.tr("code_align_func_params")!="code_align_func_params":
            self.codealign_func_params = QtWidgets.QLabel(self.tr("code_align_func_params"))
            self.codealign_func_params.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_func_params, 16, 0, 1, 5)
        self.namealign_func_params = QtWidgets.QLabel("align_func_params")
        self.namealign_func_params.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_func_params, 17, 0)
        self.align_func_params = QtWidgets.QComboBox()
        self.align_func_params.addItems(['true','false'])
        self.align_func_params.setCurrentText('false')
        self.lt8.addWidget(self.align_func_params, 17, 1, 1, 4)
        self.labelalign_func_params_span = QtWidgets.QLabel(self.tr("The span for aligning parameter definitions in function on parameter name.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_func_params_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_func_params_span, 18, 0, 1, 5)
        if self.tr("code_align_func_params_span")!="code_align_func_params_span":
            self.codealign_func_params_span = QtWidgets.QLabel(self.tr("code_align_func_params_span"))
            self.codealign_func_params_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_func_params_span, 19, 0, 1, 5)
        self.namealign_func_params_span = QtWidgets.QLabel("align_func_params_span")
        self.namealign_func_params_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_func_params_span, 20, 0)
        self.align_func_params_span = QtWidgets.QSpinBox()
        self.align_func_params_span.setMinimum(0)
        self.align_func_params_span.setMaximum(100)
        self.align_func_params_span.setValue(0)
        self.lt8.addWidget(self.align_func_params_span, 20, 1, 1, 4)
        self.labelalign_func_params_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning function parameter definitions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n"))
        self.labelalign_func_params_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_func_params_thresh, 21, 0, 1, 5)
        if self.tr("code_align_func_params_thresh")!="code_align_func_params_thresh":
            self.codealign_func_params_thresh = QtWidgets.QLabel(self.tr("code_align_func_params_thresh"))
            self.codealign_func_params_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_func_params_thresh, 22, 0, 1, 5)
        self.namealign_func_params_thresh = QtWidgets.QLabel("align_func_params_thresh")
        self.namealign_func_params_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_func_params_thresh, 23, 0)
        self.align_func_params_thresh = QtWidgets.QSpinBox()
        self.align_func_params_thresh.setMinimum(-100)
        self.align_func_params_thresh.setMaximum(100)
        self.align_func_params_thresh.setValue(0)
        self.lt8.addWidget(self.align_func_params_thresh, 23, 1, 1, 4)
        self.labelalign_func_params_gap = QtWidgets.QLabel(self.tr("The gap for aligning function parameter definitions.")+' '+self.tr("\n"))
        self.labelalign_func_params_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_func_params_gap, 24, 0, 1, 5)
        if self.tr("code_align_func_params_gap")!="code_align_func_params_gap":
            self.codealign_func_params_gap = QtWidgets.QLabel(self.tr("code_align_func_params_gap"))
            self.codealign_func_params_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_func_params_gap, 25, 0, 1, 5)
        self.namealign_func_params_gap = QtWidgets.QLabel("align_func_params_gap")
        self.namealign_func_params_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_func_params_gap, 26, 0)
        self.align_func_params_gap = QtWidgets.QSpinBox()
        self.align_func_params_gap.setMinimum(0)
        self.align_func_params_gap.setMaximum(100)
        self.align_func_params_gap.setValue(0)
        self.lt8.addWidget(self.align_func_params_gap, 26, 1, 1, 4)
        self.labelalign_constr_value_span = QtWidgets.QLabel(self.tr("The span for aligning constructor value.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_constr_value_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_constr_value_span, 27, 0, 1, 5)
        if self.tr("code_align_constr_value_span")!="code_align_constr_value_span":
            self.codealign_constr_value_span = QtWidgets.QLabel(self.tr("code_align_constr_value_span"))
            self.codealign_constr_value_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_constr_value_span, 28, 0, 1, 5)
        self.namealign_constr_value_span = QtWidgets.QLabel("align_constr_value_span")
        self.namealign_constr_value_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_constr_value_span, 29, 0)
        self.align_constr_value_span = QtWidgets.QSpinBox()
        self.align_constr_value_span.setMinimum(0)
        self.align_constr_value_span.setMaximum(100)
        self.align_constr_value_span.setValue(0)
        self.lt8.addWidget(self.align_constr_value_span, 29, 1, 1, 4)
        self.labelalign_constr_value_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning constructor value.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n"))
        self.labelalign_constr_value_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_constr_value_thresh, 30, 0, 1, 5)
        if self.tr("code_align_constr_value_thresh")!="code_align_constr_value_thresh":
            self.codealign_constr_value_thresh = QtWidgets.QLabel(self.tr("code_align_constr_value_thresh"))
            self.codealign_constr_value_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_constr_value_thresh, 31, 0, 1, 5)
        self.namealign_constr_value_thresh = QtWidgets.QLabel("align_constr_value_thresh")
        self.namealign_constr_value_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_constr_value_thresh, 32, 0)
        self.align_constr_value_thresh = QtWidgets.QSpinBox()
        self.align_constr_value_thresh.setMinimum(-100)
        self.align_constr_value_thresh.setMaximum(100)
        self.align_constr_value_thresh.setValue(0)
        self.lt8.addWidget(self.align_constr_value_thresh, 32, 1, 1, 4)
        self.labelalign_constr_value_gap = QtWidgets.QLabel(self.tr("The gap for aligning constructor value.")+' '+self.tr("\n"))
        self.labelalign_constr_value_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_constr_value_gap, 33, 0, 1, 5)
        if self.tr("code_align_constr_value_gap")!="code_align_constr_value_gap":
            self.codealign_constr_value_gap = QtWidgets.QLabel(self.tr("code_align_constr_value_gap"))
            self.codealign_constr_value_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_constr_value_gap, 34, 0, 1, 5)
        self.namealign_constr_value_gap = QtWidgets.QLabel("align_constr_value_gap")
        self.namealign_constr_value_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_constr_value_gap, 35, 0)
        self.align_constr_value_gap = QtWidgets.QSpinBox()
        self.align_constr_value_gap.setMinimum(0)
        self.align_constr_value_gap.setMaximum(100)
        self.align_constr_value_gap.setValue(0)
        self.lt8.addWidget(self.align_constr_value_gap, 35, 1, 1, 4)
        self.labelalign_same_func_call_params = QtWidgets.QLabel(self.tr("Whether to align parameters in single-line functions that have the same name.")+' '+self.tr("The function names must already be aligned with each other.")+' '+self.tr("\n"))
        self.labelalign_same_func_call_params.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_same_func_call_params, 36, 0, 1, 5)
        if self.tr("code_align_same_func_call_params")!="code_align_same_func_call_params":
            self.codealign_same_func_call_params = QtWidgets.QLabel(self.tr("code_align_same_func_call_params"))
            self.codealign_same_func_call_params.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_same_func_call_params, 37, 0, 1, 5)
        self.namealign_same_func_call_params = QtWidgets.QLabel("align_same_func_call_params")
        self.namealign_same_func_call_params.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_same_func_call_params, 38, 0)
        self.align_same_func_call_params = QtWidgets.QComboBox()
        self.align_same_func_call_params.addItems(['true','false'])
        self.align_same_func_call_params.setCurrentText('false')
        self.lt8.addWidget(self.align_same_func_call_params, 38, 1, 1, 4)
        self.labelalign_same_func_call_params_span = QtWidgets.QLabel(self.tr("The span for aligning function-call parameters for single line functions.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_same_func_call_params_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_same_func_call_params_span, 39, 0, 1, 5)
        if self.tr("code_align_same_func_call_params_span")!="code_align_same_func_call_params_span":
            self.codealign_same_func_call_params_span = QtWidgets.QLabel(self.tr("code_align_same_func_call_params_span"))
            self.codealign_same_func_call_params_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_same_func_call_params_span, 40, 0, 1, 5)
        self.namealign_same_func_call_params_span = QtWidgets.QLabel("align_same_func_call_params_span")
        self.namealign_same_func_call_params_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_same_func_call_params_span, 41, 0)
        self.align_same_func_call_params_span = QtWidgets.QSpinBox()
        self.align_same_func_call_params_span.setMinimum(0)
        self.align_same_func_call_params_span.setMaximum(100)
        self.align_same_func_call_params_span.setValue(0)
        self.lt8.addWidget(self.align_same_func_call_params_span, 41, 1, 1, 4)
        self.labelalign_same_func_call_params_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning function-call parameters for single line functions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n"))
        self.labelalign_same_func_call_params_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_same_func_call_params_thresh, 42, 0, 1, 5)
        if self.tr("code_align_same_func_call_params_thresh")!="code_align_same_func_call_params_thresh":
            self.codealign_same_func_call_params_thresh = QtWidgets.QLabel(self.tr("code_align_same_func_call_params_thresh"))
            self.codealign_same_func_call_params_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_same_func_call_params_thresh, 43, 0, 1, 5)
        self.namealign_same_func_call_params_thresh = QtWidgets.QLabel("align_same_func_call_params_thresh")
        self.namealign_same_func_call_params_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_same_func_call_params_thresh, 44, 0)
        self.align_same_func_call_params_thresh = QtWidgets.QSpinBox()
        self.align_same_func_call_params_thresh.setMinimum(-100)
        self.align_same_func_call_params_thresh.setMaximum(100)
        self.align_same_func_call_params_thresh.setValue(0)
        self.lt8.addWidget(self.align_same_func_call_params_thresh, 44, 1, 1, 4)
        self.labelalign_var_def_span = QtWidgets.QLabel(self.tr("The span for aligning variable definitions.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_var_def_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_span, 45, 0, 1, 5)
        if self.tr("code_align_var_def_span")!="code_align_var_def_span":
            self.codealign_var_def_span = QtWidgets.QLabel(self.tr("code_align_var_def_span"))
            self.codealign_var_def_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_span, 46, 0, 1, 5)
        self.namealign_var_def_span = QtWidgets.QLabel("align_var_def_span")
        self.namealign_var_def_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_span, 47, 0)
        self.align_var_def_span = QtWidgets.QSpinBox()
        self.align_var_def_span.setMinimum(0)
        self.align_var_def_span.setMaximum(100)
        self.align_var_def_span.setValue(0)
        self.lt8.addWidget(self.align_var_def_span, 47, 1, 1, 4)
        self.labelalign_var_def_star_style = QtWidgets.QLabel(self.tr("How to consider (or treat) the '*' in the alignment of variable definitions.")+' '+self.tr("\n")+' '+self.tr("0: Part of the type     'void *   foo;' (default) 1: Part of the variable 'void     *foo;' 2: Dangling             'void    *foo;' Dangling: the '*' will not be taken into account when aligning.")+' '+self.tr("\n"))
        self.labelalign_var_def_star_style.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_star_style, 48, 0, 1, 5)
        if self.tr("code_align_var_def_star_style")!="code_align_var_def_star_style":
            self.codealign_var_def_star_style = QtWidgets.QLabel(self.tr("code_align_var_def_star_style"))
            self.codealign_var_def_star_style.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_star_style, 49, 0, 1, 5)
        self.namealign_var_def_star_style = QtWidgets.QLabel("align_var_def_star_style")
        self.namealign_var_def_star_style.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_star_style, 50, 0)
        self.align_var_def_star_style = QtWidgets.QSpinBox()
        self.align_var_def_star_style.setMinimum(0)
        self.align_var_def_star_style.setMaximum(100)
        self.align_var_def_star_style.setValue(0)
        self.lt8.addWidget(self.align_var_def_star_style, 50, 1, 1, 4)
        self.labelalign_var_def_amp_style = QtWidgets.QLabel(self.tr("How to consider (or treat) the '&' in the alignment of variable definitions.")+' '+self.tr("\n")+' '+self.tr("0: Part of the type     'long &   foo;' (default) 1: Part of the variable 'long     &foo;' 2: Dangling             'long    &foo;' Dangling: the '&' will not be taken into account when aligning.")+' '+self.tr("\n"))
        self.labelalign_var_def_amp_style.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_amp_style, 51, 0, 1, 5)
        if self.tr("code_align_var_def_amp_style")!="code_align_var_def_amp_style":
            self.codealign_var_def_amp_style = QtWidgets.QLabel(self.tr("code_align_var_def_amp_style"))
            self.codealign_var_def_amp_style.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_amp_style, 52, 0, 1, 5)
        self.namealign_var_def_amp_style = QtWidgets.QLabel("align_var_def_amp_style")
        self.namealign_var_def_amp_style.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_amp_style, 53, 0)
        self.align_var_def_amp_style = QtWidgets.QSpinBox()
        self.align_var_def_amp_style.setMinimum(0)
        self.align_var_def_amp_style.setMaximum(100)
        self.align_var_def_amp_style.setValue(0)
        self.lt8.addWidget(self.align_var_def_amp_style, 53, 1, 1, 4)
        self.labelalign_var_def_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning variable definitions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n"))
        self.labelalign_var_def_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_thresh, 54, 0, 1, 5)
        if self.tr("code_align_var_def_thresh")!="code_align_var_def_thresh":
            self.codealign_var_def_thresh = QtWidgets.QLabel(self.tr("code_align_var_def_thresh"))
            self.codealign_var_def_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_thresh, 55, 0, 1, 5)
        self.namealign_var_def_thresh = QtWidgets.QLabel("align_var_def_thresh")
        self.namealign_var_def_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_thresh, 56, 0)
        self.align_var_def_thresh = QtWidgets.QSpinBox()
        self.align_var_def_thresh.setMinimum(-100)
        self.align_var_def_thresh.setMaximum(100)
        self.align_var_def_thresh.setValue(0)
        self.lt8.addWidget(self.align_var_def_thresh, 56, 1, 1, 4)
        self.labelalign_var_def_gap = QtWidgets.QLabel(self.tr("The gap for aligning variable definitions.")+' '+self.tr("\n"))
        self.labelalign_var_def_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_gap, 57, 0, 1, 5)
        if self.tr("code_align_var_def_gap")!="code_align_var_def_gap":
            self.codealign_var_def_gap = QtWidgets.QLabel(self.tr("code_align_var_def_gap"))
            self.codealign_var_def_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_gap, 58, 0, 1, 5)
        self.namealign_var_def_gap = QtWidgets.QLabel("align_var_def_gap")
        self.namealign_var_def_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_gap, 59, 0)
        self.align_var_def_gap = QtWidgets.QSpinBox()
        self.align_var_def_gap.setMinimum(0)
        self.align_var_def_gap.setMaximum(100)
        self.align_var_def_gap.setValue(0)
        self.lt8.addWidget(self.align_var_def_gap, 59, 1, 1, 4)
        self.labelalign_var_def_colon = QtWidgets.QLabel(self.tr("Whether to align the colon in struct bit fields.")+' '+self.tr("\n"))
        self.labelalign_var_def_colon.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_colon, 60, 0, 1, 5)
        if self.tr("code_align_var_def_colon")!="code_align_var_def_colon":
            self.codealign_var_def_colon = QtWidgets.QLabel(self.tr("code_align_var_def_colon"))
            self.codealign_var_def_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_colon, 61, 0, 1, 5)
        self.namealign_var_def_colon = QtWidgets.QLabel("align_var_def_colon")
        self.namealign_var_def_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_colon, 62, 0)
        self.align_var_def_colon = QtWidgets.QComboBox()
        self.align_var_def_colon.addItems(['true','false'])
        self.align_var_def_colon.setCurrentText('false')
        self.lt8.addWidget(self.align_var_def_colon, 62, 1, 1, 4)
        self.labelalign_var_def_colon_gap = QtWidgets.QLabel(self.tr("The gap for aligning the colon in struct bit fields.")+' '+self.tr("\n"))
        self.labelalign_var_def_colon_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_colon_gap, 63, 0, 1, 5)
        if self.tr("code_align_var_def_colon_gap")!="code_align_var_def_colon_gap":
            self.codealign_var_def_colon_gap = QtWidgets.QLabel(self.tr("code_align_var_def_colon_gap"))
            self.codealign_var_def_colon_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_colon_gap, 64, 0, 1, 5)
        self.namealign_var_def_colon_gap = QtWidgets.QLabel("align_var_def_colon_gap")
        self.namealign_var_def_colon_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_colon_gap, 65, 0)
        self.align_var_def_colon_gap = QtWidgets.QSpinBox()
        self.align_var_def_colon_gap.setMinimum(0)
        self.align_var_def_colon_gap.setMaximum(100)
        self.align_var_def_colon_gap.setValue(0)
        self.lt8.addWidget(self.align_var_def_colon_gap, 65, 1, 1, 4)
        self.labelalign_var_def_attribute = QtWidgets.QLabel(self.tr("Whether to align any attribute after the variable name.")+' '+self.tr("\n"))
        self.labelalign_var_def_attribute.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_attribute, 66, 0, 1, 5)
        if self.tr("code_align_var_def_attribute")!="code_align_var_def_attribute":
            self.codealign_var_def_attribute = QtWidgets.QLabel(self.tr("code_align_var_def_attribute"))
            self.codealign_var_def_attribute.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_attribute, 67, 0, 1, 5)
        self.namealign_var_def_attribute = QtWidgets.QLabel("align_var_def_attribute")
        self.namealign_var_def_attribute.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_attribute, 68, 0)
        self.align_var_def_attribute = QtWidgets.QComboBox()
        self.align_var_def_attribute.addItems(['true','false'])
        self.align_var_def_attribute.setCurrentText('false')
        self.lt8.addWidget(self.align_var_def_attribute, 68, 1, 1, 4)
        self.labelalign_var_def_inline = QtWidgets.QLabel(self.tr("Whether to align inline struct/enum/union variable definitions.")+' '+self.tr("\n"))
        self.labelalign_var_def_inline.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_def_inline, 69, 0, 1, 5)
        if self.tr("code_align_var_def_inline")!="code_align_var_def_inline":
            self.codealign_var_def_inline = QtWidgets.QLabel(self.tr("code_align_var_def_inline"))
            self.codealign_var_def_inline.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_def_inline, 70, 0, 1, 5)
        self.namealign_var_def_inline = QtWidgets.QLabel("align_var_def_inline")
        self.namealign_var_def_inline.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_def_inline, 71, 0)
        self.align_var_def_inline = QtWidgets.QComboBox()
        self.align_var_def_inline.addItems(['true','false'])
        self.align_var_def_inline.setCurrentText('false')
        self.lt8.addWidget(self.align_var_def_inline, 71, 1, 1, 4)
        self.labelalign_assign_span = QtWidgets.QLabel(self.tr("The span for aligning on '=' in assignments.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_assign_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_assign_span, 72, 0, 1, 5)
        if self.tr("code_align_assign_span")!="code_align_assign_span":
            self.codealign_assign_span = QtWidgets.QLabel(self.tr("code_align_assign_span"))
            self.codealign_assign_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_assign_span, 73, 0, 1, 5)
        self.namealign_assign_span = QtWidgets.QLabel("align_assign_span")
        self.namealign_assign_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_assign_span, 74, 0)
        self.align_assign_span = QtWidgets.QSpinBox()
        self.align_assign_span.setMinimum(0)
        self.align_assign_span.setMaximum(100)
        self.align_assign_span.setValue(0)
        self.lt8.addWidget(self.align_assign_span, 74, 1, 1, 4)
        self.labelalign_assign_func_proto_span = QtWidgets.QLabel(self.tr("The span for aligning on '=' in function prototype modifier.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_assign_func_proto_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_assign_func_proto_span, 75, 0, 1, 5)
        if self.tr("code_align_assign_func_proto_span")!="code_align_assign_func_proto_span":
            self.codealign_assign_func_proto_span = QtWidgets.QLabel(self.tr("code_align_assign_func_proto_span"))
            self.codealign_assign_func_proto_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_assign_func_proto_span, 76, 0, 1, 5)
        self.namealign_assign_func_proto_span = QtWidgets.QLabel("align_assign_func_proto_span")
        self.namealign_assign_func_proto_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_assign_func_proto_span, 77, 0)
        self.align_assign_func_proto_span = QtWidgets.QSpinBox()
        self.align_assign_func_proto_span.setMinimum(0)
        self.align_assign_func_proto_span.setMaximum(100)
        self.align_assign_func_proto_span.setValue(0)
        self.lt8.addWidget(self.align_assign_func_proto_span, 77, 1, 1, 4)
        self.labelalign_assign_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning on '=' in assignments.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n"))
        self.labelalign_assign_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_assign_thresh, 78, 0, 1, 5)
        if self.tr("code_align_assign_thresh")!="code_align_assign_thresh":
            self.codealign_assign_thresh = QtWidgets.QLabel(self.tr("code_align_assign_thresh"))
            self.codealign_assign_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_assign_thresh, 79, 0, 1, 5)
        self.namealign_assign_thresh = QtWidgets.QLabel("align_assign_thresh")
        self.namealign_assign_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_assign_thresh, 80, 0)
        self.align_assign_thresh = QtWidgets.QSpinBox()
        self.align_assign_thresh.setMinimum(-100)
        self.align_assign_thresh.setMaximum(100)
        self.align_assign_thresh.setValue(0)
        self.lt8.addWidget(self.align_assign_thresh, 80, 1, 1, 4)
        self.labelalign_assign_decl_func = QtWidgets.QLabel(self.tr("How to apply align_assign_span to function declaration \"assignments\", i.e. 'virtual void foo() = 0' or '~foo() = {default|delete}'.")+' '+self.tr("\n")+' '+self.tr("0: Align with other assignments (default) 1: Align with each other, ignoring regular assignments 2: Don't align")+' '+self.tr("\n"))
        self.labelalign_assign_decl_func.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_assign_decl_func, 81, 0, 1, 5)
        if self.tr("code_align_assign_decl_func")!="code_align_assign_decl_func":
            self.codealign_assign_decl_func = QtWidgets.QLabel(self.tr("code_align_assign_decl_func"))
            self.codealign_assign_decl_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_assign_decl_func, 82, 0, 1, 5)
        self.namealign_assign_decl_func = QtWidgets.QLabel("align_assign_decl_func")
        self.namealign_assign_decl_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_assign_decl_func, 83, 0)
        self.align_assign_decl_func = QtWidgets.QSpinBox()
        self.align_assign_decl_func.setMinimum(0)
        self.align_assign_decl_func.setMaximum(100)
        self.align_assign_decl_func.setValue(0)
        self.lt8.addWidget(self.align_assign_decl_func, 83, 1, 1, 4)
        self.labelalign_enum_equ_span = QtWidgets.QLabel(self.tr("The span for aligning on '=' in enums.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_enum_equ_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_enum_equ_span, 84, 0, 1, 5)
        if self.tr("code_align_enum_equ_span")!="code_align_enum_equ_span":
            self.codealign_enum_equ_span = QtWidgets.QLabel(self.tr("code_align_enum_equ_span"))
            self.codealign_enum_equ_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_enum_equ_span, 85, 0, 1, 5)
        self.namealign_enum_equ_span = QtWidgets.QLabel("align_enum_equ_span")
        self.namealign_enum_equ_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_enum_equ_span, 86, 0)
        self.align_enum_equ_span = QtWidgets.QSpinBox()
        self.align_enum_equ_span.setMinimum(0)
        self.align_enum_equ_span.setMaximum(100)
        self.align_enum_equ_span.setValue(0)
        self.lt8.addWidget(self.align_enum_equ_span, 86, 1, 1, 4)
        self.labelalign_enum_equ_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning on '=' in enums.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: no limit (default).")+' '+self.tr("\n"))
        self.labelalign_enum_equ_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_enum_equ_thresh, 87, 0, 1, 5)
        if self.tr("code_align_enum_equ_thresh")!="code_align_enum_equ_thresh":
            self.codealign_enum_equ_thresh = QtWidgets.QLabel(self.tr("code_align_enum_equ_thresh"))
            self.codealign_enum_equ_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_enum_equ_thresh, 88, 0, 1, 5)
        self.namealign_enum_equ_thresh = QtWidgets.QLabel("align_enum_equ_thresh")
        self.namealign_enum_equ_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_enum_equ_thresh, 89, 0)
        self.align_enum_equ_thresh = QtWidgets.QSpinBox()
        self.align_enum_equ_thresh.setMinimum(-100)
        self.align_enum_equ_thresh.setMaximum(100)
        self.align_enum_equ_thresh.setValue(0)
        self.lt8.addWidget(self.align_enum_equ_thresh, 89, 1, 1, 4)
        self.labelalign_var_class_span = QtWidgets.QLabel(self.tr("The span for aligning class member definitions.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_var_class_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_class_span, 90, 0, 1, 5)
        if self.tr("code_align_var_class_span")!="code_align_var_class_span":
            self.codealign_var_class_span = QtWidgets.QLabel(self.tr("code_align_var_class_span"))
            self.codealign_var_class_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_class_span, 91, 0, 1, 5)
        self.namealign_var_class_span = QtWidgets.QLabel("align_var_class_span")
        self.namealign_var_class_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_class_span, 92, 0)
        self.align_var_class_span = QtWidgets.QSpinBox()
        self.align_var_class_span.setMinimum(0)
        self.align_var_class_span.setMaximum(100)
        self.align_var_class_span.setValue(0)
        self.lt8.addWidget(self.align_var_class_span, 92, 1, 1, 4)
        self.labelalign_var_class_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning class member definitions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n"))
        self.labelalign_var_class_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_class_thresh, 93, 0, 1, 5)
        if self.tr("code_align_var_class_thresh")!="code_align_var_class_thresh":
            self.codealign_var_class_thresh = QtWidgets.QLabel(self.tr("code_align_var_class_thresh"))
            self.codealign_var_class_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_class_thresh, 94, 0, 1, 5)
        self.namealign_var_class_thresh = QtWidgets.QLabel("align_var_class_thresh")
        self.namealign_var_class_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_class_thresh, 95, 0)
        self.align_var_class_thresh = QtWidgets.QSpinBox()
        self.align_var_class_thresh.setMinimum(-100)
        self.align_var_class_thresh.setMaximum(100)
        self.align_var_class_thresh.setValue(0)
        self.lt8.addWidget(self.align_var_class_thresh, 95, 1, 1, 4)
        self.labelalign_var_class_gap = QtWidgets.QLabel(self.tr("The gap for aligning class member definitions.")+' '+self.tr("\n"))
        self.labelalign_var_class_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_class_gap, 96, 0, 1, 5)
        if self.tr("code_align_var_class_gap")!="code_align_var_class_gap":
            self.codealign_var_class_gap = QtWidgets.QLabel(self.tr("code_align_var_class_gap"))
            self.codealign_var_class_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_class_gap, 97, 0, 1, 5)
        self.namealign_var_class_gap = QtWidgets.QLabel("align_var_class_gap")
        self.namealign_var_class_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_class_gap, 98, 0)
        self.align_var_class_gap = QtWidgets.QSpinBox()
        self.align_var_class_gap.setMinimum(0)
        self.align_var_class_gap.setMaximum(100)
        self.align_var_class_gap.setValue(0)
        self.lt8.addWidget(self.align_var_class_gap, 98, 1, 1, 4)
        self.labelalign_var_struct_span = QtWidgets.QLabel(self.tr("The span for aligning struct/union member definitions.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_var_struct_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_struct_span, 99, 0, 1, 5)
        if self.tr("code_align_var_struct_span")!="code_align_var_struct_span":
            self.codealign_var_struct_span = QtWidgets.QLabel(self.tr("code_align_var_struct_span"))
            self.codealign_var_struct_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_struct_span, 100, 0, 1, 5)
        self.namealign_var_struct_span = QtWidgets.QLabel("align_var_struct_span")
        self.namealign_var_struct_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_struct_span, 101, 0)
        self.align_var_struct_span = QtWidgets.QSpinBox()
        self.align_var_struct_span.setMinimum(0)
        self.align_var_struct_span.setMaximum(100)
        self.align_var_struct_span.setValue(0)
        self.lt8.addWidget(self.align_var_struct_span, 101, 1, 1, 4)
        self.labelalign_var_struct_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning struct/union member definitions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n"))
        self.labelalign_var_struct_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_struct_thresh, 102, 0, 1, 5)
        if self.tr("code_align_var_struct_thresh")!="code_align_var_struct_thresh":
            self.codealign_var_struct_thresh = QtWidgets.QLabel(self.tr("code_align_var_struct_thresh"))
            self.codealign_var_struct_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_struct_thresh, 103, 0, 1, 5)
        self.namealign_var_struct_thresh = QtWidgets.QLabel("align_var_struct_thresh")
        self.namealign_var_struct_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_struct_thresh, 104, 0)
        self.align_var_struct_thresh = QtWidgets.QSpinBox()
        self.align_var_struct_thresh.setMinimum(-100)
        self.align_var_struct_thresh.setMaximum(100)
        self.align_var_struct_thresh.setValue(0)
        self.lt8.addWidget(self.align_var_struct_thresh, 104, 1, 1, 4)
        self.labelalign_var_struct_gap = QtWidgets.QLabel(self.tr("The gap for aligning struct/union member definitions.")+' '+self.tr("\n"))
        self.labelalign_var_struct_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_var_struct_gap, 105, 0, 1, 5)
        if self.tr("code_align_var_struct_gap")!="code_align_var_struct_gap":
            self.codealign_var_struct_gap = QtWidgets.QLabel(self.tr("code_align_var_struct_gap"))
            self.codealign_var_struct_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_var_struct_gap, 106, 0, 1, 5)
        self.namealign_var_struct_gap = QtWidgets.QLabel("align_var_struct_gap")
        self.namealign_var_struct_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_var_struct_gap, 107, 0)
        self.align_var_struct_gap = QtWidgets.QSpinBox()
        self.align_var_struct_gap.setMinimum(0)
        self.align_var_struct_gap.setMaximum(100)
        self.align_var_struct_gap.setValue(0)
        self.lt8.addWidget(self.align_var_struct_gap, 107, 1, 1, 4)
        self.labelalign_struct_init_span = QtWidgets.QLabel(self.tr("The span for aligning struct initializer values.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_struct_init_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_struct_init_span, 108, 0, 1, 5)
        if self.tr("code_align_struct_init_span")!="code_align_struct_init_span":
            self.codealign_struct_init_span = QtWidgets.QLabel(self.tr("code_align_struct_init_span"))
            self.codealign_struct_init_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_struct_init_span, 109, 0, 1, 5)
        self.namealign_struct_init_span = QtWidgets.QLabel("align_struct_init_span")
        self.namealign_struct_init_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_struct_init_span, 110, 0)
        self.align_struct_init_span = QtWidgets.QSpinBox()
        self.align_struct_init_span.setMinimum(0)
        self.align_struct_init_span.setMaximum(100)
        self.align_struct_init_span.setValue(0)
        self.lt8.addWidget(self.align_struct_init_span, 110, 1, 1, 4)
        self.labelalign_typedef_span = QtWidgets.QLabel(self.tr("The span for aligning single-line typedefs.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_typedef_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_typedef_span, 111, 0, 1, 5)
        if self.tr("code_align_typedef_span")!="code_align_typedef_span":
            self.codealign_typedef_span = QtWidgets.QLabel(self.tr("code_align_typedef_span"))
            self.codealign_typedef_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_typedef_span, 112, 0, 1, 5)
        self.namealign_typedef_span = QtWidgets.QLabel("align_typedef_span")
        self.namealign_typedef_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_typedef_span, 113, 0)
        self.align_typedef_span = QtWidgets.QSpinBox()
        self.align_typedef_span.setMinimum(0)
        self.align_typedef_span.setMaximum(100)
        self.align_typedef_span.setValue(0)
        self.lt8.addWidget(self.align_typedef_span, 113, 1, 1, 4)
        self.labelalign_typedef_gap = QtWidgets.QLabel(self.tr("The minimum space between the type and the synonym of a typedef.")+' '+self.tr("\n"))
        self.labelalign_typedef_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_typedef_gap, 114, 0, 1, 5)
        if self.tr("code_align_typedef_gap")!="code_align_typedef_gap":
            self.codealign_typedef_gap = QtWidgets.QLabel(self.tr("code_align_typedef_gap"))
            self.codealign_typedef_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_typedef_gap, 115, 0, 1, 5)
        self.namealign_typedef_gap = QtWidgets.QLabel("align_typedef_gap")
        self.namealign_typedef_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_typedef_gap, 116, 0)
        self.align_typedef_gap = QtWidgets.QSpinBox()
        self.align_typedef_gap.setMinimum(0)
        self.align_typedef_gap.setMaximum(100)
        self.align_typedef_gap.setValue(0)
        self.lt8.addWidget(self.align_typedef_gap, 116, 1, 1, 4)
        self.labelalign_typedef_func = QtWidgets.QLabel(self.tr("How to align typedef'd functions with other typedefs.")+' '+self.tr("\n")+' '+self.tr("0: Don't mix them at all (default) 1: Align the open parenthesis with the types 2: Align the function type name with the other type names")+' '+self.tr("\n"))
        self.labelalign_typedef_func.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_typedef_func, 117, 0, 1, 5)
        if self.tr("code_align_typedef_func")!="code_align_typedef_func":
            self.codealign_typedef_func = QtWidgets.QLabel(self.tr("code_align_typedef_func"))
            self.codealign_typedef_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_typedef_func, 118, 0, 1, 5)
        self.namealign_typedef_func = QtWidgets.QLabel("align_typedef_func")
        self.namealign_typedef_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_typedef_func, 119, 0)
        self.align_typedef_func = QtWidgets.QSpinBox()
        self.align_typedef_func.setMinimum(0)
        self.align_typedef_func.setMaximum(100)
        self.align_typedef_func.setValue(0)
        self.lt8.addWidget(self.align_typedef_func, 119, 1, 1, 4)
        self.labelalign_typedef_star_style = QtWidgets.QLabel(self.tr("How to consider (or treat) the '*' in the alignment of typedefs.")+' '+self.tr("\n")+' '+self.tr("0: Part of the typedef type, 'typedef int * pint;' (default) 1: Part of type name:        'typedef int   *pint;' 2: Dangling:                 'typedef int  *pint;' Dangling: the '*' will not be taken into account when aligning.")+' '+self.tr("\n"))
        self.labelalign_typedef_star_style.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_typedef_star_style, 120, 0, 1, 5)
        if self.tr("code_align_typedef_star_style")!="code_align_typedef_star_style":
            self.codealign_typedef_star_style = QtWidgets.QLabel(self.tr("code_align_typedef_star_style"))
            self.codealign_typedef_star_style.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_typedef_star_style, 121, 0, 1, 5)
        self.namealign_typedef_star_style = QtWidgets.QLabel("align_typedef_star_style")
        self.namealign_typedef_star_style.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_typedef_star_style, 122, 0)
        self.align_typedef_star_style = QtWidgets.QSpinBox()
        self.align_typedef_star_style.setMinimum(0)
        self.align_typedef_star_style.setMaximum(100)
        self.align_typedef_star_style.setValue(0)
        self.lt8.addWidget(self.align_typedef_star_style, 122, 1, 1, 4)
        self.labelalign_typedef_amp_style = QtWidgets.QLabel(self.tr("How to consider (or treat) the '&' in the alignment of typedefs.")+' '+self.tr("\n")+' '+self.tr("0: Part of the typedef type, 'typedef int & intref;' (default) 1: Part of type name:        'typedef int   &intref;' 2: Dangling:                 'typedef int  &intref;' Dangling: the '&' will not be taken into account when aligning.")+' '+self.tr("\n"))
        self.labelalign_typedef_amp_style.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_typedef_amp_style, 123, 0, 1, 5)
        if self.tr("code_align_typedef_amp_style")!="code_align_typedef_amp_style":
            self.codealign_typedef_amp_style = QtWidgets.QLabel(self.tr("code_align_typedef_amp_style"))
            self.codealign_typedef_amp_style.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_typedef_amp_style, 124, 0, 1, 5)
        self.namealign_typedef_amp_style = QtWidgets.QLabel("align_typedef_amp_style")
        self.namealign_typedef_amp_style.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_typedef_amp_style, 125, 0)
        self.align_typedef_amp_style = QtWidgets.QSpinBox()
        self.align_typedef_amp_style.setMinimum(0)
        self.align_typedef_amp_style.setMaximum(100)
        self.align_typedef_amp_style.setValue(0)
        self.lt8.addWidget(self.align_typedef_amp_style, 125, 1, 1, 4)
        self.labelalign_right_cmt_span = QtWidgets.QLabel(self.tr("The span for aligning comments that end lines.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_right_cmt_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_right_cmt_span, 126, 0, 1, 5)
        if self.tr("code_align_right_cmt_span")!="code_align_right_cmt_span":
            self.codealign_right_cmt_span = QtWidgets.QLabel(self.tr("code_align_right_cmt_span"))
            self.codealign_right_cmt_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_right_cmt_span, 127, 0, 1, 5)
        self.namealign_right_cmt_span = QtWidgets.QLabel("align_right_cmt_span")
        self.namealign_right_cmt_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_right_cmt_span, 128, 0)
        self.align_right_cmt_span = QtWidgets.QSpinBox()
        self.align_right_cmt_span.setMinimum(0)
        self.align_right_cmt_span.setMaximum(100)
        self.align_right_cmt_span.setValue(0)
        self.lt8.addWidget(self.align_right_cmt_span, 128, 1, 1, 4)
        self.labelalign_right_cmt_gap = QtWidgets.QLabel(self.tr("Minimum number of columns between preceding text and a trailing comment in order for the comment to qualify for being aligned.")+' '+self.tr("Must be non-zero to have an effect.")+' '+self.tr("\n"))
        self.labelalign_right_cmt_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_right_cmt_gap, 129, 0, 1, 5)
        if self.tr("code_align_right_cmt_gap")!="code_align_right_cmt_gap":
            self.codealign_right_cmt_gap = QtWidgets.QLabel(self.tr("code_align_right_cmt_gap"))
            self.codealign_right_cmt_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_right_cmt_gap, 130, 0, 1, 5)
        self.namealign_right_cmt_gap = QtWidgets.QLabel("align_right_cmt_gap")
        self.namealign_right_cmt_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_right_cmt_gap, 131, 0)
        self.align_right_cmt_gap = QtWidgets.QSpinBox()
        self.align_right_cmt_gap.setMinimum(0)
        self.align_right_cmt_gap.setMaximum(100)
        self.align_right_cmt_gap.setValue(0)
        self.lt8.addWidget(self.align_right_cmt_gap, 131, 1, 1, 4)
        self.labelalign_right_cmt_mix = QtWidgets.QLabel(self.tr("If aligning comments, whether to mix with comments after '}' and #endif with less than three spaces before the comment.")+' '+self.tr("\n"))
        self.labelalign_right_cmt_mix.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_right_cmt_mix, 132, 0, 1, 5)
        if self.tr("code_align_right_cmt_mix")!="code_align_right_cmt_mix":
            self.codealign_right_cmt_mix = QtWidgets.QLabel(self.tr("code_align_right_cmt_mix"))
            self.codealign_right_cmt_mix.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_right_cmt_mix, 133, 0, 1, 5)
        self.namealign_right_cmt_mix = QtWidgets.QLabel("align_right_cmt_mix")
        self.namealign_right_cmt_mix.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_right_cmt_mix, 134, 0)
        self.align_right_cmt_mix = QtWidgets.QComboBox()
        self.align_right_cmt_mix.addItems(['true','false'])
        self.align_right_cmt_mix.setCurrentText('false')
        self.lt8.addWidget(self.align_right_cmt_mix, 134, 1, 1, 4)
        self.labelalign_right_cmt_same_level = QtWidgets.QLabel(self.tr("Whether to only align trailing comments that are at the same brace level.")+' '+self.tr("\n"))
        self.labelalign_right_cmt_same_level.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_right_cmt_same_level, 135, 0, 1, 5)
        if self.tr("code_align_right_cmt_same_level")!="code_align_right_cmt_same_level":
            self.codealign_right_cmt_same_level = QtWidgets.QLabel(self.tr("code_align_right_cmt_same_level"))
            self.codealign_right_cmt_same_level.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_right_cmt_same_level, 136, 0, 1, 5)
        self.namealign_right_cmt_same_level = QtWidgets.QLabel("align_right_cmt_same_level")
        self.namealign_right_cmt_same_level.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_right_cmt_same_level, 137, 0)
        self.align_right_cmt_same_level = QtWidgets.QComboBox()
        self.align_right_cmt_same_level.addItems(['true','false'])
        self.align_right_cmt_same_level.setCurrentText('false')
        self.lt8.addWidget(self.align_right_cmt_same_level, 137, 1, 1, 4)
        self.labelalign_right_cmt_at_col = QtWidgets.QLabel(self.tr("Minimum column at which to align trailing comments.")+' '+self.tr("Comments which are aligned beyond this column, but which can be aligned in a lesser column, may be \"pulled in\".")+' '+self.tr("\n")+' '+self.tr("0: Ignore (default).")+' '+self.tr("\n"))
        self.labelalign_right_cmt_at_col.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_right_cmt_at_col, 138, 0, 1, 5)
        if self.tr("code_align_right_cmt_at_col")!="code_align_right_cmt_at_col":
            self.codealign_right_cmt_at_col = QtWidgets.QLabel(self.tr("code_align_right_cmt_at_col"))
            self.codealign_right_cmt_at_col.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_right_cmt_at_col, 139, 0, 1, 5)
        self.namealign_right_cmt_at_col = QtWidgets.QLabel("align_right_cmt_at_col")
        self.namealign_right_cmt_at_col.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_right_cmt_at_col, 140, 0)
        self.align_right_cmt_at_col = QtWidgets.QSpinBox()
        self.align_right_cmt_at_col.setMinimum(0)
        self.align_right_cmt_at_col.setMaximum(100)
        self.align_right_cmt_at_col.setValue(0)
        self.lt8.addWidget(self.align_right_cmt_at_col, 140, 1, 1, 4)
        self.labelalign_func_proto_span = QtWidgets.QLabel(self.tr("The span for aligning function prototypes.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_func_proto_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_func_proto_span, 141, 0, 1, 5)
        if self.tr("code_align_func_proto_span")!="code_align_func_proto_span":
            self.codealign_func_proto_span = QtWidgets.QLabel(self.tr("code_align_func_proto_span"))
            self.codealign_func_proto_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_func_proto_span, 142, 0, 1, 5)
        self.namealign_func_proto_span = QtWidgets.QLabel("align_func_proto_span")
        self.namealign_func_proto_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_func_proto_span, 143, 0)
        self.align_func_proto_span = QtWidgets.QSpinBox()
        self.align_func_proto_span.setMinimum(0)
        self.align_func_proto_span.setMaximum(100)
        self.align_func_proto_span.setValue(0)
        self.lt8.addWidget(self.align_func_proto_span, 143, 1, 1, 4)
        self.labelalign_func_proto_thresh = QtWidgets.QLabel(self.tr("The threshold for aligning function prototypes.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n"))
        self.labelalign_func_proto_thresh.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_func_proto_thresh, 144, 0, 1, 5)
        if self.tr("code_align_func_proto_thresh")!="code_align_func_proto_thresh":
            self.codealign_func_proto_thresh = QtWidgets.QLabel(self.tr("code_align_func_proto_thresh"))
            self.codealign_func_proto_thresh.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_func_proto_thresh, 145, 0, 1, 5)
        self.namealign_func_proto_thresh = QtWidgets.QLabel("align_func_proto_thresh")
        self.namealign_func_proto_thresh.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_func_proto_thresh, 146, 0)
        self.align_func_proto_thresh = QtWidgets.QSpinBox()
        self.align_func_proto_thresh.setMinimum(-100)
        self.align_func_proto_thresh.setMaximum(100)
        self.align_func_proto_thresh.setValue(0)
        self.lt8.addWidget(self.align_func_proto_thresh, 146, 1, 1, 4)
        self.labelalign_func_proto_gap = QtWidgets.QLabel(self.tr("Minimum gap between the return type and the function name.")+' '+self.tr("\n"))
        self.labelalign_func_proto_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_func_proto_gap, 147, 0, 1, 5)
        if self.tr("code_align_func_proto_gap")!="code_align_func_proto_gap":
            self.codealign_func_proto_gap = QtWidgets.QLabel(self.tr("code_align_func_proto_gap"))
            self.codealign_func_proto_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_func_proto_gap, 148, 0, 1, 5)
        self.namealign_func_proto_gap = QtWidgets.QLabel("align_func_proto_gap")
        self.namealign_func_proto_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_func_proto_gap, 149, 0)
        self.align_func_proto_gap = QtWidgets.QSpinBox()
        self.align_func_proto_gap.setMinimum(0)
        self.align_func_proto_gap.setMaximum(100)
        self.align_func_proto_gap.setValue(0)
        self.lt8.addWidget(self.align_func_proto_gap, 149, 1, 1, 4)
        self.labelalign_on_operator = QtWidgets.QLabel(self.tr("Whether to align function prototypes on the 'operator' keyword instead of what follows.")+' '+self.tr("\n"))
        self.labelalign_on_operator.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_on_operator, 150, 0, 1, 5)
        if self.tr("code_align_on_operator")!="code_align_on_operator":
            self.codealign_on_operator = QtWidgets.QLabel(self.tr("code_align_on_operator"))
            self.codealign_on_operator.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_on_operator, 151, 0, 1, 5)
        self.namealign_on_operator = QtWidgets.QLabel("align_on_operator")
        self.namealign_on_operator.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_on_operator, 152, 0)
        self.align_on_operator = QtWidgets.QComboBox()
        self.align_on_operator.addItems(['true','false'])
        self.align_on_operator.setCurrentText('false')
        self.lt8.addWidget(self.align_on_operator, 152, 1, 1, 4)
        self.labelalign_mix_var_proto = QtWidgets.QLabel(self.tr("Whether to mix aligning prototype and variable declarations.")+' '+self.tr("If true, align_var_def_XXX options are used instead of align_func_proto_XXX options.")+' '+self.tr("\n"))
        self.labelalign_mix_var_proto.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_mix_var_proto, 153, 0, 1, 5)
        if self.tr("code_align_mix_var_proto")!="code_align_mix_var_proto":
            self.codealign_mix_var_proto = QtWidgets.QLabel(self.tr("code_align_mix_var_proto"))
            self.codealign_mix_var_proto.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_mix_var_proto, 154, 0, 1, 5)
        self.namealign_mix_var_proto = QtWidgets.QLabel("align_mix_var_proto")
        self.namealign_mix_var_proto.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_mix_var_proto, 155, 0)
        self.align_mix_var_proto = QtWidgets.QComboBox()
        self.align_mix_var_proto.addItems(['true','false'])
        self.align_mix_var_proto.setCurrentText('false')
        self.lt8.addWidget(self.align_mix_var_proto, 155, 1, 1, 4)
        self.labelalign_single_line_func = QtWidgets.QLabel(self.tr("Whether to align single-line functions with function prototypes.")+' '+self.tr("Uses align_func_proto_span.")+' '+self.tr("\n"))
        self.labelalign_single_line_func.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_single_line_func, 156, 0, 1, 5)
        if self.tr("code_align_single_line_func")!="code_align_single_line_func":
            self.codealign_single_line_func = QtWidgets.QLabel(self.tr("code_align_single_line_func"))
            self.codealign_single_line_func.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_single_line_func, 157, 0, 1, 5)
        self.namealign_single_line_func = QtWidgets.QLabel("align_single_line_func")
        self.namealign_single_line_func.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_single_line_func, 158, 0)
        self.align_single_line_func = QtWidgets.QComboBox()
        self.align_single_line_func.addItems(['true','false'])
        self.align_single_line_func.setCurrentText('false')
        self.lt8.addWidget(self.align_single_line_func, 158, 1, 1, 4)
        self.labelalign_single_line_brace = QtWidgets.QLabel(self.tr("Whether to align the open brace of single-line functions.")+' '+self.tr("Requires align_single_line_func=true.")+' '+self.tr("Uses align_func_proto_span.")+' '+self.tr("\n"))
        self.labelalign_single_line_brace.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_single_line_brace, 159, 0, 1, 5)
        if self.tr("code_align_single_line_brace")!="code_align_single_line_brace":
            self.codealign_single_line_brace = QtWidgets.QLabel(self.tr("code_align_single_line_brace"))
            self.codealign_single_line_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_single_line_brace, 160, 0, 1, 5)
        self.namealign_single_line_brace = QtWidgets.QLabel("align_single_line_brace")
        self.namealign_single_line_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_single_line_brace, 161, 0)
        self.align_single_line_brace = QtWidgets.QComboBox()
        self.align_single_line_brace.addItems(['true','false'])
        self.align_single_line_brace.setCurrentText('false')
        self.lt8.addWidget(self.align_single_line_brace, 161, 1, 1, 4)
        self.labelalign_single_line_brace_gap = QtWidgets.QLabel(self.tr("Gap for align_single_line_brace.")+' '+self.tr("\n"))
        self.labelalign_single_line_brace_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_single_line_brace_gap, 162, 0, 1, 5)
        if self.tr("code_align_single_line_brace_gap")!="code_align_single_line_brace_gap":
            self.codealign_single_line_brace_gap = QtWidgets.QLabel(self.tr("code_align_single_line_brace_gap"))
            self.codealign_single_line_brace_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_single_line_brace_gap, 163, 0, 1, 5)
        self.namealign_single_line_brace_gap = QtWidgets.QLabel("align_single_line_brace_gap")
        self.namealign_single_line_brace_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_single_line_brace_gap, 164, 0)
        self.align_single_line_brace_gap = QtWidgets.QSpinBox()
        self.align_single_line_brace_gap.setMinimum(0)
        self.align_single_line_brace_gap.setMaximum(100)
        self.align_single_line_brace_gap.setValue(0)
        self.lt8.addWidget(self.align_single_line_brace_gap, 164, 1, 1, 4)
        self.labelalign_oc_msg_spec_span = QtWidgets.QLabel(self.tr("(OC) The span for aligning Objective-C message specifications.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n"))
        self.labelalign_oc_msg_spec_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_oc_msg_spec_span, 165, 0, 1, 5)
        if self.tr("code_align_oc_msg_spec_span")!="code_align_oc_msg_spec_span":
            self.codealign_oc_msg_spec_span = QtWidgets.QLabel(self.tr("code_align_oc_msg_spec_span"))
            self.codealign_oc_msg_spec_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_oc_msg_spec_span, 166, 0, 1, 5)
        self.namealign_oc_msg_spec_span = QtWidgets.QLabel("align_oc_msg_spec_span")
        self.namealign_oc_msg_spec_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_oc_msg_spec_span, 167, 0)
        self.align_oc_msg_spec_span = QtWidgets.QSpinBox()
        self.align_oc_msg_spec_span.setMinimum(0)
        self.align_oc_msg_spec_span.setMaximum(100)
        self.align_oc_msg_spec_span.setValue(0)
        self.lt8.addWidget(self.align_oc_msg_spec_span, 167, 1, 1, 4)
        self.labelalign_nl_cont = QtWidgets.QLabel(self.tr("Whether to align macros wrapped with a backslash and a newline.")+' '+self.tr("This will not work right if the macro contains a multi-line comment.")+' '+self.tr("\n"))
        self.labelalign_nl_cont.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_nl_cont, 168, 0, 1, 5)
        if self.tr("code_align_nl_cont")!="code_align_nl_cont":
            self.codealign_nl_cont = QtWidgets.QLabel(self.tr("code_align_nl_cont"))
            self.codealign_nl_cont.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_nl_cont, 169, 0, 1, 5)
        self.namealign_nl_cont = QtWidgets.QLabel("align_nl_cont")
        self.namealign_nl_cont.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_nl_cont, 170, 0)
        self.align_nl_cont = QtWidgets.QComboBox()
        self.align_nl_cont.addItems(['true','false'])
        self.align_nl_cont.setCurrentText('false')
        self.lt8.addWidget(self.align_nl_cont, 170, 1, 1, 4)
        self.labelalign_pp_define_together = QtWidgets.QLabel(self.tr("Whether to align macro functions and variables together.")+' '+self.tr("\n"))
        self.labelalign_pp_define_together.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_pp_define_together, 171, 0, 1, 5)
        if self.tr("code_align_pp_define_together")!="code_align_pp_define_together":
            self.codealign_pp_define_together = QtWidgets.QLabel(self.tr("code_align_pp_define_together"))
            self.codealign_pp_define_together.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_pp_define_together, 172, 0, 1, 5)
        self.namealign_pp_define_together = QtWidgets.QLabel("align_pp_define_together")
        self.namealign_pp_define_together.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_pp_define_together, 173, 0)
        self.align_pp_define_together = QtWidgets.QComboBox()
        self.align_pp_define_together.addItems(['true','false'])
        self.align_pp_define_together.setCurrentText('false')
        self.lt8.addWidget(self.align_pp_define_together, 173, 1, 1, 4)
        self.labelalign_pp_define_span = QtWidgets.QLabel(self.tr("The span for aligning on '#define' bodies.")+' '+self.tr("\n")+' '+self.tr("=0: Don't align (default) >0: Number of lines (including comments) between blocks")+' '+self.tr("\n"))
        self.labelalign_pp_define_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_pp_define_span, 174, 0, 1, 5)
        if self.tr("code_align_pp_define_span")!="code_align_pp_define_span":
            self.codealign_pp_define_span = QtWidgets.QLabel(self.tr("code_align_pp_define_span"))
            self.codealign_pp_define_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_pp_define_span, 175, 0, 1, 5)
        self.namealign_pp_define_span = QtWidgets.QLabel("align_pp_define_span")
        self.namealign_pp_define_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_pp_define_span, 176, 0)
        self.align_pp_define_span = QtWidgets.QSpinBox()
        self.align_pp_define_span.setMinimum(0)
        self.align_pp_define_span.setMaximum(100)
        self.align_pp_define_span.setValue(0)
        self.lt8.addWidget(self.align_pp_define_span, 176, 1, 1, 4)
        self.labelalign_pp_define_gap = QtWidgets.QLabel(self.tr("The minimum space between label and value of a preprocessor define.")+' '+self.tr("\n"))
        self.labelalign_pp_define_gap.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_pp_define_gap, 177, 0, 1, 5)
        if self.tr("code_align_pp_define_gap")!="code_align_pp_define_gap":
            self.codealign_pp_define_gap = QtWidgets.QLabel(self.tr("code_align_pp_define_gap"))
            self.codealign_pp_define_gap.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_pp_define_gap, 178, 0, 1, 5)
        self.namealign_pp_define_gap = QtWidgets.QLabel("align_pp_define_gap")
        self.namealign_pp_define_gap.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_pp_define_gap, 179, 0)
        self.align_pp_define_gap = QtWidgets.QSpinBox()
        self.align_pp_define_gap.setMinimum(0)
        self.align_pp_define_gap.setMaximum(100)
        self.align_pp_define_gap.setValue(0)
        self.lt8.addWidget(self.align_pp_define_gap, 179, 1, 1, 4)
        self.labelalign_left_shift = QtWidgets.QLabel(self.tr("Whether to align lines that start with '<<' with previous '<<'.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelalign_left_shift.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_left_shift, 180, 0, 1, 5)
        if self.tr("code_align_left_shift")!="code_align_left_shift":
            self.codealign_left_shift = QtWidgets.QLabel(self.tr("code_align_left_shift"))
            self.codealign_left_shift.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_left_shift, 181, 0, 1, 5)
        self.namealign_left_shift = QtWidgets.QLabel("align_left_shift")
        self.namealign_left_shift.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_left_shift, 182, 0)
        self.align_left_shift = QtWidgets.QComboBox()
        self.align_left_shift.addItems(['true','false'])
        self.align_left_shift.setCurrentText('true')
        self.lt8.addWidget(self.align_left_shift, 182, 1, 1, 4)
        self.labelalign_asm_colon = QtWidgets.QLabel(self.tr("Whether to align text after 'asm volatile ()' colons.")+' '+self.tr("\n"))
        self.labelalign_asm_colon.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_asm_colon, 183, 0, 1, 5)
        if self.tr("code_align_asm_colon")!="code_align_asm_colon":
            self.codealign_asm_colon = QtWidgets.QLabel(self.tr("code_align_asm_colon"))
            self.codealign_asm_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_asm_colon, 184, 0, 1, 5)
        self.namealign_asm_colon = QtWidgets.QLabel("align_asm_colon")
        self.namealign_asm_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_asm_colon, 185, 0)
        self.align_asm_colon = QtWidgets.QComboBox()
        self.align_asm_colon.addItems(['true','false'])
        self.align_asm_colon.setCurrentText('false')
        self.lt8.addWidget(self.align_asm_colon, 185, 1, 1, 4)
        self.labelalign_oc_msg_colon_span = QtWidgets.QLabel(self.tr("(OC) Span for aligning parameters in an Objective-C message call on the ':'.")+' '+self.tr("\n")+' '+self.tr("0: Don't align.")+' '+self.tr("\n"))
        self.labelalign_oc_msg_colon_span.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_oc_msg_colon_span, 186, 0, 1, 5)
        if self.tr("code_align_oc_msg_colon_span")!="code_align_oc_msg_colon_span":
            self.codealign_oc_msg_colon_span = QtWidgets.QLabel(self.tr("code_align_oc_msg_colon_span"))
            self.codealign_oc_msg_colon_span.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_oc_msg_colon_span, 187, 0, 1, 5)
        self.namealign_oc_msg_colon_span = QtWidgets.QLabel("align_oc_msg_colon_span")
        self.namealign_oc_msg_colon_span.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_oc_msg_colon_span, 188, 0)
        self.align_oc_msg_colon_span = QtWidgets.QSpinBox()
        self.align_oc_msg_colon_span.setMinimum(0)
        self.align_oc_msg_colon_span.setMaximum(100)
        self.align_oc_msg_colon_span.setValue(0)
        self.lt8.addWidget(self.align_oc_msg_colon_span, 188, 1, 1, 4)
        self.labelalign_oc_msg_colon_first = QtWidgets.QLabel(self.tr("(OC) Whether to always align with the first parameter, even if it is too short.")+' '+self.tr("\n"))
        self.labelalign_oc_msg_colon_first.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_oc_msg_colon_first, 189, 0, 1, 5)
        if self.tr("code_align_oc_msg_colon_first")!="code_align_oc_msg_colon_first":
            self.codealign_oc_msg_colon_first = QtWidgets.QLabel(self.tr("code_align_oc_msg_colon_first"))
            self.codealign_oc_msg_colon_first.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_oc_msg_colon_first, 190, 0, 1, 5)
        self.namealign_oc_msg_colon_first = QtWidgets.QLabel("align_oc_msg_colon_first")
        self.namealign_oc_msg_colon_first.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_oc_msg_colon_first, 191, 0)
        self.align_oc_msg_colon_first = QtWidgets.QComboBox()
        self.align_oc_msg_colon_first.addItems(['true','false'])
        self.align_oc_msg_colon_first.setCurrentText('false')
        self.lt8.addWidget(self.align_oc_msg_colon_first, 191, 1, 1, 4)
        self.labelalign_oc_decl_colon = QtWidgets.QLabel(self.tr("(OC) Whether to align parameters in an Objective-C '+' or '-' declaration on the ':'.")+' '+self.tr("\n"))
        self.labelalign_oc_decl_colon.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_oc_decl_colon, 192, 0, 1, 5)
        if self.tr("code_align_oc_decl_colon")!="code_align_oc_decl_colon":
            self.codealign_oc_decl_colon = QtWidgets.QLabel(self.tr("code_align_oc_decl_colon"))
            self.codealign_oc_decl_colon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_oc_decl_colon, 193, 0, 1, 5)
        self.namealign_oc_decl_colon = QtWidgets.QLabel("align_oc_decl_colon")
        self.namealign_oc_decl_colon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_oc_decl_colon, 194, 0)
        self.align_oc_decl_colon = QtWidgets.QComboBox()
        self.align_oc_decl_colon.addItems(['true','false'])
        self.align_oc_decl_colon.setCurrentText('false')
        self.lt8.addWidget(self.align_oc_decl_colon, 194, 1, 1, 4)
        self.labelalign_oc_msg_colon_xcode_like = QtWidgets.QLabel(self.tr("(OC) Whether to not align parameters in an Objectve-C message call if first colon is not on next line of the message call (the same way Xcode does aligment)")+' '+self.tr("\n"))
        self.labelalign_oc_msg_colon_xcode_like.setWordWrap(True)
        self.lt8.addWidget(self.labelalign_oc_msg_colon_xcode_like, 195, 0, 1, 5)
        if self.tr("code_align_oc_msg_colon_xcode_like")!="code_align_oc_msg_colon_xcode_like":
            self.codealign_oc_msg_colon_xcode_like = QtWidgets.QLabel(self.tr("code_align_oc_msg_colon_xcode_like"))
            self.codealign_oc_msg_colon_xcode_like.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt8.addWidget(self.codealign_oc_msg_colon_xcode_like, 196, 0, 1, 5)
        self.namealign_oc_msg_colon_xcode_like = QtWidgets.QLabel("align_oc_msg_colon_xcode_like")
        self.namealign_oc_msg_colon_xcode_like.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt8.addWidget(self.namealign_oc_msg_colon_xcode_like, 197, 0)
        self.align_oc_msg_colon_xcode_like = QtWidgets.QComboBox()
        self.align_oc_msg_colon_xcode_like.addItems(['true','false'])
        self.align_oc_msg_colon_xcode_like.setCurrentText('false')
        self.lt8.addWidget(self.align_oc_msg_colon_xcode_like, 197, 1, 1, 4)
        self.widget9 = QtWidgets.QWidget()
        self.addItem(self.widget9, self.tr("Comment modification options"))
        self.lt9 = QtWidgets.QGridLayout(self.widget9)
        self.labelcmt_width = QtWidgets.QLabel(self.tr("Try to wrap comments at N columns.")+' '+self.tr("\n"))
        self.labelcmt_width.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_width, 0, 0, 1, 5)
        if self.tr("code_cmt_width")!="code_cmt_width":
            self.codecmt_width = QtWidgets.QLabel(self.tr("code_cmt_width"))
            self.codecmt_width.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_width, 1, 0, 1, 5)
        self.namecmt_width = QtWidgets.QLabel("cmt_width")
        self.namecmt_width.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_width, 2, 0)
        self.cmt_width = QtWidgets.QSpinBox()
        self.cmt_width.setMinimum(0)
        self.cmt_width.setMaximum(100)
        self.cmt_width.setValue(0)
        self.lt9.addWidget(self.cmt_width, 2, 1, 1, 4)
        self.labelcmt_reflow_mode = QtWidgets.QLabel(self.tr("How to reflow comments.")+' '+self.tr("\n")+' '+self.tr("0: No reflowing (apart from the line wrapping due to cmt_width) (default) 1: No touching at all 2: Full reflow")+' '+self.tr("\n"))
        self.labelcmt_reflow_mode.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_reflow_mode, 3, 0, 1, 5)
        if self.tr("code_cmt_reflow_mode")!="code_cmt_reflow_mode":
            self.codecmt_reflow_mode = QtWidgets.QLabel(self.tr("code_cmt_reflow_mode"))
            self.codecmt_reflow_mode.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_reflow_mode, 4, 0, 1, 5)
        self.namecmt_reflow_mode = QtWidgets.QLabel("cmt_reflow_mode")
        self.namecmt_reflow_mode.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_reflow_mode, 5, 0)
        self.cmt_reflow_mode = QtWidgets.QSpinBox()
        self.cmt_reflow_mode.setMinimum(0)
        self.cmt_reflow_mode.setMaximum(100)
        self.cmt_reflow_mode.setValue(0)
        self.lt9.addWidget(self.cmt_reflow_mode, 5, 1, 1, 4)
        self.labelcmt_convert_tab_to_spaces = QtWidgets.QLabel(self.tr("Whether to convert all tabs to spaces in comments.")+' '+self.tr("If false, tabs in comments are left alone, unless used for indenting.")+' '+self.tr("\n"))
        self.labelcmt_convert_tab_to_spaces.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_convert_tab_to_spaces, 6, 0, 1, 5)
        if self.tr("code_cmt_convert_tab_to_spaces")!="code_cmt_convert_tab_to_spaces":
            self.codecmt_convert_tab_to_spaces = QtWidgets.QLabel(self.tr("code_cmt_convert_tab_to_spaces"))
            self.codecmt_convert_tab_to_spaces.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_convert_tab_to_spaces, 7, 0, 1, 5)
        self.namecmt_convert_tab_to_spaces = QtWidgets.QLabel("cmt_convert_tab_to_spaces")
        self.namecmt_convert_tab_to_spaces.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_convert_tab_to_spaces, 8, 0)
        self.cmt_convert_tab_to_spaces = QtWidgets.QComboBox()
        self.cmt_convert_tab_to_spaces.addItems(['true','false'])
        self.cmt_convert_tab_to_spaces.setCurrentText('false')
        self.lt9.addWidget(self.cmt_convert_tab_to_spaces, 8, 1, 1, 4)
        self.labelcmt_indent_multi = QtWidgets.QLabel(self.tr("Whether to apply changes to multi-line comments, including cmt_width, keyword substitution and leading chars.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelcmt_indent_multi.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_indent_multi, 9, 0, 1, 5)
        if self.tr("code_cmt_indent_multi")!="code_cmt_indent_multi":
            self.codecmt_indent_multi = QtWidgets.QLabel(self.tr("code_cmt_indent_multi"))
            self.codecmt_indent_multi.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_indent_multi, 10, 0, 1, 5)
        self.namecmt_indent_multi = QtWidgets.QLabel("cmt_indent_multi")
        self.namecmt_indent_multi.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_indent_multi, 11, 0)
        self.cmt_indent_multi = QtWidgets.QComboBox()
        self.cmt_indent_multi.addItems(['true','false'])
        self.cmt_indent_multi.setCurrentText('true')
        self.lt9.addWidget(self.cmt_indent_multi, 11, 1, 1, 4)
        self.labelcmt_c_group = QtWidgets.QLabel(self.tr("Whether to group c-comments that look like they are in a block.")+' '+self.tr("\n"))
        self.labelcmt_c_group.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_c_group, 12, 0, 1, 5)
        if self.tr("code_cmt_c_group")!="code_cmt_c_group":
            self.codecmt_c_group = QtWidgets.QLabel(self.tr("code_cmt_c_group"))
            self.codecmt_c_group.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_c_group, 13, 0, 1, 5)
        self.namecmt_c_group = QtWidgets.QLabel("cmt_c_group")
        self.namecmt_c_group.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_c_group, 14, 0)
        self.cmt_c_group = QtWidgets.QComboBox()
        self.cmt_c_group.addItems(['true','false'])
        self.cmt_c_group.setCurrentText('false')
        self.lt9.addWidget(self.cmt_c_group, 14, 1, 1, 4)
        self.labelcmt_c_nl_start = QtWidgets.QLabel(self.tr("Whether to put an empty '/*' on the first line of the combined c-comment.")+' '+self.tr("\n"))
        self.labelcmt_c_nl_start.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_c_nl_start, 15, 0, 1, 5)
        if self.tr("code_cmt_c_nl_start")!="code_cmt_c_nl_start":
            self.codecmt_c_nl_start = QtWidgets.QLabel(self.tr("code_cmt_c_nl_start"))
            self.codecmt_c_nl_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_c_nl_start, 16, 0, 1, 5)
        self.namecmt_c_nl_start = QtWidgets.QLabel("cmt_c_nl_start")
        self.namecmt_c_nl_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_c_nl_start, 17, 0)
        self.cmt_c_nl_start = QtWidgets.QComboBox()
        self.cmt_c_nl_start.addItems(['true','false'])
        self.cmt_c_nl_start.setCurrentText('false')
        self.lt9.addWidget(self.cmt_c_nl_start, 17, 1, 1, 4)
        self.labelcmt_c_nl_end = QtWidgets.QLabel(self.tr("Whether to add a newline before the closing '*/' of the combined c-comment.")+' '+self.tr("\n"))
        self.labelcmt_c_nl_end.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_c_nl_end, 18, 0, 1, 5)
        if self.tr("code_cmt_c_nl_end")!="code_cmt_c_nl_end":
            self.codecmt_c_nl_end = QtWidgets.QLabel(self.tr("code_cmt_c_nl_end"))
            self.codecmt_c_nl_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_c_nl_end, 19, 0, 1, 5)
        self.namecmt_c_nl_end = QtWidgets.QLabel("cmt_c_nl_end")
        self.namecmt_c_nl_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_c_nl_end, 20, 0)
        self.cmt_c_nl_end = QtWidgets.QComboBox()
        self.cmt_c_nl_end.addItems(['true','false'])
        self.cmt_c_nl_end.setCurrentText('false')
        self.lt9.addWidget(self.cmt_c_nl_end, 20, 1, 1, 4)
        self.labelcmt_cpp_to_c = QtWidgets.QLabel(self.tr("Whether to change cpp-comments into c-comments.")+' '+self.tr("\n"))
        self.labelcmt_cpp_to_c.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_cpp_to_c, 21, 0, 1, 5)
        if self.tr("code_cmt_cpp_to_c")!="code_cmt_cpp_to_c":
            self.codecmt_cpp_to_c = QtWidgets.QLabel(self.tr("code_cmt_cpp_to_c"))
            self.codecmt_cpp_to_c.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_cpp_to_c, 22, 0, 1, 5)
        self.namecmt_cpp_to_c = QtWidgets.QLabel("cmt_cpp_to_c")
        self.namecmt_cpp_to_c.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_cpp_to_c, 23, 0)
        self.cmt_cpp_to_c = QtWidgets.QComboBox()
        self.cmt_cpp_to_c.addItems(['true','false'])
        self.cmt_cpp_to_c.setCurrentText('false')
        self.lt9.addWidget(self.cmt_cpp_to_c, 23, 1, 1, 4)
        self.labelcmt_cpp_group = QtWidgets.QLabel(self.tr("Whether to group cpp-comments that look like they are in a block.")+' '+self.tr("Only meaningful if cmt_cpp_to_c=true.")+' '+self.tr("\n"))
        self.labelcmt_cpp_group.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_cpp_group, 24, 0, 1, 5)
        if self.tr("code_cmt_cpp_group")!="code_cmt_cpp_group":
            self.codecmt_cpp_group = QtWidgets.QLabel(self.tr("code_cmt_cpp_group"))
            self.codecmt_cpp_group.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_cpp_group, 25, 0, 1, 5)
        self.namecmt_cpp_group = QtWidgets.QLabel("cmt_cpp_group")
        self.namecmt_cpp_group.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_cpp_group, 26, 0)
        self.cmt_cpp_group = QtWidgets.QComboBox()
        self.cmt_cpp_group.addItems(['true','false'])
        self.cmt_cpp_group.setCurrentText('false')
        self.lt9.addWidget(self.cmt_cpp_group, 26, 1, 1, 4)
        self.labelcmt_cpp_nl_start = QtWidgets.QLabel(self.tr("Whether to put an empty '/*' on the first line of the combined cpp-comment when converting to a c-comment.")+' '+self.tr("\n")+' '+self.tr("Requires cmt_cpp_to_c=true and cmt_cpp_group=true.")+' '+self.tr("\n"))
        self.labelcmt_cpp_nl_start.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_cpp_nl_start, 27, 0, 1, 5)
        if self.tr("code_cmt_cpp_nl_start")!="code_cmt_cpp_nl_start":
            self.codecmt_cpp_nl_start = QtWidgets.QLabel(self.tr("code_cmt_cpp_nl_start"))
            self.codecmt_cpp_nl_start.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_cpp_nl_start, 28, 0, 1, 5)
        self.namecmt_cpp_nl_start = QtWidgets.QLabel("cmt_cpp_nl_start")
        self.namecmt_cpp_nl_start.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_cpp_nl_start, 29, 0)
        self.cmt_cpp_nl_start = QtWidgets.QComboBox()
        self.cmt_cpp_nl_start.addItems(['true','false'])
        self.cmt_cpp_nl_start.setCurrentText('false')
        self.lt9.addWidget(self.cmt_cpp_nl_start, 29, 1, 1, 4)
        self.labelcmt_cpp_nl_end = QtWidgets.QLabel(self.tr("Whether to add a newline before the closing '*/' of the combined cpp-comment when converting to a c-comment.")+' '+self.tr("\n")+' '+self.tr("Requires cmt_cpp_to_c=true and cmt_cpp_group=true.")+' '+self.tr("\n"))
        self.labelcmt_cpp_nl_end.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_cpp_nl_end, 30, 0, 1, 5)
        if self.tr("code_cmt_cpp_nl_end")!="code_cmt_cpp_nl_end":
            self.codecmt_cpp_nl_end = QtWidgets.QLabel(self.tr("code_cmt_cpp_nl_end"))
            self.codecmt_cpp_nl_end.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_cpp_nl_end, 31, 0, 1, 5)
        self.namecmt_cpp_nl_end = QtWidgets.QLabel("cmt_cpp_nl_end")
        self.namecmt_cpp_nl_end.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_cpp_nl_end, 32, 0)
        self.cmt_cpp_nl_end = QtWidgets.QComboBox()
        self.cmt_cpp_nl_end.addItems(['true','false'])
        self.cmt_cpp_nl_end.setCurrentText('false')
        self.lt9.addWidget(self.cmt_cpp_nl_end, 32, 1, 1, 4)
        self.labelcmt_star_cont = QtWidgets.QLabel(self.tr("Whether to put a star on subsequent comment lines.")+' '+self.tr("\n"))
        self.labelcmt_star_cont.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_star_cont, 33, 0, 1, 5)
        if self.tr("code_cmt_star_cont")!="code_cmt_star_cont":
            self.codecmt_star_cont = QtWidgets.QLabel(self.tr("code_cmt_star_cont"))
            self.codecmt_star_cont.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_star_cont, 34, 0, 1, 5)
        self.namecmt_star_cont = QtWidgets.QLabel("cmt_star_cont")
        self.namecmt_star_cont.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_star_cont, 35, 0)
        self.cmt_star_cont = QtWidgets.QComboBox()
        self.cmt_star_cont.addItems(['true','false'])
        self.cmt_star_cont.setCurrentText('false')
        self.lt9.addWidget(self.cmt_star_cont, 35, 1, 1, 4)
        self.labelcmt_sp_before_star_cont = QtWidgets.QLabel(self.tr("The number of spaces to insert at the start of subsequent comment lines.")+' '+self.tr("\n"))
        self.labelcmt_sp_before_star_cont.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_sp_before_star_cont, 36, 0, 1, 5)
        if self.tr("code_cmt_sp_before_star_cont")!="code_cmt_sp_before_star_cont":
            self.codecmt_sp_before_star_cont = QtWidgets.QLabel(self.tr("code_cmt_sp_before_star_cont"))
            self.codecmt_sp_before_star_cont.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_sp_before_star_cont, 37, 0, 1, 5)
        self.namecmt_sp_before_star_cont = QtWidgets.QLabel("cmt_sp_before_star_cont")
        self.namecmt_sp_before_star_cont.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_sp_before_star_cont, 38, 0)
        self.cmt_sp_before_star_cont = QtWidgets.QSpinBox()
        self.cmt_sp_before_star_cont.setMinimum(0)
        self.cmt_sp_before_star_cont.setMaximum(100)
        self.cmt_sp_before_star_cont.setValue(0)
        self.lt9.addWidget(self.cmt_sp_before_star_cont, 38, 1, 1, 4)
        self.labelcmt_sp_after_star_cont = QtWidgets.QLabel(self.tr("The number of spaces to insert after the star on subsequent comment lines.")+' '+self.tr("\n"))
        self.labelcmt_sp_after_star_cont.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_sp_after_star_cont, 39, 0, 1, 5)
        if self.tr("code_cmt_sp_after_star_cont")!="code_cmt_sp_after_star_cont":
            self.codecmt_sp_after_star_cont = QtWidgets.QLabel(self.tr("code_cmt_sp_after_star_cont"))
            self.codecmt_sp_after_star_cont.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_sp_after_star_cont, 40, 0, 1, 5)
        self.namecmt_sp_after_star_cont = QtWidgets.QLabel("cmt_sp_after_star_cont")
        self.namecmt_sp_after_star_cont.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_sp_after_star_cont, 41, 0)
        self.cmt_sp_after_star_cont = QtWidgets.QSpinBox()
        self.cmt_sp_after_star_cont.setMinimum(0)
        self.cmt_sp_after_star_cont.setMaximum(100)
        self.cmt_sp_after_star_cont.setValue(0)
        self.lt9.addWidget(self.cmt_sp_after_star_cont, 41, 1, 1, 4)
        self.labelcmt_multi_check_last = QtWidgets.QLabel(self.tr("For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelcmt_multi_check_last.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_multi_check_last, 42, 0, 1, 5)
        if self.tr("code_cmt_multi_check_last")!="code_cmt_multi_check_last":
            self.codecmt_multi_check_last = QtWidgets.QLabel(self.tr("code_cmt_multi_check_last"))
            self.codecmt_multi_check_last.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_multi_check_last, 43, 0, 1, 5)
        self.namecmt_multi_check_last = QtWidgets.QLabel("cmt_multi_check_last")
        self.namecmt_multi_check_last.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_multi_check_last, 44, 0)
        self.cmt_multi_check_last = QtWidgets.QComboBox()
        self.cmt_multi_check_last.addItems(['true','false'])
        self.cmt_multi_check_last.setCurrentText('true')
        self.lt9.addWidget(self.cmt_multi_check_last, 44, 1, 1, 4)
        self.labelcmt_multi_first_len_minimum = QtWidgets.QLabel(self.tr("For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length AND if the length is bigger as the first_len minimum.")+' '+self.tr("\n")+' '+self.tr("Default: 4")+' '+self.tr("\n"))
        self.labelcmt_multi_first_len_minimum.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_multi_first_len_minimum, 45, 0, 1, 5)
        if self.tr("code_cmt_multi_first_len_minimum")!="code_cmt_multi_first_len_minimum":
            self.codecmt_multi_first_len_minimum = QtWidgets.QLabel(self.tr("code_cmt_multi_first_len_minimum"))
            self.codecmt_multi_first_len_minimum.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_multi_first_len_minimum, 46, 0, 1, 5)
        self.namecmt_multi_first_len_minimum = QtWidgets.QLabel("cmt_multi_first_len_minimum")
        self.namecmt_multi_first_len_minimum.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_multi_first_len_minimum, 47, 0)
        self.cmt_multi_first_len_minimum = QtWidgets.QSpinBox()
        self.cmt_multi_first_len_minimum.setMinimum(0)
        self.cmt_multi_first_len_minimum.setMaximum(100)
        self.cmt_multi_first_len_minimum.setValue(4)
        self.lt9.addWidget(self.cmt_multi_first_len_minimum, 47, 1, 1, 4)
        self.labelcmt_insert_file_header = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert at the beginning of a file if the file doesn't start with a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(filename)', that will be replaced with the current file's name.")+' '+self.tr("\n"))
        self.labelcmt_insert_file_header.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_insert_file_header, 48, 0, 1, 5)
        if self.tr("code_cmt_insert_file_header")!="code_cmt_insert_file_header":
            self.codecmt_insert_file_header = QtWidgets.QLabel(self.tr("code_cmt_insert_file_header"))
            self.codecmt_insert_file_header.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_insert_file_header, 49, 0, 1, 5)
        self.namecmt_insert_file_header = QtWidgets.QLabel("cmt_insert_file_header")
        self.namecmt_insert_file_header.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_insert_file_header, 50, 0)
        self.cmt_insert_file_header = QtWidgets.QLineEdit()
        self.cmt_insert_file_header.setText("")
        self.lt9.addWidget(self.cmt_insert_file_header, 50, 1, 1, 4)
        self.labelcmt_insert_file_footer = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert at the end of a file if the file doesn't end with a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(filename)', that will be replaced with the current file's name.")+' '+self.tr("\n"))
        self.labelcmt_insert_file_footer.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_insert_file_footer, 51, 0, 1, 5)
        if self.tr("code_cmt_insert_file_footer")!="code_cmt_insert_file_footer":
            self.codecmt_insert_file_footer = QtWidgets.QLabel(self.tr("code_cmt_insert_file_footer"))
            self.codecmt_insert_file_footer.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_insert_file_footer, 52, 0, 1, 5)
        self.namecmt_insert_file_footer = QtWidgets.QLabel("cmt_insert_file_footer")
        self.namecmt_insert_file_footer.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_insert_file_footer, 53, 0)
        self.cmt_insert_file_footer = QtWidgets.QLineEdit()
        self.cmt_insert_file_footer.setText("")
        self.lt9.addWidget(self.cmt_insert_file_footer, 53, 1, 1, 4)
        self.labelcmt_insert_func_header = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert before a function definition if the function isn't preceded by a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(function)', '$(javaparam)' or '$(fclass)', these will be replaced with, respectively, the name of the function, the javadoc '@param' and '@return' stuff, or the name of the class to which the member function belongs.")+' '+self.tr("\n"))
        self.labelcmt_insert_func_header.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_insert_func_header, 54, 0, 1, 5)
        if self.tr("code_cmt_insert_func_header")!="code_cmt_insert_func_header":
            self.codecmt_insert_func_header = QtWidgets.QLabel(self.tr("code_cmt_insert_func_header"))
            self.codecmt_insert_func_header.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_insert_func_header, 55, 0, 1, 5)
        self.namecmt_insert_func_header = QtWidgets.QLabel("cmt_insert_func_header")
        self.namecmt_insert_func_header.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_insert_func_header, 56, 0)
        self.cmt_insert_func_header = QtWidgets.QLineEdit()
        self.cmt_insert_func_header.setText("")
        self.lt9.addWidget(self.cmt_insert_func_header, 56, 1, 1, 4)
        self.labelcmt_insert_class_header = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert before a class if the class isn't preceded by a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(class)', that will be replaced with the class name.")+' '+self.tr("\n"))
        self.labelcmt_insert_class_header.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_insert_class_header, 57, 0, 1, 5)
        if self.tr("code_cmt_insert_class_header")!="code_cmt_insert_class_header":
            self.codecmt_insert_class_header = QtWidgets.QLabel(self.tr("code_cmt_insert_class_header"))
            self.codecmt_insert_class_header.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_insert_class_header, 58, 0, 1, 5)
        self.namecmt_insert_class_header = QtWidgets.QLabel("cmt_insert_class_header")
        self.namecmt_insert_class_header.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_insert_class_header, 59, 0)
        self.cmt_insert_class_header = QtWidgets.QLineEdit()
        self.cmt_insert_class_header.setText("")
        self.lt9.addWidget(self.cmt_insert_class_header, 59, 1, 1, 4)
        self.labelcmt_insert_oc_msg_header = QtWidgets.QLabel(self.tr("Path to a file that contains text to insert before an Objective-C message specification, if the method isn't preceded by a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(message)' or '$(javaparam)', these will be replaced with, respectively, the name of the function, or the javadoc '@param' and '@return' stuff.")+' '+self.tr("\n"))
        self.labelcmt_insert_oc_msg_header.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_insert_oc_msg_header, 60, 0, 1, 5)
        if self.tr("code_cmt_insert_oc_msg_header")!="code_cmt_insert_oc_msg_header":
            self.codecmt_insert_oc_msg_header = QtWidgets.QLabel(self.tr("code_cmt_insert_oc_msg_header"))
            self.codecmt_insert_oc_msg_header.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_insert_oc_msg_header, 61, 0, 1, 5)
        self.namecmt_insert_oc_msg_header = QtWidgets.QLabel("cmt_insert_oc_msg_header")
        self.namecmt_insert_oc_msg_header.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_insert_oc_msg_header, 62, 0)
        self.cmt_insert_oc_msg_header = QtWidgets.QLineEdit()
        self.cmt_insert_oc_msg_header.setText("")
        self.lt9.addWidget(self.cmt_insert_oc_msg_header, 62, 1, 1, 4)
        self.labelcmt_insert_before_preproc = QtWidgets.QLabel(self.tr("Whether a comment should be inserted if a preprocessor is encountered when stepping backwards from a function name.")+' '+self.tr("\n")+' '+self.tr("Applies to cmt_insert_oc_msg_header, cmt_insert_func_header and cmt_insert_class_header.")+' '+self.tr("\n"))
        self.labelcmt_insert_before_preproc.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_insert_before_preproc, 63, 0, 1, 5)
        if self.tr("code_cmt_insert_before_preproc")!="code_cmt_insert_before_preproc":
            self.codecmt_insert_before_preproc = QtWidgets.QLabel(self.tr("code_cmt_insert_before_preproc"))
            self.codecmt_insert_before_preproc.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_insert_before_preproc, 64, 0, 1, 5)
        self.namecmt_insert_before_preproc = QtWidgets.QLabel("cmt_insert_before_preproc")
        self.namecmt_insert_before_preproc.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_insert_before_preproc, 65, 0)
        self.cmt_insert_before_preproc = QtWidgets.QComboBox()
        self.cmt_insert_before_preproc.addItems(['true','false'])
        self.cmt_insert_before_preproc.setCurrentText('false')
        self.lt9.addWidget(self.cmt_insert_before_preproc, 65, 1, 1, 4)
        self.labelcmt_insert_before_inlines = QtWidgets.QLabel(self.tr("Whether a comment should be inserted if a function is declared inline to a class definition.")+' '+self.tr("\n")+' '+self.tr("Applies to cmt_insert_func_header.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelcmt_insert_before_inlines.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_insert_before_inlines, 66, 0, 1, 5)
        if self.tr("code_cmt_insert_before_inlines")!="code_cmt_insert_before_inlines":
            self.codecmt_insert_before_inlines = QtWidgets.QLabel(self.tr("code_cmt_insert_before_inlines"))
            self.codecmt_insert_before_inlines.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_insert_before_inlines, 67, 0, 1, 5)
        self.namecmt_insert_before_inlines = QtWidgets.QLabel("cmt_insert_before_inlines")
        self.namecmt_insert_before_inlines.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_insert_before_inlines, 68, 0)
        self.cmt_insert_before_inlines = QtWidgets.QComboBox()
        self.cmt_insert_before_inlines.addItems(['true','false'])
        self.cmt_insert_before_inlines.setCurrentText('true')
        self.lt9.addWidget(self.cmt_insert_before_inlines, 68, 1, 1, 4)
        self.labelcmt_insert_before_ctor_dtor = QtWidgets.QLabel(self.tr("Whether a comment should be inserted if the function is a class constructor or destructor.")+' '+self.tr("\n")+' '+self.tr("Applies to cmt_insert_func_header.")+' '+self.tr("\n"))
        self.labelcmt_insert_before_ctor_dtor.setWordWrap(True)
        self.lt9.addWidget(self.labelcmt_insert_before_ctor_dtor, 69, 0, 1, 5)
        if self.tr("code_cmt_insert_before_ctor_dtor")!="code_cmt_insert_before_ctor_dtor":
            self.codecmt_insert_before_ctor_dtor = QtWidgets.QLabel(self.tr("code_cmt_insert_before_ctor_dtor"))
            self.codecmt_insert_before_ctor_dtor.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt9.addWidget(self.codecmt_insert_before_ctor_dtor, 70, 0, 1, 5)
        self.namecmt_insert_before_ctor_dtor = QtWidgets.QLabel("cmt_insert_before_ctor_dtor")
        self.namecmt_insert_before_ctor_dtor.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt9.addWidget(self.namecmt_insert_before_ctor_dtor, 71, 0)
        self.cmt_insert_before_ctor_dtor = QtWidgets.QComboBox()
        self.cmt_insert_before_ctor_dtor.addItems(['true','false'])
        self.cmt_insert_before_ctor_dtor.setCurrentText('false')
        self.lt9.addWidget(self.cmt_insert_before_ctor_dtor, 71, 1, 1, 4)
        self.widget10 = QtWidgets.QWidget()
        self.addItem(self.widget10, self.tr("Code modifying options (non-whitespace)"))
        self.lt10 = QtWidgets.QGridLayout(self.widget10)
        self.labelmod_full_brace_do = QtWidgets.QLabel(self.tr("Add or remove braces on a single-line 'do' statement.")+' '+self.tr("\n"))
        self.labelmod_full_brace_do.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_do, 0, 0, 1, 5)
        if self.tr("code_mod_full_brace_do")!="code_mod_full_brace_do":
            self.codemod_full_brace_do = QtWidgets.QLabel(self.tr("code_mod_full_brace_do"))
            self.codemod_full_brace_do.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_do, 1, 0, 1, 5)
        self.namemod_full_brace_do = QtWidgets.QLabel("mod_full_brace_do")
        self.namemod_full_brace_do.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_do, 2, 0)
        self.mod_full_brace_do = QtWidgets.QComboBox()
        self.mod_full_brace_do.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_do.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_do, 2, 1, 1, 4)
        self.labelmod_full_brace_for = QtWidgets.QLabel(self.tr("Add or remove braces on a single-line 'for' statement.")+' '+self.tr("\n"))
        self.labelmod_full_brace_for.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_for, 3, 0, 1, 5)
        if self.tr("code_mod_full_brace_for")!="code_mod_full_brace_for":
            self.codemod_full_brace_for = QtWidgets.QLabel(self.tr("code_mod_full_brace_for"))
            self.codemod_full_brace_for.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_for, 4, 0, 1, 5)
        self.namemod_full_brace_for = QtWidgets.QLabel("mod_full_brace_for")
        self.namemod_full_brace_for.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_for, 5, 0)
        self.mod_full_brace_for = QtWidgets.QComboBox()
        self.mod_full_brace_for.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_for.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_for, 5, 1, 1, 4)
        self.labelmod_full_brace_function = QtWidgets.QLabel(self.tr("(Pawn) Add or remove braces on a single-line function definition.")+' '+self.tr("\n"))
        self.labelmod_full_brace_function.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_function, 6, 0, 1, 5)
        if self.tr("code_mod_full_brace_function")!="code_mod_full_brace_function":
            self.codemod_full_brace_function = QtWidgets.QLabel(self.tr("code_mod_full_brace_function"))
            self.codemod_full_brace_function.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_function, 7, 0, 1, 5)
        self.namemod_full_brace_function = QtWidgets.QLabel("mod_full_brace_function")
        self.namemod_full_brace_function.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_function, 8, 0)
        self.mod_full_brace_function = QtWidgets.QComboBox()
        self.mod_full_brace_function.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_function.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_function, 8, 1, 1, 4)
        self.labelmod_full_brace_if = QtWidgets.QLabel(self.tr("Add or remove braces on a single-line 'if' statement.")+' '+self.tr("Braces will not be removed if the braced statement contains an 'else'.")+' '+self.tr("\n"))
        self.labelmod_full_brace_if.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_if, 9, 0, 1, 5)
        if self.tr("code_mod_full_brace_if")!="code_mod_full_brace_if":
            self.codemod_full_brace_if = QtWidgets.QLabel(self.tr("code_mod_full_brace_if"))
            self.codemod_full_brace_if.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_if, 10, 0, 1, 5)
        self.namemod_full_brace_if = QtWidgets.QLabel("mod_full_brace_if")
        self.namemod_full_brace_if.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_if, 11, 0)
        self.mod_full_brace_if = QtWidgets.QComboBox()
        self.mod_full_brace_if.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_if.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_if, 11, 1, 1, 4)
        self.labelmod_full_brace_if_chain = QtWidgets.QLabel(self.tr("Whether to enforce that all blocks of an 'if'/'else if'/'else' chain either have, or do not have, braces.")+' '+self.tr("If true, braces will be added if any block needs braces, and will only be removed if they can be removed from all blocks.")+' '+self.tr("\n")+' '+self.tr("Overrides mod_full_brace_if.")+' '+self.tr("\n"))
        self.labelmod_full_brace_if_chain.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_if_chain, 12, 0, 1, 5)
        if self.tr("code_mod_full_brace_if_chain")!="code_mod_full_brace_if_chain":
            self.codemod_full_brace_if_chain = QtWidgets.QLabel(self.tr("code_mod_full_brace_if_chain"))
            self.codemod_full_brace_if_chain.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_if_chain, 13, 0, 1, 5)
        self.namemod_full_brace_if_chain = QtWidgets.QLabel("mod_full_brace_if_chain")
        self.namemod_full_brace_if_chain.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_if_chain, 14, 0)
        self.mod_full_brace_if_chain = QtWidgets.QComboBox()
        self.mod_full_brace_if_chain.addItems(['true','false'])
        self.mod_full_brace_if_chain.setCurrentText('false')
        self.lt10.addWidget(self.mod_full_brace_if_chain, 14, 1, 1, 4)
        self.labelmod_full_brace_if_chain_only = QtWidgets.QLabel(self.tr("Whether to add braces to all blocks of an 'if'/'else if'/'else' chain.")+' '+self.tr("If true, mod_full_brace_if_chain will only remove braces from an 'if' that does not have an 'else if' or 'else'.")+' '+self.tr("\n"))
        self.labelmod_full_brace_if_chain_only.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_if_chain_only, 15, 0, 1, 5)
        if self.tr("code_mod_full_brace_if_chain_only")!="code_mod_full_brace_if_chain_only":
            self.codemod_full_brace_if_chain_only = QtWidgets.QLabel(self.tr("code_mod_full_brace_if_chain_only"))
            self.codemod_full_brace_if_chain_only.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_if_chain_only, 16, 0, 1, 5)
        self.namemod_full_brace_if_chain_only = QtWidgets.QLabel("mod_full_brace_if_chain_only")
        self.namemod_full_brace_if_chain_only.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_if_chain_only, 17, 0)
        self.mod_full_brace_if_chain_only = QtWidgets.QComboBox()
        self.mod_full_brace_if_chain_only.addItems(['true','false'])
        self.mod_full_brace_if_chain_only.setCurrentText('false')
        self.lt10.addWidget(self.mod_full_brace_if_chain_only, 17, 1, 1, 4)
        self.labelmod_full_brace_while = QtWidgets.QLabel(self.tr("Add or remove braces on single-line 'while' statement.")+' '+self.tr("\n"))
        self.labelmod_full_brace_while.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_while, 18, 0, 1, 5)
        if self.tr("code_mod_full_brace_while")!="code_mod_full_brace_while":
            self.codemod_full_brace_while = QtWidgets.QLabel(self.tr("code_mod_full_brace_while"))
            self.codemod_full_brace_while.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_while, 19, 0, 1, 5)
        self.namemod_full_brace_while = QtWidgets.QLabel("mod_full_brace_while")
        self.namemod_full_brace_while.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_while, 20, 0)
        self.mod_full_brace_while = QtWidgets.QComboBox()
        self.mod_full_brace_while.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_while.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_while, 20, 1, 1, 4)
        self.labelmod_full_brace_using = QtWidgets.QLabel(self.tr("Add or remove braces on single-line 'using ()' statement.")+' '+self.tr("\n"))
        self.labelmod_full_brace_using.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_using, 21, 0, 1, 5)
        if self.tr("code_mod_full_brace_using")!="code_mod_full_brace_using":
            self.codemod_full_brace_using = QtWidgets.QLabel(self.tr("code_mod_full_brace_using"))
            self.codemod_full_brace_using.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_using, 22, 0, 1, 5)
        self.namemod_full_brace_using = QtWidgets.QLabel("mod_full_brace_using")
        self.namemod_full_brace_using.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_using, 23, 0)
        self.mod_full_brace_using = QtWidgets.QComboBox()
        self.mod_full_brace_using.addItems(['ignore','add','remove','force'])
        self.mod_full_brace_using.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_full_brace_using, 23, 1, 1, 4)
        self.labelmod_full_brace_nl = QtWidgets.QLabel(self.tr("Don't remove braces around statements that span N newlines")+' '+self.tr("\n"))
        self.labelmod_full_brace_nl.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_nl, 24, 0, 1, 5)
        if self.tr("code_mod_full_brace_nl")!="code_mod_full_brace_nl":
            self.codemod_full_brace_nl = QtWidgets.QLabel(self.tr("code_mod_full_brace_nl"))
            self.codemod_full_brace_nl.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_nl, 25, 0, 1, 5)
        self.namemod_full_brace_nl = QtWidgets.QLabel("mod_full_brace_nl")
        self.namemod_full_brace_nl.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_nl, 26, 0)
        self.mod_full_brace_nl = QtWidgets.QSpinBox()
        self.mod_full_brace_nl.setMinimum(0)
        self.mod_full_brace_nl.setMaximum(100)
        self.mod_full_brace_nl.setValue(0)
        self.lt10.addWidget(self.mod_full_brace_nl, 26, 1, 1, 4)
        self.labelmod_full_brace_nl_block_rem_mlcond = QtWidgets.QLabel(self.tr("Whether to prevent removal of braces from 'if'/'for'/'while'/etc. blocks which span multiple lines.")+' '+self.tr("\n")+' '+self.tr("Affects:   mod_full_brace_for   mod_full_brace_if   mod_full_brace_if_chain   mod_full_brace_if_chain_only   mod_full_brace_while   mod_full_brace_using")+' '+self.tr("\n")+' '+self.tr("Does not affect:   mod_full_brace_do   mod_full_brace_function")+' '+self.tr("\n"))
        self.labelmod_full_brace_nl_block_rem_mlcond.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_brace_nl_block_rem_mlcond, 27, 0, 1, 5)
        if self.tr("code_mod_full_brace_nl_block_rem_mlcond")!="code_mod_full_brace_nl_block_rem_mlcond":
            self.codemod_full_brace_nl_block_rem_mlcond = QtWidgets.QLabel(self.tr("code_mod_full_brace_nl_block_rem_mlcond"))
            self.codemod_full_brace_nl_block_rem_mlcond.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_brace_nl_block_rem_mlcond, 28, 0, 1, 5)
        self.namemod_full_brace_nl_block_rem_mlcond = QtWidgets.QLabel("mod_full_brace_nl_block_rem_mlcond")
        self.namemod_full_brace_nl_block_rem_mlcond.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_brace_nl_block_rem_mlcond, 29, 0)
        self.mod_full_brace_nl_block_rem_mlcond = QtWidgets.QComboBox()
        self.mod_full_brace_nl_block_rem_mlcond.addItems(['true','false'])
        self.mod_full_brace_nl_block_rem_mlcond.setCurrentText('false')
        self.lt10.addWidget(self.mod_full_brace_nl_block_rem_mlcond, 29, 1, 1, 4)
        self.labelmod_paren_on_return = QtWidgets.QLabel(self.tr("Add or remove unnecessary parenthesis on 'return' statement.")+' '+self.tr("\n"))
        self.labelmod_paren_on_return.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_paren_on_return, 30, 0, 1, 5)
        if self.tr("code_mod_paren_on_return")!="code_mod_paren_on_return":
            self.codemod_paren_on_return = QtWidgets.QLabel(self.tr("code_mod_paren_on_return"))
            self.codemod_paren_on_return.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_paren_on_return, 31, 0, 1, 5)
        self.namemod_paren_on_return = QtWidgets.QLabel("mod_paren_on_return")
        self.namemod_paren_on_return.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_paren_on_return, 32, 0)
        self.mod_paren_on_return = QtWidgets.QComboBox()
        self.mod_paren_on_return.addItems(['ignore','add','remove','force'])
        self.mod_paren_on_return.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_paren_on_return, 32, 1, 1, 4)
        self.labelmod_pawn_semicolon = QtWidgets.QLabel(self.tr("(Pawn) Whether to change optional semicolons to real semicolons.")+' '+self.tr("\n"))
        self.labelmod_pawn_semicolon.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_pawn_semicolon, 33, 0, 1, 5)
        if self.tr("code_mod_pawn_semicolon")!="code_mod_pawn_semicolon":
            self.codemod_pawn_semicolon = QtWidgets.QLabel(self.tr("code_mod_pawn_semicolon"))
            self.codemod_pawn_semicolon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_pawn_semicolon, 34, 0, 1, 5)
        self.namemod_pawn_semicolon = QtWidgets.QLabel("mod_pawn_semicolon")
        self.namemod_pawn_semicolon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_pawn_semicolon, 35, 0)
        self.mod_pawn_semicolon = QtWidgets.QComboBox()
        self.mod_pawn_semicolon.addItems(['true','false'])
        self.mod_pawn_semicolon.setCurrentText('false')
        self.lt10.addWidget(self.mod_pawn_semicolon, 35, 1, 1, 4)
        self.labelmod_full_paren_if_bool = QtWidgets.QLabel(self.tr("Whether to fully parenthesize Boolean expressions in 'while' and 'if' statement, as in 'if (a && b > c)' => 'if (a && (b > c))'.")+' '+self.tr("\n"))
        self.labelmod_full_paren_if_bool.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_full_paren_if_bool, 36, 0, 1, 5)
        if self.tr("code_mod_full_paren_if_bool")!="code_mod_full_paren_if_bool":
            self.codemod_full_paren_if_bool = QtWidgets.QLabel(self.tr("code_mod_full_paren_if_bool"))
            self.codemod_full_paren_if_bool.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_full_paren_if_bool, 37, 0, 1, 5)
        self.namemod_full_paren_if_bool = QtWidgets.QLabel("mod_full_paren_if_bool")
        self.namemod_full_paren_if_bool.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_full_paren_if_bool, 38, 0)
        self.mod_full_paren_if_bool = QtWidgets.QComboBox()
        self.mod_full_paren_if_bool.addItems(['true','false'])
        self.mod_full_paren_if_bool.setCurrentText('false')
        self.lt10.addWidget(self.mod_full_paren_if_bool, 38, 1, 1, 4)
        self.labelmod_remove_extra_semicolon = QtWidgets.QLabel(self.tr("Whether to remove superfluous semicolons.")+' '+self.tr("\n"))
        self.labelmod_remove_extra_semicolon.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_remove_extra_semicolon, 39, 0, 1, 5)
        if self.tr("code_mod_remove_extra_semicolon")!="code_mod_remove_extra_semicolon":
            self.codemod_remove_extra_semicolon = QtWidgets.QLabel(self.tr("code_mod_remove_extra_semicolon"))
            self.codemod_remove_extra_semicolon.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_remove_extra_semicolon, 40, 0, 1, 5)
        self.namemod_remove_extra_semicolon = QtWidgets.QLabel("mod_remove_extra_semicolon")
        self.namemod_remove_extra_semicolon.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_remove_extra_semicolon, 41, 0)
        self.mod_remove_extra_semicolon = QtWidgets.QComboBox()
        self.mod_remove_extra_semicolon.addItems(['true','false'])
        self.mod_remove_extra_semicolon.setCurrentText('false')
        self.lt10.addWidget(self.mod_remove_extra_semicolon, 41, 1, 1, 4)
        self.labelmod_add_long_function_closebrace_comment = QtWidgets.QLabel(self.tr("If a function body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.")+' '+self.tr("\n"))
        self.labelmod_add_long_function_closebrace_comment.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_add_long_function_closebrace_comment, 42, 0, 1, 5)
        if self.tr("code_mod_add_long_function_closebrace_comment")!="code_mod_add_long_function_closebrace_comment":
            self.codemod_add_long_function_closebrace_comment = QtWidgets.QLabel(self.tr("code_mod_add_long_function_closebrace_comment"))
            self.codemod_add_long_function_closebrace_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_add_long_function_closebrace_comment, 43, 0, 1, 5)
        self.namemod_add_long_function_closebrace_comment = QtWidgets.QLabel("mod_add_long_function_closebrace_comment")
        self.namemod_add_long_function_closebrace_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_add_long_function_closebrace_comment, 44, 0)
        self.mod_add_long_function_closebrace_comment = QtWidgets.QSpinBox()
        self.mod_add_long_function_closebrace_comment.setMinimum(0)
        self.mod_add_long_function_closebrace_comment.setMaximum(100)
        self.mod_add_long_function_closebrace_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_function_closebrace_comment, 44, 1, 1, 4)
        self.labelmod_add_long_namespace_closebrace_comment = QtWidgets.QLabel(self.tr("If a namespace body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.")+' '+self.tr("\n"))
        self.labelmod_add_long_namespace_closebrace_comment.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_add_long_namespace_closebrace_comment, 45, 0, 1, 5)
        if self.tr("code_mod_add_long_namespace_closebrace_comment")!="code_mod_add_long_namespace_closebrace_comment":
            self.codemod_add_long_namespace_closebrace_comment = QtWidgets.QLabel(self.tr("code_mod_add_long_namespace_closebrace_comment"))
            self.codemod_add_long_namespace_closebrace_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_add_long_namespace_closebrace_comment, 46, 0, 1, 5)
        self.namemod_add_long_namespace_closebrace_comment = QtWidgets.QLabel("mod_add_long_namespace_closebrace_comment")
        self.namemod_add_long_namespace_closebrace_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_add_long_namespace_closebrace_comment, 47, 0)
        self.mod_add_long_namespace_closebrace_comment = QtWidgets.QSpinBox()
        self.mod_add_long_namespace_closebrace_comment.setMinimum(0)
        self.mod_add_long_namespace_closebrace_comment.setMaximum(100)
        self.mod_add_long_namespace_closebrace_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_namespace_closebrace_comment, 47, 1, 1, 4)
        self.labelmod_add_long_class_closebrace_comment = QtWidgets.QLabel(self.tr("If a class body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.")+' '+self.tr("\n"))
        self.labelmod_add_long_class_closebrace_comment.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_add_long_class_closebrace_comment, 48, 0, 1, 5)
        if self.tr("code_mod_add_long_class_closebrace_comment")!="code_mod_add_long_class_closebrace_comment":
            self.codemod_add_long_class_closebrace_comment = QtWidgets.QLabel(self.tr("code_mod_add_long_class_closebrace_comment"))
            self.codemod_add_long_class_closebrace_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_add_long_class_closebrace_comment, 49, 0, 1, 5)
        self.namemod_add_long_class_closebrace_comment = QtWidgets.QLabel("mod_add_long_class_closebrace_comment")
        self.namemod_add_long_class_closebrace_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_add_long_class_closebrace_comment, 50, 0)
        self.mod_add_long_class_closebrace_comment = QtWidgets.QSpinBox()
        self.mod_add_long_class_closebrace_comment.setMinimum(0)
        self.mod_add_long_class_closebrace_comment.setMaximum(100)
        self.mod_add_long_class_closebrace_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_class_closebrace_comment, 50, 1, 1, 4)
        self.labelmod_add_long_switch_closebrace_comment = QtWidgets.QLabel(self.tr("If a switch body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.")+' '+self.tr("\n"))
        self.labelmod_add_long_switch_closebrace_comment.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_add_long_switch_closebrace_comment, 51, 0, 1, 5)
        if self.tr("code_mod_add_long_switch_closebrace_comment")!="code_mod_add_long_switch_closebrace_comment":
            self.codemod_add_long_switch_closebrace_comment = QtWidgets.QLabel(self.tr("code_mod_add_long_switch_closebrace_comment"))
            self.codemod_add_long_switch_closebrace_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_add_long_switch_closebrace_comment, 52, 0, 1, 5)
        self.namemod_add_long_switch_closebrace_comment = QtWidgets.QLabel("mod_add_long_switch_closebrace_comment")
        self.namemod_add_long_switch_closebrace_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_add_long_switch_closebrace_comment, 53, 0)
        self.mod_add_long_switch_closebrace_comment = QtWidgets.QSpinBox()
        self.mod_add_long_switch_closebrace_comment.setMinimum(0)
        self.mod_add_long_switch_closebrace_comment.setMaximum(100)
        self.mod_add_long_switch_closebrace_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_switch_closebrace_comment, 53, 1, 1, 4)
        self.labelmod_add_long_ifdef_endif_comment = QtWidgets.QLabel(self.tr("If an #ifdef body exceeds the specified number of newlines and doesn't have a comment after the #endif, a comment will be added.")+' '+self.tr("\n"))
        self.labelmod_add_long_ifdef_endif_comment.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_add_long_ifdef_endif_comment, 54, 0, 1, 5)
        if self.tr("code_mod_add_long_ifdef_endif_comment")!="code_mod_add_long_ifdef_endif_comment":
            self.codemod_add_long_ifdef_endif_comment = QtWidgets.QLabel(self.tr("code_mod_add_long_ifdef_endif_comment"))
            self.codemod_add_long_ifdef_endif_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_add_long_ifdef_endif_comment, 55, 0, 1, 5)
        self.namemod_add_long_ifdef_endif_comment = QtWidgets.QLabel("mod_add_long_ifdef_endif_comment")
        self.namemod_add_long_ifdef_endif_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_add_long_ifdef_endif_comment, 56, 0)
        self.mod_add_long_ifdef_endif_comment = QtWidgets.QSpinBox()
        self.mod_add_long_ifdef_endif_comment.setMinimum(0)
        self.mod_add_long_ifdef_endif_comment.setMaximum(100)
        self.mod_add_long_ifdef_endif_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_ifdef_endif_comment, 56, 1, 1, 4)
        self.labelmod_add_long_ifdef_else_comment = QtWidgets.QLabel(self.tr("If an #ifdef or #else body exceeds the specified number of newlines and doesn't have a comment after the #else, a comment will be added.")+' '+self.tr("\n"))
        self.labelmod_add_long_ifdef_else_comment.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_add_long_ifdef_else_comment, 57, 0, 1, 5)
        if self.tr("code_mod_add_long_ifdef_else_comment")!="code_mod_add_long_ifdef_else_comment":
            self.codemod_add_long_ifdef_else_comment = QtWidgets.QLabel(self.tr("code_mod_add_long_ifdef_else_comment"))
            self.codemod_add_long_ifdef_else_comment.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_add_long_ifdef_else_comment, 58, 0, 1, 5)
        self.namemod_add_long_ifdef_else_comment = QtWidgets.QLabel("mod_add_long_ifdef_else_comment")
        self.namemod_add_long_ifdef_else_comment.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_add_long_ifdef_else_comment, 59, 0)
        self.mod_add_long_ifdef_else_comment = QtWidgets.QSpinBox()
        self.mod_add_long_ifdef_else_comment.setMinimum(0)
        self.mod_add_long_ifdef_else_comment.setMaximum(100)
        self.mod_add_long_ifdef_else_comment.setValue(0)
        self.lt10.addWidget(self.mod_add_long_ifdef_else_comment, 59, 1, 1, 4)
        self.labelmod_sort_case_sensitive = QtWidgets.QLabel(self.tr("Whether to take care of the case by the mod_sort_xx options.")+' '+self.tr("\n"))
        self.labelmod_sort_case_sensitive.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_case_sensitive, 60, 0, 1, 5)
        if self.tr("code_mod_sort_case_sensitive")!="code_mod_sort_case_sensitive":
            self.codemod_sort_case_sensitive = QtWidgets.QLabel(self.tr("code_mod_sort_case_sensitive"))
            self.codemod_sort_case_sensitive.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_case_sensitive, 61, 0, 1, 5)
        self.namemod_sort_case_sensitive = QtWidgets.QLabel("mod_sort_case_sensitive")
        self.namemod_sort_case_sensitive.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_case_sensitive, 62, 0)
        self.mod_sort_case_sensitive = QtWidgets.QComboBox()
        self.mod_sort_case_sensitive.addItems(['true','false'])
        self.mod_sort_case_sensitive.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_case_sensitive, 62, 1, 1, 4)
        self.labelmod_sort_import = QtWidgets.QLabel(self.tr("Whether to sort consecutive single-line 'import' statements.")+' '+self.tr("\n"))
        self.labelmod_sort_import.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_import, 63, 0, 1, 5)
        if self.tr("code_mod_sort_import")!="code_mod_sort_import":
            self.codemod_sort_import = QtWidgets.QLabel(self.tr("code_mod_sort_import"))
            self.codemod_sort_import.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_import, 64, 0, 1, 5)
        self.namemod_sort_import = QtWidgets.QLabel("mod_sort_import")
        self.namemod_sort_import.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_import, 65, 0)
        self.mod_sort_import = QtWidgets.QComboBox()
        self.mod_sort_import.addItems(['true','false'])
        self.mod_sort_import.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_import, 65, 1, 1, 4)
        self.labelmod_sort_using = QtWidgets.QLabel(self.tr("(C#) Whether to sort consecutive single-line 'using' statements.")+' '+self.tr("\n"))
        self.labelmod_sort_using.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_using, 66, 0, 1, 5)
        if self.tr("code_mod_sort_using")!="code_mod_sort_using":
            self.codemod_sort_using = QtWidgets.QLabel(self.tr("code_mod_sort_using"))
            self.codemod_sort_using.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_using, 67, 0, 1, 5)
        self.namemod_sort_using = QtWidgets.QLabel("mod_sort_using")
        self.namemod_sort_using.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_using, 68, 0)
        self.mod_sort_using = QtWidgets.QComboBox()
        self.mod_sort_using.addItems(['true','false'])
        self.mod_sort_using.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_using, 68, 1, 1, 4)
        self.labelmod_sort_include = QtWidgets.QLabel(self.tr("Whether to sort consecutive single-line '#include' statements (C/C++) and '#import' statements (Objective-C).")+' '+self.tr("Be aware that this has the potential to break your code if your includes/imports have ordering dependencies.")+' '+self.tr("\n"))
        self.labelmod_sort_include.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_include, 69, 0, 1, 5)
        if self.tr("code_mod_sort_include")!="code_mod_sort_include":
            self.codemod_sort_include = QtWidgets.QLabel(self.tr("code_mod_sort_include"))
            self.codemod_sort_include.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_include, 70, 0, 1, 5)
        self.namemod_sort_include = QtWidgets.QLabel("mod_sort_include")
        self.namemod_sort_include.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_include, 71, 0)
        self.mod_sort_include = QtWidgets.QComboBox()
        self.mod_sort_include.addItems(['true','false'])
        self.mod_sort_include.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_include, 71, 1, 1, 4)
        self.labelmod_sort_incl_import_prioritize_filename = QtWidgets.QLabel(self.tr("Whether to prioritize '#include' and '#import' statements that contain filename without extension when sorting is enabled.")+' '+self.tr("\n"))
        self.labelmod_sort_incl_import_prioritize_filename.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_incl_import_prioritize_filename, 72, 0, 1, 5)
        if self.tr("code_mod_sort_incl_import_prioritize_filename")!="code_mod_sort_incl_import_prioritize_filename":
            self.codemod_sort_incl_import_prioritize_filename = QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_prioritize_filename"))
            self.codemod_sort_incl_import_prioritize_filename.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_incl_import_prioritize_filename, 73, 0, 1, 5)
        self.namemod_sort_incl_import_prioritize_filename = QtWidgets.QLabel("mod_sort_incl_import_prioritize_filename")
        self.namemod_sort_incl_import_prioritize_filename.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_incl_import_prioritize_filename, 74, 0)
        self.mod_sort_incl_import_prioritize_filename = QtWidgets.QComboBox()
        self.mod_sort_incl_import_prioritize_filename.addItems(['true','false'])
        self.mod_sort_incl_import_prioritize_filename.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_prioritize_filename, 74, 1, 1, 4)
        self.labelmod_sort_incl_import_prioritize_extensionless = QtWidgets.QLabel(self.tr("Whether to prioritize '#include' and '#import' statements that does not contain extensions when sorting is enabled.")+' '+self.tr("\n"))
        self.labelmod_sort_incl_import_prioritize_extensionless.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_incl_import_prioritize_extensionless, 75, 0, 1, 5)
        if self.tr("code_mod_sort_incl_import_prioritize_extensionless")!="code_mod_sort_incl_import_prioritize_extensionless":
            self.codemod_sort_incl_import_prioritize_extensionless = QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_prioritize_extensionless"))
            self.codemod_sort_incl_import_prioritize_extensionless.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_incl_import_prioritize_extensionless, 76, 0, 1, 5)
        self.namemod_sort_incl_import_prioritize_extensionless = QtWidgets.QLabel("mod_sort_incl_import_prioritize_extensionless")
        self.namemod_sort_incl_import_prioritize_extensionless.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_incl_import_prioritize_extensionless, 77, 0)
        self.mod_sort_incl_import_prioritize_extensionless = QtWidgets.QComboBox()
        self.mod_sort_incl_import_prioritize_extensionless.addItems(['true','false'])
        self.mod_sort_incl_import_prioritize_extensionless.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_prioritize_extensionless, 77, 1, 1, 4)
        self.labelmod_sort_incl_import_prioritize_angle_over_quotes = QtWidgets.QLabel(self.tr("Whether to prioritize '#include' and '#import' statements that contain angle over quotes when sorting is enabled.")+' '+self.tr("\n"))
        self.labelmod_sort_incl_import_prioritize_angle_over_quotes.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_incl_import_prioritize_angle_over_quotes, 78, 0, 1, 5)
        if self.tr("code_mod_sort_incl_import_prioritize_angle_over_quotes")!="code_mod_sort_incl_import_prioritize_angle_over_quotes":
            self.codemod_sort_incl_import_prioritize_angle_over_quotes = QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_prioritize_angle_over_quotes"))
            self.codemod_sort_incl_import_prioritize_angle_over_quotes.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_incl_import_prioritize_angle_over_quotes, 79, 0, 1, 5)
        self.namemod_sort_incl_import_prioritize_angle_over_quotes = QtWidgets.QLabel("mod_sort_incl_import_prioritize_angle_over_quotes")
        self.namemod_sort_incl_import_prioritize_angle_over_quotes.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_incl_import_prioritize_angle_over_quotes, 80, 0)
        self.mod_sort_incl_import_prioritize_angle_over_quotes = QtWidgets.QComboBox()
        self.mod_sort_incl_import_prioritize_angle_over_quotes.addItems(['true','false'])
        self.mod_sort_incl_import_prioritize_angle_over_quotes.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_prioritize_angle_over_quotes, 80, 1, 1, 4)
        self.labelmod_sort_incl_import_ignore_extension = QtWidgets.QLabel(self.tr("Whether to ignore file extension in '#include' and '#import' statements for sorting comparison.")+' '+self.tr("\n"))
        self.labelmod_sort_incl_import_ignore_extension.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_incl_import_ignore_extension, 81, 0, 1, 5)
        if self.tr("code_mod_sort_incl_import_ignore_extension")!="code_mod_sort_incl_import_ignore_extension":
            self.codemod_sort_incl_import_ignore_extension = QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_ignore_extension"))
            self.codemod_sort_incl_import_ignore_extension.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_incl_import_ignore_extension, 82, 0, 1, 5)
        self.namemod_sort_incl_import_ignore_extension = QtWidgets.QLabel("mod_sort_incl_import_ignore_extension")
        self.namemod_sort_incl_import_ignore_extension.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_incl_import_ignore_extension, 83, 0)
        self.mod_sort_incl_import_ignore_extension = QtWidgets.QComboBox()
        self.mod_sort_incl_import_ignore_extension.addItems(['true','false'])
        self.mod_sort_incl_import_ignore_extension.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_ignore_extension, 83, 1, 1, 4)
        self.labelmod_sort_incl_import_grouping_enabled = QtWidgets.QLabel(self.tr("Whether to group '#include' and '#import' statements when sorting is enabled.")+' '+self.tr("\n"))
        self.labelmod_sort_incl_import_grouping_enabled.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_incl_import_grouping_enabled, 84, 0, 1, 5)
        if self.tr("code_mod_sort_incl_import_grouping_enabled")!="code_mod_sort_incl_import_grouping_enabled":
            self.codemod_sort_incl_import_grouping_enabled = QtWidgets.QLabel(self.tr("code_mod_sort_incl_import_grouping_enabled"))
            self.codemod_sort_incl_import_grouping_enabled.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_incl_import_grouping_enabled, 85, 0, 1, 5)
        self.namemod_sort_incl_import_grouping_enabled = QtWidgets.QLabel("mod_sort_incl_import_grouping_enabled")
        self.namemod_sort_incl_import_grouping_enabled.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_incl_import_grouping_enabled, 86, 0)
        self.mod_sort_incl_import_grouping_enabled = QtWidgets.QComboBox()
        self.mod_sort_incl_import_grouping_enabled.addItems(['true','false'])
        self.mod_sort_incl_import_grouping_enabled.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_incl_import_grouping_enabled, 86, 1, 1, 4)
        self.labelmod_move_case_break = QtWidgets.QLabel(self.tr("Whether to move a 'break' that appears after a fully braced 'case' before the close brace, as in 'case X: { ... } break;' => 'case X: { ... break; }'.")+' '+self.tr("\n"))
        self.labelmod_move_case_break.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_move_case_break, 87, 0, 1, 5)
        if self.tr("code_mod_move_case_break")!="code_mod_move_case_break":
            self.codemod_move_case_break = QtWidgets.QLabel(self.tr("code_mod_move_case_break"))
            self.codemod_move_case_break.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_move_case_break, 88, 0, 1, 5)
        self.namemod_move_case_break = QtWidgets.QLabel("mod_move_case_break")
        self.namemod_move_case_break.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_move_case_break, 89, 0)
        self.mod_move_case_break = QtWidgets.QComboBox()
        self.mod_move_case_break.addItems(['true','false'])
        self.mod_move_case_break.setCurrentText('false')
        self.lt10.addWidget(self.mod_move_case_break, 89, 1, 1, 4)
        self.labelmod_case_brace = QtWidgets.QLabel(self.tr("Add or remove braces around a fully braced case statement.")+' '+self.tr("Will only remove braces if there are no variable declarations in the block.")+' '+self.tr("\n"))
        self.labelmod_case_brace.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_case_brace, 90, 0, 1, 5)
        if self.tr("code_mod_case_brace")!="code_mod_case_brace":
            self.codemod_case_brace = QtWidgets.QLabel(self.tr("code_mod_case_brace"))
            self.codemod_case_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_case_brace, 91, 0, 1, 5)
        self.namemod_case_brace = QtWidgets.QLabel("mod_case_brace")
        self.namemod_case_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_case_brace, 92, 0)
        self.mod_case_brace = QtWidgets.QComboBox()
        self.mod_case_brace.addItems(['ignore','add','remove','force'])
        self.mod_case_brace.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_case_brace, 92, 1, 1, 4)
        self.labelmod_remove_empty_return = QtWidgets.QLabel(self.tr("Whether to remove a void 'return;' that appears as the last statement in a function.")+' '+self.tr("\n"))
        self.labelmod_remove_empty_return.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_remove_empty_return, 93, 0, 1, 5)
        if self.tr("code_mod_remove_empty_return")!="code_mod_remove_empty_return":
            self.codemod_remove_empty_return = QtWidgets.QLabel(self.tr("code_mod_remove_empty_return"))
            self.codemod_remove_empty_return.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_remove_empty_return, 94, 0, 1, 5)
        self.namemod_remove_empty_return = QtWidgets.QLabel("mod_remove_empty_return")
        self.namemod_remove_empty_return.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_remove_empty_return, 95, 0)
        self.mod_remove_empty_return = QtWidgets.QComboBox()
        self.mod_remove_empty_return.addItems(['true','false'])
        self.mod_remove_empty_return.setCurrentText('false')
        self.lt10.addWidget(self.mod_remove_empty_return, 95, 1, 1, 4)
        self.labelmod_enum_last_comma = QtWidgets.QLabel(self.tr("Add or remove the comma after the last value of an enumeration.")+' '+self.tr("\n"))
        self.labelmod_enum_last_comma.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_enum_last_comma, 96, 0, 1, 5)
        if self.tr("code_mod_enum_last_comma")!="code_mod_enum_last_comma":
            self.codemod_enum_last_comma = QtWidgets.QLabel(self.tr("code_mod_enum_last_comma"))
            self.codemod_enum_last_comma.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_enum_last_comma, 97, 0, 1, 5)
        self.namemod_enum_last_comma = QtWidgets.QLabel("mod_enum_last_comma")
        self.namemod_enum_last_comma.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_enum_last_comma, 98, 0)
        self.mod_enum_last_comma = QtWidgets.QComboBox()
        self.mod_enum_last_comma.addItems(['ignore','add','remove','force'])
        self.mod_enum_last_comma.setCurrentText('ignore')
        self.lt10.addWidget(self.mod_enum_last_comma, 98, 1, 1, 4)
        self.labelmod_sort_oc_properties = QtWidgets.QLabel(self.tr("(OC) Whether to organize the properties.")+' '+self.tr("If true, properties will be rearranged according to the mod_sort_oc_property_*_weight factors.")+' '+self.tr("\n"))
        self.labelmod_sort_oc_properties.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_oc_properties, 99, 0, 1, 5)
        if self.tr("code_mod_sort_oc_properties")!="code_mod_sort_oc_properties":
            self.codemod_sort_oc_properties = QtWidgets.QLabel(self.tr("code_mod_sort_oc_properties"))
            self.codemod_sort_oc_properties.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_oc_properties, 100, 0, 1, 5)
        self.namemod_sort_oc_properties = QtWidgets.QLabel("mod_sort_oc_properties")
        self.namemod_sort_oc_properties.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_oc_properties, 101, 0)
        self.mod_sort_oc_properties = QtWidgets.QComboBox()
        self.mod_sort_oc_properties.addItems(['true','false'])
        self.mod_sort_oc_properties.setCurrentText('false')
        self.lt10.addWidget(self.mod_sort_oc_properties, 101, 1, 1, 4)
        self.labelmod_sort_oc_property_class_weight = QtWidgets.QLabel(self.tr("(OC) Weight of a class property modifier.")+' '+self.tr("\n"))
        self.labelmod_sort_oc_property_class_weight.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_oc_property_class_weight, 102, 0, 1, 5)
        if self.tr("code_mod_sort_oc_property_class_weight")!="code_mod_sort_oc_property_class_weight":
            self.codemod_sort_oc_property_class_weight = QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_class_weight"))
            self.codemod_sort_oc_property_class_weight.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_oc_property_class_weight, 103, 0, 1, 5)
        self.namemod_sort_oc_property_class_weight = QtWidgets.QLabel("mod_sort_oc_property_class_weight")
        self.namemod_sort_oc_property_class_weight.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_oc_property_class_weight, 104, 0)
        self.mod_sort_oc_property_class_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_class_weight.setMinimum(-100)
        self.mod_sort_oc_property_class_weight.setMaximum(100)
        self.mod_sort_oc_property_class_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_class_weight, 104, 1, 1, 4)
        self.labelmod_sort_oc_property_thread_safe_weight = QtWidgets.QLabel(self.tr("(OC) Weight of 'atomic' and 'nonatomic'.")+' '+self.tr("\n"))
        self.labelmod_sort_oc_property_thread_safe_weight.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_oc_property_thread_safe_weight, 105, 0, 1, 5)
        if self.tr("code_mod_sort_oc_property_thread_safe_weight")!="code_mod_sort_oc_property_thread_safe_weight":
            self.codemod_sort_oc_property_thread_safe_weight = QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_thread_safe_weight"))
            self.codemod_sort_oc_property_thread_safe_weight.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_oc_property_thread_safe_weight, 106, 0, 1, 5)
        self.namemod_sort_oc_property_thread_safe_weight = QtWidgets.QLabel("mod_sort_oc_property_thread_safe_weight")
        self.namemod_sort_oc_property_thread_safe_weight.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_oc_property_thread_safe_weight, 107, 0)
        self.mod_sort_oc_property_thread_safe_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_thread_safe_weight.setMinimum(-100)
        self.mod_sort_oc_property_thread_safe_weight.setMaximum(100)
        self.mod_sort_oc_property_thread_safe_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_thread_safe_weight, 107, 1, 1, 4)
        self.labelmod_sort_oc_property_readwrite_weight = QtWidgets.QLabel(self.tr("(OC) Weight of 'readwrite' when organizing properties.")+' '+self.tr("\n"))
        self.labelmod_sort_oc_property_readwrite_weight.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_oc_property_readwrite_weight, 108, 0, 1, 5)
        if self.tr("code_mod_sort_oc_property_readwrite_weight")!="code_mod_sort_oc_property_readwrite_weight":
            self.codemod_sort_oc_property_readwrite_weight = QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_readwrite_weight"))
            self.codemod_sort_oc_property_readwrite_weight.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_oc_property_readwrite_weight, 109, 0, 1, 5)
        self.namemod_sort_oc_property_readwrite_weight = QtWidgets.QLabel("mod_sort_oc_property_readwrite_weight")
        self.namemod_sort_oc_property_readwrite_weight.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_oc_property_readwrite_weight, 110, 0)
        self.mod_sort_oc_property_readwrite_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_readwrite_weight.setMinimum(-100)
        self.mod_sort_oc_property_readwrite_weight.setMaximum(100)
        self.mod_sort_oc_property_readwrite_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_readwrite_weight, 110, 1, 1, 4)
        self.labelmod_sort_oc_property_reference_weight = QtWidgets.QLabel(self.tr("(OC) Weight of a reference type specifier ('retain', 'copy', 'assign', 'weak', 'strong') when organizing properties.")+' '+self.tr("\n"))
        self.labelmod_sort_oc_property_reference_weight.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_oc_property_reference_weight, 111, 0, 1, 5)
        if self.tr("code_mod_sort_oc_property_reference_weight")!="code_mod_sort_oc_property_reference_weight":
            self.codemod_sort_oc_property_reference_weight = QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_reference_weight"))
            self.codemod_sort_oc_property_reference_weight.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_oc_property_reference_weight, 112, 0, 1, 5)
        self.namemod_sort_oc_property_reference_weight = QtWidgets.QLabel("mod_sort_oc_property_reference_weight")
        self.namemod_sort_oc_property_reference_weight.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_oc_property_reference_weight, 113, 0)
        self.mod_sort_oc_property_reference_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_reference_weight.setMinimum(-100)
        self.mod_sort_oc_property_reference_weight.setMaximum(100)
        self.mod_sort_oc_property_reference_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_reference_weight, 113, 1, 1, 4)
        self.labelmod_sort_oc_property_getter_weight = QtWidgets.QLabel(self.tr("(OC) Weight of getter type ('getter=') when organizing properties.")+' '+self.tr("\n"))
        self.labelmod_sort_oc_property_getter_weight.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_oc_property_getter_weight, 114, 0, 1, 5)
        if self.tr("code_mod_sort_oc_property_getter_weight")!="code_mod_sort_oc_property_getter_weight":
            self.codemod_sort_oc_property_getter_weight = QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_getter_weight"))
            self.codemod_sort_oc_property_getter_weight.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_oc_property_getter_weight, 115, 0, 1, 5)
        self.namemod_sort_oc_property_getter_weight = QtWidgets.QLabel("mod_sort_oc_property_getter_weight")
        self.namemod_sort_oc_property_getter_weight.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_oc_property_getter_weight, 116, 0)
        self.mod_sort_oc_property_getter_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_getter_weight.setMinimum(-100)
        self.mod_sort_oc_property_getter_weight.setMaximum(100)
        self.mod_sort_oc_property_getter_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_getter_weight, 116, 1, 1, 4)
        self.labelmod_sort_oc_property_setter_weight = QtWidgets.QLabel(self.tr("(OC) Weight of setter type ('setter=') when organizing properties.")+' '+self.tr("\n"))
        self.labelmod_sort_oc_property_setter_weight.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_oc_property_setter_weight, 117, 0, 1, 5)
        if self.tr("code_mod_sort_oc_property_setter_weight")!="code_mod_sort_oc_property_setter_weight":
            self.codemod_sort_oc_property_setter_weight = QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_setter_weight"))
            self.codemod_sort_oc_property_setter_weight.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_oc_property_setter_weight, 118, 0, 1, 5)
        self.namemod_sort_oc_property_setter_weight = QtWidgets.QLabel("mod_sort_oc_property_setter_weight")
        self.namemod_sort_oc_property_setter_weight.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_oc_property_setter_weight, 119, 0)
        self.mod_sort_oc_property_setter_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_setter_weight.setMinimum(-100)
        self.mod_sort_oc_property_setter_weight.setMaximum(100)
        self.mod_sort_oc_property_setter_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_setter_weight, 119, 1, 1, 4)
        self.labelmod_sort_oc_property_nullability_weight = QtWidgets.QLabel(self.tr("(OC) Weight of nullability type ('nullable', 'nonnull', 'null_unspecified', 'null_resettable') when organizing properties.")+' '+self.tr("\n"))
        self.labelmod_sort_oc_property_nullability_weight.setWordWrap(True)
        self.lt10.addWidget(self.labelmod_sort_oc_property_nullability_weight, 120, 0, 1, 5)
        if self.tr("code_mod_sort_oc_property_nullability_weight")!="code_mod_sort_oc_property_nullability_weight":
            self.codemod_sort_oc_property_nullability_weight = QtWidgets.QLabel(self.tr("code_mod_sort_oc_property_nullability_weight"))
            self.codemod_sort_oc_property_nullability_weight.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt10.addWidget(self.codemod_sort_oc_property_nullability_weight, 121, 0, 1, 5)
        self.namemod_sort_oc_property_nullability_weight = QtWidgets.QLabel("mod_sort_oc_property_nullability_weight")
        self.namemod_sort_oc_property_nullability_weight.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt10.addWidget(self.namemod_sort_oc_property_nullability_weight, 122, 0)
        self.mod_sort_oc_property_nullability_weight = QtWidgets.QSpinBox()
        self.mod_sort_oc_property_nullability_weight.setMinimum(-100)
        self.mod_sort_oc_property_nullability_weight.setMaximum(100)
        self.mod_sort_oc_property_nullability_weight.setValue(0)
        self.lt10.addWidget(self.mod_sort_oc_property_nullability_weight, 122, 1, 1, 4)
        self.widget11 = QtWidgets.QWidget()
        self.addItem(self.widget11, self.tr("Preprocessor options"))
        self.lt11 = QtWidgets.QGridLayout(self.widget11)
        self.labelpp_indent = QtWidgets.QLabel(self.tr("Add or remove indentation of preprocessor directives inside #if blocks at brace level 0 (file-level).")+' '+self.tr("\n"))
        self.labelpp_indent.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent, 0, 0, 1, 5)
        if self.tr("code_pp_indent")!="code_pp_indent":
            self.codepp_indent = QtWidgets.QLabel(self.tr("code_pp_indent"))
            self.codepp_indent.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent, 1, 0, 1, 5)
        self.namepp_indent = QtWidgets.QLabel("pp_indent")
        self.namepp_indent.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent, 2, 0)
        self.pp_indent = QtWidgets.QComboBox()
        self.pp_indent.addItems(['ignore','add','remove','force'])
        self.pp_indent.setCurrentText('ignore')
        self.lt11.addWidget(self.pp_indent, 2, 1, 1, 4)
        self.labelpp_indent_at_level = QtWidgets.QLabel(self.tr("Whether to indent #if/#else/#endif at the brace level.")+' '+self.tr("If false, these are indented from column 1.")+' '+self.tr("\n"))
        self.labelpp_indent_at_level.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent_at_level, 3, 0, 1, 5)
        if self.tr("code_pp_indent_at_level")!="code_pp_indent_at_level":
            self.codepp_indent_at_level = QtWidgets.QLabel(self.tr("code_pp_indent_at_level"))
            self.codepp_indent_at_level.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent_at_level, 4, 0, 1, 5)
        self.namepp_indent_at_level = QtWidgets.QLabel("pp_indent_at_level")
        self.namepp_indent_at_level.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent_at_level, 5, 0)
        self.pp_indent_at_level = QtWidgets.QComboBox()
        self.pp_indent_at_level.addItems(['true','false'])
        self.pp_indent_at_level.setCurrentText('false')
        self.lt11.addWidget(self.pp_indent_at_level, 5, 1, 1, 4)
        self.labelpp_indent_count = QtWidgets.QLabel(self.tr("Specifies the number of columns to indent preprocessors per level at brace level 0 (file-level).")+' '+self.tr("If pp_indent_at_level=false, also specifies the number of columns to indent preprocessors per level at brace level > 0 (function-level).")+' '+self.tr("\n")+' '+self.tr("Default: 1")+' '+self.tr("\n"))
        self.labelpp_indent_count.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent_count, 6, 0, 1, 5)
        if self.tr("code_pp_indent_count")!="code_pp_indent_count":
            self.codepp_indent_count = QtWidgets.QLabel(self.tr("code_pp_indent_count"))
            self.codepp_indent_count.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent_count, 7, 0, 1, 5)
        self.namepp_indent_count = QtWidgets.QLabel("pp_indent_count")
        self.namepp_indent_count.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent_count, 8, 0)
        self.pp_indent_count = QtWidgets.QSpinBox()
        self.pp_indent_count.setMinimum(0)
        self.pp_indent_count.setMaximum(100)
        self.pp_indent_count.setValue(1)
        self.lt11.addWidget(self.pp_indent_count, 8, 1, 1, 4)
        self.labelpp_space = QtWidgets.QLabel(self.tr("Add or remove space after # based on pp_level of #if blocks.")+' '+self.tr("\n"))
        self.labelpp_space.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_space, 9, 0, 1, 5)
        if self.tr("code_pp_space")!="code_pp_space":
            self.codepp_space = QtWidgets.QLabel(self.tr("code_pp_space"))
            self.codepp_space.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_space, 10, 0, 1, 5)
        self.namepp_space = QtWidgets.QLabel("pp_space")
        self.namepp_space.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_space, 11, 0)
        self.pp_space = QtWidgets.QComboBox()
        self.pp_space.addItems(['ignore','add','remove','force'])
        self.pp_space.setCurrentText('ignore')
        self.lt11.addWidget(self.pp_space, 11, 1, 1, 4)
        self.labelpp_space_count = QtWidgets.QLabel(self.tr("Sets the number of spaces per level added with pp_space.")+' '+self.tr("\n"))
        self.labelpp_space_count.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_space_count, 12, 0, 1, 5)
        if self.tr("code_pp_space_count")!="code_pp_space_count":
            self.codepp_space_count = QtWidgets.QLabel(self.tr("code_pp_space_count"))
            self.codepp_space_count.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_space_count, 13, 0, 1, 5)
        self.namepp_space_count = QtWidgets.QLabel("pp_space_count")
        self.namepp_space_count.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_space_count, 14, 0)
        self.pp_space_count = QtWidgets.QSpinBox()
        self.pp_space_count.setMinimum(0)
        self.pp_space_count.setMaximum(100)
        self.pp_space_count.setValue(0)
        self.lt11.addWidget(self.pp_space_count, 14, 1, 1, 4)
        self.labelpp_indent_region = QtWidgets.QLabel(self.tr("The indent for '#region' and '#endregion' in C# and '#pragma region' in C/C++.")+' '+self.tr("Negative values decrease indent down to the first column.")+' '+self.tr("\n"))
        self.labelpp_indent_region.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent_region, 15, 0, 1, 5)
        if self.tr("code_pp_indent_region")!="code_pp_indent_region":
            self.codepp_indent_region = QtWidgets.QLabel(self.tr("code_pp_indent_region"))
            self.codepp_indent_region.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent_region, 16, 0, 1, 5)
        self.namepp_indent_region = QtWidgets.QLabel("pp_indent_region")
        self.namepp_indent_region.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent_region, 17, 0)
        self.pp_indent_region = QtWidgets.QSpinBox()
        self.pp_indent_region.setMinimum(-100)
        self.pp_indent_region.setMaximum(100)
        self.pp_indent_region.setValue(0)
        self.lt11.addWidget(self.pp_indent_region, 17, 1, 1, 4)
        self.labelpp_region_indent_code = QtWidgets.QLabel(self.tr("Whether to indent the code between #region and #endregion.")+' '+self.tr("\n"))
        self.labelpp_region_indent_code.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_region_indent_code, 18, 0, 1, 5)
        if self.tr("code_pp_region_indent_code")!="code_pp_region_indent_code":
            self.codepp_region_indent_code = QtWidgets.QLabel(self.tr("code_pp_region_indent_code"))
            self.codepp_region_indent_code.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_region_indent_code, 19, 0, 1, 5)
        self.namepp_region_indent_code = QtWidgets.QLabel("pp_region_indent_code")
        self.namepp_region_indent_code.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_region_indent_code, 20, 0)
        self.pp_region_indent_code = QtWidgets.QComboBox()
        self.pp_region_indent_code.addItems(['true','false'])
        self.pp_region_indent_code.setCurrentText('false')
        self.lt11.addWidget(self.pp_region_indent_code, 20, 1, 1, 4)
        self.labelpp_indent_if = QtWidgets.QLabel(self.tr("If pp_indent_at_level=true, sets the indent for #if, #else and #endif when not at file-level.")+' '+self.tr("Negative values decrease indent down to the first column.")+' '+self.tr("\n")+' '+self.tr("=0: Indent preprocessors using output_tab_size >0: Column at which all preprocessors will be indented")+' '+self.tr("\n"))
        self.labelpp_indent_if.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent_if, 21, 0, 1, 5)
        if self.tr("code_pp_indent_if")!="code_pp_indent_if":
            self.codepp_indent_if = QtWidgets.QLabel(self.tr("code_pp_indent_if"))
            self.codepp_indent_if.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent_if, 22, 0, 1, 5)
        self.namepp_indent_if = QtWidgets.QLabel("pp_indent_if")
        self.namepp_indent_if.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent_if, 23, 0)
        self.pp_indent_if = QtWidgets.QSpinBox()
        self.pp_indent_if.setMinimum(-100)
        self.pp_indent_if.setMaximum(100)
        self.pp_indent_if.setValue(0)
        self.lt11.addWidget(self.pp_indent_if, 23, 1, 1, 4)
        self.labelpp_if_indent_code = QtWidgets.QLabel(self.tr("Whether to indent the code between #if, #else and #endif.")+' '+self.tr("\n"))
        self.labelpp_if_indent_code.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_if_indent_code, 24, 0, 1, 5)
        if self.tr("code_pp_if_indent_code")!="code_pp_if_indent_code":
            self.codepp_if_indent_code = QtWidgets.QLabel(self.tr("code_pp_if_indent_code"))
            self.codepp_if_indent_code.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_if_indent_code, 25, 0, 1, 5)
        self.namepp_if_indent_code = QtWidgets.QLabel("pp_if_indent_code")
        self.namepp_if_indent_code.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_if_indent_code, 26, 0)
        self.pp_if_indent_code = QtWidgets.QComboBox()
        self.pp_if_indent_code.addItems(['true','false'])
        self.pp_if_indent_code.setCurrentText('false')
        self.lt11.addWidget(self.pp_if_indent_code, 26, 1, 1, 4)
        self.labelpp_define_at_level = QtWidgets.QLabel(self.tr("Whether to indent '#define' at the brace level.")+' '+self.tr("If false, these are indented from column 1.")+' '+self.tr("\n"))
        self.labelpp_define_at_level.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_define_at_level, 27, 0, 1, 5)
        if self.tr("code_pp_define_at_level")!="code_pp_define_at_level":
            self.codepp_define_at_level = QtWidgets.QLabel(self.tr("code_pp_define_at_level"))
            self.codepp_define_at_level.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_define_at_level, 28, 0, 1, 5)
        self.namepp_define_at_level = QtWidgets.QLabel("pp_define_at_level")
        self.namepp_define_at_level.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_define_at_level, 29, 0)
        self.pp_define_at_level = QtWidgets.QComboBox()
        self.pp_define_at_level.addItems(['true','false'])
        self.pp_define_at_level.setCurrentText('false')
        self.lt11.addWidget(self.pp_define_at_level, 29, 1, 1, 4)
        self.labelpp_ignore_define_body = QtWidgets.QLabel(self.tr("Whether to ignore the '#define' body while formatting.")+' '+self.tr("\n"))
        self.labelpp_ignore_define_body.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_ignore_define_body, 30, 0, 1, 5)
        if self.tr("code_pp_ignore_define_body")!="code_pp_ignore_define_body":
            self.codepp_ignore_define_body = QtWidgets.QLabel(self.tr("code_pp_ignore_define_body"))
            self.codepp_ignore_define_body.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_ignore_define_body, 31, 0, 1, 5)
        self.namepp_ignore_define_body = QtWidgets.QLabel("pp_ignore_define_body")
        self.namepp_ignore_define_body.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_ignore_define_body, 32, 0)
        self.pp_ignore_define_body = QtWidgets.QComboBox()
        self.pp_ignore_define_body.addItems(['true','false'])
        self.pp_ignore_define_body.setCurrentText('false')
        self.lt11.addWidget(self.pp_ignore_define_body, 32, 1, 1, 4)
        self.labelpp_indent_case = QtWidgets.QLabel(self.tr("Whether to indent case statements between #if, #else, and #endif.")+' '+self.tr("Only applies to the indent of the preprocesser that the case statements directly inside of.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelpp_indent_case.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent_case, 33, 0, 1, 5)
        if self.tr("code_pp_indent_case")!="code_pp_indent_case":
            self.codepp_indent_case = QtWidgets.QLabel(self.tr("code_pp_indent_case"))
            self.codepp_indent_case.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent_case, 34, 0, 1, 5)
        self.namepp_indent_case = QtWidgets.QLabel("pp_indent_case")
        self.namepp_indent_case.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent_case, 35, 0)
        self.pp_indent_case = QtWidgets.QComboBox()
        self.pp_indent_case.addItems(['true','false'])
        self.pp_indent_case.setCurrentText('true')
        self.lt11.addWidget(self.pp_indent_case, 35, 1, 1, 4)
        self.labelpp_indent_func_def = QtWidgets.QLabel(self.tr("Whether to indent whole function definitions between #if, #else, and #endif.")+' '+self.tr("Only applies to the indent of the preprocesser that the function definition is directly inside of.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelpp_indent_func_def.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent_func_def, 36, 0, 1, 5)
        if self.tr("code_pp_indent_func_def")!="code_pp_indent_func_def":
            self.codepp_indent_func_def = QtWidgets.QLabel(self.tr("code_pp_indent_func_def"))
            self.codepp_indent_func_def.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent_func_def, 37, 0, 1, 5)
        self.namepp_indent_func_def = QtWidgets.QLabel("pp_indent_func_def")
        self.namepp_indent_func_def.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent_func_def, 38, 0)
        self.pp_indent_func_def = QtWidgets.QComboBox()
        self.pp_indent_func_def.addItems(['true','false'])
        self.pp_indent_func_def.setCurrentText('true')
        self.lt11.addWidget(self.pp_indent_func_def, 38, 1, 1, 4)
        self.labelpp_indent_extern = QtWidgets.QLabel(self.tr("Whether to indent extern C blocks between #if, #else, and #endif.")+' '+self.tr("Only applies to the indent of the preprocesser that the extern block is directly inside of.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelpp_indent_extern.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent_extern, 39, 0, 1, 5)
        if self.tr("code_pp_indent_extern")!="code_pp_indent_extern":
            self.codepp_indent_extern = QtWidgets.QLabel(self.tr("code_pp_indent_extern"))
            self.codepp_indent_extern.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent_extern, 40, 0, 1, 5)
        self.namepp_indent_extern = QtWidgets.QLabel("pp_indent_extern")
        self.namepp_indent_extern.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent_extern, 41, 0)
        self.pp_indent_extern = QtWidgets.QComboBox()
        self.pp_indent_extern.addItems(['true','false'])
        self.pp_indent_extern.setCurrentText('true')
        self.lt11.addWidget(self.pp_indent_extern, 41, 1, 1, 4)
        self.labelpp_indent_brace = QtWidgets.QLabel(self.tr("Whether to indent braces directly inside #if, #else, and #endif.")+' '+self.tr("Only applies to the indent of the preprocesser that the braces are directly inside of.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labelpp_indent_brace.setWordWrap(True)
        self.lt11.addWidget(self.labelpp_indent_brace, 42, 0, 1, 5)
        if self.tr("code_pp_indent_brace")!="code_pp_indent_brace":
            self.codepp_indent_brace = QtWidgets.QLabel(self.tr("code_pp_indent_brace"))
            self.codepp_indent_brace.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt11.addWidget(self.codepp_indent_brace, 43, 0, 1, 5)
        self.namepp_indent_brace = QtWidgets.QLabel("pp_indent_brace")
        self.namepp_indent_brace.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt11.addWidget(self.namepp_indent_brace, 44, 0)
        self.pp_indent_brace = QtWidgets.QComboBox()
        self.pp_indent_brace.addItems(['true','false'])
        self.pp_indent_brace.setCurrentText('true')
        self.lt11.addWidget(self.pp_indent_brace, 44, 1, 1, 4)
        self.widget12 = QtWidgets.QWidget()
        self.addItem(self.widget12, self.tr("Sort includes options"))
        self.lt12 = QtWidgets.QGridLayout(self.widget12)
        self.labelinclude_category_0 = QtWidgets.QLabel(self.tr("The regex for include category with priority 0.")+' '+self.tr("\n"))
        self.labelinclude_category_0.setWordWrap(True)
        self.lt12.addWidget(self.labelinclude_category_0, 0, 0, 1, 5)
        if self.tr("code_include_category_0")!="code_include_category_0":
            self.codeinclude_category_0 = QtWidgets.QLabel(self.tr("code_include_category_0"))
            self.codeinclude_category_0.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt12.addWidget(self.codeinclude_category_0, 1, 0, 1, 5)
        self.nameinclude_category_0 = QtWidgets.QLabel("include_category_0")
        self.nameinclude_category_0.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt12.addWidget(self.nameinclude_category_0, 2, 0)
        self.include_category_0 = QtWidgets.QLineEdit()
        self.include_category_0.setText("")
        self.lt12.addWidget(self.include_category_0, 2, 1, 1, 4)
        self.labelinclude_category_1 = QtWidgets.QLabel(self.tr("The regex for include category with priority 1.")+' '+self.tr("\n"))
        self.labelinclude_category_1.setWordWrap(True)
        self.lt12.addWidget(self.labelinclude_category_1, 3, 0, 1, 5)
        if self.tr("code_include_category_1")!="code_include_category_1":
            self.codeinclude_category_1 = QtWidgets.QLabel(self.tr("code_include_category_1"))
            self.codeinclude_category_1.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt12.addWidget(self.codeinclude_category_1, 4, 0, 1, 5)
        self.nameinclude_category_1 = QtWidgets.QLabel("include_category_1")
        self.nameinclude_category_1.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt12.addWidget(self.nameinclude_category_1, 5, 0)
        self.include_category_1 = QtWidgets.QLineEdit()
        self.include_category_1.setText("")
        self.lt12.addWidget(self.include_category_1, 5, 1, 1, 4)
        self.labelinclude_category_2 = QtWidgets.QLabel(self.tr("The regex for include category with priority 2.")+' '+self.tr("\n"))
        self.labelinclude_category_2.setWordWrap(True)
        self.lt12.addWidget(self.labelinclude_category_2, 6, 0, 1, 5)
        if self.tr("code_include_category_2")!="code_include_category_2":
            self.codeinclude_category_2 = QtWidgets.QLabel(self.tr("code_include_category_2"))
            self.codeinclude_category_2.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt12.addWidget(self.codeinclude_category_2, 7, 0, 1, 5)
        self.nameinclude_category_2 = QtWidgets.QLabel("include_category_2")
        self.nameinclude_category_2.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt12.addWidget(self.nameinclude_category_2, 8, 0)
        self.include_category_2 = QtWidgets.QLineEdit()
        self.include_category_2.setText("")
        self.lt12.addWidget(self.include_category_2, 8, 1, 1, 4)
        self.widget13 = QtWidgets.QWidget()
        self.addItem(self.widget13, self.tr("Use or Do not Use options"))
        self.lt13 = QtWidgets.QGridLayout(self.widget13)
        self.labeluse_indent_func_call_param = QtWidgets.QLabel(self.tr("true:  indent_func_call_param will be used (default) false: indent_func_call_param will NOT be used")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labeluse_indent_func_call_param.setWordWrap(True)
        self.lt13.addWidget(self.labeluse_indent_func_call_param, 0, 0, 1, 5)
        if self.tr("code_use_indent_func_call_param")!="code_use_indent_func_call_param":
            self.codeuse_indent_func_call_param = QtWidgets.QLabel(self.tr("code_use_indent_func_call_param"))
            self.codeuse_indent_func_call_param.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt13.addWidget(self.codeuse_indent_func_call_param, 1, 0, 1, 5)
        self.nameuse_indent_func_call_param = QtWidgets.QLabel("use_indent_func_call_param")
        self.nameuse_indent_func_call_param.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(self.nameuse_indent_func_call_param, 2, 0)
        self.use_indent_func_call_param = QtWidgets.QComboBox()
        self.use_indent_func_call_param.addItems(['true','false'])
        self.use_indent_func_call_param.setCurrentText('true')
        self.lt13.addWidget(self.use_indent_func_call_param, 2, 1, 1, 4)
        self.labeluse_indent_continue_only_once = QtWidgets.QLabel(self.tr("The value of the indentation for a continuation line is calculated differently if the statement is:")+' '+self.tr("\n- a declaration: your case with QString fileName ...")+' '+self.tr("\n- an assignment: your case with pSettings = new QSettings( ...")+' '+self.tr("\n")+' '+self.tr("At the second case the indentation value might be used twice:")+' '+self.tr("\n- at the assignment")+' '+self.tr("\n- at the function call (if present)")+' '+self.tr("\n")+' '+self.tr("To prevent the double use of the indentation value, use this option with the value 'true'.")+' '+self.tr("\n")+' '+self.tr("true:  indent_continue will be used only once false: indent_continue will be used every time (default)")+' '+self.tr("\n"))
        self.labeluse_indent_continue_only_once.setWordWrap(True)
        self.lt13.addWidget(self.labeluse_indent_continue_only_once, 3, 0, 1, 5)
        if self.tr("code_use_indent_continue_only_once")!="code_use_indent_continue_only_once":
            self.codeuse_indent_continue_only_once = QtWidgets.QLabel(self.tr("code_use_indent_continue_only_once"))
            self.codeuse_indent_continue_only_once.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt13.addWidget(self.codeuse_indent_continue_only_once, 4, 0, 1, 5)
        self.nameuse_indent_continue_only_once = QtWidgets.QLabel("use_indent_continue_only_once")
        self.nameuse_indent_continue_only_once.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(self.nameuse_indent_continue_only_once, 5, 0)
        self.use_indent_continue_only_once = QtWidgets.QComboBox()
        self.use_indent_continue_only_once.addItems(['true','false'])
        self.use_indent_continue_only_once.setCurrentText('false')
        self.lt13.addWidget(self.use_indent_continue_only_once, 5, 1, 1, 4)
        self.labelindent_cpp_lambda_only_once = QtWidgets.QLabel(self.tr("The value might be used twice:")+' '+self.tr("\n- at the assignment")+' '+self.tr("\n- at the opening brace")+' '+self.tr("\n")+' '+self.tr("To prevent the double use of the indentation value, use this option with the value 'true'.")+' '+self.tr("\n")+' '+self.tr("true:  indentation will be used only once false: indentation will be used every time (default)")+' '+self.tr("\n"))
        self.labelindent_cpp_lambda_only_once.setWordWrap(True)
        self.lt13.addWidget(self.labelindent_cpp_lambda_only_once, 6, 0, 1, 5)
        if self.tr("code_indent_cpp_lambda_only_once")!="code_indent_cpp_lambda_only_once":
            self.codeindent_cpp_lambda_only_once = QtWidgets.QLabel(self.tr("code_indent_cpp_lambda_only_once"))
            self.codeindent_cpp_lambda_only_once.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt13.addWidget(self.codeindent_cpp_lambda_only_once, 7, 0, 1, 5)
        self.nameindent_cpp_lambda_only_once = QtWidgets.QLabel("indent_cpp_lambda_only_once")
        self.nameindent_cpp_lambda_only_once.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(self.nameindent_cpp_lambda_only_once, 8, 0)
        self.indent_cpp_lambda_only_once = QtWidgets.QComboBox()
        self.indent_cpp_lambda_only_once.addItems(['true','false'])
        self.indent_cpp_lambda_only_once.setCurrentText('false')
        self.lt13.addWidget(self.indent_cpp_lambda_only_once, 8, 1, 1, 4)
        self.labeluse_sp_after_angle_always = QtWidgets.QLabel(self.tr("Whether sp_after_angle takes precedence over sp_inside_fparen.")+' '+self.tr("This was the historic behavior, but is probably not the desired behavior, so this is off by default.")+' '+self.tr("\n"))
        self.labeluse_sp_after_angle_always.setWordWrap(True)
        self.lt13.addWidget(self.labeluse_sp_after_angle_always, 9, 0, 1, 5)
        if self.tr("code_use_sp_after_angle_always")!="code_use_sp_after_angle_always":
            self.codeuse_sp_after_angle_always = QtWidgets.QLabel(self.tr("code_use_sp_after_angle_always"))
            self.codeuse_sp_after_angle_always.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt13.addWidget(self.codeuse_sp_after_angle_always, 10, 0, 1, 5)
        self.nameuse_sp_after_angle_always = QtWidgets.QLabel("use_sp_after_angle_always")
        self.nameuse_sp_after_angle_always.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(self.nameuse_sp_after_angle_always, 11, 0)
        self.use_sp_after_angle_always = QtWidgets.QComboBox()
        self.use_sp_after_angle_always.addItems(['true','false'])
        self.use_sp_after_angle_always.setCurrentText('false')
        self.lt13.addWidget(self.use_sp_after_angle_always, 11, 1, 1, 4)
        self.labeluse_options_overriding_for_qt_macros = QtWidgets.QLabel(self.tr("Whether to apply special formatting for Qt SIGNAL/SLOT macros.")+' '+self.tr("Essentially, this tries to format these so that they match Qt's normalized form (i.e. the result of QMetaObject::normalizedSignature), which can slightly improve the performance of the QObject::connect call, rather than how they would otherwise be formatted.")+' '+self.tr("\n")+' '+self.tr("See options_for_QT.cpp for details.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n"))
        self.labeluse_options_overriding_for_qt_macros.setWordWrap(True)
        self.lt13.addWidget(self.labeluse_options_overriding_for_qt_macros, 12, 0, 1, 5)
        if self.tr("code_use_options_overriding_for_qt_macros")!="code_use_options_overriding_for_qt_macros":
            self.codeuse_options_overriding_for_qt_macros = QtWidgets.QLabel(self.tr("code_use_options_overriding_for_qt_macros"))
            self.codeuse_options_overriding_for_qt_macros.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt13.addWidget(self.codeuse_options_overriding_for_qt_macros, 13, 0, 1, 5)
        self.nameuse_options_overriding_for_qt_macros = QtWidgets.QLabel("use_options_overriding_for_qt_macros")
        self.nameuse_options_overriding_for_qt_macros.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(self.nameuse_options_overriding_for_qt_macros, 14, 0)
        self.use_options_overriding_for_qt_macros = QtWidgets.QComboBox()
        self.use_options_overriding_for_qt_macros.addItems(['true','false'])
        self.use_options_overriding_for_qt_macros.setCurrentText('true')
        self.lt13.addWidget(self.use_options_overriding_for_qt_macros, 14, 1, 1, 4)
        self.labeluse_form_feed_no_more_as_whitespace_character = QtWidgets.QLabel(self.tr("If true: the form feed character is removed from the list of whitespace characters.")+' '+self.tr("See https://en.cppreference.com/w/cpp/string/byte/isspace")+' '+self.tr("\n"))
        self.labeluse_form_feed_no_more_as_whitespace_character.setWordWrap(True)
        self.lt13.addWidget(self.labeluse_form_feed_no_more_as_whitespace_character, 15, 0, 1, 5)
        if self.tr("code_use_form_feed_no_more_as_whitespace_character")!="code_use_form_feed_no_more_as_whitespace_character":
            self.codeuse_form_feed_no_more_as_whitespace_character = QtWidgets.QLabel(self.tr("code_use_form_feed_no_more_as_whitespace_character"))
            self.codeuse_form_feed_no_more_as_whitespace_character.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt13.addWidget(self.codeuse_form_feed_no_more_as_whitespace_character, 16, 0, 1, 5)
        self.nameuse_form_feed_no_more_as_whitespace_character = QtWidgets.QLabel("use_form_feed_no_more_as_whitespace_character")
        self.nameuse_form_feed_no_more_as_whitespace_character.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt13.addWidget(self.nameuse_form_feed_no_more_as_whitespace_character, 17, 0)
        self.use_form_feed_no_more_as_whitespace_character = QtWidgets.QComboBox()
        self.use_form_feed_no_more_as_whitespace_character.addItems(['true','false'])
        self.use_form_feed_no_more_as_whitespace_character.setCurrentText('false')
        self.lt13.addWidget(self.use_form_feed_no_more_as_whitespace_character, 17, 1, 1, 4)
        self.widget14 = QtWidgets.QWidget()
        self.addItem(self.widget14, self.tr("Warn levels - 1: error, 2: warning (default), 3: note"))
        self.lt14 = QtWidgets.QGridLayout(self.widget14)
        self.labelwarn_level_tabs_found_in_verbatim_string_literals = QtWidgets.QLabel(self.tr("(C#) Warning is given if doing tab-to-\t replacement and we have found one in a C# verbatim string literal.")+' '+self.tr("\n")+' '+self.tr("Default: 2")+' '+self.tr("\n"))
        self.labelwarn_level_tabs_found_in_verbatim_string_literals.setWordWrap(True)
        self.lt14.addWidget(self.labelwarn_level_tabs_found_in_verbatim_string_literals, 0, 0, 1, 5)
        if self.tr("code_warn_level_tabs_found_in_verbatim_string_literals")!="code_warn_level_tabs_found_in_verbatim_string_literals":
            self.codewarn_level_tabs_found_in_verbatim_string_literals = QtWidgets.QLabel(self.tr("code_warn_level_tabs_found_in_verbatim_string_literals"))
            self.codewarn_level_tabs_found_in_verbatim_string_literals.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt14.addWidget(self.codewarn_level_tabs_found_in_verbatim_string_literals, 1, 0, 1, 5)
        self.namewarn_level_tabs_found_in_verbatim_string_literals = QtWidgets.QLabel("warn_level_tabs_found_in_verbatim_string_literals")
        self.namewarn_level_tabs_found_in_verbatim_string_literals.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt14.addWidget(self.namewarn_level_tabs_found_in_verbatim_string_literals, 2, 0)
        self.warn_level_tabs_found_in_verbatim_string_literals = QtWidgets.QSpinBox()
        self.warn_level_tabs_found_in_verbatim_string_literals.setMinimum(0)
        self.warn_level_tabs_found_in_verbatim_string_literals.setMaximum(100)
        self.warn_level_tabs_found_in_verbatim_string_literals.setValue(2)
        self.lt14.addWidget(self.warn_level_tabs_found_in_verbatim_string_literals, 2, 1, 1, 4)
        self.labeldebug_max_number_of_loops = QtWidgets.QLabel(self.tr("Limit the number of loops.")+' '+self.tr("Used by uncrustify.cpp to exit from infinite loop. 0: no limit.")+' '+self.tr("\n"))
        self.labeldebug_max_number_of_loops.setWordWrap(True)
        self.lt14.addWidget(self.labeldebug_max_number_of_loops, 3, 0, 1, 5)
        if self.tr("code_debug_max_number_of_loops")!="code_debug_max_number_of_loops":
            self.codedebug_max_number_of_loops = QtWidgets.QLabel(self.tr("code_debug_max_number_of_loops"))
            self.codedebug_max_number_of_loops.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt14.addWidget(self.codedebug_max_number_of_loops, 4, 0, 1, 5)
        self.namedebug_max_number_of_loops = QtWidgets.QLabel("debug_max_number_of_loops")
        self.namedebug_max_number_of_loops.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt14.addWidget(self.namedebug_max_number_of_loops, 5, 0)
        self.debug_max_number_of_loops = QtWidgets.QSpinBox()
        self.debug_max_number_of_loops.setMinimum(-100)
        self.debug_max_number_of_loops.setMaximum(100)
        self.debug_max_number_of_loops.setValue(0)
        self.lt14.addWidget(self.debug_max_number_of_loops, 5, 1, 1, 4)
        self.labeldebug_line_number_to_protocol = QtWidgets.QLabel(self.tr("Set the number of the line to protocol; Used in the function prot_the_line if the 2. parameter is zero. 0: nothing protocol.")+' '+self.tr("\n"))
        self.labeldebug_line_number_to_protocol.setWordWrap(True)
        self.lt14.addWidget(self.labeldebug_line_number_to_protocol, 6, 0, 1, 5)
        if self.tr("code_debug_line_number_to_protocol")!="code_debug_line_number_to_protocol":
            self.codedebug_line_number_to_protocol = QtWidgets.QLabel(self.tr("code_debug_line_number_to_protocol"))
            self.codedebug_line_number_to_protocol.setFont(QtGui.QFont('Consolas', 12, 0))
            self.lt14.addWidget(self.codedebug_line_number_to_protocol, 7, 0, 1, 5)
        self.namedebug_line_number_to_protocol = QtWidgets.QLabel("debug_line_number_to_protocol")
        self.namedebug_line_number_to_protocol.setFont(QtGui.QFont('Arial', 14, 2))
        self.lt14.addWidget(self.namedebug_line_number_to_protocol, 8, 0)
        self.debug_line_number_to_protocol = QtWidgets.QSpinBox()
        self.debug_line_number_to_protocol.setMinimum(-100)
        self.debug_line_number_to_protocol.setMaximum(100)
        self.debug_line_number_to_protocol.setValue(0)
        self.lt14.addWidget(self.debug_line_number_to_protocol, 8, 1, 1, 4)
        self.lt1.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt1.rowCount(), 0)
        self.lt2.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt2.rowCount(), 0)
        self.lt3.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt3.rowCount(), 0)
        self.lt4.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt4.rowCount(), 0)
        self.lt5.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt5.rowCount(), 0)
        self.lt6.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt6.rowCount(), 0)
        self.lt7.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt7.rowCount(), 0)
        self.lt8.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt8.rowCount(), 0)
        self.lt9.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt9.rowCount(), 0)
        self.lt10.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt10.rowCount(), 0)
        self.lt11.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt11.rowCount(), 0)
        self.lt12.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt12.rowCount(), 0)
        self.lt13.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt13.rowCount(), 0)
        self.lt14.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding), self.lt14.rowCount(), 0)
    def get(self):
        s=[]
        s.append(wrap(self.tr("\nGeneral options\n")))
        s.append(wrap(self.tr("The type of line endings.")+' '+self.tr("\n")+' '+self.tr("Default: auto")+' '+self.tr("\n")))
        s.append("newlines = {} # lf/crlf/cr/auto".format(self.newlines.currentText()))
        s.append(wrap(self.tr("The original size of tabs in the input.")+' '+self.tr("\n")+' '+self.tr("Default: 8")+' '+self.tr("\n")))
        s.append("input_tab_size = {} # unsigned number".format(self.input_tab_size.value()))
        s.append(wrap(self.tr("The size of tabs in the output (only used if align_with_tabs=true).")+' '+self.tr("\n")+' '+self.tr("Default: 8")+' '+self.tr("\n")))
        s.append("output_tab_size = {} # unsigned number".format(self.output_tab_size.value()))
        s.append(wrap(self.tr("The ASCII value of the string escape char, usually 92 (\) or (Pawn) 94 (^).")+' '+self.tr("\n")+' '+self.tr("Default: 92")+' '+self.tr("\n")))
        s.append("string_escape_char = {} # unsigned number".format(self.string_escape_char.value()))
        s.append(wrap(self.tr("Alternate string escape char (usually only used for Pawn).")+' '+self.tr("Only works right before the quote char.")+' '+self.tr("\n")))
        s.append("string_escape_char2 = {} # unsigned number".format(self.string_escape_char2.value()))
        s.append(wrap(self.tr("Replace tab characters found in string literals with the escape sequence \t instead.")+' '+self.tr("\n")))
        s.append("string_replace_tab_chars = {} # true/false".format(self.string_replace_tab_chars.currentText()))
        s.append(wrap(self.tr("Allow interpreting '>=' and '>>=' as part of a template in code like 'void f(list<list<B>>=val);'.")+' '+self.tr("If true, 'assert(x<0 && y>=3)' will be broken.")+' '+self.tr("Improvements to template detection may make this option obsolete.")+' '+self.tr("\n")))
        s.append("tok_split_gte = {} # true/false".format(self.tok_split_gte.currentText()))
        s.append(wrap(self.tr("Disable formatting of NL_CONT ('\\n') ended lines (e.g. multiline macros)")+' '+self.tr("\n")))
        s.append("disable_processing_nl_cont = {} # true/false".format(self.disable_processing_nl_cont.currentText()))
        s.append(wrap(self.tr("Specify the marker used in comments to disable processing of part of the file.")+' '+self.tr("The comment should be used alone in one line.")+' '+self.tr("\n")+' '+self.tr("Default:  *INDENT-OFF*")+' '+self.tr("\n")))
        s.append("disable_processing_cmt = \"{}\" # string".format(self.disable_processing_cmt.text()))
        s.append(wrap(self.tr("Specify the marker used in comments to (re)enable processing in a file.")+' '+self.tr("The comment should be used alone in one line.")+' '+self.tr("\n")+' '+self.tr("Default:  *INDENT-ON*")+' '+self.tr("\n")))
        s.append("enable_processing_cmt = \"{}\" # string".format(self.enable_processing_cmt.text()))
        s.append(wrap(self.tr("Enable parsing of digraphs.")+' '+self.tr("\n")))
        s.append("enable_digraphs = {} # true/false".format(self.enable_digraphs.currentText()))
        s.append(wrap(self.tr("Add or remove the UTF-8 BOM (recommend 'remove').")+' '+self.tr("\n")))
        s.append("utf8_bom = {} # ignore/add/remove/force".format(self.utf8_bom.currentText()))
        s.append(wrap(self.tr("If the file contains bytes with values between 128 and 255, but is not UTF-8, then output as UTF-8.")+' '+self.tr("\n")))
        s.append("utf8_byte = {} # true/false".format(self.utf8_byte.currentText()))
        s.append(wrap(self.tr("Force the output encoding to UTF-8.")+' '+self.tr("\n")))
        s.append("utf8_force = {} # true/false".format(self.utf8_force.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'do' and '{'.")+' '+self.tr("\n")))
        s.append("sp_do_brace_open = {} # ignore/add/remove/force".format(self.sp_do_brace_open.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and 'while'.")+' '+self.tr("\n")))
        s.append("sp_brace_close_while = {} # ignore/add/remove/force".format(self.sp_brace_close_while.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'while' and '('.")+' '+self.tr("\n")))
        s.append("sp_while_paren_open = {} # ignore/add/remove/force".format(self.sp_while_paren_open.currentText()))
        s.append(wrap(self.tr("\nSpacing options\n")))
        s.append(wrap(self.tr("Add or remove space around non-assignment symbolic operators ('+', '/', '%', '<<', and so forth).")+' '+self.tr("\n")))
        s.append("sp_arith = {} # ignore/add/remove/force".format(self.sp_arith.currentText()))
        s.append(wrap(self.tr("Add or remove space around arithmetic operators '+' and '-'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_arith.")+' '+self.tr("\n")))
        s.append("sp_arith_additive = {} # ignore/add/remove/force".format(self.sp_arith_additive.currentText()))
        s.append(wrap(self.tr("Add or remove space around assignment operator '=', '+=', etc.")+' '+self.tr("\n")))
        s.append("sp_assign = {} # ignore/add/remove/force".format(self.sp_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space around '=' in C++11 lambda capture specifications.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_assign.")+' '+self.tr("\n")))
        s.append("sp_cpp_lambda_assign = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space after the capture specification of a C++11 lambda when an argument list is present, as in '[] <here> (int x){ ... }'.")+' '+self.tr("\n")))
        s.append("sp_cpp_lambda_square_paren = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_square_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space after the capture specification of a C++11 lambda with no argument list is present, as in '[] <here> { ... }'.")+' '+self.tr("\n")))
        s.append("sp_cpp_lambda_square_brace = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_square_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space after the argument list of a C++11 lambda, as in '[](int x) <here> { ... }'.")+' '+self.tr("\n")))
        s.append("sp_cpp_lambda_paren_brace = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_paren_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between a lambda body and its call operator of an immediately invoked lambda, as in '[]( ... ){ ... } <here> ( ... )'.")+' '+self.tr("\n")))
        s.append("sp_cpp_lambda_fparen = {} # ignore/add/remove/force".format(self.sp_cpp_lambda_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove space around assignment operator '=' in a prototype.")+' '+self.tr("\n")+' '+self.tr("If set to ignore, use sp_assign.")+' '+self.tr("\n")))
        s.append("sp_assign_default = {} # ignore/add/remove/force".format(self.sp_assign_default.currentText()))
        s.append(wrap(self.tr("Add or remove space before assignment operator '=', '+=', etc.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_assign.")+' '+self.tr("\n")))
        s.append("sp_before_assign = {} # ignore/add/remove/force".format(self.sp_before_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space after assignment operator '=', '+=', etc.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_assign.")+' '+self.tr("\n")))
        s.append("sp_after_assign = {} # ignore/add/remove/force".format(self.sp_after_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space in 'NS_ENUM ('.")+' '+self.tr("\n")))
        s.append("sp_enum_paren = {} # ignore/add/remove/force".format(self.sp_enum_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space around assignment '=' in enum.")+' '+self.tr("\n")))
        s.append("sp_enum_assign = {} # ignore/add/remove/force".format(self.sp_enum_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space before assignment '=' in enum.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_enum_assign.")+' '+self.tr("\n")))
        s.append("sp_enum_before_assign = {} # ignore/add/remove/force".format(self.sp_enum_before_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space after assignment '=' in enum.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_enum_assign.")+' '+self.tr("\n")))
        s.append("sp_enum_after_assign = {} # ignore/add/remove/force".format(self.sp_enum_after_assign.currentText()))
        s.append(wrap(self.tr("Add or remove space around assignment ':' in enum.")+' '+self.tr("\n")))
        s.append("sp_enum_colon = {} # ignore/add/remove/force".format(self.sp_enum_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space around preprocessor '##' concatenation operator.")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n")))
        s.append("sp_pp_concat = {} # ignore/add/remove/force".format(self.sp_pp_concat.currentText()))
        s.append(wrap(self.tr("Add or remove space after preprocessor '#' stringify operator.")+' '+self.tr("Also affects the '#@' charizing operator.")+' '+self.tr("\n")))
        s.append("sp_pp_stringify = {} # ignore/add/remove/force".format(self.sp_pp_stringify.currentText()))
        s.append(wrap(self.tr("Add or remove space before preprocessor '#' stringify operator as in '#define x(y) L#y'.")+' '+self.tr("\n")))
        s.append("sp_before_pp_stringify = {} # ignore/add/remove/force".format(self.sp_before_pp_stringify.currentText()))
        s.append(wrap(self.tr("Add or remove space around boolean operators '&&' and '||'.")+' '+self.tr("\n")))
        s.append("sp_bool = {} # ignore/add/remove/force".format(self.sp_bool.currentText()))
        s.append(wrap(self.tr("Add or remove space around compare operator '<', '>', '==', etc.")+' '+self.tr("\n")))
        s.append("sp_compare = {} # ignore/add/remove/force".format(self.sp_compare.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '(' and ')'.")+' '+self.tr("\n")))
        s.append("sp_inside_paren = {} # ignore/add/remove/force".format(self.sp_inside_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between nested parentheses, i.e. '((' vs. ') )'.")+' '+self.tr("\n")))
        s.append("sp_paren_paren = {} # ignore/add/remove/force".format(self.sp_paren_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between back-to-back parentheses, i.e. ')(' vs. ') ('.")+' '+self.tr("\n")))
        s.append("sp_cparen_oparen = {} # ignore/add/remove/force".format(self.sp_cparen_oparen.currentText()))
        s.append(wrap(self.tr("Whether to balance spaces inside nested parentheses.")+' '+self.tr("\n")))
        s.append("sp_balance_nested_parens = {} # true/false".format(self.sp_balance_nested_parens.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '{'.")+' '+self.tr("\n")))
        s.append("sp_paren_brace = {} # ignore/add/remove/force".format(self.sp_paren_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between nested braces, i.e. '{{' vs '{ {'.")+' '+self.tr("\n")))
        s.append("sp_brace_brace = {} # ignore/add/remove/force".format(self.sp_brace_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space before pointer star '*'.")+' '+self.tr("\n")))
        s.append("sp_before_ptr_star = {} # ignore/add/remove/force".format(self.sp_before_ptr_star.currentText()))
        s.append(wrap(self.tr("Add or remove space before pointer star '*' that isn't followed by a variable name.")+' '+self.tr("If set to ignore, sp_before_ptr_star is used instead.")+' '+self.tr("\n")))
        s.append("sp_before_unnamed_ptr_star = {} # ignore/add/remove/force".format(self.sp_before_unnamed_ptr_star.currentText()))
        s.append(wrap(self.tr("Add or remove space between pointer stars '*'.")+' '+self.tr("\n")))
        s.append("sp_between_ptr_star = {} # ignore/add/remove/force".format(self.sp_between_ptr_star.currentText()))
        s.append(wrap(self.tr("Add or remove space after pointer star '*', if followed by a word.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_type_func.")+' '+self.tr("\n")))
        s.append("sp_after_ptr_star = {} # ignore/add/remove/force".format(self.sp_after_ptr_star.currentText()))
        s.append(wrap(self.tr("Add or remove space after pointer caret '^', if followed by a word.")+' '+self.tr("\n")))
        s.append("sp_after_ptr_block_caret = {} # ignore/add/remove/force".format(self.sp_after_ptr_block_caret.currentText()))
        s.append(wrap(self.tr("Add or remove space after pointer star '*', if followed by a qualifier.")+' '+self.tr("\n")))
        s.append("sp_after_ptr_star_qualifier = {} # ignore/add/remove/force".format(self.sp_after_ptr_star_qualifier.currentText()))
        s.append(wrap(self.tr("Add or remove space after a pointer star '*', if followed by a function prototype or function definition.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_after_ptr_star and sp_type_func.")+' '+self.tr("\n")))
        s.append("sp_after_ptr_star_func = {} # ignore/add/remove/force".format(self.sp_after_ptr_star_func.currentText()))
        s.append(wrap(self.tr("Add or remove space after a pointer star '*', if followed by an open parenthesis, as in 'void* (*)().")+' '+self.tr("\n")))
        s.append("sp_ptr_star_paren = {} # ignore/add/remove/force".format(self.sp_ptr_star_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space before a pointer star '*', if followed by a function prototype or function definition.")+' '+self.tr("\n")))
        s.append("sp_before_ptr_star_func = {} # ignore/add/remove/force".format(self.sp_before_ptr_star_func.currentText()))
        s.append(wrap(self.tr("Add or remove space before a reference sign '&'.")+' '+self.tr("\n")))
        s.append("sp_before_byref = {} # ignore/add/remove/force".format(self.sp_before_byref.currentText()))
        s.append(wrap(self.tr("Add or remove space before a reference sign '&' that isn't followed by a variable name.")+' '+self.tr("If set to ignore, sp_before_byref is used instead.")+' '+self.tr("\n")))
        s.append("sp_before_unnamed_byref = {} # ignore/add/remove/force".format(self.sp_before_unnamed_byref.currentText()))
        s.append(wrap(self.tr("Add or remove space after reference sign '&', if followed by a word.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_type_func.")+' '+self.tr("\n")))
        s.append("sp_after_byref = {} # ignore/add/remove/force".format(self.sp_after_byref.currentText()))
        s.append(wrap(self.tr("Add or remove space after a reference sign '&', if followed by a function prototype or function definition.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_after_byref and sp_type_func.")+' '+self.tr("\n")))
        s.append("sp_after_byref_func = {} # ignore/add/remove/force".format(self.sp_after_byref_func.currentText()))
        s.append(wrap(self.tr("Add or remove space before a reference sign '&', if followed by a function prototype or function definition.")+' '+self.tr("\n")))
        s.append("sp_before_byref_func = {} # ignore/add/remove/force".format(self.sp_before_byref_func.currentText()))
        s.append(wrap(self.tr("Add or remove space between type and word.")+' '+self.tr("\n")+' '+self.tr("Default: force")+' '+self.tr("\n")))
        s.append("sp_after_type = {} # ignore/add/remove/force".format(self.sp_after_type.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'decltype(...)' and word.")+' '+self.tr("\n")))
        s.append("sp_after_decltype = {} # ignore/add/remove/force".format(self.sp_after_decltype.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space before the parenthesis in the D constructs 'template Foo(' and 'class Foo('.")+' '+self.tr("\n")))
        s.append("sp_before_template_paren = {} # ignore/add/remove/force".format(self.sp_before_template_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'template' and '<'.")+' '+self.tr("If set to ignore, sp_before_angle is used.")+' '+self.tr("\n")))
        s.append("sp_template_angle = {} # ignore/add/remove/force".format(self.sp_template_angle.currentText()))
        s.append(wrap(self.tr("Add or remove space before '<'.")+' '+self.tr("\n")))
        s.append("sp_before_angle = {} # ignore/add/remove/force".format(self.sp_before_angle.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '<' and '>'.")+' '+self.tr("\n")))
        s.append("sp_inside_angle = {} # ignore/add/remove/force".format(self.sp_inside_angle.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '<>'.")+' '+self.tr("\n")))
        s.append("sp_inside_angle_empty = {} # ignore/add/remove/force".format(self.sp_inside_angle_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and ':'.")+' '+self.tr("\n")))
        s.append("sp_angle_colon = {} # ignore/add/remove/force".format(self.sp_angle_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space after '>'.")+' '+self.tr("\n")))
        s.append("sp_after_angle = {} # ignore/add/remove/force".format(self.sp_after_angle.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and '(' as found in 'new List<byte>(foo);'.")+' '+self.tr("\n")))
        s.append("sp_angle_paren = {} # ignore/add/remove/force".format(self.sp_angle_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and '()' as found in 'new List<byte>();'.")+' '+self.tr("\n")))
        s.append("sp_angle_paren_empty = {} # ignore/add/remove/force".format(self.sp_angle_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and a word as in 'List<byte> m;' or 'template <typename T> static ...'.")+' '+self.tr("\n")))
        s.append("sp_angle_word = {} # ignore/add/remove/force".format(self.sp_angle_word.currentText()))
        s.append(wrap(self.tr("Add or remove space between '>' and '>' in '>>' (template stuff).")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n")))
        s.append("sp_angle_shift = {} # ignore/add/remove/force".format(self.sp_angle_shift.currentText()))
        s.append(wrap(self.tr("(C++11) Permit removal of the space between '>>' in 'foo<bar<int> >'.")+' '+self.tr("Note that sp_angle_shift cannot remove the space without this option.")+' '+self.tr("\n")))
        s.append("sp_permit_cpp11_shift = {} # true/false".format(self.sp_permit_cpp11_shift.currentText()))
        s.append(wrap(self.tr("Add or remove space before '(' of control statements ('if', 'for', 'switch', 'while', etc.).")+' '+self.tr("\n")))
        s.append("sp_before_sparen = {} # ignore/add/remove/force".format(self.sp_before_sparen.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '(' and ')' of control statements.")+' '+self.tr("\n")))
        s.append("sp_inside_sparen = {} # ignore/add/remove/force".format(self.sp_inside_sparen.currentText()))
        s.append(wrap(self.tr("Add or remove space after '(' of control statements.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_inside_sparen.")+' '+self.tr("\n")))
        s.append("sp_inside_sparen_open = {} # ignore/add/remove/force".format(self.sp_inside_sparen_open.currentText()))
        s.append(wrap(self.tr("Add or remove space before ')' of control statements.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_inside_sparen.")+' '+self.tr("\n")))
        s.append("sp_inside_sparen_close = {} # ignore/add/remove/force".format(self.sp_inside_sparen_close.currentText()))
        s.append(wrap(self.tr("Add or remove space after ')' of control statements.")+' '+self.tr("\n")))
        s.append("sp_after_sparen = {} # ignore/add/remove/force".format(self.sp_after_sparen.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '{' of of control statements.")+' '+self.tr("\n")))
        s.append("sp_sparen_brace = {} # ignore/add/remove/force".format(self.sp_sparen_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between 'invariant' and '('.")+' '+self.tr("\n")))
        s.append("sp_invariant_paren = {} # ignore/add/remove/force".format(self.sp_invariant_paren.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space after the ')' in 'invariant (C) c'.")+' '+self.tr("\n")))
        s.append("sp_after_invariant_paren = {} # ignore/add/remove/force".format(self.sp_after_invariant_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space before empty statement ';' on 'if', 'for' and 'while'.")+' '+self.tr("\n")))
        s.append("sp_special_semi = {} # ignore/add/remove/force".format(self.sp_special_semi.currentText()))
        s.append(wrap(self.tr("Add or remove space before ';'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_before_semi = {} # ignore/add/remove/force".format(self.sp_before_semi.currentText()))
        s.append(wrap(self.tr("Add or remove space before ';' in non-empty 'for' statements.")+' '+self.tr("\n")))
        s.append("sp_before_semi_for = {} # ignore/add/remove/force".format(self.sp_before_semi_for.currentText()))
        s.append(wrap(self.tr("Add or remove space before a semicolon of an empty part of a for statement.")+' '+self.tr("\n")))
        s.append("sp_before_semi_for_empty = {} # ignore/add/remove/force".format(self.sp_before_semi_for_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space after ';', except when followed by a comment.")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n")))
        s.append("sp_after_semi = {} # ignore/add/remove/force".format(self.sp_after_semi.currentText()))
        s.append(wrap(self.tr("Add or remove space after ';' in non-empty 'for' statements.")+' '+self.tr("\n")+' '+self.tr("Default: force")+' '+self.tr("\n")))
        s.append("sp_after_semi_for = {} # ignore/add/remove/force".format(self.sp_after_semi_for.currentText()))
        s.append(wrap(self.tr("Add or remove space after the final semicolon of an empty part of a for statement, as in 'for ( ; ; <here> )'.")+' '+self.tr("\n")))
        s.append("sp_after_semi_for_empty = {} # ignore/add/remove/force".format(self.sp_after_semi_for_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space before '[' (except '[]').")+' '+self.tr("\n")))
        s.append("sp_before_square = {} # ignore/add/remove/force".format(self.sp_before_square.currentText()))
        s.append(wrap(self.tr("Add or remove space before '[' for a variable definition.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_before_vardef_square = {} # ignore/add/remove/force".format(self.sp_before_vardef_square.currentText()))
        s.append(wrap(self.tr("Add or remove space before '[' for asm block.")+' '+self.tr("\n")))
        s.append("sp_before_square_asm_block = {} # ignore/add/remove/force".format(self.sp_before_square_asm_block.currentText()))
        s.append(wrap(self.tr("Add or remove space before '[]'.")+' '+self.tr("\n")))
        s.append("sp_before_squares = {} # ignore/add/remove/force".format(self.sp_before_squares.currentText()))
        s.append(wrap(self.tr("Add or remove space before C++17 structured bindings.")+' '+self.tr("\n")))
        s.append("sp_cpp_before_struct_binding = {} # ignore/add/remove/force".format(self.sp_cpp_before_struct_binding.currentText()))
        s.append(wrap(self.tr("Add or remove space inside a non-empty '[' and ']'.")+' '+self.tr("\n")))
        s.append("sp_inside_square = {} # ignore/add/remove/force".format(self.sp_inside_square.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space inside a non-empty Objective-C boxed array '@[' and ']'.")+' '+self.tr("If set to ignore, sp_inside_square is used.")+' '+self.tr("\n")))
        s.append("sp_inside_square_oc_array = {} # ignore/add/remove/force".format(self.sp_inside_square_oc_array.currentText()))
        s.append(wrap(self.tr("Add or remove space after ',', i.e. 'a,b' vs. 'a, b'.")+' '+self.tr("\n")))
        s.append("sp_after_comma = {} # ignore/add/remove/force".format(self.sp_after_comma.currentText()))
        s.append(wrap(self.tr("Add or remove space before ','.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_before_comma = {} # ignore/add/remove/force".format(self.sp_before_comma.currentText()))
        s.append(wrap(self.tr("(C#) Add or remove space between ',' and ']' in multidimensional array type like 'int[,,]'.")+' '+self.tr("\n")))
        s.append("sp_after_mdatype_commas = {} # ignore/add/remove/force".format(self.sp_after_mdatype_commas.currentText()))
        s.append(wrap(self.tr("(C#) Add or remove space between '[' and ',' in multidimensional array type like 'int[,,]'.")+' '+self.tr("\n")))
        s.append("sp_before_mdatype_commas = {} # ignore/add/remove/force".format(self.sp_before_mdatype_commas.currentText()))
        s.append(wrap(self.tr("(C#) Add or remove space between ',' in multidimensional array type like 'int[,,]'.")+' '+self.tr("\n")))
        s.append("sp_between_mdatype_commas = {} # ignore/add/remove/force".format(self.sp_between_mdatype_commas.currentText()))
        s.append(wrap(self.tr("Add or remove space between an open parenthesis and comma, i.e. '(,' vs. '( ,'.")+' '+self.tr("\n")+' '+self.tr("Default: force")+' '+self.tr("\n")))
        s.append("sp_paren_comma = {} # ignore/add/remove/force".format(self.sp_paren_comma.currentText()))
        s.append(wrap(self.tr("Add or remove space before the variadic '...' when preceded by a non-punctuator.")+' '+self.tr("\n")))
        s.append("sp_before_ellipsis = {} # ignore/add/remove/force".format(self.sp_before_ellipsis.currentText()))
        s.append(wrap(self.tr("Add or remove space between a type and '...'.")+' '+self.tr("\n")))
        s.append("sp_type_ellipsis = {} # ignore/add/remove/force".format(self.sp_type_ellipsis.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between a type and '?'.")+' '+self.tr("\n")))
        s.append("sp_type_question = {} # ignore/add/remove/force".format(self.sp_type_question.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '...'.")+' '+self.tr("\n")))
        s.append("sp_paren_ellipsis = {} # ignore/add/remove/force".format(self.sp_paren_ellipsis.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and a qualifier such as 'const'.")+' '+self.tr("\n")))
        s.append("sp_paren_qualifier = {} # ignore/add/remove/force".format(self.sp_paren_qualifier.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and 'noexcept'.")+' '+self.tr("\n")))
        s.append("sp_paren_noexcept = {} # ignore/add/remove/force".format(self.sp_paren_noexcept.currentText()))
        s.append(wrap(self.tr("Add or remove space after class ':'.")+' '+self.tr("\n")))
        s.append("sp_after_class_colon = {} # ignore/add/remove/force".format(self.sp_after_class_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before class ':'.")+' '+self.tr("\n")))
        s.append("sp_before_class_colon = {} # ignore/add/remove/force".format(self.sp_before_class_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space after class constructor ':'.")+' '+self.tr("\n")))
        s.append("sp_after_constr_colon = {} # ignore/add/remove/force".format(self.sp_after_constr_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before class constructor ':'.")+' '+self.tr("\n")))
        s.append("sp_before_constr_colon = {} # ignore/add/remove/force".format(self.sp_before_constr_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before case ':'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_before_case_colon = {} # ignore/add/remove/force".format(self.sp_before_case_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'operator' and operator sign.")+' '+self.tr("\n")))
        s.append("sp_after_operator = {} # ignore/add/remove/force".format(self.sp_after_operator.currentText()))
        s.append(wrap(self.tr("Add or remove space between the operator symbol and the open parenthesis, as in 'operator ++('.")+' '+self.tr("\n")))
        s.append("sp_after_operator_sym = {} # ignore/add/remove/force".format(self.sp_after_operator_sym.currentText()))
        s.append(wrap(self.tr("Overrides sp_after_operator_sym when the operator has no arguments, as in 'operator *()'.")+' '+self.tr("\n")))
        s.append("sp_after_operator_sym_empty = {} # ignore/add/remove/force".format(self.sp_after_operator_sym_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space after C/D cast, i.e. 'cast(int)a' vs. 'cast(int) a' or '(int)a' vs. '(int) a'.")+' '+self.tr("\n")))
        s.append("sp_after_cast = {} # ignore/add/remove/force".format(self.sp_after_cast.currentText()))
        s.append(wrap(self.tr("Add or remove spaces inside cast parentheses.")+' '+self.tr("\n")))
        s.append("sp_inside_paren_cast = {} # ignore/add/remove/force".format(self.sp_inside_paren_cast.currentText()))
        s.append(wrap(self.tr("Add or remove space between the type and open parenthesis in a C++ cast, i.e. 'int(exp)' vs. 'int (exp)'.")+' '+self.tr("\n")))
        s.append("sp_cpp_cast_paren = {} # ignore/add/remove/force".format(self.sp_cpp_cast_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'sizeof' and '('.")+' '+self.tr("\n")))
        s.append("sp_sizeof_paren = {} # ignore/add/remove/force".format(self.sp_sizeof_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'sizeof' and '...'.")+' '+self.tr("\n")))
        s.append("sp_sizeof_ellipsis = {} # ignore/add/remove/force".format(self.sp_sizeof_ellipsis.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'sizeof...' and '('.")+' '+self.tr("\n")))
        s.append("sp_sizeof_ellipsis_paren = {} # ignore/add/remove/force".format(self.sp_sizeof_ellipsis_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'decltype' and '('.")+' '+self.tr("\n")))
        s.append("sp_decltype_paren = {} # ignore/add/remove/force".format(self.sp_decltype_paren.currentText()))
        s.append(wrap(self.tr("(Pawn) Add or remove space after the tag keyword.")+' '+self.tr("\n")))
        s.append("sp_after_tag = {} # ignore/add/remove/force".format(self.sp_after_tag.currentText()))
        s.append(wrap(self.tr("Add or remove space inside enum '{' and '}'.")+' '+self.tr("\n")))
        s.append("sp_inside_braces_enum = {} # ignore/add/remove/force".format(self.sp_inside_braces_enum.currentText()))
        s.append(wrap(self.tr("Add or remove space inside struct/union '{' and '}'.")+' '+self.tr("\n")))
        s.append("sp_inside_braces_struct = {} # ignore/add/remove/force".format(self.sp_inside_braces_struct.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space inside Objective-C boxed dictionary '{' and '}'")+' '+self.tr("\n")))
        s.append("sp_inside_braces_oc_dict = {} # ignore/add/remove/force".format(self.sp_inside_braces_oc_dict.currentText()))
        s.append(wrap(self.tr("Add or remove space after open brace in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n")))
        s.append("sp_after_type_brace_init_lst_open = {} # ignore/add/remove/force".format(self.sp_after_type_brace_init_lst_open.currentText()))
        s.append(wrap(self.tr("Add or remove space before close brace in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n")))
        s.append("sp_before_type_brace_init_lst_close = {} # ignore/add/remove/force".format(self.sp_before_type_brace_init_lst_close.currentText()))
        s.append(wrap(self.tr("Add or remove space inside an unnamed temporary direct-list-initialization.")+' '+self.tr("\n")))
        s.append("sp_inside_type_brace_init_lst = {} # ignore/add/remove/force".format(self.sp_inside_type_brace_init_lst.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '{' and '}'.")+' '+self.tr("\n")))
        s.append("sp_inside_braces = {} # ignore/add/remove/force".format(self.sp_inside_braces.currentText()))
        s.append(wrap(self.tr("Add or remove space inside '{}'.")+' '+self.tr("\n")))
        s.append("sp_inside_braces_empty = {} # ignore/add/remove/force".format(self.sp_inside_braces_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space around trailing return operator '->'.")+' '+self.tr("\n")))
        s.append("sp_trailing_return = {} # ignore/add/remove/force".format(self.sp_trailing_return.currentText()))
        s.append(wrap(self.tr("Add or remove space between return type and function name.")+' '+self.tr("A minimum of 1 is forced except for pointer return types.")+' '+self.tr("\n")))
        s.append("sp_type_func = {} # ignore/add/remove/force".format(self.sp_type_func.currentText()))
        s.append(wrap(self.tr("Add or remove space between type and open brace of an unnamed temporary direct-list-initialization.")+' '+self.tr("\n")))
        s.append("sp_type_brace_init_lst = {} # ignore/add/remove/force".format(self.sp_type_brace_init_lst.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '(' on function declaration.")+' '+self.tr("\n")))
        s.append("sp_func_proto_paren = {} # ignore/add/remove/force".format(self.sp_func_proto_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '()' on function declaration without parameters.")+' '+self.tr("\n")))
        s.append("sp_func_proto_paren_empty = {} # ignore/add/remove/force".format(self.sp_func_proto_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '(' with a typedef specifier.")+' '+self.tr("\n")))
        s.append("sp_func_type_paren = {} # ignore/add/remove/force".format(self.sp_func_type_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between alias name and '(' of a non-pointer function type typedef.")+' '+self.tr("\n")))
        s.append("sp_func_def_paren = {} # ignore/add/remove/force".format(self.sp_func_def_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '()' on function definition without parameters.")+' '+self.tr("\n")))
        s.append("sp_func_def_paren_empty = {} # ignore/add/remove/force".format(self.sp_func_def_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space inside empty function '()'.")+' '+self.tr("Overrides sp_after_angle unless use_sp_after_angle_always is set to true.")+' '+self.tr("\n")))
        s.append("sp_inside_fparens = {} # ignore/add/remove/force".format(self.sp_inside_fparens.currentText()))
        s.append(wrap(self.tr("Add or remove space inside function '(' and ')'.")+' '+self.tr("\n")))
        s.append("sp_inside_fparen = {} # ignore/add/remove/force".format(self.sp_inside_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove space inside the first parentheses in a function type, as in 'void (*x)(...)'.")+' '+self.tr("\n")))
        s.append("sp_inside_tparen = {} # ignore/add/remove/force".format(self.sp_inside_tparen.currentText()))
        s.append(wrap(self.tr("Add or remove space between the ')' and '(' in a function type, as in 'void (*x)(...)'.")+' '+self.tr("\n")))
        s.append("sp_after_tparen_close = {} # ignore/add/remove/force".format(self.sp_after_tparen_close.currentText()))
        s.append(wrap(self.tr("Add or remove space between ']' and '(' when part of a function call.")+' '+self.tr("\n")))
        s.append("sp_square_fparen = {} # ignore/add/remove/force".format(self.sp_square_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '{' of function.")+' '+self.tr("\n")))
        s.append("sp_fparen_brace = {} # ignore/add/remove/force".format(self.sp_fparen_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and '{' of s function call in object initialization.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_fparen_brace.")+' '+self.tr("\n")))
        s.append("sp_fparen_brace_initializer = {} # ignore/add/remove/force".format(self.sp_fparen_brace_initializer.currentText()))
        s.append(wrap(self.tr("(Java) Add or remove space between ')' and '{{' of double brace initializer.")+' '+self.tr("\n")))
        s.append("sp_fparen_dbrace = {} # ignore/add/remove/force".format(self.sp_fparen_dbrace.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '(' on function calls.")+' '+self.tr("\n")))
        s.append("sp_func_call_paren = {} # ignore/add/remove/force".format(self.sp_func_call_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between function name and '()' on function calls without parameters.")+' '+self.tr("If set to ignore (the default), sp_func_call_paren is used.")+' '+self.tr("\n")))
        s.append("sp_func_call_paren_empty = {} # ignore/add/remove/force".format(self.sp_func_call_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between the user function name and '(' on function calls.")+' '+self.tr("You need to set a keyword to be a user function in the config file, like:   set func_call_user tr _ i18n")+' '+self.tr("\n")))
        s.append("sp_func_call_user_paren = {} # ignore/add/remove/force".format(self.sp_func_call_user_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space inside user function '(' and ')'.")+' '+self.tr("\n")))
        s.append("sp_func_call_user_inside_fparen = {} # ignore/add/remove/force".format(self.sp_func_call_user_inside_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove space between nested parentheses with user functions, i.e. '((' vs. '( ('.")+' '+self.tr("\n")))
        s.append("sp_func_call_user_paren_paren = {} # ignore/add/remove/force".format(self.sp_func_call_user_paren_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between a constructor/destructor and the open parenthesis.")+' '+self.tr("\n")))
        s.append("sp_func_class_paren = {} # ignore/add/remove/force".format(self.sp_func_class_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between a constructor without parameters or destructor and '()'.")+' '+self.tr("\n")))
        s.append("sp_func_class_paren_empty = {} # ignore/add/remove/force".format(self.sp_func_class_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'return' and '('.")+' '+self.tr("\n")))
        s.append("sp_return_paren = {} # ignore/add/remove/force".format(self.sp_return_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'return' and '{'.")+' '+self.tr("\n")))
        s.append("sp_return_brace = {} # ignore/add/remove/force".format(self.sp_return_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between '__attribute__' and '('.")+' '+self.tr("\n")))
        s.append("sp_attribute_paren = {} # ignore/add/remove/force".format(self.sp_attribute_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'defined' and '(' in '#if defined (FOO)'.")+' '+self.tr("\n")))
        s.append("sp_defined_paren = {} # ignore/add/remove/force".format(self.sp_defined_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'throw' and '(' in 'throw (something)'.")+' '+self.tr("\n")))
        s.append("sp_throw_paren = {} # ignore/add/remove/force".format(self.sp_throw_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'throw' and anything other than '(' as in '@throw [...];'.")+' '+self.tr("\n")))
        s.append("sp_after_throw = {} # ignore/add/remove/force".format(self.sp_after_throw.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'catch' and '(' in 'catch (something) { }'.")+' '+self.tr("If set to ignore, sp_before_sparen is used.")+' '+self.tr("\n")))
        s.append("sp_catch_paren = {} # ignore/add/remove/force".format(self.sp_catch_paren.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '@catch' and '(' in '@catch (something) { }'.")+' '+self.tr("If set to ignore, sp_catch_paren is used.")+' '+self.tr("\n")))
        s.append("sp_oc_catch_paren = {} # ignore/add/remove/force".format(self.sp_oc_catch_paren.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before Objective-C protocol list as in '@protocol Protocol<here><Protocol_A>' or '@interface MyClass : NSObject<here><MyProtocol>'.")+' '+self.tr("\n")))
        s.append("sp_before_oc_proto_list = {} # ignore/add/remove/force".format(self.sp_before_oc_proto_list.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between class name and '(' in '@interface className(categoryName)<ProtocolName>:BaseClass'")+' '+self.tr("\n")))
        s.append("sp_oc_classname_paren = {} # ignore/add/remove/force".format(self.sp_oc_classname_paren.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between 'version' and '(' in 'version (something) { }'.")+' '+self.tr("If set to ignore, sp_before_sparen is used.")+' '+self.tr("\n")))
        s.append("sp_version_paren = {} # ignore/add/remove/force".format(self.sp_version_paren.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between 'scope' and '(' in 'scope (something) { }'.")+' '+self.tr("If set to ignore, sp_before_sparen is used.")+' '+self.tr("\n")))
        s.append("sp_scope_paren = {} # ignore/add/remove/force".format(self.sp_scope_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'super' and '(' in 'super (something)'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_super_paren = {} # ignore/add/remove/force".format(self.sp_super_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'this' and '(' in 'this (something)'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_this_paren = {} # ignore/add/remove/force".format(self.sp_this_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between a macro name and its definition.")+' '+self.tr("\n")))
        s.append("sp_macro = {} # ignore/add/remove/force".format(self.sp_macro.currentText()))
        s.append(wrap(self.tr("Add or remove space between a macro function ')' and its definition.")+' '+self.tr("\n")))
        s.append("sp_macro_func = {} # ignore/add/remove/force".format(self.sp_macro_func.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'else' and '{' if on the same line.")+' '+self.tr("\n")))
        s.append("sp_else_brace = {} # ignore/add/remove/force".format(self.sp_else_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and 'else' if on the same line.")+' '+self.tr("\n")))
        s.append("sp_brace_else = {} # ignore/add/remove/force".format(self.sp_brace_else.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and the name of a typedef on the same line.")+' '+self.tr("\n")))
        s.append("sp_brace_typedef = {} # ignore/add/remove/force".format(self.sp_brace_typedef.currentText()))
        s.append(wrap(self.tr("Add or remove space before the '{' of a 'catch' statement, if the '{' and 'catch' are on the same line, as in 'catch (decl) <here> {'.")+' '+self.tr("\n")))
        s.append("sp_catch_brace = {} # ignore/add/remove/force".format(self.sp_catch_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before the '{' of a '@catch' statement, if the '{' and '@catch' are on the same line, as in '@catch (decl) <here> {'.")+' '+self.tr("If set to ignore, sp_catch_brace is used.")+' '+self.tr("\n")))
        s.append("sp_oc_catch_brace = {} # ignore/add/remove/force".format(self.sp_oc_catch_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and 'catch' if on the same line.")+' '+self.tr("\n")))
        s.append("sp_brace_catch = {} # ignore/add/remove/force".format(self.sp_brace_catch.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '}' and '@catch' if on the same line.")+' '+self.tr("If set to ignore, sp_brace_catch is used.")+' '+self.tr("\n")))
        s.append("sp_oc_brace_catch = {} # ignore/add/remove/force".format(self.sp_oc_brace_catch.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'finally' and '{' if on the same line.")+' '+self.tr("\n")))
        s.append("sp_finally_brace = {} # ignore/add/remove/force".format(self.sp_finally_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between '}' and 'finally' if on the same line.")+' '+self.tr("\n")))
        s.append("sp_brace_finally = {} # ignore/add/remove/force".format(self.sp_brace_finally.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'try' and '{' if on the same line.")+' '+self.tr("\n")))
        s.append("sp_try_brace = {} # ignore/add/remove/force".format(self.sp_try_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between get/set and '{' if on the same line.")+' '+self.tr("\n")))
        s.append("sp_getset_brace = {} # ignore/add/remove/force".format(self.sp_getset_brace.currentText()))
        s.append(wrap(self.tr("Add or remove space between a variable and '{' for C++ uniform initialization.")+' '+self.tr("\n")))
        s.append("sp_word_brace_init_lst = {} # ignore/add/remove/force".format(self.sp_word_brace_init_lst.currentText()))
        s.append(wrap(self.tr("Add or remove space between a variable and '{' for a namespace.")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n")))
        s.append("sp_word_brace_ns = {} # ignore/add/remove/force".format(self.sp_word_brace_ns.currentText()))
        s.append(wrap(self.tr("Add or remove space before the '::' operator.")+' '+self.tr("\n")))
        s.append("sp_before_dc = {} # ignore/add/remove/force".format(self.sp_before_dc.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '::' operator.")+' '+self.tr("\n")))
        s.append("sp_after_dc = {} # ignore/add/remove/force".format(self.sp_after_dc.currentText()))
        s.append(wrap(self.tr("(D) Add or remove around the D named array initializer ':' operator.")+' '+self.tr("\n")))
        s.append("sp_d_array_colon = {} # ignore/add/remove/force".format(self.sp_d_array_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '!' (not) unary operator.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_not = {} # ignore/add/remove/force".format(self.sp_not.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '~' (invert) unary operator.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_inv = {} # ignore/add/remove/force".format(self.sp_inv.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '&' (address-of) unary operator.")+' '+self.tr("This does not affect the spacing after a '&' that is part of a type.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_addr = {} # ignore/add/remove/force".format(self.sp_addr.currentText()))
        s.append(wrap(self.tr("Add or remove space around the '.' or '->' operators.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_member = {} # ignore/add/remove/force".format(self.sp_member.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '*' (dereference) unary operator.")+' '+self.tr("This does not affect the spacing after a '*' that is part of a type.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_deref = {} # ignore/add/remove/force".format(self.sp_deref.currentText()))
        s.append(wrap(self.tr("Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_sign = {} # ignore/add/remove/force".format(self.sp_sign.currentText()))
        s.append(wrap(self.tr("Add or remove space between '++' and '--' the word to which it is being applied, as in '(--x)' or 'y++;'.")+' '+self.tr("\n")+' '+self.tr("Default: remove")+' '+self.tr("\n")))
        s.append("sp_incdec = {} # ignore/add/remove/force".format(self.sp_incdec.currentText()))
        s.append(wrap(self.tr("Add or remove space before a backslash-newline at the end of a line.")+' '+self.tr("\n")+' '+self.tr("Default: add")+' '+self.tr("\n")))
        s.append("sp_before_nl_cont = {} # ignore/add/remove/force".format(self.sp_before_nl_cont.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_scope = {} # ignore/add/remove/force".format(self.sp_after_oc_scope.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the colon in message specs, i.e. '-(int) f:(int) x;' vs. '-(int) f: (int) x;'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_colon = {} # ignore/add/remove/force".format(self.sp_after_oc_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before the colon in message specs, i.e. '-(int) f: (int) x;' vs. '-(int) f : (int) x;'.")+' '+self.tr("\n")))
        s.append("sp_before_oc_colon = {} # ignore/add/remove/force".format(self.sp_before_oc_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the colon in immutable dictionary expression 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_dict_colon = {} # ignore/add/remove/force".format(self.sp_after_oc_dict_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before the colon in immutable dictionary expression 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'.")+' '+self.tr("\n")))
        s.append("sp_before_oc_dict_colon = {} # ignore/add/remove/force".format(self.sp_before_oc_dict_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the colon in message specs, i.e. '[object setValue:1];' vs. '[object setValue: 1];'.")+' '+self.tr("\n")))
        s.append("sp_after_send_oc_colon = {} # ignore/add/remove/force".format(self.sp_after_send_oc_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before the colon in message specs, i.e. '[object setValue:1];' vs. '[object setValue :1];'.")+' '+self.tr("\n")))
        s.append("sp_before_send_oc_colon = {} # ignore/add/remove/force".format(self.sp_before_send_oc_colon.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the (type) in message specs, i.e. '-(int)f: (int) x;' vs. '-(int)f: (int)x;'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_type = {} # ignore/add/remove/force".format(self.sp_after_oc_type.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after the first (type) in message specs, i.e. '-(int) f:(int)x;' vs. '-(int)f:(int)x;'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_return_type = {} # ignore/add/remove/force".format(self.sp_after_oc_return_type.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '@selector' and '(', i.e. '@selector(msgName)' vs. '@selector (msgName)'.")+' '+self.tr("Also applies to '@protocol()' constructs.")+' '+self.tr("\n")))
        s.append("sp_after_oc_at_sel = {} # ignore/add/remove/force".format(self.sp_after_oc_at_sel.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '@selector(x)' and the following word, i.e. '@selector(foo) a:' vs. '@selector(foo)a:'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_at_sel_parens = {} # ignore/add/remove/force".format(self.sp_after_oc_at_sel_parens.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space inside '@selector' parentheses, i.e. '@selector(foo)' vs. '@selector( foo )'.")+' '+self.tr("Also applies to '@protocol()' constructs.")+' '+self.tr("\n")))
        s.append("sp_inside_oc_at_sel_parens = {} # ignore/add/remove/force".format(self.sp_inside_oc_at_sel_parens.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space before a block pointer caret, i.e. '^int (int arg){...}' vs. ' ^int (int arg){...}'.")+' '+self.tr("\n")))
        s.append("sp_before_oc_block_caret = {} # ignore/add/remove/force".format(self.sp_before_oc_block_caret.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after a block pointer caret, i.e. '^int (int arg){...}' vs. '^ int (int arg){...}'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_block_caret = {} # ignore/add/remove/force".format(self.sp_after_oc_block_caret.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between the receiver and selector in a message, as in '[receiver selector ...]'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_msg_receiver = {} # ignore/add/remove/force".format(self.sp_after_oc_msg_receiver.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space after '@property'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_property = {} # ignore/add/remove/force".format(self.sp_after_oc_property.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove space between '@synchronized' and the open parenthesis, i.e. '@synchronized(foo)' vs. '@synchronized (foo)'.")+' '+self.tr("\n")))
        s.append("sp_after_oc_synchronized = {} # ignore/add/remove/force".format(self.sp_after_oc_synchronized.currentText()))
        s.append(wrap(self.tr("Add or remove space around the ':' in 'b ? t : f'.")+' '+self.tr("\n")))
        s.append("sp_cond_colon = {} # ignore/add/remove/force".format(self.sp_cond_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before the ':' in 'b ? t : f'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_cond_colon.")+' '+self.tr("\n")))
        s.append("sp_cond_colon_before = {} # ignore/add/remove/force".format(self.sp_cond_colon_before.currentText()))
        s.append(wrap(self.tr("Add or remove space after the ':' in 'b ? t : f'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_cond_colon.")+' '+self.tr("\n")))
        s.append("sp_cond_colon_after = {} # ignore/add/remove/force".format(self.sp_cond_colon_after.currentText()))
        s.append(wrap(self.tr("Add or remove space around the '?' in 'b ? t : f'.")+' '+self.tr("\n")))
        s.append("sp_cond_question = {} # ignore/add/remove/force".format(self.sp_cond_question.currentText()))
        s.append(wrap(self.tr("Add or remove space before the '?' in 'b ? t : f'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_cond_question.")+' '+self.tr("\n")))
        s.append("sp_cond_question_before = {} # ignore/add/remove/force".format(self.sp_cond_question_before.currentText()))
        s.append(wrap(self.tr("Add or remove space after the '?' in 'b ? t : f'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_cond_question.")+' '+self.tr("\n")))
        s.append("sp_cond_question_after = {} # ignore/add/remove/force".format(self.sp_cond_question_after.currentText()))
        s.append(wrap(self.tr("In the abbreviated ternary form '(a ?: b)', add or remove space between '?' and ':'.")+' '+self.tr("\n")+' '+self.tr("Overrides all other sp_cond_* options.")+' '+self.tr("\n")))
        s.append("sp_cond_ternary_short = {} # ignore/add/remove/force".format(self.sp_cond_ternary_short.currentText()))
        s.append(wrap(self.tr("Fix the spacing between 'case' and the label.")+' '+self.tr("Only 'ignore' and 'force' make sense here.")+' '+self.tr("\n")))
        s.append("sp_case_label = {} # ignore/add/remove/force".format(self.sp_case_label.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space around the D '..' operator.")+' '+self.tr("\n")))
        s.append("sp_range = {} # ignore/add/remove/force".format(self.sp_range.currentText()))
        s.append(wrap(self.tr("Add or remove space after ':' in a Java/C++11 range-based 'for', as in 'for (Type var : expr)'.")+' '+self.tr("\n")))
        s.append("sp_after_for_colon = {} # ignore/add/remove/force".format(self.sp_after_for_colon.currentText()))
        s.append(wrap(self.tr("Add or remove space before ':' in a Java/C++11 range-based 'for', as in 'for (Type var : expr)'.")+' '+self.tr("\n")))
        s.append("sp_before_for_colon = {} # ignore/add/remove/force".format(self.sp_before_for_colon.currentText()))
        s.append(wrap(self.tr("(D) Add or remove space between 'extern' and '(' as in 'extern (C)'.")+' '+self.tr("\n")))
        s.append("sp_extern_paren = {} # ignore/add/remove/force".format(self.sp_extern_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space after the opening of a C++ comment, i.e. '// A' vs. '//A'.")+' '+self.tr("\n")))
        s.append("sp_cmt_cpp_start = {} # ignore/add/remove/force".format(self.sp_cmt_cpp_start.currentText()))
        s.append(wrap(self.tr("If true, space is added with sp_cmt_cpp_start will be added after doxygen sequences like '///', '///<', '//!' and '//!<'.")+' '+self.tr("\n")))
        s.append("sp_cmt_cpp_doxygen = {} # true/false".format(self.sp_cmt_cpp_doxygen.currentText()))
        s.append(wrap(self.tr("If true, space is added with sp_cmt_cpp_start will be added after Qt translator or meta-data comments like '//:', '//=', and '//~'.")+' '+self.tr("\n")))
        s.append("sp_cmt_cpp_qttr = {} # true/false".format(self.sp_cmt_cpp_qttr.currentText()))
        s.append(wrap(self.tr("Add or remove space between #else or #endif and a trailing comment.")+' '+self.tr("\n")))
        s.append("sp_endif_cmt = {} # ignore/add/remove/force".format(self.sp_endif_cmt.currentText()))
        s.append(wrap(self.tr("Add or remove space after 'new', 'delete' and 'delete[]'.")+' '+self.tr("\n")))
        s.append("sp_after_new = {} # ignore/add/remove/force".format(self.sp_after_new.currentText()))
        s.append(wrap(self.tr("Add or remove space between 'new' and '(' in 'new()'.")+' '+self.tr("\n")))
        s.append("sp_between_new_paren = {} # ignore/add/remove/force".format(self.sp_between_new_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space between ')' and type in 'new(foo) BAR'.")+' '+self.tr("\n")))
        s.append("sp_after_newop_paren = {} # ignore/add/remove/force".format(self.sp_after_newop_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space inside parenthesis of the new operator as in 'new(foo) BAR'.")+' '+self.tr("\n")))
        s.append("sp_inside_newop_paren = {} # ignore/add/remove/force".format(self.sp_inside_newop_paren.currentText()))
        s.append(wrap(self.tr("Add or remove space after the open parenthesis of the new operator, as in 'new(foo) BAR'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_inside_newop_paren.")+' '+self.tr("\n")))
        s.append("sp_inside_newop_paren_open = {} # ignore/add/remove/force".format(self.sp_inside_newop_paren_open.currentText()))
        s.append(wrap(self.tr("Add or remove space before the close parenthesis of the new operator, as in 'new(foo) BAR'.")+' '+self.tr("\n")+' '+self.tr("Overrides sp_inside_newop_paren.")+' '+self.tr("\n")))
        s.append("sp_inside_newop_paren_close = {} # ignore/add/remove/force".format(self.sp_inside_newop_paren_close.currentText()))
        s.append(wrap(self.tr("Add or remove space before a trailing or embedded comment.")+' '+self.tr("\n")))
        s.append("sp_before_tr_emb_cmt = {} # ignore/add/remove/force".format(self.sp_before_tr_emb_cmt.currentText()))
        s.append(wrap(self.tr("Number of spaces before a trailing or embedded comment.")+' '+self.tr("\n")))
        s.append("sp_num_before_tr_emb_cmt = {} # unsigned number".format(self.sp_num_before_tr_emb_cmt.value()))
        s.append(wrap(self.tr("(Java) Add or remove space between an annotation and the open parenthesis.")+' '+self.tr("\n")))
        s.append("sp_annotation_paren = {} # ignore/add/remove/force".format(self.sp_annotation_paren.currentText()))
        s.append(wrap(self.tr("If true, vbrace tokens are dropped to the previous token and skipped.")+' '+self.tr("\n")))
        s.append("sp_skip_vbrace_tokens = {} # true/false".format(self.sp_skip_vbrace_tokens.currentText()))
        s.append(wrap(self.tr("Add or remove space after 'noexcept'.")+' '+self.tr("\n")))
        s.append("sp_after_noexcept = {} # ignore/add/remove/force".format(self.sp_after_noexcept.currentText()))
        s.append(wrap(self.tr("Add or remove space after '_'.")+' '+self.tr("\n")))
        s.append("sp_vala_after_translation = {} # ignore/add/remove/force".format(self.sp_vala_after_translation.currentText()))
        s.append(wrap(self.tr("If true, a <TAB> is inserted after #define.")+' '+self.tr("\n")))
        s.append("force_tab_after_define = {} # true/false".format(self.force_tab_after_define.currentText()))
        s.append(wrap(self.tr("\nIndenting options\n")))
        s.append(wrap(self.tr("The number of columns to indent per level.")+' '+self.tr("Usually 2, 3, 4, or 8.")+' '+self.tr("\n")+' '+self.tr("Default: 8")+' '+self.tr("\n")))
        s.append("indent_columns = {} # unsigned number".format(self.indent_columns.value()))
        s.append(wrap(self.tr("The continuation indent.")+' '+self.tr("If non-zero, this overrides the indent of '(', '[' and '=' continuation indents.")+' '+self.tr("Negative values are OK; negative value is absolute and not increased for each '(' or '[' level.")+' '+self.tr("\n")+' '+self.tr("For FreeBSD, this is set to 4.")+' '+self.tr("\n")))
        s.append("indent_continue = {} # number".format(self.indent_continue.value()))
        s.append(wrap(self.tr("The continuation indent, only for class header line(s).")+' '+self.tr("If non-zero, this overrides the indent of 'class' continuation indents.")+' '+self.tr("\n")))
        s.append("indent_continue_class_head = {} # unsigned number".format(self.indent_continue_class_head.value()))
        s.append(wrap(self.tr("Whether to indent empty lines (i.e. lines which contain only spaces before the newline character).")+' '+self.tr("\n")))
        s.append("indent_single_newlines = {} # true/false".format(self.indent_single_newlines.currentText()))
        s.append(wrap(self.tr("The continuation indent for func_*_param if they are true.")+' '+self.tr("If non-zero, this overrides the indent.")+' '+self.tr("\n")))
        s.append("indent_param = {} # unsigned number".format(self.indent_param.value()))
        s.append(wrap(self.tr("How to use tabs when indenting code.")+' '+self.tr("\n")+' '+self.tr("0: Spaces only 1: Indent with tabs to brace level, align with spaces (default) 2: Indent and align with tabs, using spaces when not on a tabstop")+' '+self.tr("\n")+' '+self.tr("Default: 1")+' '+self.tr("\n")))
        s.append("indent_with_tabs = {} # unsigned number".format(self.indent_with_tabs.value()))
        s.append(wrap(self.tr("Whether to indent comments that are not at a brace level with tabs on a tabstop.")+' '+self.tr("Requires indent_with_tabs=2.")+' '+self.tr("If false, will use spaces.")+' '+self.tr("\n")))
        s.append("indent_cmt_with_tabs = {} # true/false".format(self.indent_cmt_with_tabs.currentText()))
        s.append(wrap(self.tr("Whether to indent strings broken by '\' so that they line up.")+' '+self.tr("\n")))
        s.append("indent_align_string = {} # true/false".format(self.indent_align_string.currentText()))
        s.append(wrap(self.tr("The number of spaces to indent multi-line XML strings.")+' '+self.tr("Requires indent_align_string=true.")+' '+self.tr("\n")))
        s.append("indent_xml_string = {} # unsigned number".format(self.indent_xml_string.value()))
        s.append(wrap(self.tr("Spaces to indent '{' from level.")+' '+self.tr("\n")))
        s.append("indent_brace = {} # unsigned number".format(self.indent_brace.value()))
        s.append(wrap(self.tr("Whether braces are indented to the body level.")+' '+self.tr("\n")))
        s.append("indent_braces = {} # true/false".format(self.indent_braces.currentText()))
        s.append(wrap(self.tr("Whether to disable indenting function braces if indent_braces=true.")+' '+self.tr("\n")))
        s.append("indent_braces_no_func = {} # true/false".format(self.indent_braces_no_func.currentText()))
        s.append(wrap(self.tr("Whether to disable indenting class braces if indent_braces=true.")+' '+self.tr("\n")))
        s.append("indent_braces_no_class = {} # true/false".format(self.indent_braces_no_class.currentText()))
        s.append(wrap(self.tr("Whether to disable indenting struct braces if indent_braces=true.")+' '+self.tr("\n")))
        s.append("indent_braces_no_struct = {} # true/false".format(self.indent_braces_no_struct.currentText()))
        s.append(wrap(self.tr("Whether to indent based on the size of the brace parent, i.e. 'if' => 3 spaces, 'for' => 4 spaces, etc.")+' '+self.tr("\n")))
        s.append("indent_brace_parent = {} # true/false".format(self.indent_brace_parent.currentText()))
        s.append(wrap(self.tr("Whether to indent based on the open parenthesis instead of the open brace in '({\n'.")+' '+self.tr("\n")))
        s.append("indent_paren_open_brace = {} # true/false".format(self.indent_paren_open_brace.currentText()))
        s.append(wrap(self.tr("(C#) Whether to indent the brace of a C# delegate by another level.")+' '+self.tr("\n")))
        s.append("indent_cs_delegate_brace = {} # true/false".format(self.indent_cs_delegate_brace.currentText()))
        s.append(wrap(self.tr("(C#) Whether to indent a C# delegate (to handle delegates with no brace) by another level.")+' '+self.tr("\n")))
        s.append("indent_cs_delegate_body = {} # true/false".format(self.indent_cs_delegate_body.currentText()))
        s.append(wrap(self.tr("Whether to indent the body of a 'namespace'.")+' '+self.tr("\n")))
        s.append("indent_namespace = {} # true/false".format(self.indent_namespace.currentText()))
        s.append(wrap(self.tr("Whether to indent only the first namespace, and not any nested namespaces.")+' '+self.tr("Requires indent_namespace=true.")+' '+self.tr("\n")))
        s.append("indent_namespace_single_indent = {} # true/false".format(self.indent_namespace_single_indent.currentText()))
        s.append(wrap(self.tr("The number of spaces to indent a namespace block.")+' '+self.tr("If set to zero, use the value indent_columns")+' '+self.tr("\n")))
        s.append("indent_namespace_level = {} # unsigned number".format(self.indent_namespace_level.value()))
        s.append(wrap(self.tr("If the body of the namespace is longer than this number, it won't be indented.")+' '+self.tr("Requires indent_namespace=true. 0 means no limit.")+' '+self.tr("\n")))
        s.append("indent_namespace_limit = {} # unsigned number".format(self.indent_namespace_limit.value()))
        s.append(wrap(self.tr("Whether the 'extern \"C\"' body is indented.")+' '+self.tr("\n")))
        s.append("indent_extern = {} # true/false".format(self.indent_extern.currentText()))
        s.append(wrap(self.tr("Whether the 'class' body is indented.")+' '+self.tr("\n")))
        s.append("indent_class = {} # true/false".format(self.indent_class.currentText()))
        s.append(wrap(self.tr("Whether to indent the stuff after a leading base class colon.")+' '+self.tr("\n")))
        s.append("indent_class_colon = {} # true/false".format(self.indent_class_colon.currentText()))
        s.append(wrap(self.tr("Whether to indent based on a class colon instead of the stuff after the colon.")+' '+self.tr("Requires indent_class_colon=true.")+' '+self.tr("\n")))
        s.append("indent_class_on_colon = {} # true/false".format(self.indent_class_on_colon.currentText()))
        s.append(wrap(self.tr("Whether to indent the stuff after a leading class initializer colon.")+' '+self.tr("\n")))
        s.append("indent_constr_colon = {} # true/false".format(self.indent_constr_colon.currentText()))
        s.append(wrap(self.tr("Virtual indent from the ':' for member initializers.")+' '+self.tr("\n")+' '+self.tr("Default: 2")+' '+self.tr("\n")))
        s.append("indent_ctor_init_leading = {} # unsigned number".format(self.indent_ctor_init_leading.value()))
        s.append(wrap(self.tr("Additional indent for constructor initializer list.")+' '+self.tr("Negative values decrease indent down to the first column.")+' '+self.tr("\n")))
        s.append("indent_ctor_init = {} # number".format(self.indent_ctor_init.value()))
        s.append(wrap(self.tr("Whether to indent 'if' following 'else' as a new block under the 'else'.")+' '+self.tr("If false, 'else\nif' is treated as 'else if' for indenting purposes.")+' '+self.tr("\n")))
        s.append("indent_else_if = {} # true/false".format(self.indent_else_if.currentText()))
        s.append(wrap(self.tr("Amount to indent variable declarations after a open brace.")+' '+self.tr("\n")+' '+self.tr("<0: Relative >=0: Absolute")+' '+self.tr("\n")))
        s.append("indent_var_def_blk = {} # number".format(self.indent_var_def_blk.value()))
        s.append(wrap(self.tr("Whether to indent continued variable declarations instead of aligning.")+' '+self.tr("\n")))
        s.append("indent_var_def_cont = {} # true/false".format(self.indent_var_def_cont.currentText()))
        s.append(wrap(self.tr("Whether to indent continued shift expressions ('<<' and '>>') instead of aligning.")+' '+self.tr("Set align_left_shift=false when enabling this.")+' '+self.tr("\n")))
        s.append("indent_shift = {} # true/false".format(self.indent_shift.currentText()))
        s.append(wrap(self.tr("Whether to force indentation of function definitions to start in column 1.")+' '+self.tr("\n")))
        s.append("indent_func_def_force_col1 = {} # true/false".format(self.indent_func_def_force_col1.currentText()))
        s.append(wrap(self.tr("Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n")))
        s.append("indent_func_call_param = {} # true/false".format(self.indent_func_call_param.currentText()))
        s.append(wrap(self.tr("Whether to indent continued function definition parameters one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n")))
        s.append("indent_func_def_param = {} # true/false".format(self.indent_func_def_param.currentText()))
        s.append(wrap(self.tr("for function definitions, only if indent_func_def_param is false Allows to align params when appropriate and indent them when not behave as if it was true if paren position is more than this value if paren position is more than the option value")+' '+self.tr("\n")))
        s.append("indent_func_def_param_paren_pos_threshold = {} # unsigned number".format(self.indent_func_def_param_paren_pos_threshold.value()))
        s.append(wrap(self.tr("Whether to indent continued function call prototype one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n")))
        s.append("indent_func_proto_param = {} # true/false".format(self.indent_func_proto_param.currentText()))
        s.append(wrap(self.tr("Whether to indent continued function call declaration one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n")))
        s.append("indent_func_class_param = {} # true/false".format(self.indent_func_class_param.currentText()))
        s.append(wrap(self.tr("Whether to indent continued class variable constructors one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n")))
        s.append("indent_func_ctor_var_param = {} # true/false".format(self.indent_func_ctor_var_param.currentText()))
        s.append(wrap(self.tr("Whether to indent continued template parameter list one indent level, rather than aligning parameters under the open parenthesis.")+' '+self.tr("\n")))
        s.append("indent_template_param = {} # true/false".format(self.indent_template_param.currentText()))
        s.append(wrap(self.tr("Double the indent for indent_func_xxx_param options.")+' '+self.tr("Use both values of the options indent_columns and indent_param.")+' '+self.tr("\n")))
        s.append("indent_func_param_double = {} # true/false".format(self.indent_func_param_double.currentText()))
        s.append(wrap(self.tr("Indentation column for standalone 'const' qualifier on a function prototype.")+' '+self.tr("\n")))
        s.append("indent_func_const = {} # unsigned number".format(self.indent_func_const.value()))
        s.append(wrap(self.tr("Indentation column for standalone 'throw' qualifier on a function prototype.")+' '+self.tr("\n")))
        s.append("indent_func_throw = {} # unsigned number".format(self.indent_func_throw.value()))
        s.append(wrap(self.tr("How to indent within a macro followed by a brace on the same line This allows reducing the indent in macros that have (for example) `do { ... } while (0)` blocks bracketing them.")+' '+self.tr("\n")+' '+self.tr("true:  add an indent for the brace on the same line as the macro false: do not add an indent for the brace on the same line as the macro")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("indent_macro_brace = {} # true/false".format(self.indent_macro_brace.currentText()))
        s.append(wrap(self.tr("The number of spaces to indent a continued '->' or '.'.")+' '+self.tr("Usually set to 0, 1, or indent_columns.")+' '+self.tr("\n")))
        s.append("indent_member = {} # unsigned number".format(self.indent_member.value()))
        s.append(wrap(self.tr("Whether lines broken at '.' or '->' should be indented by a single indent.")+' '+self.tr("The indent_member option will not be effective if this is set to true.")+' '+self.tr("\n")))
        s.append("indent_member_single = {} # true/false".format(self.indent_member_single.currentText()))
        s.append(wrap(self.tr("Spaces to indent single line ('//') comments on lines before code.")+' '+self.tr("\n")))
        s.append("indent_sing_line_comments = {} # unsigned number".format(self.indent_sing_line_comments.value()))
        s.append(wrap(self.tr("When opening a paren for a control statement (if, for, while, etc), increase the indent level by this value.")+' '+self.tr("Negative values decrease the indent level.")+' '+self.tr("\n")))
        s.append("indent_sparen_extra = {} # number".format(self.indent_sparen_extra.value()))
        s.append(wrap(self.tr("Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column.")+' '+self.tr("\n")))
        s.append("indent_relative_single_line_comments = {} # true/false".format(self.indent_relative_single_line_comments.currentText()))
        s.append(wrap(self.tr("Spaces to indent 'case' from 'switch'.")+' '+self.tr("Usually 0 or indent_columns.")+' '+self.tr("\n")))
        s.append("indent_switch_case = {} # unsigned number".format(self.indent_switch_case.value()))
        s.append(wrap(self.tr("indent 'break' with 'case' from 'switch'.")+' '+self.tr("\n")))
        s.append("indent_switch_break_with_case = {} # true/false".format(self.indent_switch_break_with_case.currentText()))
        s.append(wrap(self.tr("Whether to indent preprocessor statements inside of switch statements.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("indent_switch_pp = {} # true/false".format(self.indent_switch_pp.currentText()))
        s.append(wrap(self.tr("Spaces to shift the 'case' line, without affecting any other lines.")+' '+self.tr("Usually 0.")+' '+self.tr("\n")))
        s.append("indent_case_shift = {} # unsigned number".format(self.indent_case_shift.value()))
        s.append(wrap(self.tr("Spaces to indent '{' from 'case'.")+' '+self.tr("By default, the brace will appear under the 'c' in case.")+' '+self.tr("Usually set to 0 or indent_columns.")+' '+self.tr("Negative values are OK.")+' '+self.tr("\n")))
        s.append("indent_case_brace = {} # number".format(self.indent_case_brace.value()))
        s.append(wrap(self.tr("Whether to indent comments found in first column.")+' '+self.tr("\n")))
        s.append("indent_col1_comment = {} # true/false".format(self.indent_col1_comment.currentText()))
        s.append(wrap(self.tr("Whether to indent multi string literal in first column.")+' '+self.tr("\n")))
        s.append("indent_col1_multi_string_literal = {} # true/false".format(self.indent_col1_multi_string_literal.currentText()))
        s.append(wrap(self.tr("How to indent goto labels.")+' '+self.tr("\n")+' '+self.tr(">0: Absolute column where 1 is the leftmost column <=0: Subtract from brace indent")+' '+self.tr("\n")+' '+self.tr("Default: 1")+' '+self.tr("\n")))
        s.append("indent_label = {} # number".format(self.indent_label.value()))
        s.append(wrap(self.tr("How to indent access specifiers that are followed by a colon.")+' '+self.tr("\n")+' '+self.tr(">0: Absolute column where 1 is the leftmost column <=0: Subtract from brace indent")+' '+self.tr("\n")+' '+self.tr("Default: 1")+' '+self.tr("\n")))
        s.append("indent_access_spec = {} # number".format(self.indent_access_spec.value()))
        s.append(wrap(self.tr("Whether to indent the code after an access specifier by one level.")+' '+self.tr("If true, this option forces 'indent_access_spec=0'.")+' '+self.tr("\n")))
        s.append("indent_access_spec_body = {} # true/false".format(self.indent_access_spec_body.currentText()))
        s.append(wrap(self.tr("If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis (not recommended).")+' '+self.tr("\n")))
        s.append("indent_paren_nl = {} # true/false".format(self.indent_paren_nl.currentText()))
        s.append(wrap(self.tr("How to indent a close parenthesis after a newline.")+' '+self.tr("\n")+' '+self.tr("0: Indent to body level (default) 1: Align under the open parenthesis 2: Indent to the brace level")+' '+self.tr("\n")))
        s.append("indent_paren_close = {} # unsigned number".format(self.indent_paren_close.value()))
        s.append(wrap(self.tr("Whether to indent the open parenthesis of a function definition, if the parenthesis is on its own line.")+' '+self.tr("\n")))
        s.append("indent_paren_after_func_def = {} # true/false".format(self.indent_paren_after_func_def.currentText()))
        s.append(wrap(self.tr("Whether to indent the open parenthesis of a function declaration, if the parenthesis is on its own line.")+' '+self.tr("\n")))
        s.append("indent_paren_after_func_decl = {} # true/false".format(self.indent_paren_after_func_decl.currentText()))
        s.append(wrap(self.tr("Whether to indent the open parenthesis of a function call, if the parenthesis is on its own line.")+' '+self.tr("\n")))
        s.append("indent_paren_after_func_call = {} # true/false".format(self.indent_paren_after_func_call.currentText()))
        s.append(wrap(self.tr("Whether to indent a comma when inside a parenthesis.")+' '+self.tr("If true, aligns under the open parenthesis.")+' '+self.tr("\n")))
        s.append("indent_comma_paren = {} # true/false".format(self.indent_comma_paren.currentText()))
        s.append(wrap(self.tr("Whether to indent a Boolean operator when inside a parenthesis.")+' '+self.tr("If true, aligns under the open parenthesis.")+' '+self.tr("\n")))
        s.append("indent_bool_paren = {} # true/false".format(self.indent_bool_paren.currentText()))
        s.append(wrap(self.tr("Whether to indent a semicolon when inside a for parenthesis.")+' '+self.tr("If true, aligns under the open for parenthesis.")+' '+self.tr("\n")))
        s.append("indent_semicolon_for_paren = {} # true/false".format(self.indent_semicolon_for_paren.currentText()))
        s.append(wrap(self.tr("Whether to align the first expression to following ones if indent_bool_paren=true.")+' '+self.tr("\n")))
        s.append("indent_first_bool_expr = {} # true/false".format(self.indent_first_bool_expr.currentText()))
        s.append(wrap(self.tr("Whether to align the first expression to following ones if indent_semicolon_for_paren=true.")+' '+self.tr("\n")))
        s.append("indent_first_for_expr = {} # true/false".format(self.indent_first_for_expr.currentText()))
        s.append(wrap(self.tr("If an open square is followed by a newline, whether to indent the next line so that it lines up after the open square (not recommended).")+' '+self.tr("\n")))
        s.append("indent_square_nl = {} # true/false".format(self.indent_square_nl.currentText()))
        s.append(wrap(self.tr("(ESQL/C) Whether to preserve the relative indent of 'EXEC SQL' bodies.")+' '+self.tr("\n")))
        s.append("indent_preserve_sql = {} # true/false".format(self.indent_preserve_sql.currentText()))
        s.append(wrap(self.tr("Whether to align continued statements at the '='.")+' '+self.tr("If false or if the '=' is followed by a newline, the next line is indent one tab.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("indent_align_assign = {} # true/false".format(self.indent_align_assign.currentText()))
        s.append(wrap(self.tr("If true, the indentation of the chunks after a '=' sequence will be set at LHS token indentation column before '='.")+' '+self.tr("\n")))
        s.append("indent_off_after_assign = {} # true/false".format(self.indent_off_after_assign.currentText()))
        s.append(wrap(self.tr("Whether to align continued statements at the '('.")+' '+self.tr("If false or the '(' is followed by a newline, the next line indent is one tab.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("indent_align_paren = {} # true/false".format(self.indent_align_paren.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent Objective-C code inside message selectors.")+' '+self.tr("\n")))
        s.append("indent_oc_inside_msg_sel = {} # true/false".format(self.indent_oc_inside_msg_sel.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent Objective-C blocks at brace level instead of usual rules.")+' '+self.tr("\n")))
        s.append("indent_oc_block = {} # true/false".format(self.indent_oc_block.currentText()))
        s.append(wrap(self.tr("(OC) Indent for Objective-C blocks in a message relative to the parameter name.")+' '+self.tr("\n")+' '+self.tr("=0: Use indent_oc_block rules >0: Use specified number of spaces to indent")+' '+self.tr("\n")))
        s.append("indent_oc_block_msg = {} # unsigned number".format(self.indent_oc_block_msg.value()))
        s.append(wrap(self.tr("(OC) Minimum indent for subsequent parameters")+' '+self.tr("\n")))
        s.append("indent_oc_msg_colon = {} # unsigned number".format(self.indent_oc_msg_colon.value()))
        s.append(wrap(self.tr("(OC) Whether to prioritize aligning with initial colon (and stripping spaces from lines, if necessary).")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("indent_oc_msg_prioritize_first_colon = {} # true/false".format(self.indent_oc_msg_prioritize_first_colon.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks the way that Xcode does by default (from the keyword if the parameter is on its own line; otherwise, from the previous indentation level).")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n")))
        s.append("indent_oc_block_msg_xcode_style = {} # true/false".format(self.indent_oc_block_msg_xcode_style.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks from where the brace is, relative to a message keyword.")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n")))
        s.append("indent_oc_block_msg_from_keyword = {} # true/false".format(self.indent_oc_block_msg_from_keyword.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks from where the brace is, relative to a message colon.")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n")))
        s.append("indent_oc_block_msg_from_colon = {} # true/false".format(self.indent_oc_block_msg_from_colon.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks from where the block caret is.")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n")))
        s.append("indent_oc_block_msg_from_caret = {} # true/false".format(self.indent_oc_block_msg_from_caret.currentText()))
        s.append(wrap(self.tr("(OC) Whether to indent blocks from where the brace caret is.")+' '+self.tr("Requires indent_oc_block_msg=true.")+' '+self.tr("\n")))
        s.append("indent_oc_block_msg_from_brace = {} # true/false".format(self.indent_oc_block_msg_from_brace.currentText()))
        s.append(wrap(self.tr("When indenting after virtual brace open and newline add further spaces to reach this minimum indent.")+' '+self.tr("\n")))
        s.append("indent_min_vbrace_open = {} # unsigned number".format(self.indent_min_vbrace_open.value()))
        s.append(wrap(self.tr("Whether to add further spaces after regular indent to reach next tabstop when identing after virtual brace open and newline.")+' '+self.tr("\n")))
        s.append("indent_vbrace_open_on_tabstop = {} # true/false".format(self.indent_vbrace_open_on_tabstop.currentText()))
        s.append(wrap(self.tr("How to indent after a brace followed by another token (not a newline). true:  indent all contained lines to match the token false: indent all contained lines to match the brace")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("indent_token_after_brace = {} # true/false".format(self.indent_token_after_brace.currentText()))
        s.append(wrap(self.tr("Whether to indent the body of a C++11 lambda.")+' '+self.tr("\n")))
        s.append("indent_cpp_lambda_body = {} # true/false".format(self.indent_cpp_lambda_body.currentText()))
        s.append(wrap(self.tr("How to indent compound literals that are being returned. true: add both the indent from return & the compound literal open brace (ie:       2 indent levels) false: only indent 1 level, don't add the indent for the open brace, only add        the indent for the return.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("indent_compound_literal_return = {} # true/false".format(self.indent_compound_literal_return.currentText()))
        s.append(wrap(self.tr("(C#) Whether to indent a 'using' block if no braces are used.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("indent_using_block = {} # true/false".format(self.indent_using_block.currentText()))
        s.append(wrap(self.tr("How to indent the continuation of ternary operator.")+' '+self.tr("\n")+' '+self.tr("0: Off (default) 1: When the `if_false` is a continuation, indent it under `if_false` 2: When the `:` is a continuation, indent it under `?`")+' '+self.tr("\n")))
        s.append("indent_ternary_operator = {} # unsigned number".format(self.indent_ternary_operator.value()))
        s.append(wrap(self.tr("Whether to indent the statments inside ternary operator.")+' '+self.tr("\n")))
        s.append("indent_inside_ternary_operator = {} # true/false".format(self.indent_inside_ternary_operator.currentText()))
        s.append(wrap(self.tr("If true, the indentation of the chunks after a `return` sequence will be set at return indentation column.")+' '+self.tr("\n")))
        s.append("indent_off_after_return = {} # true/false".format(self.indent_off_after_return.currentText()))
        s.append(wrap(self.tr("If true, the indentation of the chunks after a `return new` sequence will be set at return indentation column.")+' '+self.tr("\n")))
        s.append("indent_off_after_return_new = {} # true/false".format(self.indent_off_after_return_new.currentText()))
        s.append(wrap(self.tr("If true, the tokens after return are indented with regular single indentation.")+' '+self.tr("By default (false) the indentation is after the return token.")+' '+self.tr("\n")))
        s.append("indent_single_after_return = {} # true/false".format(self.indent_single_after_return.currentText()))
        s.append(wrap(self.tr("Whether to ignore indent and alignment for 'asm' blocks (i.e. assume they have their own indentation).")+' '+self.tr("\n")))
        s.append("indent_ignore_asm_block = {} # true/false".format(self.indent_ignore_asm_block.currentText()))
        s.append(wrap(self.tr("\nNewline adding and removing options\n")))
        s.append(wrap(self.tr("Whether to collapse empty blocks between '{' and '}'.")+' '+self.tr("\n")))
        s.append("nl_collapse_empty_body = {} # true/false".format(self.nl_collapse_empty_body.currentText()))
        s.append(wrap(self.tr("Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'.")+' '+self.tr("\n")))
        s.append("nl_assign_leave_one_liners = {} # true/false".format(self.nl_assign_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line braced statements inside a 'class xx { }' body.")+' '+self.tr("\n")))
        s.append("nl_class_leave_one_liners = {} # true/false".format(self.nl_class_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line enums, as in 'enum foo { BAR = 15 };'")+' '+self.tr("\n")))
        s.append("nl_enum_leave_one_liners = {} # true/false".format(self.nl_enum_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line get or set functions.")+' '+self.tr("\n")))
        s.append("nl_getset_leave_one_liners = {} # true/false".format(self.nl_getset_leave_one_liners.currentText()))
        s.append(wrap(self.tr("(C#) Don't split one-line property get or set functions.")+' '+self.tr("\n")))
        s.append("nl_cs_property_leave_one_liners = {} # true/false".format(self.nl_cs_property_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line function definitions, as in 'int foo() { return 0; }'. might modify nl_func_type_name")+' '+self.tr("\n")))
        s.append("nl_func_leave_one_liners = {} # true/false".format(self.nl_func_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line C++11 lambdas, as in '[]() { return 0; }'.")+' '+self.tr("\n")))
        s.append("nl_cpp_lambda_leave_one_liners = {} # true/false".format(self.nl_cpp_lambda_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line if/else statements, as in 'if(...) b++;'.")+' '+self.tr("\n")))
        s.append("nl_if_leave_one_liners = {} # true/false".format(self.nl_if_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line while statements, as in 'while(...) b++;'.")+' '+self.tr("\n")))
        s.append("nl_while_leave_one_liners = {} # true/false".format(self.nl_while_leave_one_liners.currentText()))
        s.append(wrap(self.tr("Don't split one-line for statements, as in 'for(...) b++;'.")+' '+self.tr("\n")))
        s.append("nl_for_leave_one_liners = {} # true/false".format(self.nl_for_leave_one_liners.currentText()))
        s.append(wrap(self.tr("(OC) Don't split one-line Objective-C messages.")+' '+self.tr("\n")))
        s.append("nl_oc_msg_leave_one_liner = {} # true/false".format(self.nl_oc_msg_leave_one_liner.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between method declaration and '{'.")+' '+self.tr("\n")))
        s.append("nl_oc_mdef_brace = {} # ignore/add/remove/force".format(self.nl_oc_mdef_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between Objective-C block signature and '{'.")+' '+self.tr("\n")))
        s.append("nl_oc_block_brace = {} # ignore/add/remove/force".format(self.nl_oc_block_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove blank line before '@interface' statement.")+' '+self.tr("\n")))
        s.append("nl_oc_before_interface = {} # ignore/add/remove/force".format(self.nl_oc_before_interface.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove blank line before '@implementation' statement.")+' '+self.tr("\n")))
        s.append("nl_oc_before_implementation = {} # ignore/add/remove/force".format(self.nl_oc_before_implementation.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove blank line before '@end' statement.")+' '+self.tr("\n")))
        s.append("nl_oc_before_end = {} # ignore/add/remove/force".format(self.nl_oc_before_end.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between '@interface' and '{'.")+' '+self.tr("\n")))
        s.append("nl_oc_interface_brace = {} # ignore/add/remove/force".format(self.nl_oc_interface_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between '@implementation' and '{'.")+' '+self.tr("\n")))
        s.append("nl_oc_implementation_brace = {} # ignore/add/remove/force".format(self.nl_oc_implementation_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newlines at the start of the file.")+' '+self.tr("\n")))
        s.append("nl_start_of_file = {} # ignore/add/remove/force".format(self.nl_start_of_file.currentText()))
        s.append(wrap(self.tr("The minimum number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force').")+' '+self.tr("\n")))
        s.append("nl_start_of_file_min = {} # unsigned number".format(self.nl_start_of_file_min.value()))
        s.append(wrap(self.tr("Add or remove newline at the end of the file.")+' '+self.tr("\n")))
        s.append("nl_end_of_file = {} # ignore/add/remove/force".format(self.nl_end_of_file.currentText()))
        s.append(wrap(self.tr("The minimum number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force').")+' '+self.tr("\n")))
        s.append("nl_end_of_file_min = {} # unsigned number".format(self.nl_end_of_file_min.value()))
        s.append(wrap(self.tr("Add or remove newline between '=' and '{'.")+' '+self.tr("\n")))
        s.append("nl_assign_brace = {} # ignore/add/remove/force".format(self.nl_assign_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline between '=' and '['.")+' '+self.tr("\n")))
        s.append("nl_assign_square = {} # ignore/add/remove/force".format(self.nl_assign_square.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '[]' and '{'.")+' '+self.tr("\n")))
        s.append("nl_tsquare_brace = {} # ignore/add/remove/force".format(self.nl_tsquare_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline after '= ['.")+' '+self.tr("Will also affect the newline before the ']'.")+' '+self.tr("\n")))
        s.append("nl_after_square_assign = {} # ignore/add/remove/force".format(self.nl_after_square_assign.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a function call's ')' and '{', as in 'list_for_each(item, &list) { }'.")+' '+self.tr("\n")))
        s.append("nl_fcall_brace = {} # ignore/add/remove/force".format(self.nl_fcall_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum' and '{'.")+' '+self.tr("\n")))
        s.append("nl_enum_brace = {} # ignore/add/remove/force".format(self.nl_enum_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum' and 'class'.")+' '+self.tr("\n")))
        s.append("nl_enum_class = {} # ignore/add/remove/force".format(self.nl_enum_class.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum class' and the identifier.")+' '+self.tr("\n")))
        s.append("nl_enum_class_identifier = {} # ignore/add/remove/force".format(self.nl_enum_class_identifier.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum class' type and ':'.")+' '+self.tr("\n")))
        s.append("nl_enum_identifier_colon = {} # ignore/add/remove/force".format(self.nl_enum_identifier_colon.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'enum class identifier :' and type.")+' '+self.tr("\n")))
        s.append("nl_enum_colon_type = {} # ignore/add/remove/force".format(self.nl_enum_colon_type.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'struct and '{'.")+' '+self.tr("\n")))
        s.append("nl_struct_brace = {} # ignore/add/remove/force".format(self.nl_struct_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'union' and '{'.")+' '+self.tr("\n")))
        s.append("nl_union_brace = {} # ignore/add/remove/force".format(self.nl_union_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'if' and '{'.")+' '+self.tr("\n")))
        s.append("nl_if_brace = {} # ignore/add/remove/force".format(self.nl_if_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and 'else'.")+' '+self.tr("\n")))
        s.append("nl_brace_else = {} # ignore/add/remove/force".format(self.nl_brace_else.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'else if' and '{'.")+' '+self.tr("If set to ignore, nl_if_brace is used instead.")+' '+self.tr("\n")))
        s.append("nl_elseif_brace = {} # ignore/add/remove/force".format(self.nl_elseif_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'else' and '{'.")+' '+self.tr("\n")))
        s.append("nl_else_brace = {} # ignore/add/remove/force".format(self.nl_else_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'else' and 'if'.")+' '+self.tr("\n")))
        s.append("nl_else_if = {} # ignore/add/remove/force".format(self.nl_else_if.currentText()))
        s.append(wrap(self.tr("Add or remove newline before '{' opening brace")+' '+self.tr("\n")))
        s.append("nl_before_opening_brace_func_class_def = {} # ignore/add/remove/force".format(self.nl_before_opening_brace_func_class_def.currentText()))
        s.append(wrap(self.tr("Add or remove newline before 'if'/'else if' closing parenthesis.")+' '+self.tr("\n")))
        s.append("nl_before_if_closing_paren = {} # ignore/add/remove/force".format(self.nl_before_if_closing_paren.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and 'finally'.")+' '+self.tr("\n")))
        s.append("nl_brace_finally = {} # ignore/add/remove/force".format(self.nl_brace_finally.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'finally' and '{'.")+' '+self.tr("\n")))
        s.append("nl_finally_brace = {} # ignore/add/remove/force".format(self.nl_finally_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'try' and '{'.")+' '+self.tr("\n")))
        s.append("nl_try_brace = {} # ignore/add/remove/force".format(self.nl_try_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between get/set and '{'.")+' '+self.tr("\n")))
        s.append("nl_getset_brace = {} # ignore/add/remove/force".format(self.nl_getset_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'for' and '{'.")+' '+self.tr("\n")))
        s.append("nl_for_brace = {} # ignore/add/remove/force".format(self.nl_for_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline before the '{' of a 'catch' statement, as in 'catch (decl) <here> {'.")+' '+self.tr("\n")))
        s.append("nl_catch_brace = {} # ignore/add/remove/force".format(self.nl_catch_brace.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline before the '{' of a '@catch' statement, as in '@catch (decl) <here> {'.")+' '+self.tr("If set to ignore, nl_catch_brace is used.")+' '+self.tr("\n")))
        s.append("nl_oc_catch_brace = {} # ignore/add/remove/force".format(self.nl_oc_catch_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and 'catch'.")+' '+self.tr("\n")))
        s.append("nl_brace_catch = {} # ignore/add/remove/force".format(self.nl_brace_catch.currentText()))
        s.append(wrap(self.tr("(OC) Add or remove newline between '}' and '@catch'.")+' '+self.tr("If set to ignore, nl_brace_catch is used.")+' '+self.tr("\n")))
        s.append("nl_oc_brace_catch = {} # ignore/add/remove/force".format(self.nl_oc_brace_catch.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and ']'.")+' '+self.tr("\n")))
        s.append("nl_brace_square = {} # ignore/add/remove/force".format(self.nl_brace_square.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and ')' in a function invocation.")+' '+self.tr("\n")))
        s.append("nl_brace_fparen = {} # ignore/add/remove/force".format(self.nl_brace_fparen.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'while' and '{'.")+' '+self.tr("\n")))
        s.append("nl_while_brace = {} # ignore/add/remove/force".format(self.nl_while_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline between 'scope (x)' and '{'.")+' '+self.tr("\n")))
        s.append("nl_scope_brace = {} # ignore/add/remove/force".format(self.nl_scope_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline between 'unittest' and '{'.")+' '+self.tr("\n")))
        s.append("nl_unittest_brace = {} # ignore/add/remove/force".format(self.nl_unittest_brace.currentText()))
        s.append(wrap(self.tr("(D) Add or remove newline between 'version (x)' and '{'.")+' '+self.tr("\n")))
        s.append("nl_version_brace = {} # ignore/add/remove/force".format(self.nl_version_brace.currentText()))
        s.append(wrap(self.tr("(C#) Add or remove newline between 'using' and '{'.")+' '+self.tr("\n")))
        s.append("nl_using_brace = {} # ignore/add/remove/force".format(self.nl_using_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between two open or close braces.")+' '+self.tr("Due to general newline/brace handling, REMOVE may not work.")+' '+self.tr("\n")))
        s.append("nl_brace_brace = {} # ignore/add/remove/force".format(self.nl_brace_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'do' and '{'.")+' '+self.tr("\n")))
        s.append("nl_do_brace = {} # ignore/add/remove/force".format(self.nl_do_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '}' and 'while' of 'do' statement.")+' '+self.tr("\n")))
        s.append("nl_brace_while = {} # ignore/add/remove/force".format(self.nl_brace_while.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'switch' and '{'.")+' '+self.tr("\n")))
        s.append("nl_switch_brace = {} # ignore/add/remove/force".format(self.nl_switch_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'synchronized' and '{'.")+' '+self.tr("\n")))
        s.append("nl_synchronized_brace = {} # ignore/add/remove/force".format(self.nl_synchronized_brace.currentText()))
        s.append(wrap(self.tr("Add a newline between ')' and '{' if the ')' is on a different line than the if/for/etc.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch and nl_catch_brace.")+' '+self.tr("\n")))
        s.append("nl_multi_line_cond = {} # true/false".format(self.nl_multi_line_cond.currentText()))
        s.append(wrap(self.tr("Add a newline after '(' if an if/for/while/switch condition spans multiple lines")+' '+self.tr("\n")))
        s.append("nl_multi_line_sparen_open = {} # ignore/add/remove/force".format(self.nl_multi_line_sparen_open.currentText()))
        s.append(wrap(self.tr("Add a newline before ')' if an if/for/while/switch condition spans multiple lines.")+' '+self.tr("Overrides nl_before_if_closing_paren if both are specified.")+' '+self.tr("\n")))
        s.append("nl_multi_line_sparen_close = {} # ignore/add/remove/force".format(self.nl_multi_line_sparen_close.currentText()))
        s.append(wrap(self.tr("Force a newline in a define after the macro name for multi-line defines.")+' '+self.tr("\n")))
        s.append("nl_multi_line_define = {} # true/false".format(self.nl_multi_line_define.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before 'case', and a blank line before a 'case' statement that follows a ';' or '}'.")+' '+self.tr("\n")))
        s.append("nl_before_case = {} # true/false".format(self.nl_before_case.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after a 'case' statement.")+' '+self.tr("\n")))
        s.append("nl_after_case = {} # true/false".format(self.nl_after_case.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a case ':' and '{'.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_after_case.")+' '+self.tr("\n")))
        s.append("nl_case_colon_brace = {} # ignore/add/remove/force".format(self.nl_case_colon_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between ')' and 'throw'.")+' '+self.tr("\n")))
        s.append("nl_before_throw = {} # ignore/add/remove/force".format(self.nl_before_throw.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'namespace' and '{'.")+' '+self.tr("\n")))
        s.append("nl_namespace_brace = {} # ignore/add/remove/force".format(self.nl_namespace_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template class.")+' '+self.tr("\n")))
        s.append("nl_template_class = {} # ignore/add/remove/force".format(self.nl_template_class.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template class declaration.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_class.")+' '+self.tr("\n")))
        s.append("nl_template_class_decl = {} # ignore/add/remove/force".format(self.nl_template_class_decl.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<>' of a specialized class declaration.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_class_decl.")+' '+self.tr("\n")))
        s.append("nl_template_class_decl_special = {} # ignore/add/remove/force".format(self.nl_template_class_decl_special.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template class definition.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_class.")+' '+self.tr("\n")))
        s.append("nl_template_class_def = {} # ignore/add/remove/force".format(self.nl_template_class_def.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<>' of a specialized class definition.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_class_def.")+' '+self.tr("\n")))
        s.append("nl_template_class_def_special = {} # ignore/add/remove/force".format(self.nl_template_class_def_special.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template function.")+' '+self.tr("\n")))
        s.append("nl_template_func = {} # ignore/add/remove/force".format(self.nl_template_func.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template function declaration.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_func.")+' '+self.tr("\n")))
        s.append("nl_template_func_decl = {} # ignore/add/remove/force".format(self.nl_template_func_decl.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<>' of a specialized function declaration.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_func_decl.")+' '+self.tr("\n")))
        s.append("nl_template_func_decl_special = {} # ignore/add/remove/force".format(self.nl_template_func_decl_special.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template function definition.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_func.")+' '+self.tr("\n")))
        s.append("nl_template_func_def = {} # ignore/add/remove/force".format(self.nl_template_func_def.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<>' of a specialized function definition.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_template_func_def.")+' '+self.tr("\n")))
        s.append("nl_template_func_def_special = {} # ignore/add/remove/force".format(self.nl_template_func_def_special.currentText()))
        s.append(wrap(self.tr("Add or remove newline after 'template<...>' of a template variable.")+' '+self.tr("\n")))
        s.append("nl_template_var = {} # ignore/add/remove/force".format(self.nl_template_var.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'template<...>' and 'using' of a templated type alias.")+' '+self.tr("\n")))
        s.append("nl_template_using = {} # ignore/add/remove/force".format(self.nl_template_using.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'class' and '{'.")+' '+self.tr("\n")))
        s.append("nl_class_brace = {} # ignore/add/remove/force".format(self.nl_class_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline before or after (depending on pos_class_comma, may not be IGNORE) each',' in the base class list.")+' '+self.tr("\n")))
        s.append("nl_class_init_args = {} # ignore/add/remove/force".format(self.nl_class_init_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline after each ',' in the constructor member initialization.")+' '+self.tr("Related to nl_constr_colon, pos_constr_colon and pos_constr_comma.")+' '+self.tr("\n")))
        s.append("nl_constr_init_args = {} # ignore/add/remove/force".format(self.nl_constr_init_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline before first element, after comma, and after last element, in 'enum'.")+' '+self.tr("\n")))
        s.append("nl_enum_own_lines = {} # ignore/add/remove/force".format(self.nl_enum_own_lines.currentText()))
        s.append(wrap(self.tr("Add or remove newline between return type and function name in a function definition. might be modified by nl_func_leave_one_liners")+' '+self.tr("\n")))
        s.append("nl_func_type_name = {} # ignore/add/remove/force".format(self.nl_func_type_name.currentText()))
        s.append(wrap(self.tr("Add or remove newline between return type and function name inside a class definition.")+' '+self.tr("If set to ignore, nl_func_type_name or nl_func_proto_type_name is used instead.")+' '+self.tr("\n")))
        s.append("nl_func_type_name_class = {} # ignore/add/remove/force".format(self.nl_func_type_name_class.currentText()))
        s.append(wrap(self.tr("Add or remove newline between class specification and '::' in 'void A::f() { }'.")+' '+self.tr("Only appears in separate member implementation (does not appear with in-line implementation).")+' '+self.tr("\n")))
        s.append("nl_func_class_scope = {} # ignore/add/remove/force".format(self.nl_func_class_scope.currentText()))
        s.append(wrap(self.tr("Add or remove newline between function scope and name, as in 'void A :: <here> f() { }'.")+' '+self.tr("\n")))
        s.append("nl_func_scope_name = {} # ignore/add/remove/force".format(self.nl_func_scope_name.currentText()))
        s.append(wrap(self.tr("Add or remove newline between return type and function name in a prototype.")+' '+self.tr("\n")))
        s.append("nl_func_proto_type_name = {} # ignore/add/remove/force".format(self.nl_func_proto_type_name.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a function name and the opening '(' in the declaration.")+' '+self.tr("\n")))
        s.append("nl_func_paren = {} # ignore/add/remove/force".format(self.nl_func_paren.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_paren for functions with no parameters.")+' '+self.tr("\n")))
        s.append("nl_func_paren_empty = {} # ignore/add/remove/force".format(self.nl_func_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a function name and the opening '(' in the definition.")+' '+self.tr("\n")))
        s.append("nl_func_def_paren = {} # ignore/add/remove/force".format(self.nl_func_def_paren.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_def_paren for functions with no parameters.")+' '+self.tr("\n")))
        s.append("nl_func_def_paren_empty = {} # ignore/add/remove/force".format(self.nl_func_def_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline between a function name and the opening '(' in the call.")+' '+self.tr("\n")))
        s.append("nl_func_call_paren = {} # ignore/add/remove/force".format(self.nl_func_call_paren.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_call_paren for functions with no parameters.")+' '+self.tr("\n")))
        s.append("nl_func_call_paren_empty = {} # ignore/add/remove/force".format(self.nl_func_call_paren_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline after '(' in a function declaration.")+' '+self.tr("\n")))
        s.append("nl_func_decl_start = {} # ignore/add/remove/force".format(self.nl_func_decl_start.currentText()))
        s.append(wrap(self.tr("Add or remove newline after '(' in a function definition.")+' '+self.tr("\n")))
        s.append("nl_func_def_start = {} # ignore/add/remove/force".format(self.nl_func_def_start.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_decl_start when there is only one parameter.")+' '+self.tr("\n")))
        s.append("nl_func_decl_start_single = {} # ignore/add/remove/force".format(self.nl_func_decl_start_single.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_def_start when there is only one parameter.")+' '+self.tr("\n")))
        s.append("nl_func_def_start_single = {} # ignore/add/remove/force".format(self.nl_func_def_start_single.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '(' in a function declaration if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_decl_start is used instead.")+' '+self.tr("\n")))
        s.append("nl_func_decl_start_multi_line = {} # true/false".format(self.nl_func_decl_start_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '(' in a function definition if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_def_start is used instead.")+' '+self.tr("\n")))
        s.append("nl_func_def_start_multi_line = {} # true/false".format(self.nl_func_def_start_multi_line.currentText()))
        s.append(wrap(self.tr("Add or remove newline after each ',' in a function declaration.")+' '+self.tr("\n")))
        s.append("nl_func_decl_args = {} # ignore/add/remove/force".format(self.nl_func_decl_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline after each ',' in a function definition.")+' '+self.tr("\n")))
        s.append("nl_func_def_args = {} # ignore/add/remove/force".format(self.nl_func_def_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline after each ',' in a function call.")+' '+self.tr("\n")))
        s.append("nl_func_call_args = {} # ignore/add/remove/force".format(self.nl_func_call_args.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after each ',' in a function declaration if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_decl_args is used instead.")+' '+self.tr("\n")))
        s.append("nl_func_decl_args_multi_line = {} # true/false".format(self.nl_func_decl_args_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after each ',' in a function definition if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_def_args is used instead.")+' '+self.tr("\n")))
        s.append("nl_func_def_args_multi_line = {} # true/false".format(self.nl_func_def_args_multi_line.currentText()))
        s.append(wrap(self.tr("Add or remove newline before the ')' in a function declaration.")+' '+self.tr("\n")))
        s.append("nl_func_decl_end = {} # ignore/add/remove/force".format(self.nl_func_decl_end.currentText()))
        s.append(wrap(self.tr("Add or remove newline before the ')' in a function definition.")+' '+self.tr("\n")))
        s.append("nl_func_def_end = {} # ignore/add/remove/force".format(self.nl_func_def_end.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_decl_end when there is only one parameter.")+' '+self.tr("\n")))
        s.append("nl_func_decl_end_single = {} # ignore/add/remove/force".format(self.nl_func_decl_end_single.currentText()))
        s.append(wrap(self.tr("Overrides nl_func_def_end when there is only one parameter.")+' '+self.tr("\n")))
        s.append("nl_func_def_end_single = {} # ignore/add/remove/force".format(self.nl_func_def_end_single.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before ')' in a function declaration if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_decl_end is used instead.")+' '+self.tr("\n")))
        s.append("nl_func_decl_end_multi_line = {} # true/false".format(self.nl_func_decl_end_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before ')' in a function definition if '(' and ')' are in different lines.")+' '+self.tr("If false, nl_func_def_end is used instead.")+' '+self.tr("\n")))
        s.append("nl_func_def_end_multi_line = {} # true/false".format(self.nl_func_def_end_multi_line.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '()' in a function declaration.")+' '+self.tr("\n")))
        s.append("nl_func_decl_empty = {} # ignore/add/remove/force".format(self.nl_func_decl_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '()' in a function definition.")+' '+self.tr("\n")))
        s.append("nl_func_def_empty = {} # ignore/add/remove/force".format(self.nl_func_def_empty.currentText()))
        s.append(wrap(self.tr("Add or remove newline between '()' in a function call.")+' '+self.tr("\n")))
        s.append("nl_func_call_empty = {} # ignore/add/remove/force".format(self.nl_func_call_empty.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '(' in a function call, has preference over nl_func_call_start_multi_line.")+' '+self.tr("\n")))
        s.append("nl_func_call_start = {} # ignore/add/remove/force".format(self.nl_func_call_start.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before ')' in a function call.")+' '+self.tr("\n")))
        s.append("nl_func_call_end = {} # ignore/add/remove/force".format(self.nl_func_call_end.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '(' in a function call if '(' and ')' are in different lines.")+' '+self.tr("\n")))
        s.append("nl_func_call_start_multi_line = {} # true/false".format(self.nl_func_call_start_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after each ',' in a function call if '(' and ')' are in different lines.")+' '+self.tr("\n")))
        s.append("nl_func_call_args_multi_line = {} # true/false".format(self.nl_func_call_args_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before ')' in a function call if '(' and ')' are in different lines.")+' '+self.tr("\n")))
        s.append("nl_func_call_end_multi_line = {} # true/false".format(self.nl_func_call_end_multi_line.currentText()))
        s.append(wrap(self.tr("Whether to respect nl_func_call_XXX option incase of closure args.")+' '+self.tr("\n")))
        s.append("nl_func_call_args_multi_line_ignore_closures = {} # true/false".format(self.nl_func_call_args_multi_line_ignore_closures.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '<' of a template parameter list.")+' '+self.tr("\n")))
        s.append("nl_template_start = {} # true/false".format(self.nl_template_start.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after each ',' in a template parameter list.")+' '+self.tr("\n")))
        s.append("nl_template_args = {} # true/false".format(self.nl_template_args.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before '>' of a template parameter list.")+' '+self.tr("\n")))
        s.append("nl_template_end = {} # true/false".format(self.nl_template_end.currentText()))
        s.append(wrap(self.tr("(OC) Whether to put each Objective-C message parameter on a separate line.")+' '+self.tr("See nl_oc_msg_leave_one_liner.")+' '+self.tr("\n")))
        s.append("nl_oc_msg_args = {} # true/false".format(self.nl_oc_msg_args.currentText()))
        s.append(wrap(self.tr("Add or remove newline between function signature and '{'.")+' '+self.tr("\n")))
        s.append("nl_fdef_brace = {} # ignore/add/remove/force".format(self.nl_fdef_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between function signature and '{', if signature ends with ')'.")+' '+self.tr("Overrides nl_fdef_brace.")+' '+self.tr("\n")))
        s.append("nl_fdef_brace_cond = {} # ignore/add/remove/force".format(self.nl_fdef_brace_cond.currentText()))
        s.append(wrap(self.tr("Add or remove newline between C++11 lambda signature and '{'.")+' '+self.tr("\n")))
        s.append("nl_cpp_ldef_brace = {} # ignore/add/remove/force".format(self.nl_cpp_ldef_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline between 'return' and the return expression.")+' '+self.tr("\n")))
        s.append("nl_return_expr = {} # ignore/add/remove/force".format(self.nl_return_expr.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after semicolons, except in 'for' statements.")+' '+self.tr("\n")))
        s.append("nl_after_semicolon = {} # true/false".format(self.nl_after_semicolon.currentText()))
        s.append(wrap(self.tr("(Java) Add or remove newline between the ')' and '{{' of the double brace initializer.")+' '+self.tr("\n")))
        s.append("nl_paren_dbrace_open = {} # ignore/add/remove/force".format(self.nl_paren_dbrace_open.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after the type in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n")))
        s.append("nl_type_brace_init_lst = {} # ignore/add/remove/force".format(self.nl_type_brace_init_lst.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after the open brace in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n")))
        s.append("nl_type_brace_init_lst_open = {} # ignore/add/remove/force".format(self.nl_type_brace_init_lst_open.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before the close brace in an unnamed temporary direct-list-initialization.")+' '+self.tr("\n")))
        s.append("nl_type_brace_init_lst_close = {} # ignore/add/remove/force".format(self.nl_type_brace_init_lst_close.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '{'.")+' '+self.tr("This also adds a newline before the matching '}'.")+' '+self.tr("\n")))
        s.append("nl_after_brace_open = {} # true/false".format(self.nl_after_brace_open.currentText()))
        s.append(wrap(self.tr("Whether to add a newline between the open brace and a trailing single-line comment.")+' '+self.tr("Requires nl_after_brace_open=true.")+' '+self.tr("\n")))
        s.append("nl_after_brace_open_cmt = {} # true/false".format(self.nl_after_brace_open_cmt.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after a virtual brace open with a non-empty body.")+' '+self.tr("These occur in un-braced if/while/do/for statement bodies.")+' '+self.tr("\n")))
        s.append("nl_after_vbrace_open = {} # true/false".format(self.nl_after_vbrace_open.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after a virtual brace open with an empty body.")+' '+self.tr("These occur in un-braced if/while/do/for statement bodies.")+' '+self.tr("\n")))
        s.append("nl_after_vbrace_open_empty = {} # true/false".format(self.nl_after_vbrace_open_empty.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after '}'.")+' '+self.tr("Does not apply if followed by a necessary ';'.")+' '+self.tr("\n")))
        s.append("nl_after_brace_close = {} # true/false".format(self.nl_after_brace_close.currentText()))
        s.append(wrap(self.tr("Whether to add a newline after a virtual brace close, as in 'if (foo) a++; <here> return;'.")+' '+self.tr("\n")))
        s.append("nl_after_vbrace_close = {} # true/false".format(self.nl_after_vbrace_close.currentText()))
        s.append(wrap(self.tr("Add or remove newline between the close brace and identifier, as in 'struct { int a; } <here> b;'.")+' '+self.tr("Affects enumerations, unions and structures.")+' '+self.tr("If set to ignore, uses nl_after_brace_close.")+' '+self.tr("\n")))
        s.append("nl_brace_struct_var = {} # ignore/add/remove/force".format(self.nl_brace_struct_var.currentText()))
        s.append(wrap(self.tr("Whether to alter newlines in '#define' macros.")+' '+self.tr("\n")))
        s.append("nl_define_macro = {} # true/false".format(self.nl_define_macro.currentText()))
        s.append(wrap(self.tr("Whether to alter newlines between consecutive parenthesis closes.")+' '+self.tr("The number of closing parentheses in a line will depend on respective open parenthesis lines.")+' '+self.tr("\n")))
        s.append("nl_squeeze_paren_close = {} # true/false".format(self.nl_squeeze_paren_close.currentText()))
        s.append(wrap(self.tr("Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and '#endif'.")+' '+self.tr("Does not affect top-level #ifdefs.")+' '+self.tr("\n")))
        s.append("nl_squeeze_ifdef = {} # true/false".format(self.nl_squeeze_ifdef.currentText()))
        s.append(wrap(self.tr("Makes the nl_squeeze_ifdef option affect the top-level #ifdefs as well.")+' '+self.tr("\n")))
        s.append("nl_squeeze_ifdef_top_level = {} # true/false".format(self.nl_squeeze_ifdef_top_level.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'if'.")+' '+self.tr("\n")))
        s.append("nl_before_if = {} # ignore/add/remove/force".format(self.nl_before_if.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'if' statement.")+' '+self.tr("Add/Force work only if the next token is not a closing brace.")+' '+self.tr("\n")))
        s.append("nl_after_if = {} # ignore/add/remove/force".format(self.nl_after_if.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'for'.")+' '+self.tr("\n")))
        s.append("nl_before_for = {} # ignore/add/remove/force".format(self.nl_before_for.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'for' statement.")+' '+self.tr("\n")))
        s.append("nl_after_for = {} # ignore/add/remove/force".format(self.nl_after_for.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'while'.")+' '+self.tr("\n")))
        s.append("nl_before_while = {} # ignore/add/remove/force".format(self.nl_before_while.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'while' statement.")+' '+self.tr("\n")))
        s.append("nl_after_while = {} # ignore/add/remove/force".format(self.nl_after_while.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'switch'.")+' '+self.tr("\n")))
        s.append("nl_before_switch = {} # ignore/add/remove/force".format(self.nl_before_switch.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'switch' statement.")+' '+self.tr("\n")))
        s.append("nl_after_switch = {} # ignore/add/remove/force".format(self.nl_after_switch.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'synchronized'.")+' '+self.tr("\n")))
        s.append("nl_before_synchronized = {} # ignore/add/remove/force".format(self.nl_before_synchronized.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'synchronized' statement.")+' '+self.tr("\n")))
        s.append("nl_after_synchronized = {} # ignore/add/remove/force".format(self.nl_after_synchronized.currentText()))
        s.append(wrap(self.tr("Add or remove blank line before 'do'.")+' '+self.tr("\n")))
        s.append("nl_before_do = {} # ignore/add/remove/force".format(self.nl_before_do.currentText()))
        s.append(wrap(self.tr("Add or remove blank line after 'do/while' statement.")+' '+self.tr("\n")))
        s.append("nl_after_do = {} # ignore/add/remove/force".format(self.nl_after_do.currentText()))
        s.append(wrap(self.tr("Whether to put a blank line before 'return' statements, unless after an open brace.")+' '+self.tr("\n")))
        s.append("nl_before_return = {} # true/false".format(self.nl_before_return.currentText()))
        s.append(wrap(self.tr("Whether to put a blank line after 'return' statements, unless followed by a close brace.")+' '+self.tr("\n")))
        s.append("nl_after_return = {} # true/false".format(self.nl_after_return.currentText()))
        s.append(wrap(self.tr("Whether to put a blank line before a member '.' or '->' operators.")+' '+self.tr("\n")))
        s.append("nl_before_member = {} # ignore/add/remove/force".format(self.nl_before_member.currentText()))
        s.append(wrap(self.tr("(Java) Whether to put a blank line after a member '.' or '->' operators.")+' '+self.tr("\n")))
        s.append("nl_after_member = {} # ignore/add/remove/force".format(self.nl_after_member.currentText()))
        s.append(wrap(self.tr("Whether to double-space commented-entries in 'struct'/'union'/'enum'.")+' '+self.tr("\n")))
        s.append("nl_ds_struct_enum_cmt = {} # true/false".format(self.nl_ds_struct_enum_cmt.currentText()))
        s.append(wrap(self.tr("Whether to force a newline before '}' of a 'struct'/'union'/'enum'. (Lower priority than eat_blanks_before_close_brace.)")+' '+self.tr("\n")))
        s.append("nl_ds_struct_enum_close_brace = {} # true/false".format(self.nl_ds_struct_enum_close_brace.currentText()))
        s.append(wrap(self.tr("Add or remove newline before or after (depending on pos_class_colon) a class colon, as in 'class Foo <here> : <or here> public Bar'.")+' '+self.tr("\n")))
        s.append("nl_class_colon = {} # ignore/add/remove/force".format(self.nl_class_colon.currentText()))
        s.append(wrap(self.tr("Add or remove newline around a class constructor colon.")+' '+self.tr("The exact position depends on nl_constr_init_args, pos_constr_colon and pos_constr_comma.")+' '+self.tr("\n")))
        s.append("nl_constr_colon = {} # ignore/add/remove/force".format(self.nl_constr_colon.currentText()))
        s.append(wrap(self.tr("Whether to collapse a two-line namespace, like 'namespace foo\n{ decl; }' into a single line.")+' '+self.tr("If true, prevents other brace newline rules from turning such code into four lines.")+' '+self.tr("\n")))
        s.append("nl_namespace_two_to_one_liner = {} # true/false".format(self.nl_namespace_two_to_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to remove a newline in simple unbraced if statements, turning them into one-liners, as in 'if(b)\n i++;' => 'if(b) i++;'.")+' '+self.tr("\n")))
        s.append("nl_create_if_one_liner = {} # true/false".format(self.nl_create_if_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to remove a newline in simple unbraced for statements, turning them into one-liners, as in 'for (...)\n stmt;' => 'for (...) stmt;'.")+' '+self.tr("\n")))
        s.append("nl_create_for_one_liner = {} # true/false".format(self.nl_create_for_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to remove a newline in simple unbraced while statements, turning them into one-liners, as in 'while (expr)\n stmt;' => 'while (expr) stmt;'.")+' '+self.tr("\n")))
        s.append("nl_create_while_one_liner = {} # true/false".format(self.nl_create_while_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to collapse a function definition whose body (not counting braces) is only one line so that the entire definition (prototype, braces, body) is a single line.")+' '+self.tr("\n")))
        s.append("nl_create_func_def_one_liner = {} # true/false".format(self.nl_create_func_def_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to collapse a function definition whose body (not counting braces) is only one line so that the entire definition (prototype, braces, body) is a single line.")+' '+self.tr("\n")))
        s.append("nl_create_list_one_liner = {} # true/false".format(self.nl_create_list_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to split one-line simple unbraced if statements into two lines by adding a newline, as in 'if(b) <here> i++;'.")+' '+self.tr("\n")))
        s.append("nl_split_if_one_liner = {} # true/false".format(self.nl_split_if_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to split one-line simple unbraced for statements into two lines by adding a newline, as in 'for (...) <here> stmt;'.")+' '+self.tr("\n")))
        s.append("nl_split_for_one_liner = {} # true/false".format(self.nl_split_for_one_liner.currentText()))
        s.append(wrap(self.tr("Whether to split one-line simple unbraced while statements into two lines by adding a newline, as in 'while (expr) <here> stmt;'.")+' '+self.tr("\n")))
        s.append("nl_split_while_one_liner = {} # true/false".format(self.nl_split_while_one_liner.currentText()))
        s.append(wrap(self.tr("\nBlank line options\n")))
        s.append(wrap(self.tr("The maximum number of consecutive newlines (3 = 2 blank lines).")+' '+self.tr("\n")))
        s.append("nl_max = {} # unsigned number".format(self.nl_max.value()))
        s.append(wrap(self.tr("The maximum number of consecutive newlines in a function.")+' '+self.tr("\n")))
        s.append("nl_max_blank_in_func = {} # unsigned number".format(self.nl_max_blank_in_func.value()))
        s.append(wrap(self.tr("The number of newlines before a function prototype.")+' '+self.tr("\n")))
        s.append("nl_before_func_body_proto = {} # unsigned number".format(self.nl_before_func_body_proto.value()))
        s.append(wrap(self.tr("The number of newlines before a multi-line function definition.")+' '+self.tr("\n")))
        s.append("nl_before_func_body_def = {} # unsigned number".format(self.nl_before_func_body_def.value()))
        s.append(wrap(self.tr("The number of newlines before a class constructor/destructor prototype.")+' '+self.tr("\n")))
        s.append("nl_before_func_class_proto = {} # unsigned number".format(self.nl_before_func_class_proto.value()))
        s.append(wrap(self.tr("The number of newlines before a class constructor/destructor definition.")+' '+self.tr("\n")))
        s.append("nl_before_func_class_def = {} # unsigned number".format(self.nl_before_func_class_def.value()))
        s.append(wrap(self.tr("The number of newlines after a function prototype.")+' '+self.tr("\n")))
        s.append("nl_after_func_proto = {} # unsigned number".format(self.nl_after_func_proto.value()))
        s.append(wrap(self.tr("The number of newlines after a function prototype, if not followed by another function prototype.")+' '+self.tr("\n")))
        s.append("nl_after_func_proto_group = {} # unsigned number".format(self.nl_after_func_proto_group.value()))
        s.append(wrap(self.tr("The number of newlines after a class constructor/destructor prototype.")+' '+self.tr("\n")))
        s.append("nl_after_func_class_proto = {} # unsigned number".format(self.nl_after_func_class_proto.value()))
        s.append(wrap(self.tr("The number of newlines after a class constructor/destructor prototype, if not followed by another constructor/destructor prototype.")+' '+self.tr("\n")))
        s.append("nl_after_func_class_proto_group = {} # unsigned number".format(self.nl_after_func_class_proto_group.value()))
        s.append(wrap(self.tr("Whether one-line method definitions inside a class body should be treated as if they were prototypes for the purposes of adding newlines.")+' '+self.tr("\n")+' '+self.tr("Requires nl_class_leave_one_liners=true.")+' '+self.tr("Overrides nl_before_func_body_def and nl_before_func_class_def for one-liners.")+' '+self.tr("\n")))
        s.append("nl_class_leave_one_liner_groups = {} # true/false".format(self.nl_class_leave_one_liner_groups.currentText()))
        s.append(wrap(self.tr("The number of newlines after '}' of a multi-line function body.")+' '+self.tr("\n")))
        s.append("nl_after_func_body = {} # unsigned number".format(self.nl_after_func_body.value()))
        s.append(wrap(self.tr("The number of newlines after '}' of a multi-line function body in a class declaration.")+' '+self.tr("Also affects class constructors/destructors.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_after_func_body.")+' '+self.tr("\n")))
        s.append("nl_after_func_body_class = {} # unsigned number".format(self.nl_after_func_body_class.value()))
        s.append(wrap(self.tr("The number of newlines after '}' of a single line function body.")+' '+self.tr("Also affects class constructors/destructors.")+' '+self.tr("\n")+' '+self.tr("Overrides nl_after_func_body and nl_after_func_body_class.")+' '+self.tr("\n")))
        s.append("nl_after_func_body_one_liner = {} # unsigned number".format(self.nl_after_func_body_one_liner.value()))
        s.append(wrap(self.tr("The number of blank lines after a block of variable definitions at the top of a function body.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_func_var_def_blk = {} # unsigned number".format(self.nl_func_var_def_blk.value()))
        s.append(wrap(self.tr("The number of newlines before a block of typedefs.")+' '+self.tr("If nl_after_access_spec is non-zero, that option takes precedence.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_typedef_blk_start = {} # unsigned number".format(self.nl_typedef_blk_start.value()))
        s.append(wrap(self.tr("The number of newlines after a block of typedefs.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_typedef_blk_end = {} # unsigned number".format(self.nl_typedef_blk_end.value()))
        s.append(wrap(self.tr("The maximum number of consecutive newlines within a block of typedefs.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_typedef_blk_in = {} # unsigned number".format(self.nl_typedef_blk_in.value()))
        s.append(wrap(self.tr("The number of newlines before a block of variable definitions not at the top of a function body.")+' '+self.tr("If nl_after_access_spec is non-zero, that option takes precedence.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_var_def_blk_start = {} # unsigned number".format(self.nl_var_def_blk_start.value()))
        s.append(wrap(self.tr("The number of newlines after a block of variable definitions not at the top of a function body.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_var_def_blk_end = {} # unsigned number".format(self.nl_var_def_blk_end.value()))
        s.append(wrap(self.tr("The maximum number of consecutive newlines within a block of variable definitions.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_var_def_blk_in = {} # unsigned number".format(self.nl_var_def_blk_in.value()))
        s.append(wrap(self.tr("The minimum number of newlines before a multi-line comment.")+' '+self.tr("Doesn't apply if after a brace open or another multi-line comment.")+' '+self.tr("\n")))
        s.append("nl_before_block_comment = {} # unsigned number".format(self.nl_before_block_comment.value()))
        s.append(wrap(self.tr("The minimum number of newlines before a single-line C comment.")+' '+self.tr("Doesn't apply if after a brace open or other single-line C comments.")+' '+self.tr("\n")))
        s.append("nl_before_c_comment = {} # unsigned number".format(self.nl_before_c_comment.value()))
        s.append(wrap(self.tr("The minimum number of newlines before a CPP comment.")+' '+self.tr("Doesn't apply if after a brace open or other CPP comments.")+' '+self.tr("\n")))
        s.append("nl_before_cpp_comment = {} # unsigned number".format(self.nl_before_cpp_comment.value()))
        s.append(wrap(self.tr("Whether to force a newline after a multi-line comment.")+' '+self.tr("\n")))
        s.append("nl_after_multiline_comment = {} # true/false".format(self.nl_after_multiline_comment.currentText()))
        s.append(wrap(self.tr("Whether to force a newline after a label's colon.")+' '+self.tr("\n")))
        s.append("nl_after_label_colon = {} # true/false".format(self.nl_after_label_colon.currentText()))
        s.append(wrap(self.tr("The number of newlines after '}' or ';' of a struct/enum/union definition.")+' '+self.tr("\n")))
        s.append("nl_after_struct = {} # unsigned number".format(self.nl_after_struct.value()))
        s.append(wrap(self.tr("The number of newlines before a class definition.")+' '+self.tr("\n")))
        s.append("nl_before_class = {} # unsigned number".format(self.nl_before_class.value()))
        s.append(wrap(self.tr("The number of newlines after '}' or ';' of a class definition.")+' '+self.tr("\n")))
        s.append("nl_after_class = {} # unsigned number".format(self.nl_after_class.value()))
        s.append(wrap(self.tr("The number of newlines before a namespace.")+' '+self.tr("\n")))
        s.append("nl_before_namespace = {} # unsigned number".format(self.nl_before_namespace.value()))
        s.append(wrap(self.tr("The number of newlines after '{' of a namespace.")+' '+self.tr("This also adds newlines before the matching '}'.")+' '+self.tr("\n")+' '+self.tr("0: Apply eat_blanks_after_open_brace or eat_blanks_before_close_brace if     applicable, otherwise no change.")+' '+self.tr("\n")+' '+self.tr("Overrides eat_blanks_after_open_brace and eat_blanks_before_close_brace.")+' '+self.tr("\n")))
        s.append("nl_inside_namespace = {} # unsigned number".format(self.nl_inside_namespace.value()))
        s.append(wrap(self.tr("The number of newlines after '}' of a namespace.")+' '+self.tr("\n")))
        s.append("nl_after_namespace = {} # unsigned number".format(self.nl_after_namespace.value()))
        s.append(wrap(self.tr("The number of newlines before an access specifier label.")+' '+self.tr("This also includes the Qt-specific 'signals:' and 'slots:'.")+' '+self.tr("Will not change the newline count if after a brace open.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_before_access_spec = {} # unsigned number".format(self.nl_before_access_spec.value()))
        s.append(wrap(self.tr("The number of newlines after an access specifier label.")+' '+self.tr("This also includes the Qt-specific 'signals:' and 'slots:'.")+' '+self.tr("Will not change the newline count if after a brace open.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")+' '+self.tr("Overrides nl_typedef_blk_start and nl_var_def_blk_start.")+' '+self.tr("\n")))
        s.append("nl_after_access_spec = {} # unsigned number".format(self.nl_after_access_spec.value()))
        s.append(wrap(self.tr("The number of newlines between a function definition and the function comment, as in '// comment\n <here> void foo() {...}'.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_comment_func_def = {} # unsigned number".format(self.nl_comment_func_def.value()))
        s.append(wrap(self.tr("The number of newlines after a try-catch-finally block that isn't followed by a brace close.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_after_try_catch_finally = {} # unsigned number".format(self.nl_after_try_catch_finally.value()))
        s.append(wrap(self.tr("(C#) The number of newlines before and after a property, indexer or event declaration.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_around_cs_property = {} # unsigned number".format(self.nl_around_cs_property.value()))
        s.append(wrap(self.tr("(C#) The number of newlines between the get/set/add/remove handlers.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_between_get_set = {} # unsigned number".format(self.nl_between_get_set.value()))
        s.append(wrap(self.tr("(C#) Add or remove newline between property and the '{'.")+' '+self.tr("\n")))
        s.append("nl_property_brace = {} # ignore/add/remove/force".format(self.nl_property_brace.currentText()))
        s.append(wrap(self.tr("Whether to remove blank lines after '{'.")+' '+self.tr("\n")))
        s.append("eat_blanks_after_open_brace = {} # true/false".format(self.eat_blanks_after_open_brace.currentText()))
        s.append(wrap(self.tr("Whether to remove blank lines before '}'.")+' '+self.tr("\n")))
        s.append("eat_blanks_before_close_brace = {} # true/false".format(self.eat_blanks_before_close_brace.currentText()))
        s.append(wrap(self.tr("How aggressively to remove extra newlines not in preprocessor.")+' '+self.tr("\n")+' '+self.tr("0: No change (default) 1: Remove most newlines not handled by other config 2: Remove all newlines and reformat completely by config")+' '+self.tr("\n")))
        s.append("nl_remove_extra_newlines = {} # unsigned number".format(self.nl_remove_extra_newlines.value()))
        s.append(wrap(self.tr("(Java) Add or remove newline after an annotation statement.")+' '+self.tr("Only affects annotations that are after a newline.")+' '+self.tr("\n")))
        s.append("nl_after_annotation = {} # ignore/add/remove/force".format(self.nl_after_annotation.currentText()))
        s.append(wrap(self.tr("(Java) Add or remove newline between two annotations.")+' '+self.tr("\n")))
        s.append("nl_between_annotation = {} # ignore/add/remove/force".format(self.nl_between_annotation.currentText()))
        s.append(wrap(self.tr("The number of newlines before a whole-file #ifdef.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_before_whole_file_ifdef = {} # unsigned number".format(self.nl_before_whole_file_ifdef.value()))
        s.append(wrap(self.tr("The number of newlines after a whole-file #ifdef.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_after_whole_file_ifdef = {} # unsigned number".format(self.nl_after_whole_file_ifdef.value()))
        s.append(wrap(self.tr("The number of newlines before a whole-file #endif.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_before_whole_file_endif = {} # unsigned number".format(self.nl_before_whole_file_endif.value()))
        s.append(wrap(self.tr("The number of newlines after a whole-file #endif.")+' '+self.tr("\n")+' '+self.tr("0: No change (default).")+' '+self.tr("\n")))
        s.append("nl_after_whole_file_endif = {} # unsigned number".format(self.nl_after_whole_file_endif.value()))
        s.append(wrap(self.tr("\nPositioning options\n")))
        s.append(wrap(self.tr("The position of arithmetic operators in wrapped expressions.")+' '+self.tr("\n")))
        s.append("pos_arith = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_arith.currentText()))
        s.append(wrap(self.tr("The position of assignment in wrapped expressions.")+' '+self.tr("Do not affect '=' followed by '{'.")+' '+self.tr("\n")))
        s.append("pos_assign = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_assign.currentText()))
        s.append(wrap(self.tr("The position of Boolean operators in wrapped expressions.")+' '+self.tr("\n")))
        s.append("pos_bool = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_bool.currentText()))
        s.append(wrap(self.tr("The position of comparison operators in wrapped expressions.")+' '+self.tr("\n")))
        s.append("pos_compare = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_compare.currentText()))
        s.append(wrap(self.tr("The position of conditional operators, as in the '?' and ':' of 'expr ? stmt : stmt', in wrapped expressions.")+' '+self.tr("\n")))
        s.append("pos_conditional = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_conditional.currentText()))
        s.append(wrap(self.tr("The position of the comma in wrapped expressions.")+' '+self.tr("\n")))
        s.append("pos_comma = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_comma.currentText()))
        s.append(wrap(self.tr("The position of the comma in enum entries.")+' '+self.tr("\n")))
        s.append("pos_enum_comma = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_enum_comma.currentText()))
        s.append(wrap(self.tr("The position of the comma in the base class list if there is more than one line.")+' '+self.tr("Affects nl_class_init_args.")+' '+self.tr("\n")))
        s.append("pos_class_comma = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_class_comma.currentText()))
        s.append(wrap(self.tr("The position of the comma in the constructor initialization list.")+' '+self.tr("Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon.")+' '+self.tr("\n")))
        s.append("pos_constr_comma = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_constr_comma.currentText()))
        s.append(wrap(self.tr("The position of trailing/leading class colon, between class and base class list.")+' '+self.tr("Affects nl_class_colon.")+' '+self.tr("\n")))
        s.append("pos_class_colon = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_class_colon.currentText()))
        s.append(wrap(self.tr("The position of colons between constructor and member initialization.")+' '+self.tr("Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma.")+' '+self.tr("\n")))
        s.append("pos_constr_colon = {} # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force".format(self.pos_constr_colon.currentText()))
        s.append(wrap(self.tr("\nLine splitting options\n")))
        s.append(wrap(self.tr("Try to limit code width to N columns.")+' '+self.tr("\n")))
        s.append("code_width = {} # unsigned number".format(self.code_width.value()))
        s.append(wrap(self.tr("Whether to fully split long 'for' statements at semi-colons.")+' '+self.tr("\n")))
        s.append("ls_for_split_full = {} # true/false".format(self.ls_for_split_full.currentText()))
        s.append(wrap(self.tr("Whether to fully split long function prototypes/calls at commas.")+' '+self.tr("The option ls_code_width has priority over the option ls_func_split_full.")+' '+self.tr("\n")))
        s.append("ls_func_split_full = {} # true/false".format(self.ls_func_split_full.currentText()))
        s.append(wrap(self.tr("Whether to split lines as close to code_width as possible and ignore some groupings.")+' '+self.tr("The option ls_code_width has priority over the option ls_func_split_full.")+' '+self.tr("\n")))
        s.append("ls_code_width = {} # true/false".format(self.ls_code_width.currentText()))
        s.append(wrap(self.tr("\nCode alignment options (not left column spaces/tabs)\n")))
        s.append(wrap(self.tr("Whether to keep non-indenting tabs.")+' '+self.tr("\n")))
        s.append("align_keep_tabs = {} # true/false".format(self.align_keep_tabs.currentText()))
        s.append(wrap(self.tr("Whether to use tabs for aligning.")+' '+self.tr("\n")))
        s.append("align_with_tabs = {} # true/false".format(self.align_with_tabs.currentText()))
        s.append(wrap(self.tr("Whether to bump out to the next tab when aligning.")+' '+self.tr("\n")))
        s.append("align_on_tabstop = {} # true/false".format(self.align_on_tabstop.currentText()))
        s.append(wrap(self.tr("Whether to right-align numbers.")+' '+self.tr("\n")))
        s.append("align_number_right = {} # true/false".format(self.align_number_right.currentText()))
        s.append(wrap(self.tr("Whether to keep whitespace not required for alignment.")+' '+self.tr("\n")))
        s.append("align_keep_extra_space = {} # true/false".format(self.align_keep_extra_space.currentText()))
        s.append(wrap(self.tr("Whether to align variable definitions in prototypes and functions.")+' '+self.tr("\n")))
        s.append("align_func_params = {} # true/false".format(self.align_func_params.currentText()))
        s.append(wrap(self.tr("The span for aligning parameter definitions in function on parameter name.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_func_params_span = {} # unsigned number".format(self.align_func_params_span.value()))
        s.append(wrap(self.tr("The threshold for aligning function parameter definitions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n")))
        s.append("align_func_params_thresh = {} # number".format(self.align_func_params_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning function parameter definitions.")+' '+self.tr("\n")))
        s.append("align_func_params_gap = {} # unsigned number".format(self.align_func_params_gap.value()))
        s.append(wrap(self.tr("The span for aligning constructor value.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_constr_value_span = {} # unsigned number".format(self.align_constr_value_span.value()))
        s.append(wrap(self.tr("The threshold for aligning constructor value.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n")))
        s.append("align_constr_value_thresh = {} # number".format(self.align_constr_value_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning constructor value.")+' '+self.tr("\n")))
        s.append("align_constr_value_gap = {} # unsigned number".format(self.align_constr_value_gap.value()))
        s.append(wrap(self.tr("Whether to align parameters in single-line functions that have the same name.")+' '+self.tr("The function names must already be aligned with each other.")+' '+self.tr("\n")))
        s.append("align_same_func_call_params = {} # true/false".format(self.align_same_func_call_params.currentText()))
        s.append(wrap(self.tr("The span for aligning function-call parameters for single line functions.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_same_func_call_params_span = {} # unsigned number".format(self.align_same_func_call_params_span.value()))
        s.append(wrap(self.tr("The threshold for aligning function-call parameters for single line functions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n")))
        s.append("align_same_func_call_params_thresh = {} # number".format(self.align_same_func_call_params_thresh.value()))
        s.append(wrap(self.tr("The span for aligning variable definitions.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_var_def_span = {} # unsigned number".format(self.align_var_def_span.value()))
        s.append(wrap(self.tr("How to consider (or treat) the '*' in the alignment of variable definitions.")+' '+self.tr("\n")+' '+self.tr("0: Part of the type     'void *   foo;' (default) 1: Part of the variable 'void     *foo;' 2: Dangling             'void    *foo;' Dangling: the '*' will not be taken into account when aligning.")+' '+self.tr("\n")))
        s.append("align_var_def_star_style = {} # unsigned number".format(self.align_var_def_star_style.value()))
        s.append(wrap(self.tr("How to consider (or treat) the '&' in the alignment of variable definitions.")+' '+self.tr("\n")+' '+self.tr("0: Part of the type     'long &   foo;' (default) 1: Part of the variable 'long     &foo;' 2: Dangling             'long    &foo;' Dangling: the '&' will not be taken into account when aligning.")+' '+self.tr("\n")))
        s.append("align_var_def_amp_style = {} # unsigned number".format(self.align_var_def_amp_style.value()))
        s.append(wrap(self.tr("The threshold for aligning variable definitions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n")))
        s.append("align_var_def_thresh = {} # number".format(self.align_var_def_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning variable definitions.")+' '+self.tr("\n")))
        s.append("align_var_def_gap = {} # unsigned number".format(self.align_var_def_gap.value()))
        s.append(wrap(self.tr("Whether to align the colon in struct bit fields.")+' '+self.tr("\n")))
        s.append("align_var_def_colon = {} # true/false".format(self.align_var_def_colon.currentText()))
        s.append(wrap(self.tr("The gap for aligning the colon in struct bit fields.")+' '+self.tr("\n")))
        s.append("align_var_def_colon_gap = {} # unsigned number".format(self.align_var_def_colon_gap.value()))
        s.append(wrap(self.tr("Whether to align any attribute after the variable name.")+' '+self.tr("\n")))
        s.append("align_var_def_attribute = {} # true/false".format(self.align_var_def_attribute.currentText()))
        s.append(wrap(self.tr("Whether to align inline struct/enum/union variable definitions.")+' '+self.tr("\n")))
        s.append("align_var_def_inline = {} # true/false".format(self.align_var_def_inline.currentText()))
        s.append(wrap(self.tr("The span for aligning on '=' in assignments.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_assign_span = {} # unsigned number".format(self.align_assign_span.value()))
        s.append(wrap(self.tr("The span for aligning on '=' in function prototype modifier.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_assign_func_proto_span = {} # unsigned number".format(self.align_assign_func_proto_span.value()))
        s.append(wrap(self.tr("The threshold for aligning on '=' in assignments.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n")))
        s.append("align_assign_thresh = {} # number".format(self.align_assign_thresh.value()))
        s.append(wrap(self.tr("How to apply align_assign_span to function declaration \"assignments\", i.e. 'virtual void foo() = 0' or '~foo() = {default|delete}'.")+' '+self.tr("\n")+' '+self.tr("0: Align with other assignments (default) 1: Align with each other, ignoring regular assignments 2: Don't align")+' '+self.tr("\n")))
        s.append("align_assign_decl_func = {} # unsigned number".format(self.align_assign_decl_func.value()))
        s.append(wrap(self.tr("The span for aligning on '=' in enums.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_enum_equ_span = {} # unsigned number".format(self.align_enum_equ_span.value()))
        s.append(wrap(self.tr("The threshold for aligning on '=' in enums.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: no limit (default).")+' '+self.tr("\n")))
        s.append("align_enum_equ_thresh = {} # number".format(self.align_enum_equ_thresh.value()))
        s.append(wrap(self.tr("The span for aligning class member definitions.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_var_class_span = {} # unsigned number".format(self.align_var_class_span.value()))
        s.append(wrap(self.tr("The threshold for aligning class member definitions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n")))
        s.append("align_var_class_thresh = {} # number".format(self.align_var_class_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning class member definitions.")+' '+self.tr("\n")))
        s.append("align_var_class_gap = {} # unsigned number".format(self.align_var_class_gap.value()))
        s.append(wrap(self.tr("The span for aligning struct/union member definitions.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_var_struct_span = {} # unsigned number".format(self.align_var_struct_span.value()))
        s.append(wrap(self.tr("The threshold for aligning struct/union member definitions.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n")))
        s.append("align_var_struct_thresh = {} # number".format(self.align_var_struct_thresh.value()))
        s.append(wrap(self.tr("The gap for aligning struct/union member definitions.")+' '+self.tr("\n")))
        s.append("align_var_struct_gap = {} # unsigned number".format(self.align_var_struct_gap.value()))
        s.append(wrap(self.tr("The span for aligning struct initializer values.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_struct_init_span = {} # unsigned number".format(self.align_struct_init_span.value()))
        s.append(wrap(self.tr("The span for aligning single-line typedefs.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_typedef_span = {} # unsigned number".format(self.align_typedef_span.value()))
        s.append(wrap(self.tr("The minimum space between the type and the synonym of a typedef.")+' '+self.tr("\n")))
        s.append("align_typedef_gap = {} # unsigned number".format(self.align_typedef_gap.value()))
        s.append(wrap(self.tr("How to align typedef'd functions with other typedefs.")+' '+self.tr("\n")+' '+self.tr("0: Don't mix them at all (default) 1: Align the open parenthesis with the types 2: Align the function type name with the other type names")+' '+self.tr("\n")))
        s.append("align_typedef_func = {} # unsigned number".format(self.align_typedef_func.value()))
        s.append(wrap(self.tr("How to consider (or treat) the '*' in the alignment of typedefs.")+' '+self.tr("\n")+' '+self.tr("0: Part of the typedef type, 'typedef int * pint;' (default) 1: Part of type name:        'typedef int   *pint;' 2: Dangling:                 'typedef int  *pint;' Dangling: the '*' will not be taken into account when aligning.")+' '+self.tr("\n")))
        s.append("align_typedef_star_style = {} # unsigned number".format(self.align_typedef_star_style.value()))
        s.append(wrap(self.tr("How to consider (or treat) the '&' in the alignment of typedefs.")+' '+self.tr("\n")+' '+self.tr("0: Part of the typedef type, 'typedef int & intref;' (default) 1: Part of type name:        'typedef int   &intref;' 2: Dangling:                 'typedef int  &intref;' Dangling: the '&' will not be taken into account when aligning.")+' '+self.tr("\n")))
        s.append("align_typedef_amp_style = {} # unsigned number".format(self.align_typedef_amp_style.value()))
        s.append(wrap(self.tr("The span for aligning comments that end lines.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_right_cmt_span = {} # unsigned number".format(self.align_right_cmt_span.value()))
        s.append(wrap(self.tr("Minimum number of columns between preceding text and a trailing comment in order for the comment to qualify for being aligned.")+' '+self.tr("Must be non-zero to have an effect.")+' '+self.tr("\n")))
        s.append("align_right_cmt_gap = {} # unsigned number".format(self.align_right_cmt_gap.value()))
        s.append(wrap(self.tr("If aligning comments, whether to mix with comments after '}' and #endif with less than three spaces before the comment.")+' '+self.tr("\n")))
        s.append("align_right_cmt_mix = {} # true/false".format(self.align_right_cmt_mix.currentText()))
        s.append(wrap(self.tr("Whether to only align trailing comments that are at the same brace level.")+' '+self.tr("\n")))
        s.append("align_right_cmt_same_level = {} # true/false".format(self.align_right_cmt_same_level.currentText()))
        s.append(wrap(self.tr("Minimum column at which to align trailing comments.")+' '+self.tr("Comments which are aligned beyond this column, but which can be aligned in a lesser column, may be \"pulled in\".")+' '+self.tr("\n")+' '+self.tr("0: Ignore (default).")+' '+self.tr("\n")))
        s.append("align_right_cmt_at_col = {} # unsigned number".format(self.align_right_cmt_at_col.value()))
        s.append(wrap(self.tr("The span for aligning function prototypes.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_func_proto_span = {} # unsigned number".format(self.align_func_proto_span.value()))
        s.append(wrap(self.tr("The threshold for aligning function prototypes.")+' '+self.tr("Use a negative number for absolute thresholds.")+' '+self.tr("\n")+' '+self.tr("0: No limit (default).")+' '+self.tr("\n")))
        s.append("align_func_proto_thresh = {} # number".format(self.align_func_proto_thresh.value()))
        s.append(wrap(self.tr("Minimum gap between the return type and the function name.")+' '+self.tr("\n")))
        s.append("align_func_proto_gap = {} # unsigned number".format(self.align_func_proto_gap.value()))
        s.append(wrap(self.tr("Whether to align function prototypes on the 'operator' keyword instead of what follows.")+' '+self.tr("\n")))
        s.append("align_on_operator = {} # true/false".format(self.align_on_operator.currentText()))
        s.append(wrap(self.tr("Whether to mix aligning prototype and variable declarations.")+' '+self.tr("If true, align_var_def_XXX options are used instead of align_func_proto_XXX options.")+' '+self.tr("\n")))
        s.append("align_mix_var_proto = {} # true/false".format(self.align_mix_var_proto.currentText()))
        s.append(wrap(self.tr("Whether to align single-line functions with function prototypes.")+' '+self.tr("Uses align_func_proto_span.")+' '+self.tr("\n")))
        s.append("align_single_line_func = {} # true/false".format(self.align_single_line_func.currentText()))
        s.append(wrap(self.tr("Whether to align the open brace of single-line functions.")+' '+self.tr("Requires align_single_line_func=true.")+' '+self.tr("Uses align_func_proto_span.")+' '+self.tr("\n")))
        s.append("align_single_line_brace = {} # true/false".format(self.align_single_line_brace.currentText()))
        s.append(wrap(self.tr("Gap for align_single_line_brace.")+' '+self.tr("\n")))
        s.append("align_single_line_brace_gap = {} # unsigned number".format(self.align_single_line_brace_gap.value()))
        s.append(wrap(self.tr("(OC) The span for aligning Objective-C message specifications.")+' '+self.tr("\n")+' '+self.tr("0: Don't align (default).")+' '+self.tr("\n")))
        s.append("align_oc_msg_spec_span = {} # unsigned number".format(self.align_oc_msg_spec_span.value()))
        s.append(wrap(self.tr("Whether to align macros wrapped with a backslash and a newline.")+' '+self.tr("This will not work right if the macro contains a multi-line comment.")+' '+self.tr("\n")))
        s.append("align_nl_cont = {} # true/false".format(self.align_nl_cont.currentText()))
        s.append(wrap(self.tr("Whether to align macro functions and variables together.")+' '+self.tr("\n")))
        s.append("align_pp_define_together = {} # true/false".format(self.align_pp_define_together.currentText()))
        s.append(wrap(self.tr("The span for aligning on '#define' bodies.")+' '+self.tr("\n")+' '+self.tr("=0: Don't align (default) >0: Number of lines (including comments) between blocks")+' '+self.tr("\n")))
        s.append("align_pp_define_span = {} # unsigned number".format(self.align_pp_define_span.value()))
        s.append(wrap(self.tr("The minimum space between label and value of a preprocessor define.")+' '+self.tr("\n")))
        s.append("align_pp_define_gap = {} # unsigned number".format(self.align_pp_define_gap.value()))
        s.append(wrap(self.tr("Whether to align lines that start with '<<' with previous '<<'.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("align_left_shift = {} # true/false".format(self.align_left_shift.currentText()))
        s.append(wrap(self.tr("Whether to align text after 'asm volatile ()' colons.")+' '+self.tr("\n")))
        s.append("align_asm_colon = {} # true/false".format(self.align_asm_colon.currentText()))
        s.append(wrap(self.tr("(OC) Span for aligning parameters in an Objective-C message call on the ':'.")+' '+self.tr("\n")+' '+self.tr("0: Don't align.")+' '+self.tr("\n")))
        s.append("align_oc_msg_colon_span = {} # unsigned number".format(self.align_oc_msg_colon_span.value()))
        s.append(wrap(self.tr("(OC) Whether to always align with the first parameter, even if it is too short.")+' '+self.tr("\n")))
        s.append("align_oc_msg_colon_first = {} # true/false".format(self.align_oc_msg_colon_first.currentText()))
        s.append(wrap(self.tr("(OC) Whether to align parameters in an Objective-C '+' or '-' declaration on the ':'.")+' '+self.tr("\n")))
        s.append("align_oc_decl_colon = {} # true/false".format(self.align_oc_decl_colon.currentText()))
        s.append(wrap(self.tr("(OC) Whether to not align parameters in an Objectve-C message call if first colon is not on next line of the message call (the same way Xcode does aligment)")+' '+self.tr("\n")))
        s.append("align_oc_msg_colon_xcode_like = {} # true/false".format(self.align_oc_msg_colon_xcode_like.currentText()))
        s.append(wrap(self.tr("\nComment modification options\n")))
        s.append(wrap(self.tr("Try to wrap comments at N columns.")+' '+self.tr("\n")))
        s.append("cmt_width = {} # unsigned number".format(self.cmt_width.value()))
        s.append(wrap(self.tr("How to reflow comments.")+' '+self.tr("\n")+' '+self.tr("0: No reflowing (apart from the line wrapping due to cmt_width) (default) 1: No touching at all 2: Full reflow")+' '+self.tr("\n")))
        s.append("cmt_reflow_mode = {} # unsigned number".format(self.cmt_reflow_mode.value()))
        s.append(wrap(self.tr("Whether to convert all tabs to spaces in comments.")+' '+self.tr("If false, tabs in comments are left alone, unless used for indenting.")+' '+self.tr("\n")))
        s.append("cmt_convert_tab_to_spaces = {} # true/false".format(self.cmt_convert_tab_to_spaces.currentText()))
        s.append(wrap(self.tr("Whether to apply changes to multi-line comments, including cmt_width, keyword substitution and leading chars.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("cmt_indent_multi = {} # true/false".format(self.cmt_indent_multi.currentText()))
        s.append(wrap(self.tr("Whether to group c-comments that look like they are in a block.")+' '+self.tr("\n")))
        s.append("cmt_c_group = {} # true/false".format(self.cmt_c_group.currentText()))
        s.append(wrap(self.tr("Whether to put an empty '/*' on the first line of the combined c-comment.")+' '+self.tr("\n")))
        s.append("cmt_c_nl_start = {} # true/false".format(self.cmt_c_nl_start.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before the closing '*/' of the combined c-comment.")+' '+self.tr("\n")))
        s.append("cmt_c_nl_end = {} # true/false".format(self.cmt_c_nl_end.currentText()))
        s.append(wrap(self.tr("Whether to change cpp-comments into c-comments.")+' '+self.tr("\n")))
        s.append("cmt_cpp_to_c = {} # true/false".format(self.cmt_cpp_to_c.currentText()))
        s.append(wrap(self.tr("Whether to group cpp-comments that look like they are in a block.")+' '+self.tr("Only meaningful if cmt_cpp_to_c=true.")+' '+self.tr("\n")))
        s.append("cmt_cpp_group = {} # true/false".format(self.cmt_cpp_group.currentText()))
        s.append(wrap(self.tr("Whether to put an empty '/*' on the first line of the combined cpp-comment when converting to a c-comment.")+' '+self.tr("\n")+' '+self.tr("Requires cmt_cpp_to_c=true and cmt_cpp_group=true.")+' '+self.tr("\n")))
        s.append("cmt_cpp_nl_start = {} # true/false".format(self.cmt_cpp_nl_start.currentText()))
        s.append(wrap(self.tr("Whether to add a newline before the closing '*/' of the combined cpp-comment when converting to a c-comment.")+' '+self.tr("\n")+' '+self.tr("Requires cmt_cpp_to_c=true and cmt_cpp_group=true.")+' '+self.tr("\n")))
        s.append("cmt_cpp_nl_end = {} # true/false".format(self.cmt_cpp_nl_end.currentText()))
        s.append(wrap(self.tr("Whether to put a star on subsequent comment lines.")+' '+self.tr("\n")))
        s.append("cmt_star_cont = {} # true/false".format(self.cmt_star_cont.currentText()))
        s.append(wrap(self.tr("The number of spaces to insert at the start of subsequent comment lines.")+' '+self.tr("\n")))
        s.append("cmt_sp_before_star_cont = {} # unsigned number".format(self.cmt_sp_before_star_cont.value()))
        s.append(wrap(self.tr("The number of spaces to insert after the star on subsequent comment lines.")+' '+self.tr("\n")))
        s.append("cmt_sp_after_star_cont = {} # unsigned number".format(self.cmt_sp_after_star_cont.value()))
        s.append(wrap(self.tr("For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("cmt_multi_check_last = {} # true/false".format(self.cmt_multi_check_last.currentText()))
        s.append(wrap(self.tr("For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length AND if the length is bigger as the first_len minimum.")+' '+self.tr("\n")+' '+self.tr("Default: 4")+' '+self.tr("\n")))
        s.append("cmt_multi_first_len_minimum = {} # unsigned number".format(self.cmt_multi_first_len_minimum.value()))
        s.append(wrap(self.tr("Path to a file that contains text to insert at the beginning of a file if the file doesn't start with a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(filename)', that will be replaced with the current file's name.")+' '+self.tr("\n")))
        s.append("cmt_insert_file_header = \"{}\" # string".format(self.cmt_insert_file_header.text()))
        s.append(wrap(self.tr("Path to a file that contains text to insert at the end of a file if the file doesn't end with a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(filename)', that will be replaced with the current file's name.")+' '+self.tr("\n")))
        s.append("cmt_insert_file_footer = \"{}\" # string".format(self.cmt_insert_file_footer.text()))
        s.append(wrap(self.tr("Path to a file that contains text to insert before a function definition if the function isn't preceded by a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(function)', '$(javaparam)' or '$(fclass)', these will be replaced with, respectively, the name of the function, the javadoc '@param' and '@return' stuff, or the name of the class to which the member function belongs.")+' '+self.tr("\n")))
        s.append("cmt_insert_func_header = \"{}\" # string".format(self.cmt_insert_func_header.text()))
        s.append(wrap(self.tr("Path to a file that contains text to insert before a class if the class isn't preceded by a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(class)', that will be replaced with the class name.")+' '+self.tr("\n")))
        s.append("cmt_insert_class_header = \"{}\" # string".format(self.cmt_insert_class_header.text()))
        s.append(wrap(self.tr("Path to a file that contains text to insert before an Objective-C message specification, if the method isn't preceded by a C/C++ comment.")+' '+self.tr("If the inserted text contains '$(message)' or '$(javaparam)', these will be replaced with, respectively, the name of the function, or the javadoc '@param' and '@return' stuff.")+' '+self.tr("\n")))
        s.append("cmt_insert_oc_msg_header = \"{}\" # string".format(self.cmt_insert_oc_msg_header.text()))
        s.append(wrap(self.tr("Whether a comment should be inserted if a preprocessor is encountered when stepping backwards from a function name.")+' '+self.tr("\n")+' '+self.tr("Applies to cmt_insert_oc_msg_header, cmt_insert_func_header and cmt_insert_class_header.")+' '+self.tr("\n")))
        s.append("cmt_insert_before_preproc = {} # true/false".format(self.cmt_insert_before_preproc.currentText()))
        s.append(wrap(self.tr("Whether a comment should be inserted if a function is declared inline to a class definition.")+' '+self.tr("\n")+' '+self.tr("Applies to cmt_insert_func_header.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("cmt_insert_before_inlines = {} # true/false".format(self.cmt_insert_before_inlines.currentText()))
        s.append(wrap(self.tr("Whether a comment should be inserted if the function is a class constructor or destructor.")+' '+self.tr("\n")+' '+self.tr("Applies to cmt_insert_func_header.")+' '+self.tr("\n")))
        s.append("cmt_insert_before_ctor_dtor = {} # true/false".format(self.cmt_insert_before_ctor_dtor.currentText()))
        s.append(wrap(self.tr("\nCode modifying options (non-whitespace)\n")))
        s.append(wrap(self.tr("Add or remove braces on a single-line 'do' statement.")+' '+self.tr("\n")))
        s.append("mod_full_brace_do = {} # ignore/add/remove/force".format(self.mod_full_brace_do.currentText()))
        s.append(wrap(self.tr("Add or remove braces on a single-line 'for' statement.")+' '+self.tr("\n")))
        s.append("mod_full_brace_for = {} # ignore/add/remove/force".format(self.mod_full_brace_for.currentText()))
        s.append(wrap(self.tr("(Pawn) Add or remove braces on a single-line function definition.")+' '+self.tr("\n")))
        s.append("mod_full_brace_function = {} # ignore/add/remove/force".format(self.mod_full_brace_function.currentText()))
        s.append(wrap(self.tr("Add or remove braces on a single-line 'if' statement.")+' '+self.tr("Braces will not be removed if the braced statement contains an 'else'.")+' '+self.tr("\n")))
        s.append("mod_full_brace_if = {} # ignore/add/remove/force".format(self.mod_full_brace_if.currentText()))
        s.append(wrap(self.tr("Whether to enforce that all blocks of an 'if'/'else if'/'else' chain either have, or do not have, braces.")+' '+self.tr("If true, braces will be added if any block needs braces, and will only be removed if they can be removed from all blocks.")+' '+self.tr("\n")+' '+self.tr("Overrides mod_full_brace_if.")+' '+self.tr("\n")))
        s.append("mod_full_brace_if_chain = {} # true/false".format(self.mod_full_brace_if_chain.currentText()))
        s.append(wrap(self.tr("Whether to add braces to all blocks of an 'if'/'else if'/'else' chain.")+' '+self.tr("If true, mod_full_brace_if_chain will only remove braces from an 'if' that does not have an 'else if' or 'else'.")+' '+self.tr("\n")))
        s.append("mod_full_brace_if_chain_only = {} # true/false".format(self.mod_full_brace_if_chain_only.currentText()))
        s.append(wrap(self.tr("Add or remove braces on single-line 'while' statement.")+' '+self.tr("\n")))
        s.append("mod_full_brace_while = {} # ignore/add/remove/force".format(self.mod_full_brace_while.currentText()))
        s.append(wrap(self.tr("Add or remove braces on single-line 'using ()' statement.")+' '+self.tr("\n")))
        s.append("mod_full_brace_using = {} # ignore/add/remove/force".format(self.mod_full_brace_using.currentText()))
        s.append(wrap(self.tr("Don't remove braces around statements that span N newlines")+' '+self.tr("\n")))
        s.append("mod_full_brace_nl = {} # unsigned number".format(self.mod_full_brace_nl.value()))
        s.append(wrap(self.tr("Whether to prevent removal of braces from 'if'/'for'/'while'/etc. blocks which span multiple lines.")+' '+self.tr("\n")+' '+self.tr("Affects:   mod_full_brace_for   mod_full_brace_if   mod_full_brace_if_chain   mod_full_brace_if_chain_only   mod_full_brace_while   mod_full_brace_using")+' '+self.tr("\n")+' '+self.tr("Does not affect:   mod_full_brace_do   mod_full_brace_function")+' '+self.tr("\n")))
        s.append("mod_full_brace_nl_block_rem_mlcond = {} # true/false".format(self.mod_full_brace_nl_block_rem_mlcond.currentText()))
        s.append(wrap(self.tr("Add or remove unnecessary parenthesis on 'return' statement.")+' '+self.tr("\n")))
        s.append("mod_paren_on_return = {} # ignore/add/remove/force".format(self.mod_paren_on_return.currentText()))
        s.append(wrap(self.tr("(Pawn) Whether to change optional semicolons to real semicolons.")+' '+self.tr("\n")))
        s.append("mod_pawn_semicolon = {} # true/false".format(self.mod_pawn_semicolon.currentText()))
        s.append(wrap(self.tr("Whether to fully parenthesize Boolean expressions in 'while' and 'if' statement, as in 'if (a && b > c)' => 'if (a && (b > c))'.")+' '+self.tr("\n")))
        s.append("mod_full_paren_if_bool = {} # true/false".format(self.mod_full_paren_if_bool.currentText()))
        s.append(wrap(self.tr("Whether to remove superfluous semicolons.")+' '+self.tr("\n")))
        s.append("mod_remove_extra_semicolon = {} # true/false".format(self.mod_remove_extra_semicolon.currentText()))
        s.append(wrap(self.tr("If a function body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.")+' '+self.tr("\n")))
        s.append("mod_add_long_function_closebrace_comment = {} # unsigned number".format(self.mod_add_long_function_closebrace_comment.value()))
        s.append(wrap(self.tr("If a namespace body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.")+' '+self.tr("\n")))
        s.append("mod_add_long_namespace_closebrace_comment = {} # unsigned number".format(self.mod_add_long_namespace_closebrace_comment.value()))
        s.append(wrap(self.tr("If a class body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.")+' '+self.tr("\n")))
        s.append("mod_add_long_class_closebrace_comment = {} # unsigned number".format(self.mod_add_long_class_closebrace_comment.value()))
        s.append(wrap(self.tr("If a switch body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.")+' '+self.tr("\n")))
        s.append("mod_add_long_switch_closebrace_comment = {} # unsigned number".format(self.mod_add_long_switch_closebrace_comment.value()))
        s.append(wrap(self.tr("If an #ifdef body exceeds the specified number of newlines and doesn't have a comment after the #endif, a comment will be added.")+' '+self.tr("\n")))
        s.append("mod_add_long_ifdef_endif_comment = {} # unsigned number".format(self.mod_add_long_ifdef_endif_comment.value()))
        s.append(wrap(self.tr("If an #ifdef or #else body exceeds the specified number of newlines and doesn't have a comment after the #else, a comment will be added.")+' '+self.tr("\n")))
        s.append("mod_add_long_ifdef_else_comment = {} # unsigned number".format(self.mod_add_long_ifdef_else_comment.value()))
        s.append(wrap(self.tr("Whether to take care of the case by the mod_sort_xx options.")+' '+self.tr("\n")))
        s.append("mod_sort_case_sensitive = {} # true/false".format(self.mod_sort_case_sensitive.currentText()))
        s.append(wrap(self.tr("Whether to sort consecutive single-line 'import' statements.")+' '+self.tr("\n")))
        s.append("mod_sort_import = {} # true/false".format(self.mod_sort_import.currentText()))
        s.append(wrap(self.tr("(C#) Whether to sort consecutive single-line 'using' statements.")+' '+self.tr("\n")))
        s.append("mod_sort_using = {} # true/false".format(self.mod_sort_using.currentText()))
        s.append(wrap(self.tr("Whether to sort consecutive single-line '#include' statements (C/C++) and '#import' statements (Objective-C).")+' '+self.tr("Be aware that this has the potential to break your code if your includes/imports have ordering dependencies.")+' '+self.tr("\n")))
        s.append("mod_sort_include = {} # true/false".format(self.mod_sort_include.currentText()))
        s.append(wrap(self.tr("Whether to prioritize '#include' and '#import' statements that contain filename without extension when sorting is enabled.")+' '+self.tr("\n")))
        s.append("mod_sort_incl_import_prioritize_filename = {} # true/false".format(self.mod_sort_incl_import_prioritize_filename.currentText()))
        s.append(wrap(self.tr("Whether to prioritize '#include' and '#import' statements that does not contain extensions when sorting is enabled.")+' '+self.tr("\n")))
        s.append("mod_sort_incl_import_prioritize_extensionless = {} # true/false".format(self.mod_sort_incl_import_prioritize_extensionless.currentText()))
        s.append(wrap(self.tr("Whether to prioritize '#include' and '#import' statements that contain angle over quotes when sorting is enabled.")+' '+self.tr("\n")))
        s.append("mod_sort_incl_import_prioritize_angle_over_quotes = {} # true/false".format(self.mod_sort_incl_import_prioritize_angle_over_quotes.currentText()))
        s.append(wrap(self.tr("Whether to ignore file extension in '#include' and '#import' statements for sorting comparison.")+' '+self.tr("\n")))
        s.append("mod_sort_incl_import_ignore_extension = {} # true/false".format(self.mod_sort_incl_import_ignore_extension.currentText()))
        s.append(wrap(self.tr("Whether to group '#include' and '#import' statements when sorting is enabled.")+' '+self.tr("\n")))
        s.append("mod_sort_incl_import_grouping_enabled = {} # true/false".format(self.mod_sort_incl_import_grouping_enabled.currentText()))
        s.append(wrap(self.tr("Whether to move a 'break' that appears after a fully braced 'case' before the close brace, as in 'case X: { ... } break;' => 'case X: { ... break; }'.")+' '+self.tr("\n")))
        s.append("mod_move_case_break = {} # true/false".format(self.mod_move_case_break.currentText()))
        s.append(wrap(self.tr("Add or remove braces around a fully braced case statement.")+' '+self.tr("Will only remove braces if there are no variable declarations in the block.")+' '+self.tr("\n")))
        s.append("mod_case_brace = {} # ignore/add/remove/force".format(self.mod_case_brace.currentText()))
        s.append(wrap(self.tr("Whether to remove a void 'return;' that appears as the last statement in a function.")+' '+self.tr("\n")))
        s.append("mod_remove_empty_return = {} # true/false".format(self.mod_remove_empty_return.currentText()))
        s.append(wrap(self.tr("Add or remove the comma after the last value of an enumeration.")+' '+self.tr("\n")))
        s.append("mod_enum_last_comma = {} # ignore/add/remove/force".format(self.mod_enum_last_comma.currentText()))
        s.append(wrap(self.tr("(OC) Whether to organize the properties.")+' '+self.tr("If true, properties will be rearranged according to the mod_sort_oc_property_*_weight factors.")+' '+self.tr("\n")))
        s.append("mod_sort_oc_properties = {} # true/false".format(self.mod_sort_oc_properties.currentText()))
        s.append(wrap(self.tr("(OC) Weight of a class property modifier.")+' '+self.tr("\n")))
        s.append("mod_sort_oc_property_class_weight = {} # number".format(self.mod_sort_oc_property_class_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of 'atomic' and 'nonatomic'.")+' '+self.tr("\n")))
        s.append("mod_sort_oc_property_thread_safe_weight = {} # number".format(self.mod_sort_oc_property_thread_safe_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of 'readwrite' when organizing properties.")+' '+self.tr("\n")))
        s.append("mod_sort_oc_property_readwrite_weight = {} # number".format(self.mod_sort_oc_property_readwrite_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of a reference type specifier ('retain', 'copy', 'assign', 'weak', 'strong') when organizing properties.")+' '+self.tr("\n")))
        s.append("mod_sort_oc_property_reference_weight = {} # number".format(self.mod_sort_oc_property_reference_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of getter type ('getter=') when organizing properties.")+' '+self.tr("\n")))
        s.append("mod_sort_oc_property_getter_weight = {} # number".format(self.mod_sort_oc_property_getter_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of setter type ('setter=') when organizing properties.")+' '+self.tr("\n")))
        s.append("mod_sort_oc_property_setter_weight = {} # number".format(self.mod_sort_oc_property_setter_weight.value()))
        s.append(wrap(self.tr("(OC) Weight of nullability type ('nullable', 'nonnull', 'null_unspecified', 'null_resettable') when organizing properties.")+' '+self.tr("\n")))
        s.append("mod_sort_oc_property_nullability_weight = {} # number".format(self.mod_sort_oc_property_nullability_weight.value()))
        s.append(wrap(self.tr("\nPreprocessor options\n")))
        s.append(wrap(self.tr("Add or remove indentation of preprocessor directives inside #if blocks at brace level 0 (file-level).")+' '+self.tr("\n")))
        s.append("pp_indent = {} # ignore/add/remove/force".format(self.pp_indent.currentText()))
        s.append(wrap(self.tr("Whether to indent #if/#else/#endif at the brace level.")+' '+self.tr("If false, these are indented from column 1.")+' '+self.tr("\n")))
        s.append("pp_indent_at_level = {} # true/false".format(self.pp_indent_at_level.currentText()))
        s.append(wrap(self.tr("Specifies the number of columns to indent preprocessors per level at brace level 0 (file-level).")+' '+self.tr("If pp_indent_at_level=false, also specifies the number of columns to indent preprocessors per level at brace level > 0 (function-level).")+' '+self.tr("\n")+' '+self.tr("Default: 1")+' '+self.tr("\n")))
        s.append("pp_indent_count = {} # unsigned number".format(self.pp_indent_count.value()))
        s.append(wrap(self.tr("Add or remove space after # based on pp_level of #if blocks.")+' '+self.tr("\n")))
        s.append("pp_space = {} # ignore/add/remove/force".format(self.pp_space.currentText()))
        s.append(wrap(self.tr("Sets the number of spaces per level added with pp_space.")+' '+self.tr("\n")))
        s.append("pp_space_count = {} # unsigned number".format(self.pp_space_count.value()))
        s.append(wrap(self.tr("The indent for '#region' and '#endregion' in C# and '#pragma region' in C/C++.")+' '+self.tr("Negative values decrease indent down to the first column.")+' '+self.tr("\n")))
        s.append("pp_indent_region = {} # number".format(self.pp_indent_region.value()))
        s.append(wrap(self.tr("Whether to indent the code between #region and #endregion.")+' '+self.tr("\n")))
        s.append("pp_region_indent_code = {} # true/false".format(self.pp_region_indent_code.currentText()))
        s.append(wrap(self.tr("If pp_indent_at_level=true, sets the indent for #if, #else and #endif when not at file-level.")+' '+self.tr("Negative values decrease indent down to the first column.")+' '+self.tr("\n")+' '+self.tr("=0: Indent preprocessors using output_tab_size >0: Column at which all preprocessors will be indented")+' '+self.tr("\n")))
        s.append("pp_indent_if = {} # number".format(self.pp_indent_if.value()))
        s.append(wrap(self.tr("Whether to indent the code between #if, #else and #endif.")+' '+self.tr("\n")))
        s.append("pp_if_indent_code = {} # true/false".format(self.pp_if_indent_code.currentText()))
        s.append(wrap(self.tr("Whether to indent '#define' at the brace level.")+' '+self.tr("If false, these are indented from column 1.")+' '+self.tr("\n")))
        s.append("pp_define_at_level = {} # true/false".format(self.pp_define_at_level.currentText()))
        s.append(wrap(self.tr("Whether to ignore the '#define' body while formatting.")+' '+self.tr("\n")))
        s.append("pp_ignore_define_body = {} # true/false".format(self.pp_ignore_define_body.currentText()))
        s.append(wrap(self.tr("Whether to indent case statements between #if, #else, and #endif.")+' '+self.tr("Only applies to the indent of the preprocesser that the case statements directly inside of.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("pp_indent_case = {} # true/false".format(self.pp_indent_case.currentText()))
        s.append(wrap(self.tr("Whether to indent whole function definitions between #if, #else, and #endif.")+' '+self.tr("Only applies to the indent of the preprocesser that the function definition is directly inside of.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("pp_indent_func_def = {} # true/false".format(self.pp_indent_func_def.currentText()))
        s.append(wrap(self.tr("Whether to indent extern C blocks between #if, #else, and #endif.")+' '+self.tr("Only applies to the indent of the preprocesser that the extern block is directly inside of.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("pp_indent_extern = {} # true/false".format(self.pp_indent_extern.currentText()))
        s.append(wrap(self.tr("Whether to indent braces directly inside #if, #else, and #endif.")+' '+self.tr("Only applies to the indent of the preprocesser that the braces are directly inside of.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("pp_indent_brace = {} # true/false".format(self.pp_indent_brace.currentText()))
        s.append(wrap(self.tr("\nSort includes options\n")))
        s.append(wrap(self.tr("The regex for include category with priority 0.")+' '+self.tr("\n")))
        s.append("include_category_0 = \"{}\" # string".format(self.include_category_0.text()))
        s.append(wrap(self.tr("The regex for include category with priority 1.")+' '+self.tr("\n")))
        s.append("include_category_1 = \"{}\" # string".format(self.include_category_1.text()))
        s.append(wrap(self.tr("The regex for include category with priority 2.")+' '+self.tr("\n")))
        s.append("include_category_2 = \"{}\" # string".format(self.include_category_2.text()))
        s.append(wrap(self.tr("\nUse or Do not Use options\n")))
        s.append(wrap(self.tr("true:  indent_func_call_param will be used (default) false: indent_func_call_param will NOT be used")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("use_indent_func_call_param = {} # true/false".format(self.use_indent_func_call_param.currentText()))
        s.append(wrap(self.tr("The value of the indentation for a continuation line is calculated differently if the statement is:")+' '+self.tr("\n- a declaration: your case with QString fileName ...")+' '+self.tr("\n- an assignment: your case with pSettings = new QSettings( ...")+' '+self.tr("\n")+' '+self.tr("At the second case the indentation value might be used twice:")+' '+self.tr("\n- at the assignment")+' '+self.tr("\n- at the function call (if present)")+' '+self.tr("\n")+' '+self.tr("To prevent the double use of the indentation value, use this option with the value 'true'.")+' '+self.tr("\n")+' '+self.tr("true:  indent_continue will be used only once false: indent_continue will be used every time (default)")+' '+self.tr("\n")))
        s.append("use_indent_continue_only_once = {} # true/false".format(self.use_indent_continue_only_once.currentText()))
        s.append(wrap(self.tr("The value might be used twice:")+' '+self.tr("\n- at the assignment")+' '+self.tr("\n- at the opening brace")+' '+self.tr("\n")+' '+self.tr("To prevent the double use of the indentation value, use this option with the value 'true'.")+' '+self.tr("\n")+' '+self.tr("true:  indentation will be used only once false: indentation will be used every time (default)")+' '+self.tr("\n")))
        s.append("indent_cpp_lambda_only_once = {} # true/false".format(self.indent_cpp_lambda_only_once.currentText()))
        s.append(wrap(self.tr("Whether sp_after_angle takes precedence over sp_inside_fparen.")+' '+self.tr("This was the historic behavior, but is probably not the desired behavior, so this is off by default.")+' '+self.tr("\n")))
        s.append("use_sp_after_angle_always = {} # true/false".format(self.use_sp_after_angle_always.currentText()))
        s.append(wrap(self.tr("Whether to apply special formatting for Qt SIGNAL/SLOT macros.")+' '+self.tr("Essentially, this tries to format these so that they match Qt's normalized form (i.e. the result of QMetaObject::normalizedSignature), which can slightly improve the performance of the QObject::connect call, rather than how they would otherwise be formatted.")+' '+self.tr("\n")+' '+self.tr("See options_for_QT.cpp for details.")+' '+self.tr("\n")+' '+self.tr("Default: true")+' '+self.tr("\n")))
        s.append("use_options_overriding_for_qt_macros = {} # true/false".format(self.use_options_overriding_for_qt_macros.currentText()))
        s.append(wrap(self.tr("If true: the form feed character is removed from the list of whitespace characters.")+' '+self.tr("See https://en.cppreference.com/w/cpp/string/byte/isspace")+' '+self.tr("\n")))
        s.append("use_form_feed_no_more_as_whitespace_character = {} # true/false".format(self.use_form_feed_no_more_as_whitespace_character.currentText()))
        s.append(wrap(self.tr("\nWarn levels - 1: error, 2: warning (default), 3: note\n")))
        s.append(wrap(self.tr("(C#) Warning is given if doing tab-to-\t replacement and we have found one in a C# verbatim string literal.")+' '+self.tr("\n")+' '+self.tr("Default: 2")+' '+self.tr("\n")))
        s.append("warn_level_tabs_found_in_verbatim_string_literals = {} # unsigned number".format(self.warn_level_tabs_found_in_verbatim_string_literals.value()))
        s.append(wrap(self.tr("Limit the number of loops.")+' '+self.tr("Used by uncrustify.cpp to exit from infinite loop. 0: no limit.")+' '+self.tr("\n")))
        s.append("debug_max_number_of_loops = {} # number".format(self.debug_max_number_of_loops.value()))
        s.append(wrap(self.tr("Set the number of the line to protocol; Used in the function prot_the_line if the 2. parameter is zero. 0: nothing protocol.")+' '+self.tr("\n")))
        s.append("debug_line_number_to_protocol = {} # number".format(self.debug_line_number_to_protocol.value()))
        return '\n'.join(s)
    def load(self, path):
        regexp = r"^([^#\s].+)\s*=\s*(.*?)\n"
        f = open('conf.cfg', encoding = "utf-8")
        d = f.read()
        f.close()
        matches = re.finditer(regexp, d, re.MULTILINE | re.IGNORECASE)
        params = {}
        for matchNum, match in enumerate(matches, start = 1):
            param = match.group(1).strip()
            val = match.group(2)
            if val[0] == '"':
                val = val[1:val.rfind('"')]
            elif val[0] == "'":
                val = val[1:val.rfind("'")]
            else:
                if val.rfind("#") > 0:
                    val = val[:val.rfind("#")]
                val = val.strip()
            params[param] = val
        pass
        if "newlines" in params: self.newlines.setCurrentText(params["newlines"])
        if "input_tab_size" in params: self.input_tab_size.setValue(int(params["input_tab_size"]))
        if "output_tab_size" in params: self.output_tab_size.setValue(int(params["output_tab_size"]))
        if "string_escape_char" in params: self.string_escape_char.setValue(int(params["string_escape_char"]))
        if "string_escape_char2" in params: self.string_escape_char2.setValue(int(params["string_escape_char2"]))
        if "string_replace_tab_chars" in params: self.string_replace_tab_chars.setCurrentText(params["string_replace_tab_chars"])
        if "tok_split_gte" in params: self.tok_split_gte.setCurrentText(params["tok_split_gte"])
        if "disable_processing_nl_cont" in params: self.disable_processing_nl_cont.setCurrentText(params["disable_processing_nl_cont"])
        if "disable_processing_cmt" in params: self.disable_processing_cmt.setText(params["disable_processing_cmt"])
        if "enable_processing_cmt" in params: self.enable_processing_cmt.setText(params["enable_processing_cmt"])
        if "enable_digraphs" in params: self.enable_digraphs.setCurrentText(params["enable_digraphs"])
        if "utf8_bom" in params: self.utf8_bom.setCurrentText(params["utf8_bom"])
        if "utf8_byte" in params: self.utf8_byte.setCurrentText(params["utf8_byte"])
        if "utf8_force" in params: self.utf8_force.setCurrentText(params["utf8_force"])
        if "sp_do_brace_open" in params: self.sp_do_brace_open.setCurrentText(params["sp_do_brace_open"])
        if "sp_brace_close_while" in params: self.sp_brace_close_while.setCurrentText(params["sp_brace_close_while"])
        if "sp_while_paren_open" in params: self.sp_while_paren_open.setCurrentText(params["sp_while_paren_open"])
        if "sp_arith" in params: self.sp_arith.setCurrentText(params["sp_arith"])
        if "sp_arith_additive" in params: self.sp_arith_additive.setCurrentText(params["sp_arith_additive"])
        if "sp_assign" in params: self.sp_assign.setCurrentText(params["sp_assign"])
        if "sp_cpp_lambda_assign" in params: self.sp_cpp_lambda_assign.setCurrentText(params["sp_cpp_lambda_assign"])
        if "sp_cpp_lambda_square_paren" in params: self.sp_cpp_lambda_square_paren.setCurrentText(params["sp_cpp_lambda_square_paren"])
        if "sp_cpp_lambda_square_brace" in params: self.sp_cpp_lambda_square_brace.setCurrentText(params["sp_cpp_lambda_square_brace"])
        if "sp_cpp_lambda_paren_brace" in params: self.sp_cpp_lambda_paren_brace.setCurrentText(params["sp_cpp_lambda_paren_brace"])
        if "sp_cpp_lambda_fparen" in params: self.sp_cpp_lambda_fparen.setCurrentText(params["sp_cpp_lambda_fparen"])
        if "sp_assign_default" in params: self.sp_assign_default.setCurrentText(params["sp_assign_default"])
        if "sp_before_assign" in params: self.sp_before_assign.setCurrentText(params["sp_before_assign"])
        if "sp_after_assign" in params: self.sp_after_assign.setCurrentText(params["sp_after_assign"])
        if "sp_enum_paren" in params: self.sp_enum_paren.setCurrentText(params["sp_enum_paren"])
        if "sp_enum_assign" in params: self.sp_enum_assign.setCurrentText(params["sp_enum_assign"])
        if "sp_enum_before_assign" in params: self.sp_enum_before_assign.setCurrentText(params["sp_enum_before_assign"])
        if "sp_enum_after_assign" in params: self.sp_enum_after_assign.setCurrentText(params["sp_enum_after_assign"])
        if "sp_enum_colon" in params: self.sp_enum_colon.setCurrentText(params["sp_enum_colon"])
        if "sp_pp_concat" in params: self.sp_pp_concat.setCurrentText(params["sp_pp_concat"])
        if "sp_pp_stringify" in params: self.sp_pp_stringify.setCurrentText(params["sp_pp_stringify"])
        if "sp_before_pp_stringify" in params: self.sp_before_pp_stringify.setCurrentText(params["sp_before_pp_stringify"])
        if "sp_bool" in params: self.sp_bool.setCurrentText(params["sp_bool"])
        if "sp_compare" in params: self.sp_compare.setCurrentText(params["sp_compare"])
        if "sp_inside_paren" in params: self.sp_inside_paren.setCurrentText(params["sp_inside_paren"])
        if "sp_paren_paren" in params: self.sp_paren_paren.setCurrentText(params["sp_paren_paren"])
        if "sp_cparen_oparen" in params: self.sp_cparen_oparen.setCurrentText(params["sp_cparen_oparen"])
        if "sp_balance_nested_parens" in params: self.sp_balance_nested_parens.setCurrentText(params["sp_balance_nested_parens"])
        if "sp_paren_brace" in params: self.sp_paren_brace.setCurrentText(params["sp_paren_brace"])
        if "sp_brace_brace" in params: self.sp_brace_brace.setCurrentText(params["sp_brace_brace"])
        if "sp_before_ptr_star" in params: self.sp_before_ptr_star.setCurrentText(params["sp_before_ptr_star"])
        if "sp_before_unnamed_ptr_star" in params: self.sp_before_unnamed_ptr_star.setCurrentText(params["sp_before_unnamed_ptr_star"])
        if "sp_between_ptr_star" in params: self.sp_between_ptr_star.setCurrentText(params["sp_between_ptr_star"])
        if "sp_after_ptr_star" in params: self.sp_after_ptr_star.setCurrentText(params["sp_after_ptr_star"])
        if "sp_after_ptr_block_caret" in params: self.sp_after_ptr_block_caret.setCurrentText(params["sp_after_ptr_block_caret"])
        if "sp_after_ptr_star_qualifier" in params: self.sp_after_ptr_star_qualifier.setCurrentText(params["sp_after_ptr_star_qualifier"])
        if "sp_after_ptr_star_func" in params: self.sp_after_ptr_star_func.setCurrentText(params["sp_after_ptr_star_func"])
        if "sp_ptr_star_paren" in params: self.sp_ptr_star_paren.setCurrentText(params["sp_ptr_star_paren"])
        if "sp_before_ptr_star_func" in params: self.sp_before_ptr_star_func.setCurrentText(params["sp_before_ptr_star_func"])
        if "sp_before_byref" in params: self.sp_before_byref.setCurrentText(params["sp_before_byref"])
        if "sp_before_unnamed_byref" in params: self.sp_before_unnamed_byref.setCurrentText(params["sp_before_unnamed_byref"])
        if "sp_after_byref" in params: self.sp_after_byref.setCurrentText(params["sp_after_byref"])
        if "sp_after_byref_func" in params: self.sp_after_byref_func.setCurrentText(params["sp_after_byref_func"])
        if "sp_before_byref_func" in params: self.sp_before_byref_func.setCurrentText(params["sp_before_byref_func"])
        if "sp_after_type" in params: self.sp_after_type.setCurrentText(params["sp_after_type"])
        if "sp_after_decltype" in params: self.sp_after_decltype.setCurrentText(params["sp_after_decltype"])
        if "sp_before_template_paren" in params: self.sp_before_template_paren.setCurrentText(params["sp_before_template_paren"])
        if "sp_template_angle" in params: self.sp_template_angle.setCurrentText(params["sp_template_angle"])
        if "sp_before_angle" in params: self.sp_before_angle.setCurrentText(params["sp_before_angle"])
        if "sp_inside_angle" in params: self.sp_inside_angle.setCurrentText(params["sp_inside_angle"])
        if "sp_inside_angle_empty" in params: self.sp_inside_angle_empty.setCurrentText(params["sp_inside_angle_empty"])
        if "sp_angle_colon" in params: self.sp_angle_colon.setCurrentText(params["sp_angle_colon"])
        if "sp_after_angle" in params: self.sp_after_angle.setCurrentText(params["sp_after_angle"])
        if "sp_angle_paren" in params: self.sp_angle_paren.setCurrentText(params["sp_angle_paren"])
        if "sp_angle_paren_empty" in params: self.sp_angle_paren_empty.setCurrentText(params["sp_angle_paren_empty"])
        if "sp_angle_word" in params: self.sp_angle_word.setCurrentText(params["sp_angle_word"])
        if "sp_angle_shift" in params: self.sp_angle_shift.setCurrentText(params["sp_angle_shift"])
        if "sp_permit_cpp11_shift" in params: self.sp_permit_cpp11_shift.setCurrentText(params["sp_permit_cpp11_shift"])
        if "sp_before_sparen" in params: self.sp_before_sparen.setCurrentText(params["sp_before_sparen"])
        if "sp_inside_sparen" in params: self.sp_inside_sparen.setCurrentText(params["sp_inside_sparen"])
        if "sp_inside_sparen_open" in params: self.sp_inside_sparen_open.setCurrentText(params["sp_inside_sparen_open"])
        if "sp_inside_sparen_close" in params: self.sp_inside_sparen_close.setCurrentText(params["sp_inside_sparen_close"])
        if "sp_after_sparen" in params: self.sp_after_sparen.setCurrentText(params["sp_after_sparen"])
        if "sp_sparen_brace" in params: self.sp_sparen_brace.setCurrentText(params["sp_sparen_brace"])
        if "sp_invariant_paren" in params: self.sp_invariant_paren.setCurrentText(params["sp_invariant_paren"])
        if "sp_after_invariant_paren" in params: self.sp_after_invariant_paren.setCurrentText(params["sp_after_invariant_paren"])
        if "sp_special_semi" in params: self.sp_special_semi.setCurrentText(params["sp_special_semi"])
        if "sp_before_semi" in params: self.sp_before_semi.setCurrentText(params["sp_before_semi"])
        if "sp_before_semi_for" in params: self.sp_before_semi_for.setCurrentText(params["sp_before_semi_for"])
        if "sp_before_semi_for_empty" in params: self.sp_before_semi_for_empty.setCurrentText(params["sp_before_semi_for_empty"])
        if "sp_after_semi" in params: self.sp_after_semi.setCurrentText(params["sp_after_semi"])
        if "sp_after_semi_for" in params: self.sp_after_semi_for.setCurrentText(params["sp_after_semi_for"])
        if "sp_after_semi_for_empty" in params: self.sp_after_semi_for_empty.setCurrentText(params["sp_after_semi_for_empty"])
        if "sp_before_square" in params: self.sp_before_square.setCurrentText(params["sp_before_square"])
        if "sp_before_vardef_square" in params: self.sp_before_vardef_square.setCurrentText(params["sp_before_vardef_square"])
        if "sp_before_square_asm_block" in params: self.sp_before_square_asm_block.setCurrentText(params["sp_before_square_asm_block"])
        if "sp_before_squares" in params: self.sp_before_squares.setCurrentText(params["sp_before_squares"])
        if "sp_cpp_before_struct_binding" in params: self.sp_cpp_before_struct_binding.setCurrentText(params["sp_cpp_before_struct_binding"])
        if "sp_inside_square" in params: self.sp_inside_square.setCurrentText(params["sp_inside_square"])
        if "sp_inside_square_oc_array" in params: self.sp_inside_square_oc_array.setCurrentText(params["sp_inside_square_oc_array"])
        if "sp_after_comma" in params: self.sp_after_comma.setCurrentText(params["sp_after_comma"])
        if "sp_before_comma" in params: self.sp_before_comma.setCurrentText(params["sp_before_comma"])
        if "sp_after_mdatype_commas" in params: self.sp_after_mdatype_commas.setCurrentText(params["sp_after_mdatype_commas"])
        if "sp_before_mdatype_commas" in params: self.sp_before_mdatype_commas.setCurrentText(params["sp_before_mdatype_commas"])
        if "sp_between_mdatype_commas" in params: self.sp_between_mdatype_commas.setCurrentText(params["sp_between_mdatype_commas"])
        if "sp_paren_comma" in params: self.sp_paren_comma.setCurrentText(params["sp_paren_comma"])
        if "sp_before_ellipsis" in params: self.sp_before_ellipsis.setCurrentText(params["sp_before_ellipsis"])
        if "sp_type_ellipsis" in params: self.sp_type_ellipsis.setCurrentText(params["sp_type_ellipsis"])
        if "sp_type_question" in params: self.sp_type_question.setCurrentText(params["sp_type_question"])
        if "sp_paren_ellipsis" in params: self.sp_paren_ellipsis.setCurrentText(params["sp_paren_ellipsis"])
        if "sp_paren_qualifier" in params: self.sp_paren_qualifier.setCurrentText(params["sp_paren_qualifier"])
        if "sp_paren_noexcept" in params: self.sp_paren_noexcept.setCurrentText(params["sp_paren_noexcept"])
        if "sp_after_class_colon" in params: self.sp_after_class_colon.setCurrentText(params["sp_after_class_colon"])
        if "sp_before_class_colon" in params: self.sp_before_class_colon.setCurrentText(params["sp_before_class_colon"])
        if "sp_after_constr_colon" in params: self.sp_after_constr_colon.setCurrentText(params["sp_after_constr_colon"])
        if "sp_before_constr_colon" in params: self.sp_before_constr_colon.setCurrentText(params["sp_before_constr_colon"])
        if "sp_before_case_colon" in params: self.sp_before_case_colon.setCurrentText(params["sp_before_case_colon"])
        if "sp_after_operator" in params: self.sp_after_operator.setCurrentText(params["sp_after_operator"])
        if "sp_after_operator_sym" in params: self.sp_after_operator_sym.setCurrentText(params["sp_after_operator_sym"])
        if "sp_after_operator_sym_empty" in params: self.sp_after_operator_sym_empty.setCurrentText(params["sp_after_operator_sym_empty"])
        if "sp_after_cast" in params: self.sp_after_cast.setCurrentText(params["sp_after_cast"])
        if "sp_inside_paren_cast" in params: self.sp_inside_paren_cast.setCurrentText(params["sp_inside_paren_cast"])
        if "sp_cpp_cast_paren" in params: self.sp_cpp_cast_paren.setCurrentText(params["sp_cpp_cast_paren"])
        if "sp_sizeof_paren" in params: self.sp_sizeof_paren.setCurrentText(params["sp_sizeof_paren"])
        if "sp_sizeof_ellipsis" in params: self.sp_sizeof_ellipsis.setCurrentText(params["sp_sizeof_ellipsis"])
        if "sp_sizeof_ellipsis_paren" in params: self.sp_sizeof_ellipsis_paren.setCurrentText(params["sp_sizeof_ellipsis_paren"])
        if "sp_decltype_paren" in params: self.sp_decltype_paren.setCurrentText(params["sp_decltype_paren"])
        if "sp_after_tag" in params: self.sp_after_tag.setCurrentText(params["sp_after_tag"])
        if "sp_inside_braces_enum" in params: self.sp_inside_braces_enum.setCurrentText(params["sp_inside_braces_enum"])
        if "sp_inside_braces_struct" in params: self.sp_inside_braces_struct.setCurrentText(params["sp_inside_braces_struct"])
        if "sp_inside_braces_oc_dict" in params: self.sp_inside_braces_oc_dict.setCurrentText(params["sp_inside_braces_oc_dict"])
        if "sp_after_type_brace_init_lst_open" in params: self.sp_after_type_brace_init_lst_open.setCurrentText(params["sp_after_type_brace_init_lst_open"])
        if "sp_before_type_brace_init_lst_close" in params: self.sp_before_type_brace_init_lst_close.setCurrentText(params["sp_before_type_brace_init_lst_close"])
        if "sp_inside_type_brace_init_lst" in params: self.sp_inside_type_brace_init_lst.setCurrentText(params["sp_inside_type_brace_init_lst"])
        if "sp_inside_braces" in params: self.sp_inside_braces.setCurrentText(params["sp_inside_braces"])
        if "sp_inside_braces_empty" in params: self.sp_inside_braces_empty.setCurrentText(params["sp_inside_braces_empty"])
        if "sp_trailing_return" in params: self.sp_trailing_return.setCurrentText(params["sp_trailing_return"])
        if "sp_type_func" in params: self.sp_type_func.setCurrentText(params["sp_type_func"])
        if "sp_type_brace_init_lst" in params: self.sp_type_brace_init_lst.setCurrentText(params["sp_type_brace_init_lst"])
        if "sp_func_proto_paren" in params: self.sp_func_proto_paren.setCurrentText(params["sp_func_proto_paren"])
        if "sp_func_proto_paren_empty" in params: self.sp_func_proto_paren_empty.setCurrentText(params["sp_func_proto_paren_empty"])
        if "sp_func_type_paren" in params: self.sp_func_type_paren.setCurrentText(params["sp_func_type_paren"])
        if "sp_func_def_paren" in params: self.sp_func_def_paren.setCurrentText(params["sp_func_def_paren"])
        if "sp_func_def_paren_empty" in params: self.sp_func_def_paren_empty.setCurrentText(params["sp_func_def_paren_empty"])
        if "sp_inside_fparens" in params: self.sp_inside_fparens.setCurrentText(params["sp_inside_fparens"])
        if "sp_inside_fparen" in params: self.sp_inside_fparen.setCurrentText(params["sp_inside_fparen"])
        if "sp_inside_tparen" in params: self.sp_inside_tparen.setCurrentText(params["sp_inside_tparen"])
        if "sp_after_tparen_close" in params: self.sp_after_tparen_close.setCurrentText(params["sp_after_tparen_close"])
        if "sp_square_fparen" in params: self.sp_square_fparen.setCurrentText(params["sp_square_fparen"])
        if "sp_fparen_brace" in params: self.sp_fparen_brace.setCurrentText(params["sp_fparen_brace"])
        if "sp_fparen_brace_initializer" in params: self.sp_fparen_brace_initializer.setCurrentText(params["sp_fparen_brace_initializer"])
        if "sp_fparen_dbrace" in params: self.sp_fparen_dbrace.setCurrentText(params["sp_fparen_dbrace"])
        if "sp_func_call_paren" in params: self.sp_func_call_paren.setCurrentText(params["sp_func_call_paren"])
        if "sp_func_call_paren_empty" in params: self.sp_func_call_paren_empty.setCurrentText(params["sp_func_call_paren_empty"])
        if "sp_func_call_user_paren" in params: self.sp_func_call_user_paren.setCurrentText(params["sp_func_call_user_paren"])
        if "sp_func_call_user_inside_fparen" in params: self.sp_func_call_user_inside_fparen.setCurrentText(params["sp_func_call_user_inside_fparen"])
        if "sp_func_call_user_paren_paren" in params: self.sp_func_call_user_paren_paren.setCurrentText(params["sp_func_call_user_paren_paren"])
        if "sp_func_class_paren" in params: self.sp_func_class_paren.setCurrentText(params["sp_func_class_paren"])
        if "sp_func_class_paren_empty" in params: self.sp_func_class_paren_empty.setCurrentText(params["sp_func_class_paren_empty"])
        if "sp_return_paren" in params: self.sp_return_paren.setCurrentText(params["sp_return_paren"])
        if "sp_return_brace" in params: self.sp_return_brace.setCurrentText(params["sp_return_brace"])
        if "sp_attribute_paren" in params: self.sp_attribute_paren.setCurrentText(params["sp_attribute_paren"])
        if "sp_defined_paren" in params: self.sp_defined_paren.setCurrentText(params["sp_defined_paren"])
        if "sp_throw_paren" in params: self.sp_throw_paren.setCurrentText(params["sp_throw_paren"])
        if "sp_after_throw" in params: self.sp_after_throw.setCurrentText(params["sp_after_throw"])
        if "sp_catch_paren" in params: self.sp_catch_paren.setCurrentText(params["sp_catch_paren"])
        if "sp_oc_catch_paren" in params: self.sp_oc_catch_paren.setCurrentText(params["sp_oc_catch_paren"])
        if "sp_before_oc_proto_list" in params: self.sp_before_oc_proto_list.setCurrentText(params["sp_before_oc_proto_list"])
        if "sp_oc_classname_paren" in params: self.sp_oc_classname_paren.setCurrentText(params["sp_oc_classname_paren"])
        if "sp_version_paren" in params: self.sp_version_paren.setCurrentText(params["sp_version_paren"])
        if "sp_scope_paren" in params: self.sp_scope_paren.setCurrentText(params["sp_scope_paren"])
        if "sp_super_paren" in params: self.sp_super_paren.setCurrentText(params["sp_super_paren"])
        if "sp_this_paren" in params: self.sp_this_paren.setCurrentText(params["sp_this_paren"])
        if "sp_macro" in params: self.sp_macro.setCurrentText(params["sp_macro"])
        if "sp_macro_func" in params: self.sp_macro_func.setCurrentText(params["sp_macro_func"])
        if "sp_else_brace" in params: self.sp_else_brace.setCurrentText(params["sp_else_brace"])
        if "sp_brace_else" in params: self.sp_brace_else.setCurrentText(params["sp_brace_else"])
        if "sp_brace_typedef" in params: self.sp_brace_typedef.setCurrentText(params["sp_brace_typedef"])
        if "sp_catch_brace" in params: self.sp_catch_brace.setCurrentText(params["sp_catch_brace"])
        if "sp_oc_catch_brace" in params: self.sp_oc_catch_brace.setCurrentText(params["sp_oc_catch_brace"])
        if "sp_brace_catch" in params: self.sp_brace_catch.setCurrentText(params["sp_brace_catch"])
        if "sp_oc_brace_catch" in params: self.sp_oc_brace_catch.setCurrentText(params["sp_oc_brace_catch"])
        if "sp_finally_brace" in params: self.sp_finally_brace.setCurrentText(params["sp_finally_brace"])
        if "sp_brace_finally" in params: self.sp_brace_finally.setCurrentText(params["sp_brace_finally"])
        if "sp_try_brace" in params: self.sp_try_brace.setCurrentText(params["sp_try_brace"])
        if "sp_getset_brace" in params: self.sp_getset_brace.setCurrentText(params["sp_getset_brace"])
        if "sp_word_brace_init_lst" in params: self.sp_word_brace_init_lst.setCurrentText(params["sp_word_brace_init_lst"])
        if "sp_word_brace_ns" in params: self.sp_word_brace_ns.setCurrentText(params["sp_word_brace_ns"])
        if "sp_before_dc" in params: self.sp_before_dc.setCurrentText(params["sp_before_dc"])
        if "sp_after_dc" in params: self.sp_after_dc.setCurrentText(params["sp_after_dc"])
        if "sp_d_array_colon" in params: self.sp_d_array_colon.setCurrentText(params["sp_d_array_colon"])
        if "sp_not" in params: self.sp_not.setCurrentText(params["sp_not"])
        if "sp_inv" in params: self.sp_inv.setCurrentText(params["sp_inv"])
        if "sp_addr" in params: self.sp_addr.setCurrentText(params["sp_addr"])
        if "sp_member" in params: self.sp_member.setCurrentText(params["sp_member"])
        if "sp_deref" in params: self.sp_deref.setCurrentText(params["sp_deref"])
        if "sp_sign" in params: self.sp_sign.setCurrentText(params["sp_sign"])
        if "sp_incdec" in params: self.sp_incdec.setCurrentText(params["sp_incdec"])
        if "sp_before_nl_cont" in params: self.sp_before_nl_cont.setCurrentText(params["sp_before_nl_cont"])
        if "sp_after_oc_scope" in params: self.sp_after_oc_scope.setCurrentText(params["sp_after_oc_scope"])
        if "sp_after_oc_colon" in params: self.sp_after_oc_colon.setCurrentText(params["sp_after_oc_colon"])
        if "sp_before_oc_colon" in params: self.sp_before_oc_colon.setCurrentText(params["sp_before_oc_colon"])
        if "sp_after_oc_dict_colon" in params: self.sp_after_oc_dict_colon.setCurrentText(params["sp_after_oc_dict_colon"])
        if "sp_before_oc_dict_colon" in params: self.sp_before_oc_dict_colon.setCurrentText(params["sp_before_oc_dict_colon"])
        if "sp_after_send_oc_colon" in params: self.sp_after_send_oc_colon.setCurrentText(params["sp_after_send_oc_colon"])
        if "sp_before_send_oc_colon" in params: self.sp_before_send_oc_colon.setCurrentText(params["sp_before_send_oc_colon"])
        if "sp_after_oc_type" in params: self.sp_after_oc_type.setCurrentText(params["sp_after_oc_type"])
        if "sp_after_oc_return_type" in params: self.sp_after_oc_return_type.setCurrentText(params["sp_after_oc_return_type"])
        if "sp_after_oc_at_sel" in params: self.sp_after_oc_at_sel.setCurrentText(params["sp_after_oc_at_sel"])
        if "sp_after_oc_at_sel_parens" in params: self.sp_after_oc_at_sel_parens.setCurrentText(params["sp_after_oc_at_sel_parens"])
        if "sp_inside_oc_at_sel_parens" in params: self.sp_inside_oc_at_sel_parens.setCurrentText(params["sp_inside_oc_at_sel_parens"])
        if "sp_before_oc_block_caret" in params: self.sp_before_oc_block_caret.setCurrentText(params["sp_before_oc_block_caret"])
        if "sp_after_oc_block_caret" in params: self.sp_after_oc_block_caret.setCurrentText(params["sp_after_oc_block_caret"])
        if "sp_after_oc_msg_receiver" in params: self.sp_after_oc_msg_receiver.setCurrentText(params["sp_after_oc_msg_receiver"])
        if "sp_after_oc_property" in params: self.sp_after_oc_property.setCurrentText(params["sp_after_oc_property"])
        if "sp_after_oc_synchronized" in params: self.sp_after_oc_synchronized.setCurrentText(params["sp_after_oc_synchronized"])
        if "sp_cond_colon" in params: self.sp_cond_colon.setCurrentText(params["sp_cond_colon"])
        if "sp_cond_colon_before" in params: self.sp_cond_colon_before.setCurrentText(params["sp_cond_colon_before"])
        if "sp_cond_colon_after" in params: self.sp_cond_colon_after.setCurrentText(params["sp_cond_colon_after"])
        if "sp_cond_question" in params: self.sp_cond_question.setCurrentText(params["sp_cond_question"])
        if "sp_cond_question_before" in params: self.sp_cond_question_before.setCurrentText(params["sp_cond_question_before"])
        if "sp_cond_question_after" in params: self.sp_cond_question_after.setCurrentText(params["sp_cond_question_after"])
        if "sp_cond_ternary_short" in params: self.sp_cond_ternary_short.setCurrentText(params["sp_cond_ternary_short"])
        if "sp_case_label" in params: self.sp_case_label.setCurrentText(params["sp_case_label"])
        if "sp_range" in params: self.sp_range.setCurrentText(params["sp_range"])
        if "sp_after_for_colon" in params: self.sp_after_for_colon.setCurrentText(params["sp_after_for_colon"])
        if "sp_before_for_colon" in params: self.sp_before_for_colon.setCurrentText(params["sp_before_for_colon"])
        if "sp_extern_paren" in params: self.sp_extern_paren.setCurrentText(params["sp_extern_paren"])
        if "sp_cmt_cpp_start" in params: self.sp_cmt_cpp_start.setCurrentText(params["sp_cmt_cpp_start"])
        if "sp_cmt_cpp_doxygen" in params: self.sp_cmt_cpp_doxygen.setCurrentText(params["sp_cmt_cpp_doxygen"])
        if "sp_cmt_cpp_qttr" in params: self.sp_cmt_cpp_qttr.setCurrentText(params["sp_cmt_cpp_qttr"])
        if "sp_endif_cmt" in params: self.sp_endif_cmt.setCurrentText(params["sp_endif_cmt"])
        if "sp_after_new" in params: self.sp_after_new.setCurrentText(params["sp_after_new"])
        if "sp_between_new_paren" in params: self.sp_between_new_paren.setCurrentText(params["sp_between_new_paren"])
        if "sp_after_newop_paren" in params: self.sp_after_newop_paren.setCurrentText(params["sp_after_newop_paren"])
        if "sp_inside_newop_paren" in params: self.sp_inside_newop_paren.setCurrentText(params["sp_inside_newop_paren"])
        if "sp_inside_newop_paren_open" in params: self.sp_inside_newop_paren_open.setCurrentText(params["sp_inside_newop_paren_open"])
        if "sp_inside_newop_paren_close" in params: self.sp_inside_newop_paren_close.setCurrentText(params["sp_inside_newop_paren_close"])
        if "sp_before_tr_emb_cmt" in params: self.sp_before_tr_emb_cmt.setCurrentText(params["sp_before_tr_emb_cmt"])
        if "sp_num_before_tr_emb_cmt" in params: self.sp_num_before_tr_emb_cmt.setValue(int(params["sp_num_before_tr_emb_cmt"]))
        if "sp_annotation_paren" in params: self.sp_annotation_paren.setCurrentText(params["sp_annotation_paren"])
        if "sp_skip_vbrace_tokens" in params: self.sp_skip_vbrace_tokens.setCurrentText(params["sp_skip_vbrace_tokens"])
        if "sp_after_noexcept" in params: self.sp_after_noexcept.setCurrentText(params["sp_after_noexcept"])
        if "sp_vala_after_translation" in params: self.sp_vala_after_translation.setCurrentText(params["sp_vala_after_translation"])
        if "force_tab_after_define" in params: self.force_tab_after_define.setCurrentText(params["force_tab_after_define"])
        if "indent_columns" in params: self.indent_columns.setValue(int(params["indent_columns"]))
        if "indent_continue" in params: self.indent_continue.setValue(int(params["indent_continue"]))
        if "indent_continue_class_head" in params: self.indent_continue_class_head.setValue(int(params["indent_continue_class_head"]))
        if "indent_single_newlines" in params: self.indent_single_newlines.setCurrentText(params["indent_single_newlines"])
        if "indent_param" in params: self.indent_param.setValue(int(params["indent_param"]))
        if "indent_with_tabs" in params: self.indent_with_tabs.setValue(int(params["indent_with_tabs"]))
        if "indent_cmt_with_tabs" in params: self.indent_cmt_with_tabs.setCurrentText(params["indent_cmt_with_tabs"])
        if "indent_align_string" in params: self.indent_align_string.setCurrentText(params["indent_align_string"])
        if "indent_xml_string" in params: self.indent_xml_string.setValue(int(params["indent_xml_string"]))
        if "indent_brace" in params: self.indent_brace.setValue(int(params["indent_brace"]))
        if "indent_braces" in params: self.indent_braces.setCurrentText(params["indent_braces"])
        if "indent_braces_no_func" in params: self.indent_braces_no_func.setCurrentText(params["indent_braces_no_func"])
        if "indent_braces_no_class" in params: self.indent_braces_no_class.setCurrentText(params["indent_braces_no_class"])
        if "indent_braces_no_struct" in params: self.indent_braces_no_struct.setCurrentText(params["indent_braces_no_struct"])
        if "indent_brace_parent" in params: self.indent_brace_parent.setCurrentText(params["indent_brace_parent"])
        if "indent_paren_open_brace" in params: self.indent_paren_open_brace.setCurrentText(params["indent_paren_open_brace"])
        if "indent_cs_delegate_brace" in params: self.indent_cs_delegate_brace.setCurrentText(params["indent_cs_delegate_brace"])
        if "indent_cs_delegate_body" in params: self.indent_cs_delegate_body.setCurrentText(params["indent_cs_delegate_body"])
        if "indent_namespace" in params: self.indent_namespace.setCurrentText(params["indent_namespace"])
        if "indent_namespace_single_indent" in params: self.indent_namespace_single_indent.setCurrentText(params["indent_namespace_single_indent"])
        if "indent_namespace_level" in params: self.indent_namespace_level.setValue(int(params["indent_namespace_level"]))
        if "indent_namespace_limit" in params: self.indent_namespace_limit.setValue(int(params["indent_namespace_limit"]))
        if "indent_extern" in params: self.indent_extern.setCurrentText(params["indent_extern"])
        if "indent_class" in params: self.indent_class.setCurrentText(params["indent_class"])
        if "indent_class_colon" in params: self.indent_class_colon.setCurrentText(params["indent_class_colon"])
        if "indent_class_on_colon" in params: self.indent_class_on_colon.setCurrentText(params["indent_class_on_colon"])
        if "indent_constr_colon" in params: self.indent_constr_colon.setCurrentText(params["indent_constr_colon"])
        if "indent_ctor_init_leading" in params: self.indent_ctor_init_leading.setValue(int(params["indent_ctor_init_leading"]))
        if "indent_ctor_init" in params: self.indent_ctor_init.setValue(int(params["indent_ctor_init"]))
        if "indent_else_if" in params: self.indent_else_if.setCurrentText(params["indent_else_if"])
        if "indent_var_def_blk" in params: self.indent_var_def_blk.setValue(int(params["indent_var_def_blk"]))
        if "indent_var_def_cont" in params: self.indent_var_def_cont.setCurrentText(params["indent_var_def_cont"])
        if "indent_shift" in params: self.indent_shift.setCurrentText(params["indent_shift"])
        if "indent_func_def_force_col1" in params: self.indent_func_def_force_col1.setCurrentText(params["indent_func_def_force_col1"])
        if "indent_func_call_param" in params: self.indent_func_call_param.setCurrentText(params["indent_func_call_param"])
        if "indent_func_def_param" in params: self.indent_func_def_param.setCurrentText(params["indent_func_def_param"])
        if "indent_func_def_param_paren_pos_threshold" in params: self.indent_func_def_param_paren_pos_threshold.setValue(int(params["indent_func_def_param_paren_pos_threshold"]))
        if "indent_func_proto_param" in params: self.indent_func_proto_param.setCurrentText(params["indent_func_proto_param"])
        if "indent_func_class_param" in params: self.indent_func_class_param.setCurrentText(params["indent_func_class_param"])
        if "indent_func_ctor_var_param" in params: self.indent_func_ctor_var_param.setCurrentText(params["indent_func_ctor_var_param"])
        if "indent_template_param" in params: self.indent_template_param.setCurrentText(params["indent_template_param"])
        if "indent_func_param_double" in params: self.indent_func_param_double.setCurrentText(params["indent_func_param_double"])
        if "indent_func_const" in params: self.indent_func_const.setValue(int(params["indent_func_const"]))
        if "indent_func_throw" in params: self.indent_func_throw.setValue(int(params["indent_func_throw"]))
        if "indent_macro_brace" in params: self.indent_macro_brace.setCurrentText(params["indent_macro_brace"])
        if "indent_member" in params: self.indent_member.setValue(int(params["indent_member"]))
        if "indent_member_single" in params: self.indent_member_single.setCurrentText(params["indent_member_single"])
        if "indent_sing_line_comments" in params: self.indent_sing_line_comments.setValue(int(params["indent_sing_line_comments"]))
        if "indent_sparen_extra" in params: self.indent_sparen_extra.setValue(int(params["indent_sparen_extra"]))
        if "indent_relative_single_line_comments" in params: self.indent_relative_single_line_comments.setCurrentText(params["indent_relative_single_line_comments"])
        if "indent_switch_case" in params: self.indent_switch_case.setValue(int(params["indent_switch_case"]))
        if "indent_switch_break_with_case" in params: self.indent_switch_break_with_case.setCurrentText(params["indent_switch_break_with_case"])
        if "indent_switch_pp" in params: self.indent_switch_pp.setCurrentText(params["indent_switch_pp"])
        if "indent_case_shift" in params: self.indent_case_shift.setValue(int(params["indent_case_shift"]))
        if "indent_case_brace" in params: self.indent_case_brace.setValue(int(params["indent_case_brace"]))
        if "indent_col1_comment" in params: self.indent_col1_comment.setCurrentText(params["indent_col1_comment"])
        if "indent_col1_multi_string_literal" in params: self.indent_col1_multi_string_literal.setCurrentText(params["indent_col1_multi_string_literal"])
        if "indent_label" in params: self.indent_label.setValue(int(params["indent_label"]))
        if "indent_access_spec" in params: self.indent_access_spec.setValue(int(params["indent_access_spec"]))
        if "indent_access_spec_body" in params: self.indent_access_spec_body.setCurrentText(params["indent_access_spec_body"])
        if "indent_paren_nl" in params: self.indent_paren_nl.setCurrentText(params["indent_paren_nl"])
        if "indent_paren_close" in params: self.indent_paren_close.setValue(int(params["indent_paren_close"]))
        if "indent_paren_after_func_def" in params: self.indent_paren_after_func_def.setCurrentText(params["indent_paren_after_func_def"])
        if "indent_paren_after_func_decl" in params: self.indent_paren_after_func_decl.setCurrentText(params["indent_paren_after_func_decl"])
        if "indent_paren_after_func_call" in params: self.indent_paren_after_func_call.setCurrentText(params["indent_paren_after_func_call"])
        if "indent_comma_paren" in params: self.indent_comma_paren.setCurrentText(params["indent_comma_paren"])
        if "indent_bool_paren" in params: self.indent_bool_paren.setCurrentText(params["indent_bool_paren"])
        if "indent_semicolon_for_paren" in params: self.indent_semicolon_for_paren.setCurrentText(params["indent_semicolon_for_paren"])
        if "indent_first_bool_expr" in params: self.indent_first_bool_expr.setCurrentText(params["indent_first_bool_expr"])
        if "indent_first_for_expr" in params: self.indent_first_for_expr.setCurrentText(params["indent_first_for_expr"])
        if "indent_square_nl" in params: self.indent_square_nl.setCurrentText(params["indent_square_nl"])
        if "indent_preserve_sql" in params: self.indent_preserve_sql.setCurrentText(params["indent_preserve_sql"])
        if "indent_align_assign" in params: self.indent_align_assign.setCurrentText(params["indent_align_assign"])
        if "indent_off_after_assign" in params: self.indent_off_after_assign.setCurrentText(params["indent_off_after_assign"])
        if "indent_align_paren" in params: self.indent_align_paren.setCurrentText(params["indent_align_paren"])
        if "indent_oc_inside_msg_sel" in params: self.indent_oc_inside_msg_sel.setCurrentText(params["indent_oc_inside_msg_sel"])
        if "indent_oc_block" in params: self.indent_oc_block.setCurrentText(params["indent_oc_block"])
        if "indent_oc_block_msg" in params: self.indent_oc_block_msg.setValue(int(params["indent_oc_block_msg"]))
        if "indent_oc_msg_colon" in params: self.indent_oc_msg_colon.setValue(int(params["indent_oc_msg_colon"]))
        if "indent_oc_msg_prioritize_first_colon" in params: self.indent_oc_msg_prioritize_first_colon.setCurrentText(params["indent_oc_msg_prioritize_first_colon"])
        if "indent_oc_block_msg_xcode_style" in params: self.indent_oc_block_msg_xcode_style.setCurrentText(params["indent_oc_block_msg_xcode_style"])
        if "indent_oc_block_msg_from_keyword" in params: self.indent_oc_block_msg_from_keyword.setCurrentText(params["indent_oc_block_msg_from_keyword"])
        if "indent_oc_block_msg_from_colon" in params: self.indent_oc_block_msg_from_colon.setCurrentText(params["indent_oc_block_msg_from_colon"])
        if "indent_oc_block_msg_from_caret" in params: self.indent_oc_block_msg_from_caret.setCurrentText(params["indent_oc_block_msg_from_caret"])
        if "indent_oc_block_msg_from_brace" in params: self.indent_oc_block_msg_from_brace.setCurrentText(params["indent_oc_block_msg_from_brace"])
        if "indent_min_vbrace_open" in params: self.indent_min_vbrace_open.setValue(int(params["indent_min_vbrace_open"]))
        if "indent_vbrace_open_on_tabstop" in params: self.indent_vbrace_open_on_tabstop.setCurrentText(params["indent_vbrace_open_on_tabstop"])
        if "indent_token_after_brace" in params: self.indent_token_after_brace.setCurrentText(params["indent_token_after_brace"])
        if "indent_cpp_lambda_body" in params: self.indent_cpp_lambda_body.setCurrentText(params["indent_cpp_lambda_body"])
        if "indent_compound_literal_return" in params: self.indent_compound_literal_return.setCurrentText(params["indent_compound_literal_return"])
        if "indent_using_block" in params: self.indent_using_block.setCurrentText(params["indent_using_block"])
        if "indent_ternary_operator" in params: self.indent_ternary_operator.setValue(int(params["indent_ternary_operator"]))
        if "indent_inside_ternary_operator" in params: self.indent_inside_ternary_operator.setCurrentText(params["indent_inside_ternary_operator"])
        if "indent_off_after_return" in params: self.indent_off_after_return.setCurrentText(params["indent_off_after_return"])
        if "indent_off_after_return_new" in params: self.indent_off_after_return_new.setCurrentText(params["indent_off_after_return_new"])
        if "indent_single_after_return" in params: self.indent_single_after_return.setCurrentText(params["indent_single_after_return"])
        if "indent_ignore_asm_block" in params: self.indent_ignore_asm_block.setCurrentText(params["indent_ignore_asm_block"])
        if "nl_collapse_empty_body" in params: self.nl_collapse_empty_body.setCurrentText(params["nl_collapse_empty_body"])
        if "nl_assign_leave_one_liners" in params: self.nl_assign_leave_one_liners.setCurrentText(params["nl_assign_leave_one_liners"])
        if "nl_class_leave_one_liners" in params: self.nl_class_leave_one_liners.setCurrentText(params["nl_class_leave_one_liners"])
        if "nl_enum_leave_one_liners" in params: self.nl_enum_leave_one_liners.setCurrentText(params["nl_enum_leave_one_liners"])
        if "nl_getset_leave_one_liners" in params: self.nl_getset_leave_one_liners.setCurrentText(params["nl_getset_leave_one_liners"])
        if "nl_cs_property_leave_one_liners" in params: self.nl_cs_property_leave_one_liners.setCurrentText(params["nl_cs_property_leave_one_liners"])
        if "nl_func_leave_one_liners" in params: self.nl_func_leave_one_liners.setCurrentText(params["nl_func_leave_one_liners"])
        if "nl_cpp_lambda_leave_one_liners" in params: self.nl_cpp_lambda_leave_one_liners.setCurrentText(params["nl_cpp_lambda_leave_one_liners"])
        if "nl_if_leave_one_liners" in params: self.nl_if_leave_one_liners.setCurrentText(params["nl_if_leave_one_liners"])
        if "nl_while_leave_one_liners" in params: self.nl_while_leave_one_liners.setCurrentText(params["nl_while_leave_one_liners"])
        if "nl_for_leave_one_liners" in params: self.nl_for_leave_one_liners.setCurrentText(params["nl_for_leave_one_liners"])
        if "nl_oc_msg_leave_one_liner" in params: self.nl_oc_msg_leave_one_liner.setCurrentText(params["nl_oc_msg_leave_one_liner"])
        if "nl_oc_mdef_brace" in params: self.nl_oc_mdef_brace.setCurrentText(params["nl_oc_mdef_brace"])
        if "nl_oc_block_brace" in params: self.nl_oc_block_brace.setCurrentText(params["nl_oc_block_brace"])
        if "nl_oc_before_interface" in params: self.nl_oc_before_interface.setCurrentText(params["nl_oc_before_interface"])
        if "nl_oc_before_implementation" in params: self.nl_oc_before_implementation.setCurrentText(params["nl_oc_before_implementation"])
        if "nl_oc_before_end" in params: self.nl_oc_before_end.setCurrentText(params["nl_oc_before_end"])
        if "nl_oc_interface_brace" in params: self.nl_oc_interface_brace.setCurrentText(params["nl_oc_interface_brace"])
        if "nl_oc_implementation_brace" in params: self.nl_oc_implementation_brace.setCurrentText(params["nl_oc_implementation_brace"])
        if "nl_start_of_file" in params: self.nl_start_of_file.setCurrentText(params["nl_start_of_file"])
        if "nl_start_of_file_min" in params: self.nl_start_of_file_min.setValue(int(params["nl_start_of_file_min"]))
        if "nl_end_of_file" in params: self.nl_end_of_file.setCurrentText(params["nl_end_of_file"])
        if "nl_end_of_file_min" in params: self.nl_end_of_file_min.setValue(int(params["nl_end_of_file_min"]))
        if "nl_assign_brace" in params: self.nl_assign_brace.setCurrentText(params["nl_assign_brace"])
        if "nl_assign_square" in params: self.nl_assign_square.setCurrentText(params["nl_assign_square"])
        if "nl_tsquare_brace" in params: self.nl_tsquare_brace.setCurrentText(params["nl_tsquare_brace"])
        if "nl_after_square_assign" in params: self.nl_after_square_assign.setCurrentText(params["nl_after_square_assign"])
        if "nl_fcall_brace" in params: self.nl_fcall_brace.setCurrentText(params["nl_fcall_brace"])
        if "nl_enum_brace" in params: self.nl_enum_brace.setCurrentText(params["nl_enum_brace"])
        if "nl_enum_class" in params: self.nl_enum_class.setCurrentText(params["nl_enum_class"])
        if "nl_enum_class_identifier" in params: self.nl_enum_class_identifier.setCurrentText(params["nl_enum_class_identifier"])
        if "nl_enum_identifier_colon" in params: self.nl_enum_identifier_colon.setCurrentText(params["nl_enum_identifier_colon"])
        if "nl_enum_colon_type" in params: self.nl_enum_colon_type.setCurrentText(params["nl_enum_colon_type"])
        if "nl_struct_brace" in params: self.nl_struct_brace.setCurrentText(params["nl_struct_brace"])
        if "nl_union_brace" in params: self.nl_union_brace.setCurrentText(params["nl_union_brace"])
        if "nl_if_brace" in params: self.nl_if_brace.setCurrentText(params["nl_if_brace"])
        if "nl_brace_else" in params: self.nl_brace_else.setCurrentText(params["nl_brace_else"])
        if "nl_elseif_brace" in params: self.nl_elseif_brace.setCurrentText(params["nl_elseif_brace"])
        if "nl_else_brace" in params: self.nl_else_brace.setCurrentText(params["nl_else_brace"])
        if "nl_else_if" in params: self.nl_else_if.setCurrentText(params["nl_else_if"])
        if "nl_before_opening_brace_func_class_def" in params: self.nl_before_opening_brace_func_class_def.setCurrentText(params["nl_before_opening_brace_func_class_def"])
        if "nl_before_if_closing_paren" in params: self.nl_before_if_closing_paren.setCurrentText(params["nl_before_if_closing_paren"])
        if "nl_brace_finally" in params: self.nl_brace_finally.setCurrentText(params["nl_brace_finally"])
        if "nl_finally_brace" in params: self.nl_finally_brace.setCurrentText(params["nl_finally_brace"])
        if "nl_try_brace" in params: self.nl_try_brace.setCurrentText(params["nl_try_brace"])
        if "nl_getset_brace" in params: self.nl_getset_brace.setCurrentText(params["nl_getset_brace"])
        if "nl_for_brace" in params: self.nl_for_brace.setCurrentText(params["nl_for_brace"])
        if "nl_catch_brace" in params: self.nl_catch_brace.setCurrentText(params["nl_catch_brace"])
        if "nl_oc_catch_brace" in params: self.nl_oc_catch_brace.setCurrentText(params["nl_oc_catch_brace"])
        if "nl_brace_catch" in params: self.nl_brace_catch.setCurrentText(params["nl_brace_catch"])
        if "nl_oc_brace_catch" in params: self.nl_oc_brace_catch.setCurrentText(params["nl_oc_brace_catch"])
        if "nl_brace_square" in params: self.nl_brace_square.setCurrentText(params["nl_brace_square"])
        if "nl_brace_fparen" in params: self.nl_brace_fparen.setCurrentText(params["nl_brace_fparen"])
        if "nl_while_brace" in params: self.nl_while_brace.setCurrentText(params["nl_while_brace"])
        if "nl_scope_brace" in params: self.nl_scope_brace.setCurrentText(params["nl_scope_brace"])
        if "nl_unittest_brace" in params: self.nl_unittest_brace.setCurrentText(params["nl_unittest_brace"])
        if "nl_version_brace" in params: self.nl_version_brace.setCurrentText(params["nl_version_brace"])
        if "nl_using_brace" in params: self.nl_using_brace.setCurrentText(params["nl_using_brace"])
        if "nl_brace_brace" in params: self.nl_brace_brace.setCurrentText(params["nl_brace_brace"])
        if "nl_do_brace" in params: self.nl_do_brace.setCurrentText(params["nl_do_brace"])
        if "nl_brace_while" in params: self.nl_brace_while.setCurrentText(params["nl_brace_while"])
        if "nl_switch_brace" in params: self.nl_switch_brace.setCurrentText(params["nl_switch_brace"])
        if "nl_synchronized_brace" in params: self.nl_synchronized_brace.setCurrentText(params["nl_synchronized_brace"])
        if "nl_multi_line_cond" in params: self.nl_multi_line_cond.setCurrentText(params["nl_multi_line_cond"])
        if "nl_multi_line_sparen_open" in params: self.nl_multi_line_sparen_open.setCurrentText(params["nl_multi_line_sparen_open"])
        if "nl_multi_line_sparen_close" in params: self.nl_multi_line_sparen_close.setCurrentText(params["nl_multi_line_sparen_close"])
        if "nl_multi_line_define" in params: self.nl_multi_line_define.setCurrentText(params["nl_multi_line_define"])
        if "nl_before_case" in params: self.nl_before_case.setCurrentText(params["nl_before_case"])
        if "nl_after_case" in params: self.nl_after_case.setCurrentText(params["nl_after_case"])
        if "nl_case_colon_brace" in params: self.nl_case_colon_brace.setCurrentText(params["nl_case_colon_brace"])
        if "nl_before_throw" in params: self.nl_before_throw.setCurrentText(params["nl_before_throw"])
        if "nl_namespace_brace" in params: self.nl_namespace_brace.setCurrentText(params["nl_namespace_brace"])
        if "nl_template_class" in params: self.nl_template_class.setCurrentText(params["nl_template_class"])
        if "nl_template_class_decl" in params: self.nl_template_class_decl.setCurrentText(params["nl_template_class_decl"])
        if "nl_template_class_decl_special" in params: self.nl_template_class_decl_special.setCurrentText(params["nl_template_class_decl_special"])
        if "nl_template_class_def" in params: self.nl_template_class_def.setCurrentText(params["nl_template_class_def"])
        if "nl_template_class_def_special" in params: self.nl_template_class_def_special.setCurrentText(params["nl_template_class_def_special"])
        if "nl_template_func" in params: self.nl_template_func.setCurrentText(params["nl_template_func"])
        if "nl_template_func_decl" in params: self.nl_template_func_decl.setCurrentText(params["nl_template_func_decl"])
        if "nl_template_func_decl_special" in params: self.nl_template_func_decl_special.setCurrentText(params["nl_template_func_decl_special"])
        if "nl_template_func_def" in params: self.nl_template_func_def.setCurrentText(params["nl_template_func_def"])
        if "nl_template_func_def_special" in params: self.nl_template_func_def_special.setCurrentText(params["nl_template_func_def_special"])
        if "nl_template_var" in params: self.nl_template_var.setCurrentText(params["nl_template_var"])
        if "nl_template_using" in params: self.nl_template_using.setCurrentText(params["nl_template_using"])
        if "nl_class_brace" in params: self.nl_class_brace.setCurrentText(params["nl_class_brace"])
        if "nl_class_init_args" in params: self.nl_class_init_args.setCurrentText(params["nl_class_init_args"])
        if "nl_constr_init_args" in params: self.nl_constr_init_args.setCurrentText(params["nl_constr_init_args"])
        if "nl_enum_own_lines" in params: self.nl_enum_own_lines.setCurrentText(params["nl_enum_own_lines"])
        if "nl_func_type_name" in params: self.nl_func_type_name.setCurrentText(params["nl_func_type_name"])
        if "nl_func_type_name_class" in params: self.nl_func_type_name_class.setCurrentText(params["nl_func_type_name_class"])
        if "nl_func_class_scope" in params: self.nl_func_class_scope.setCurrentText(params["nl_func_class_scope"])
        if "nl_func_scope_name" in params: self.nl_func_scope_name.setCurrentText(params["nl_func_scope_name"])
        if "nl_func_proto_type_name" in params: self.nl_func_proto_type_name.setCurrentText(params["nl_func_proto_type_name"])
        if "nl_func_paren" in params: self.nl_func_paren.setCurrentText(params["nl_func_paren"])
        if "nl_func_paren_empty" in params: self.nl_func_paren_empty.setCurrentText(params["nl_func_paren_empty"])
        if "nl_func_def_paren" in params: self.nl_func_def_paren.setCurrentText(params["nl_func_def_paren"])
        if "nl_func_def_paren_empty" in params: self.nl_func_def_paren_empty.setCurrentText(params["nl_func_def_paren_empty"])
        if "nl_func_call_paren" in params: self.nl_func_call_paren.setCurrentText(params["nl_func_call_paren"])
        if "nl_func_call_paren_empty" in params: self.nl_func_call_paren_empty.setCurrentText(params["nl_func_call_paren_empty"])
        if "nl_func_decl_start" in params: self.nl_func_decl_start.setCurrentText(params["nl_func_decl_start"])
        if "nl_func_def_start" in params: self.nl_func_def_start.setCurrentText(params["nl_func_def_start"])
        if "nl_func_decl_start_single" in params: self.nl_func_decl_start_single.setCurrentText(params["nl_func_decl_start_single"])
        if "nl_func_def_start_single" in params: self.nl_func_def_start_single.setCurrentText(params["nl_func_def_start_single"])
        if "nl_func_decl_start_multi_line" in params: self.nl_func_decl_start_multi_line.setCurrentText(params["nl_func_decl_start_multi_line"])
        if "nl_func_def_start_multi_line" in params: self.nl_func_def_start_multi_line.setCurrentText(params["nl_func_def_start_multi_line"])
        if "nl_func_decl_args" in params: self.nl_func_decl_args.setCurrentText(params["nl_func_decl_args"])
        if "nl_func_def_args" in params: self.nl_func_def_args.setCurrentText(params["nl_func_def_args"])
        if "nl_func_call_args" in params: self.nl_func_call_args.setCurrentText(params["nl_func_call_args"])
        if "nl_func_decl_args_multi_line" in params: self.nl_func_decl_args_multi_line.setCurrentText(params["nl_func_decl_args_multi_line"])
        if "nl_func_def_args_multi_line" in params: self.nl_func_def_args_multi_line.setCurrentText(params["nl_func_def_args_multi_line"])
        if "nl_func_decl_end" in params: self.nl_func_decl_end.setCurrentText(params["nl_func_decl_end"])
        if "nl_func_def_end" in params: self.nl_func_def_end.setCurrentText(params["nl_func_def_end"])
        if "nl_func_decl_end_single" in params: self.nl_func_decl_end_single.setCurrentText(params["nl_func_decl_end_single"])
        if "nl_func_def_end_single" in params: self.nl_func_def_end_single.setCurrentText(params["nl_func_def_end_single"])
        if "nl_func_decl_end_multi_line" in params: self.nl_func_decl_end_multi_line.setCurrentText(params["nl_func_decl_end_multi_line"])
        if "nl_func_def_end_multi_line" in params: self.nl_func_def_end_multi_line.setCurrentText(params["nl_func_def_end_multi_line"])
        if "nl_func_decl_empty" in params: self.nl_func_decl_empty.setCurrentText(params["nl_func_decl_empty"])
        if "nl_func_def_empty" in params: self.nl_func_def_empty.setCurrentText(params["nl_func_def_empty"])
        if "nl_func_call_empty" in params: self.nl_func_call_empty.setCurrentText(params["nl_func_call_empty"])
        if "nl_func_call_start" in params: self.nl_func_call_start.setCurrentText(params["nl_func_call_start"])
        if "nl_func_call_end" in params: self.nl_func_call_end.setCurrentText(params["nl_func_call_end"])
        if "nl_func_call_start_multi_line" in params: self.nl_func_call_start_multi_line.setCurrentText(params["nl_func_call_start_multi_line"])
        if "nl_func_call_args_multi_line" in params: self.nl_func_call_args_multi_line.setCurrentText(params["nl_func_call_args_multi_line"])
        if "nl_func_call_end_multi_line" in params: self.nl_func_call_end_multi_line.setCurrentText(params["nl_func_call_end_multi_line"])
        if "nl_func_call_args_multi_line_ignore_closures" in params: self.nl_func_call_args_multi_line_ignore_closures.setCurrentText(params["nl_func_call_args_multi_line_ignore_closures"])
        if "nl_template_start" in params: self.nl_template_start.setCurrentText(params["nl_template_start"])
        if "nl_template_args" in params: self.nl_template_args.setCurrentText(params["nl_template_args"])
        if "nl_template_end" in params: self.nl_template_end.setCurrentText(params["nl_template_end"])
        if "nl_oc_msg_args" in params: self.nl_oc_msg_args.setCurrentText(params["nl_oc_msg_args"])
        if "nl_fdef_brace" in params: self.nl_fdef_brace.setCurrentText(params["nl_fdef_brace"])
        if "nl_fdef_brace_cond" in params: self.nl_fdef_brace_cond.setCurrentText(params["nl_fdef_brace_cond"])
        if "nl_cpp_ldef_brace" in params: self.nl_cpp_ldef_brace.setCurrentText(params["nl_cpp_ldef_brace"])
        if "nl_return_expr" in params: self.nl_return_expr.setCurrentText(params["nl_return_expr"])
        if "nl_after_semicolon" in params: self.nl_after_semicolon.setCurrentText(params["nl_after_semicolon"])
        if "nl_paren_dbrace_open" in params: self.nl_paren_dbrace_open.setCurrentText(params["nl_paren_dbrace_open"])
        if "nl_type_brace_init_lst" in params: self.nl_type_brace_init_lst.setCurrentText(params["nl_type_brace_init_lst"])
        if "nl_type_brace_init_lst_open" in params: self.nl_type_brace_init_lst_open.setCurrentText(params["nl_type_brace_init_lst_open"])
        if "nl_type_brace_init_lst_close" in params: self.nl_type_brace_init_lst_close.setCurrentText(params["nl_type_brace_init_lst_close"])
        if "nl_after_brace_open" in params: self.nl_after_brace_open.setCurrentText(params["nl_after_brace_open"])
        if "nl_after_brace_open_cmt" in params: self.nl_after_brace_open_cmt.setCurrentText(params["nl_after_brace_open_cmt"])
        if "nl_after_vbrace_open" in params: self.nl_after_vbrace_open.setCurrentText(params["nl_after_vbrace_open"])
        if "nl_after_vbrace_open_empty" in params: self.nl_after_vbrace_open_empty.setCurrentText(params["nl_after_vbrace_open_empty"])
        if "nl_after_brace_close" in params: self.nl_after_brace_close.setCurrentText(params["nl_after_brace_close"])
        if "nl_after_vbrace_close" in params: self.nl_after_vbrace_close.setCurrentText(params["nl_after_vbrace_close"])
        if "nl_brace_struct_var" in params: self.nl_brace_struct_var.setCurrentText(params["nl_brace_struct_var"])
        if "nl_define_macro" in params: self.nl_define_macro.setCurrentText(params["nl_define_macro"])
        if "nl_squeeze_paren_close" in params: self.nl_squeeze_paren_close.setCurrentText(params["nl_squeeze_paren_close"])
        if "nl_squeeze_ifdef" in params: self.nl_squeeze_ifdef.setCurrentText(params["nl_squeeze_ifdef"])
        if "nl_squeeze_ifdef_top_level" in params: self.nl_squeeze_ifdef_top_level.setCurrentText(params["nl_squeeze_ifdef_top_level"])
        if "nl_before_if" in params: self.nl_before_if.setCurrentText(params["nl_before_if"])
        if "nl_after_if" in params: self.nl_after_if.setCurrentText(params["nl_after_if"])
        if "nl_before_for" in params: self.nl_before_for.setCurrentText(params["nl_before_for"])
        if "nl_after_for" in params: self.nl_after_for.setCurrentText(params["nl_after_for"])
        if "nl_before_while" in params: self.nl_before_while.setCurrentText(params["nl_before_while"])
        if "nl_after_while" in params: self.nl_after_while.setCurrentText(params["nl_after_while"])
        if "nl_before_switch" in params: self.nl_before_switch.setCurrentText(params["nl_before_switch"])
        if "nl_after_switch" in params: self.nl_after_switch.setCurrentText(params["nl_after_switch"])
        if "nl_before_synchronized" in params: self.nl_before_synchronized.setCurrentText(params["nl_before_synchronized"])
        if "nl_after_synchronized" in params: self.nl_after_synchronized.setCurrentText(params["nl_after_synchronized"])
        if "nl_before_do" in params: self.nl_before_do.setCurrentText(params["nl_before_do"])
        if "nl_after_do" in params: self.nl_after_do.setCurrentText(params["nl_after_do"])
        if "nl_before_return" in params: self.nl_before_return.setCurrentText(params["nl_before_return"])
        if "nl_after_return" in params: self.nl_after_return.setCurrentText(params["nl_after_return"])
        if "nl_before_member" in params: self.nl_before_member.setCurrentText(params["nl_before_member"])
        if "nl_after_member" in params: self.nl_after_member.setCurrentText(params["nl_after_member"])
        if "nl_ds_struct_enum_cmt" in params: self.nl_ds_struct_enum_cmt.setCurrentText(params["nl_ds_struct_enum_cmt"])
        if "nl_ds_struct_enum_close_brace" in params: self.nl_ds_struct_enum_close_brace.setCurrentText(params["nl_ds_struct_enum_close_brace"])
        if "nl_class_colon" in params: self.nl_class_colon.setCurrentText(params["nl_class_colon"])
        if "nl_constr_colon" in params: self.nl_constr_colon.setCurrentText(params["nl_constr_colon"])
        if "nl_namespace_two_to_one_liner" in params: self.nl_namespace_two_to_one_liner.setCurrentText(params["nl_namespace_two_to_one_liner"])
        if "nl_create_if_one_liner" in params: self.nl_create_if_one_liner.setCurrentText(params["nl_create_if_one_liner"])
        if "nl_create_for_one_liner" in params: self.nl_create_for_one_liner.setCurrentText(params["nl_create_for_one_liner"])
        if "nl_create_while_one_liner" in params: self.nl_create_while_one_liner.setCurrentText(params["nl_create_while_one_liner"])
        if "nl_create_func_def_one_liner" in params: self.nl_create_func_def_one_liner.setCurrentText(params["nl_create_func_def_one_liner"])
        if "nl_create_list_one_liner" in params: self.nl_create_list_one_liner.setCurrentText(params["nl_create_list_one_liner"])
        if "nl_split_if_one_liner" in params: self.nl_split_if_one_liner.setCurrentText(params["nl_split_if_one_liner"])
        if "nl_split_for_one_liner" in params: self.nl_split_for_one_liner.setCurrentText(params["nl_split_for_one_liner"])
        if "nl_split_while_one_liner" in params: self.nl_split_while_one_liner.setCurrentText(params["nl_split_while_one_liner"])
        if "nl_max" in params: self.nl_max.setValue(int(params["nl_max"]))
        if "nl_max_blank_in_func" in params: self.nl_max_blank_in_func.setValue(int(params["nl_max_blank_in_func"]))
        if "nl_before_func_body_proto" in params: self.nl_before_func_body_proto.setValue(int(params["nl_before_func_body_proto"]))
        if "nl_before_func_body_def" in params: self.nl_before_func_body_def.setValue(int(params["nl_before_func_body_def"]))
        if "nl_before_func_class_proto" in params: self.nl_before_func_class_proto.setValue(int(params["nl_before_func_class_proto"]))
        if "nl_before_func_class_def" in params: self.nl_before_func_class_def.setValue(int(params["nl_before_func_class_def"]))
        if "nl_after_func_proto" in params: self.nl_after_func_proto.setValue(int(params["nl_after_func_proto"]))
        if "nl_after_func_proto_group" in params: self.nl_after_func_proto_group.setValue(int(params["nl_after_func_proto_group"]))
        if "nl_after_func_class_proto" in params: self.nl_after_func_class_proto.setValue(int(params["nl_after_func_class_proto"]))
        if "nl_after_func_class_proto_group" in params: self.nl_after_func_class_proto_group.setValue(int(params["nl_after_func_class_proto_group"]))
        if "nl_class_leave_one_liner_groups" in params: self.nl_class_leave_one_liner_groups.setCurrentText(params["nl_class_leave_one_liner_groups"])
        if "nl_after_func_body" in params: self.nl_after_func_body.setValue(int(params["nl_after_func_body"]))
        if "nl_after_func_body_class" in params: self.nl_after_func_body_class.setValue(int(params["nl_after_func_body_class"]))
        if "nl_after_func_body_one_liner" in params: self.nl_after_func_body_one_liner.setValue(int(params["nl_after_func_body_one_liner"]))
        if "nl_func_var_def_blk" in params: self.nl_func_var_def_blk.setValue(int(params["nl_func_var_def_blk"]))
        if "nl_typedef_blk_start" in params: self.nl_typedef_blk_start.setValue(int(params["nl_typedef_blk_start"]))
        if "nl_typedef_blk_end" in params: self.nl_typedef_blk_end.setValue(int(params["nl_typedef_blk_end"]))
        if "nl_typedef_blk_in" in params: self.nl_typedef_blk_in.setValue(int(params["nl_typedef_blk_in"]))
        if "nl_var_def_blk_start" in params: self.nl_var_def_blk_start.setValue(int(params["nl_var_def_blk_start"]))
        if "nl_var_def_blk_end" in params: self.nl_var_def_blk_end.setValue(int(params["nl_var_def_blk_end"]))
        if "nl_var_def_blk_in" in params: self.nl_var_def_blk_in.setValue(int(params["nl_var_def_blk_in"]))
        if "nl_before_block_comment" in params: self.nl_before_block_comment.setValue(int(params["nl_before_block_comment"]))
        if "nl_before_c_comment" in params: self.nl_before_c_comment.setValue(int(params["nl_before_c_comment"]))
        if "nl_before_cpp_comment" in params: self.nl_before_cpp_comment.setValue(int(params["nl_before_cpp_comment"]))
        if "nl_after_multiline_comment" in params: self.nl_after_multiline_comment.setCurrentText(params["nl_after_multiline_comment"])
        if "nl_after_label_colon" in params: self.nl_after_label_colon.setCurrentText(params["nl_after_label_colon"])
        if "nl_after_struct" in params: self.nl_after_struct.setValue(int(params["nl_after_struct"]))
        if "nl_before_class" in params: self.nl_before_class.setValue(int(params["nl_before_class"]))
        if "nl_after_class" in params: self.nl_after_class.setValue(int(params["nl_after_class"]))
        if "nl_before_namespace" in params: self.nl_before_namespace.setValue(int(params["nl_before_namespace"]))
        if "nl_inside_namespace" in params: self.nl_inside_namespace.setValue(int(params["nl_inside_namespace"]))
        if "nl_after_namespace" in params: self.nl_after_namespace.setValue(int(params["nl_after_namespace"]))
        if "nl_before_access_spec" in params: self.nl_before_access_spec.setValue(int(params["nl_before_access_spec"]))
        if "nl_after_access_spec" in params: self.nl_after_access_spec.setValue(int(params["nl_after_access_spec"]))
        if "nl_comment_func_def" in params: self.nl_comment_func_def.setValue(int(params["nl_comment_func_def"]))
        if "nl_after_try_catch_finally" in params: self.nl_after_try_catch_finally.setValue(int(params["nl_after_try_catch_finally"]))
        if "nl_around_cs_property" in params: self.nl_around_cs_property.setValue(int(params["nl_around_cs_property"]))
        if "nl_between_get_set" in params: self.nl_between_get_set.setValue(int(params["nl_between_get_set"]))
        if "nl_property_brace" in params: self.nl_property_brace.setCurrentText(params["nl_property_brace"])
        if "eat_blanks_after_open_brace" in params: self.eat_blanks_after_open_brace.setCurrentText(params["eat_blanks_after_open_brace"])
        if "eat_blanks_before_close_brace" in params: self.eat_blanks_before_close_brace.setCurrentText(params["eat_blanks_before_close_brace"])
        if "nl_remove_extra_newlines" in params: self.nl_remove_extra_newlines.setValue(int(params["nl_remove_extra_newlines"]))
        if "nl_after_annotation" in params: self.nl_after_annotation.setCurrentText(params["nl_after_annotation"])
        if "nl_between_annotation" in params: self.nl_between_annotation.setCurrentText(params["nl_between_annotation"])
        if "nl_before_whole_file_ifdef" in params: self.nl_before_whole_file_ifdef.setValue(int(params["nl_before_whole_file_ifdef"]))
        if "nl_after_whole_file_ifdef" in params: self.nl_after_whole_file_ifdef.setValue(int(params["nl_after_whole_file_ifdef"]))
        if "nl_before_whole_file_endif" in params: self.nl_before_whole_file_endif.setValue(int(params["nl_before_whole_file_endif"]))
        if "nl_after_whole_file_endif" in params: self.nl_after_whole_file_endif.setValue(int(params["nl_after_whole_file_endif"]))
        if "pos_arith" in params: self.pos_arith.setCurrentText(params["pos_arith"])
        if "pos_assign" in params: self.pos_assign.setCurrentText(params["pos_assign"])
        if "pos_bool" in params: self.pos_bool.setCurrentText(params["pos_bool"])
        if "pos_compare" in params: self.pos_compare.setCurrentText(params["pos_compare"])
        if "pos_conditional" in params: self.pos_conditional.setCurrentText(params["pos_conditional"])
        if "pos_comma" in params: self.pos_comma.setCurrentText(params["pos_comma"])
        if "pos_enum_comma" in params: self.pos_enum_comma.setCurrentText(params["pos_enum_comma"])
        if "pos_class_comma" in params: self.pos_class_comma.setCurrentText(params["pos_class_comma"])
        if "pos_constr_comma" in params: self.pos_constr_comma.setCurrentText(params["pos_constr_comma"])
        if "pos_class_colon" in params: self.pos_class_colon.setCurrentText(params["pos_class_colon"])
        if "pos_constr_colon" in params: self.pos_constr_colon.setCurrentText(params["pos_constr_colon"])
        if "code_width" in params: self.code_width.setValue(int(params["code_width"]))
        if "ls_for_split_full" in params: self.ls_for_split_full.setCurrentText(params["ls_for_split_full"])
        if "ls_func_split_full" in params: self.ls_func_split_full.setCurrentText(params["ls_func_split_full"])
        if "ls_code_width" in params: self.ls_code_width.setCurrentText(params["ls_code_width"])
        if "align_keep_tabs" in params: self.align_keep_tabs.setCurrentText(params["align_keep_tabs"])
        if "align_with_tabs" in params: self.align_with_tabs.setCurrentText(params["align_with_tabs"])
        if "align_on_tabstop" in params: self.align_on_tabstop.setCurrentText(params["align_on_tabstop"])
        if "align_number_right" in params: self.align_number_right.setCurrentText(params["align_number_right"])
        if "align_keep_extra_space" in params: self.align_keep_extra_space.setCurrentText(params["align_keep_extra_space"])
        if "align_func_params" in params: self.align_func_params.setCurrentText(params["align_func_params"])
        if "align_func_params_span" in params: self.align_func_params_span.setValue(int(params["align_func_params_span"]))
        if "align_func_params_thresh" in params: self.align_func_params_thresh.setValue(int(params["align_func_params_thresh"]))
        if "align_func_params_gap" in params: self.align_func_params_gap.setValue(int(params["align_func_params_gap"]))
        if "align_constr_value_span" in params: self.align_constr_value_span.setValue(int(params["align_constr_value_span"]))
        if "align_constr_value_thresh" in params: self.align_constr_value_thresh.setValue(int(params["align_constr_value_thresh"]))
        if "align_constr_value_gap" in params: self.align_constr_value_gap.setValue(int(params["align_constr_value_gap"]))
        if "align_same_func_call_params" in params: self.align_same_func_call_params.setCurrentText(params["align_same_func_call_params"])
        if "align_same_func_call_params_span" in params: self.align_same_func_call_params_span.setValue(int(params["align_same_func_call_params_span"]))
        if "align_same_func_call_params_thresh" in params: self.align_same_func_call_params_thresh.setValue(int(params["align_same_func_call_params_thresh"]))
        if "align_var_def_span" in params: self.align_var_def_span.setValue(int(params["align_var_def_span"]))
        if "align_var_def_star_style" in params: self.align_var_def_star_style.setValue(int(params["align_var_def_star_style"]))
        if "align_var_def_amp_style" in params: self.align_var_def_amp_style.setValue(int(params["align_var_def_amp_style"]))
        if "align_var_def_thresh" in params: self.align_var_def_thresh.setValue(int(params["align_var_def_thresh"]))
        if "align_var_def_gap" in params: self.align_var_def_gap.setValue(int(params["align_var_def_gap"]))
        if "align_var_def_colon" in params: self.align_var_def_colon.setCurrentText(params["align_var_def_colon"])
        if "align_var_def_colon_gap" in params: self.align_var_def_colon_gap.setValue(int(params["align_var_def_colon_gap"]))
        if "align_var_def_attribute" in params: self.align_var_def_attribute.setCurrentText(params["align_var_def_attribute"])
        if "align_var_def_inline" in params: self.align_var_def_inline.setCurrentText(params["align_var_def_inline"])
        if "align_assign_span" in params: self.align_assign_span.setValue(int(params["align_assign_span"]))
        if "align_assign_func_proto_span" in params: self.align_assign_func_proto_span.setValue(int(params["align_assign_func_proto_span"]))
        if "align_assign_thresh" in params: self.align_assign_thresh.setValue(int(params["align_assign_thresh"]))
        if "align_assign_decl_func" in params: self.align_assign_decl_func.setValue(int(params["align_assign_decl_func"]))
        if "align_enum_equ_span" in params: self.align_enum_equ_span.setValue(int(params["align_enum_equ_span"]))
        if "align_enum_equ_thresh" in params: self.align_enum_equ_thresh.setValue(int(params["align_enum_equ_thresh"]))
        if "align_var_class_span" in params: self.align_var_class_span.setValue(int(params["align_var_class_span"]))
        if "align_var_class_thresh" in params: self.align_var_class_thresh.setValue(int(params["align_var_class_thresh"]))
        if "align_var_class_gap" in params: self.align_var_class_gap.setValue(int(params["align_var_class_gap"]))
        if "align_var_struct_span" in params: self.align_var_struct_span.setValue(int(params["align_var_struct_span"]))
        if "align_var_struct_thresh" in params: self.align_var_struct_thresh.setValue(int(params["align_var_struct_thresh"]))
        if "align_var_struct_gap" in params: self.align_var_struct_gap.setValue(int(params["align_var_struct_gap"]))
        if "align_struct_init_span" in params: self.align_struct_init_span.setValue(int(params["align_struct_init_span"]))
        if "align_typedef_span" in params: self.align_typedef_span.setValue(int(params["align_typedef_span"]))
        if "align_typedef_gap" in params: self.align_typedef_gap.setValue(int(params["align_typedef_gap"]))
        if "align_typedef_func" in params: self.align_typedef_func.setValue(int(params["align_typedef_func"]))
        if "align_typedef_star_style" in params: self.align_typedef_star_style.setValue(int(params["align_typedef_star_style"]))
        if "align_typedef_amp_style" in params: self.align_typedef_amp_style.setValue(int(params["align_typedef_amp_style"]))
        if "align_right_cmt_span" in params: self.align_right_cmt_span.setValue(int(params["align_right_cmt_span"]))
        if "align_right_cmt_gap" in params: self.align_right_cmt_gap.setValue(int(params["align_right_cmt_gap"]))
        if "align_right_cmt_mix" in params: self.align_right_cmt_mix.setCurrentText(params["align_right_cmt_mix"])
        if "align_right_cmt_same_level" in params: self.align_right_cmt_same_level.setCurrentText(params["align_right_cmt_same_level"])
        if "align_right_cmt_at_col" in params: self.align_right_cmt_at_col.setValue(int(params["align_right_cmt_at_col"]))
        if "align_func_proto_span" in params: self.align_func_proto_span.setValue(int(params["align_func_proto_span"]))
        if "align_func_proto_thresh" in params: self.align_func_proto_thresh.setValue(int(params["align_func_proto_thresh"]))
        if "align_func_proto_gap" in params: self.align_func_proto_gap.setValue(int(params["align_func_proto_gap"]))
        if "align_on_operator" in params: self.align_on_operator.setCurrentText(params["align_on_operator"])
        if "align_mix_var_proto" in params: self.align_mix_var_proto.setCurrentText(params["align_mix_var_proto"])
        if "align_single_line_func" in params: self.align_single_line_func.setCurrentText(params["align_single_line_func"])
        if "align_single_line_brace" in params: self.align_single_line_brace.setCurrentText(params["align_single_line_brace"])
        if "align_single_line_brace_gap" in params: self.align_single_line_brace_gap.setValue(int(params["align_single_line_brace_gap"]))
        if "align_oc_msg_spec_span" in params: self.align_oc_msg_spec_span.setValue(int(params["align_oc_msg_spec_span"]))
        if "align_nl_cont" in params: self.align_nl_cont.setCurrentText(params["align_nl_cont"])
        if "align_pp_define_together" in params: self.align_pp_define_together.setCurrentText(params["align_pp_define_together"])
        if "align_pp_define_span" in params: self.align_pp_define_span.setValue(int(params["align_pp_define_span"]))
        if "align_pp_define_gap" in params: self.align_pp_define_gap.setValue(int(params["align_pp_define_gap"]))
        if "align_left_shift" in params: self.align_left_shift.setCurrentText(params["align_left_shift"])
        if "align_asm_colon" in params: self.align_asm_colon.setCurrentText(params["align_asm_colon"])
        if "align_oc_msg_colon_span" in params: self.align_oc_msg_colon_span.setValue(int(params["align_oc_msg_colon_span"]))
        if "align_oc_msg_colon_first" in params: self.align_oc_msg_colon_first.setCurrentText(params["align_oc_msg_colon_first"])
        if "align_oc_decl_colon" in params: self.align_oc_decl_colon.setCurrentText(params["align_oc_decl_colon"])
        if "align_oc_msg_colon_xcode_like" in params: self.align_oc_msg_colon_xcode_like.setCurrentText(params["align_oc_msg_colon_xcode_like"])
        if "cmt_width" in params: self.cmt_width.setValue(int(params["cmt_width"]))
        if "cmt_reflow_mode" in params: self.cmt_reflow_mode.setValue(int(params["cmt_reflow_mode"]))
        if "cmt_convert_tab_to_spaces" in params: self.cmt_convert_tab_to_spaces.setCurrentText(params["cmt_convert_tab_to_spaces"])
        if "cmt_indent_multi" in params: self.cmt_indent_multi.setCurrentText(params["cmt_indent_multi"])
        if "cmt_c_group" in params: self.cmt_c_group.setCurrentText(params["cmt_c_group"])
        if "cmt_c_nl_start" in params: self.cmt_c_nl_start.setCurrentText(params["cmt_c_nl_start"])
        if "cmt_c_nl_end" in params: self.cmt_c_nl_end.setCurrentText(params["cmt_c_nl_end"])
        if "cmt_cpp_to_c" in params: self.cmt_cpp_to_c.setCurrentText(params["cmt_cpp_to_c"])
        if "cmt_cpp_group" in params: self.cmt_cpp_group.setCurrentText(params["cmt_cpp_group"])
        if "cmt_cpp_nl_start" in params: self.cmt_cpp_nl_start.setCurrentText(params["cmt_cpp_nl_start"])
        if "cmt_cpp_nl_end" in params: self.cmt_cpp_nl_end.setCurrentText(params["cmt_cpp_nl_end"])
        if "cmt_star_cont" in params: self.cmt_star_cont.setCurrentText(params["cmt_star_cont"])
        if "cmt_sp_before_star_cont" in params: self.cmt_sp_before_star_cont.setValue(int(params["cmt_sp_before_star_cont"]))
        if "cmt_sp_after_star_cont" in params: self.cmt_sp_after_star_cont.setValue(int(params["cmt_sp_after_star_cont"]))
        if "cmt_multi_check_last" in params: self.cmt_multi_check_last.setCurrentText(params["cmt_multi_check_last"])
        if "cmt_multi_first_len_minimum" in params: self.cmt_multi_first_len_minimum.setValue(int(params["cmt_multi_first_len_minimum"]))
        if "cmt_insert_file_header" in params: self.cmt_insert_file_header.setText(params["cmt_insert_file_header"])
        if "cmt_insert_file_footer" in params: self.cmt_insert_file_footer.setText(params["cmt_insert_file_footer"])
        if "cmt_insert_func_header" in params: self.cmt_insert_func_header.setText(params["cmt_insert_func_header"])
        if "cmt_insert_class_header" in params: self.cmt_insert_class_header.setText(params["cmt_insert_class_header"])
        if "cmt_insert_oc_msg_header" in params: self.cmt_insert_oc_msg_header.setText(params["cmt_insert_oc_msg_header"])
        if "cmt_insert_before_preproc" in params: self.cmt_insert_before_preproc.setCurrentText(params["cmt_insert_before_preproc"])
        if "cmt_insert_before_inlines" in params: self.cmt_insert_before_inlines.setCurrentText(params["cmt_insert_before_inlines"])
        if "cmt_insert_before_ctor_dtor" in params: self.cmt_insert_before_ctor_dtor.setCurrentText(params["cmt_insert_before_ctor_dtor"])
        if "mod_full_brace_do" in params: self.mod_full_brace_do.setCurrentText(params["mod_full_brace_do"])
        if "mod_full_brace_for" in params: self.mod_full_brace_for.setCurrentText(params["mod_full_brace_for"])
        if "mod_full_brace_function" in params: self.mod_full_brace_function.setCurrentText(params["mod_full_brace_function"])
        if "mod_full_brace_if" in params: self.mod_full_brace_if.setCurrentText(params["mod_full_brace_if"])
        if "mod_full_brace_if_chain" in params: self.mod_full_brace_if_chain.setCurrentText(params["mod_full_brace_if_chain"])
        if "mod_full_brace_if_chain_only" in params: self.mod_full_brace_if_chain_only.setCurrentText(params["mod_full_brace_if_chain_only"])
        if "mod_full_brace_while" in params: self.mod_full_brace_while.setCurrentText(params["mod_full_brace_while"])
        if "mod_full_brace_using" in params: self.mod_full_brace_using.setCurrentText(params["mod_full_brace_using"])
        if "mod_full_brace_nl" in params: self.mod_full_brace_nl.setValue(int(params["mod_full_brace_nl"]))
        if "mod_full_brace_nl_block_rem_mlcond" in params: self.mod_full_brace_nl_block_rem_mlcond.setCurrentText(params["mod_full_brace_nl_block_rem_mlcond"])
        if "mod_paren_on_return" in params: self.mod_paren_on_return.setCurrentText(params["mod_paren_on_return"])
        if "mod_pawn_semicolon" in params: self.mod_pawn_semicolon.setCurrentText(params["mod_pawn_semicolon"])
        if "mod_full_paren_if_bool" in params: self.mod_full_paren_if_bool.setCurrentText(params["mod_full_paren_if_bool"])
        if "mod_remove_extra_semicolon" in params: self.mod_remove_extra_semicolon.setCurrentText(params["mod_remove_extra_semicolon"])
        if "mod_add_long_function_closebrace_comment" in params: self.mod_add_long_function_closebrace_comment.setValue(int(params["mod_add_long_function_closebrace_comment"]))
        if "mod_add_long_namespace_closebrace_comment" in params: self.mod_add_long_namespace_closebrace_comment.setValue(int(params["mod_add_long_namespace_closebrace_comment"]))
        if "mod_add_long_class_closebrace_comment" in params: self.mod_add_long_class_closebrace_comment.setValue(int(params["mod_add_long_class_closebrace_comment"]))
        if "mod_add_long_switch_closebrace_comment" in params: self.mod_add_long_switch_closebrace_comment.setValue(int(params["mod_add_long_switch_closebrace_comment"]))
        if "mod_add_long_ifdef_endif_comment" in params: self.mod_add_long_ifdef_endif_comment.setValue(int(params["mod_add_long_ifdef_endif_comment"]))
        if "mod_add_long_ifdef_else_comment" in params: self.mod_add_long_ifdef_else_comment.setValue(int(params["mod_add_long_ifdef_else_comment"]))
        if "mod_sort_case_sensitive" in params: self.mod_sort_case_sensitive.setCurrentText(params["mod_sort_case_sensitive"])
        if "mod_sort_import" in params: self.mod_sort_import.setCurrentText(params["mod_sort_import"])
        if "mod_sort_using" in params: self.mod_sort_using.setCurrentText(params["mod_sort_using"])
        if "mod_sort_include" in params: self.mod_sort_include.setCurrentText(params["mod_sort_include"])
        if "mod_sort_incl_import_prioritize_filename" in params: self.mod_sort_incl_import_prioritize_filename.setCurrentText(params["mod_sort_incl_import_prioritize_filename"])
        if "mod_sort_incl_import_prioritize_extensionless" in params: self.mod_sort_incl_import_prioritize_extensionless.setCurrentText(params["mod_sort_incl_import_prioritize_extensionless"])
        if "mod_sort_incl_import_prioritize_angle_over_quotes" in params: self.mod_sort_incl_import_prioritize_angle_over_quotes.setCurrentText(params["mod_sort_incl_import_prioritize_angle_over_quotes"])
        if "mod_sort_incl_import_ignore_extension" in params: self.mod_sort_incl_import_ignore_extension.setCurrentText(params["mod_sort_incl_import_ignore_extension"])
        if "mod_sort_incl_import_grouping_enabled" in params: self.mod_sort_incl_import_grouping_enabled.setCurrentText(params["mod_sort_incl_import_grouping_enabled"])
        if "mod_move_case_break" in params: self.mod_move_case_break.setCurrentText(params["mod_move_case_break"])
        if "mod_case_brace" in params: self.mod_case_brace.setCurrentText(params["mod_case_brace"])
        if "mod_remove_empty_return" in params: self.mod_remove_empty_return.setCurrentText(params["mod_remove_empty_return"])
        if "mod_enum_last_comma" in params: self.mod_enum_last_comma.setCurrentText(params["mod_enum_last_comma"])
        if "mod_sort_oc_properties" in params: self.mod_sort_oc_properties.setCurrentText(params["mod_sort_oc_properties"])
        if "mod_sort_oc_property_class_weight" in params: self.mod_sort_oc_property_class_weight.setValue(int(params["mod_sort_oc_property_class_weight"]))
        if "mod_sort_oc_property_thread_safe_weight" in params: self.mod_sort_oc_property_thread_safe_weight.setValue(int(params["mod_sort_oc_property_thread_safe_weight"]))
        if "mod_sort_oc_property_readwrite_weight" in params: self.mod_sort_oc_property_readwrite_weight.setValue(int(params["mod_sort_oc_property_readwrite_weight"]))
        if "mod_sort_oc_property_reference_weight" in params: self.mod_sort_oc_property_reference_weight.setValue(int(params["mod_sort_oc_property_reference_weight"]))
        if "mod_sort_oc_property_getter_weight" in params: self.mod_sort_oc_property_getter_weight.setValue(int(params["mod_sort_oc_property_getter_weight"]))
        if "mod_sort_oc_property_setter_weight" in params: self.mod_sort_oc_property_setter_weight.setValue(int(params["mod_sort_oc_property_setter_weight"]))
        if "mod_sort_oc_property_nullability_weight" in params: self.mod_sort_oc_property_nullability_weight.setValue(int(params["mod_sort_oc_property_nullability_weight"]))
        if "pp_indent" in params: self.pp_indent.setCurrentText(params["pp_indent"])
        if "pp_indent_at_level" in params: self.pp_indent_at_level.setCurrentText(params["pp_indent_at_level"])
        if "pp_indent_count" in params: self.pp_indent_count.setValue(int(params["pp_indent_count"]))
        if "pp_space" in params: self.pp_space.setCurrentText(params["pp_space"])
        if "pp_space_count" in params: self.pp_space_count.setValue(int(params["pp_space_count"]))
        if "pp_indent_region" in params: self.pp_indent_region.setValue(int(params["pp_indent_region"]))
        if "pp_region_indent_code" in params: self.pp_region_indent_code.setCurrentText(params["pp_region_indent_code"])
        if "pp_indent_if" in params: self.pp_indent_if.setValue(int(params["pp_indent_if"]))
        if "pp_if_indent_code" in params: self.pp_if_indent_code.setCurrentText(params["pp_if_indent_code"])
        if "pp_define_at_level" in params: self.pp_define_at_level.setCurrentText(params["pp_define_at_level"])
        if "pp_ignore_define_body" in params: self.pp_ignore_define_body.setCurrentText(params["pp_ignore_define_body"])
        if "pp_indent_case" in params: self.pp_indent_case.setCurrentText(params["pp_indent_case"])
        if "pp_indent_func_def" in params: self.pp_indent_func_def.setCurrentText(params["pp_indent_func_def"])
        if "pp_indent_extern" in params: self.pp_indent_extern.setCurrentText(params["pp_indent_extern"])
        if "pp_indent_brace" in params: self.pp_indent_brace.setCurrentText(params["pp_indent_brace"])
        if "include_category_0" in params: self.include_category_0.setText(params["include_category_0"])
        if "include_category_1" in params: self.include_category_1.setText(params["include_category_1"])
        if "include_category_2" in params: self.include_category_2.setText(params["include_category_2"])
        if "use_indent_func_call_param" in params: self.use_indent_func_call_param.setCurrentText(params["use_indent_func_call_param"])
        if "use_indent_continue_only_once" in params: self.use_indent_continue_only_once.setCurrentText(params["use_indent_continue_only_once"])
        if "indent_cpp_lambda_only_once" in params: self.indent_cpp_lambda_only_once.setCurrentText(params["indent_cpp_lambda_only_once"])
        if "use_sp_after_angle_always" in params: self.use_sp_after_angle_always.setCurrentText(params["use_sp_after_angle_always"])
        if "use_options_overriding_for_qt_macros" in params: self.use_options_overriding_for_qt_macros.setCurrentText(params["use_options_overriding_for_qt_macros"])
        if "use_form_feed_no_more_as_whitespace_character" in params: self.use_form_feed_no_more_as_whitespace_character.setCurrentText(params["use_form_feed_no_more_as_whitespace_character"])
        if "warn_level_tabs_found_in_verbatim_string_literals" in params: self.warn_level_tabs_found_in_verbatim_string_literals.setValue(int(params["warn_level_tabs_found_in_verbatim_string_literals"]))
        if "debug_max_number_of_loops" in params: self.debug_max_number_of_loops.setValue(int(params["debug_max_number_of_loops"]))
        if "debug_line_number_to_protocol" in params: self.debug_line_number_to_protocol.setValue(int(params["debug_line_number_to_protocol"]))
    def filter(self, filter):
        self.labelnewlines.setVisible(filter=='' or 'newlines'.find(filter)!=-1)
        if self.tr("code_newlines")!="code_newlines":
            self.codenewlines.setVisible(filter=='' or 'newlines'.find(filter)!=-1)
        self.namenewlines.setVisible(filter=='' or 'newlines'.find(filter)!=-1)
        self.newlines.setVisible(filter=='' or 'newlines'.find(filter)!=-1)
        self.labelinput_tab_size.setVisible(filter=='' or 'input_tab_size'.find(filter)!=-1)
        if self.tr("code_input_tab_size")!="code_input_tab_size":
            self.codeinput_tab_size.setVisible(filter=='' or 'input_tab_size'.find(filter)!=-1)
        self.nameinput_tab_size.setVisible(filter=='' or 'input_tab_size'.find(filter)!=-1)
        self.input_tab_size.setVisible(filter=='' or 'input_tab_size'.find(filter)!=-1)
        self.labeloutput_tab_size.setVisible(filter=='' or 'output_tab_size'.find(filter)!=-1)
        if self.tr("code_output_tab_size")!="code_output_tab_size":
            self.codeoutput_tab_size.setVisible(filter=='' or 'output_tab_size'.find(filter)!=-1)
        self.nameoutput_tab_size.setVisible(filter=='' or 'output_tab_size'.find(filter)!=-1)
        self.output_tab_size.setVisible(filter=='' or 'output_tab_size'.find(filter)!=-1)
        self.labelstring_escape_char.setVisible(filter=='' or 'string_escape_char'.find(filter)!=-1)
        if self.tr("code_string_escape_char")!="code_string_escape_char":
            self.codestring_escape_char.setVisible(filter=='' or 'string_escape_char'.find(filter)!=-1)
        self.namestring_escape_char.setVisible(filter=='' or 'string_escape_char'.find(filter)!=-1)
        self.string_escape_char.setVisible(filter=='' or 'string_escape_char'.find(filter)!=-1)
        self.labelstring_escape_char2.setVisible(filter=='' or 'string_escape_char2'.find(filter)!=-1)
        if self.tr("code_string_escape_char2")!="code_string_escape_char2":
            self.codestring_escape_char2.setVisible(filter=='' or 'string_escape_char2'.find(filter)!=-1)
        self.namestring_escape_char2.setVisible(filter=='' or 'string_escape_char2'.find(filter)!=-1)
        self.string_escape_char2.setVisible(filter=='' or 'string_escape_char2'.find(filter)!=-1)
        self.labelstring_replace_tab_chars.setVisible(filter=='' or 'string_replace_tab_chars'.find(filter)!=-1)
        if self.tr("code_string_replace_tab_chars")!="code_string_replace_tab_chars":
            self.codestring_replace_tab_chars.setVisible(filter=='' or 'string_replace_tab_chars'.find(filter)!=-1)
        self.namestring_replace_tab_chars.setVisible(filter=='' or 'string_replace_tab_chars'.find(filter)!=-1)
        self.string_replace_tab_chars.setVisible(filter=='' or 'string_replace_tab_chars'.find(filter)!=-1)
        self.labeltok_split_gte.setVisible(filter=='' or 'tok_split_gte'.find(filter)!=-1)
        if self.tr("code_tok_split_gte")!="code_tok_split_gte":
            self.codetok_split_gte.setVisible(filter=='' or 'tok_split_gte'.find(filter)!=-1)
        self.nametok_split_gte.setVisible(filter=='' or 'tok_split_gte'.find(filter)!=-1)
        self.tok_split_gte.setVisible(filter=='' or 'tok_split_gte'.find(filter)!=-1)
        self.labeldisable_processing_nl_cont.setVisible(filter=='' or 'disable_processing_nl_cont'.find(filter)!=-1)
        if self.tr("code_disable_processing_nl_cont")!="code_disable_processing_nl_cont":
            self.codedisable_processing_nl_cont.setVisible(filter=='' or 'disable_processing_nl_cont'.find(filter)!=-1)
        self.namedisable_processing_nl_cont.setVisible(filter=='' or 'disable_processing_nl_cont'.find(filter)!=-1)
        self.disable_processing_nl_cont.setVisible(filter=='' or 'disable_processing_nl_cont'.find(filter)!=-1)
        self.labeldisable_processing_cmt.setVisible(filter=='' or 'disable_processing_cmt'.find(filter)!=-1)
        if self.tr("code_disable_processing_cmt")!="code_disable_processing_cmt":
            self.codedisable_processing_cmt.setVisible(filter=='' or 'disable_processing_cmt'.find(filter)!=-1)
        self.namedisable_processing_cmt.setVisible(filter=='' or 'disable_processing_cmt'.find(filter)!=-1)
        self.disable_processing_cmt.setVisible(filter=='' or 'disable_processing_cmt'.find(filter)!=-1)
        self.labelenable_processing_cmt.setVisible(filter=='' or 'enable_processing_cmt'.find(filter)!=-1)
        if self.tr("code_enable_processing_cmt")!="code_enable_processing_cmt":
            self.codeenable_processing_cmt.setVisible(filter=='' or 'enable_processing_cmt'.find(filter)!=-1)
        self.nameenable_processing_cmt.setVisible(filter=='' or 'enable_processing_cmt'.find(filter)!=-1)
        self.enable_processing_cmt.setVisible(filter=='' or 'enable_processing_cmt'.find(filter)!=-1)
        self.labelenable_digraphs.setVisible(filter=='' or 'enable_digraphs'.find(filter)!=-1)
        if self.tr("code_enable_digraphs")!="code_enable_digraphs":
            self.codeenable_digraphs.setVisible(filter=='' or 'enable_digraphs'.find(filter)!=-1)
        self.nameenable_digraphs.setVisible(filter=='' or 'enable_digraphs'.find(filter)!=-1)
        self.enable_digraphs.setVisible(filter=='' or 'enable_digraphs'.find(filter)!=-1)
        self.labelutf8_bom.setVisible(filter=='' or 'utf8_bom'.find(filter)!=-1)
        if self.tr("code_utf8_bom")!="code_utf8_bom":
            self.codeutf8_bom.setVisible(filter=='' or 'utf8_bom'.find(filter)!=-1)
        self.nameutf8_bom.setVisible(filter=='' or 'utf8_bom'.find(filter)!=-1)
        self.utf8_bom.setVisible(filter=='' or 'utf8_bom'.find(filter)!=-1)
        self.labelutf8_byte.setVisible(filter=='' or 'utf8_byte'.find(filter)!=-1)
        if self.tr("code_utf8_byte")!="code_utf8_byte":
            self.codeutf8_byte.setVisible(filter=='' or 'utf8_byte'.find(filter)!=-1)
        self.nameutf8_byte.setVisible(filter=='' or 'utf8_byte'.find(filter)!=-1)
        self.utf8_byte.setVisible(filter=='' or 'utf8_byte'.find(filter)!=-1)
        self.labelutf8_force.setVisible(filter=='' or 'utf8_force'.find(filter)!=-1)
        if self.tr("code_utf8_force")!="code_utf8_force":
            self.codeutf8_force.setVisible(filter=='' or 'utf8_force'.find(filter)!=-1)
        self.nameutf8_force.setVisible(filter=='' or 'utf8_force'.find(filter)!=-1)
        self.utf8_force.setVisible(filter=='' or 'utf8_force'.find(filter)!=-1)
        self.labelsp_do_brace_open.setVisible(filter=='' or 'sp_do_brace_open'.find(filter)!=-1)
        if self.tr("code_sp_do_brace_open")!="code_sp_do_brace_open":
            self.codesp_do_brace_open.setVisible(filter=='' or 'sp_do_brace_open'.find(filter)!=-1)
        self.namesp_do_brace_open.setVisible(filter=='' or 'sp_do_brace_open'.find(filter)!=-1)
        self.sp_do_brace_open.setVisible(filter=='' or 'sp_do_brace_open'.find(filter)!=-1)
        self.labelsp_brace_close_while.setVisible(filter=='' or 'sp_brace_close_while'.find(filter)!=-1)
        if self.tr("code_sp_brace_close_while")!="code_sp_brace_close_while":
            self.codesp_brace_close_while.setVisible(filter=='' or 'sp_brace_close_while'.find(filter)!=-1)
        self.namesp_brace_close_while.setVisible(filter=='' or 'sp_brace_close_while'.find(filter)!=-1)
        self.sp_brace_close_while.setVisible(filter=='' or 'sp_brace_close_while'.find(filter)!=-1)
        self.labelsp_while_paren_open.setVisible(filter=='' or 'sp_while_paren_open'.find(filter)!=-1)
        if self.tr("code_sp_while_paren_open")!="code_sp_while_paren_open":
            self.codesp_while_paren_open.setVisible(filter=='' or 'sp_while_paren_open'.find(filter)!=-1)
        self.namesp_while_paren_open.setVisible(filter=='' or 'sp_while_paren_open'.find(filter)!=-1)
        self.sp_while_paren_open.setVisible(filter=='' or 'sp_while_paren_open'.find(filter)!=-1)
        self.labelsp_arith.setVisible(filter=='' or 'sp_arith'.find(filter)!=-1)
        if self.tr("code_sp_arith")!="code_sp_arith":
            self.codesp_arith.setVisible(filter=='' or 'sp_arith'.find(filter)!=-1)
        self.namesp_arith.setVisible(filter=='' or 'sp_arith'.find(filter)!=-1)
        self.sp_arith.setVisible(filter=='' or 'sp_arith'.find(filter)!=-1)
        self.labelsp_arith_additive.setVisible(filter=='' or 'sp_arith_additive'.find(filter)!=-1)
        if self.tr("code_sp_arith_additive")!="code_sp_arith_additive":
            self.codesp_arith_additive.setVisible(filter=='' or 'sp_arith_additive'.find(filter)!=-1)
        self.namesp_arith_additive.setVisible(filter=='' or 'sp_arith_additive'.find(filter)!=-1)
        self.sp_arith_additive.setVisible(filter=='' or 'sp_arith_additive'.find(filter)!=-1)
        self.labelsp_assign.setVisible(filter=='' or 'sp_assign'.find(filter)!=-1)
        if self.tr("code_sp_assign")!="code_sp_assign":
            self.codesp_assign.setVisible(filter=='' or 'sp_assign'.find(filter)!=-1)
        self.namesp_assign.setVisible(filter=='' or 'sp_assign'.find(filter)!=-1)
        self.sp_assign.setVisible(filter=='' or 'sp_assign'.find(filter)!=-1)
        self.labelsp_cpp_lambda_assign.setVisible(filter=='' or 'sp_cpp_lambda_assign'.find(filter)!=-1)
        if self.tr("code_sp_cpp_lambda_assign")!="code_sp_cpp_lambda_assign":
            self.codesp_cpp_lambda_assign.setVisible(filter=='' or 'sp_cpp_lambda_assign'.find(filter)!=-1)
        self.namesp_cpp_lambda_assign.setVisible(filter=='' or 'sp_cpp_lambda_assign'.find(filter)!=-1)
        self.sp_cpp_lambda_assign.setVisible(filter=='' or 'sp_cpp_lambda_assign'.find(filter)!=-1)
        self.labelsp_cpp_lambda_square_paren.setVisible(filter=='' or 'sp_cpp_lambda_square_paren'.find(filter)!=-1)
        if self.tr("code_sp_cpp_lambda_square_paren")!="code_sp_cpp_lambda_square_paren":
            self.codesp_cpp_lambda_square_paren.setVisible(filter=='' or 'sp_cpp_lambda_square_paren'.find(filter)!=-1)
        self.namesp_cpp_lambda_square_paren.setVisible(filter=='' or 'sp_cpp_lambda_square_paren'.find(filter)!=-1)
        self.sp_cpp_lambda_square_paren.setVisible(filter=='' or 'sp_cpp_lambda_square_paren'.find(filter)!=-1)
        self.labelsp_cpp_lambda_square_brace.setVisible(filter=='' or 'sp_cpp_lambda_square_brace'.find(filter)!=-1)
        if self.tr("code_sp_cpp_lambda_square_brace")!="code_sp_cpp_lambda_square_brace":
            self.codesp_cpp_lambda_square_brace.setVisible(filter=='' or 'sp_cpp_lambda_square_brace'.find(filter)!=-1)
        self.namesp_cpp_lambda_square_brace.setVisible(filter=='' or 'sp_cpp_lambda_square_brace'.find(filter)!=-1)
        self.sp_cpp_lambda_square_brace.setVisible(filter=='' or 'sp_cpp_lambda_square_brace'.find(filter)!=-1)
        self.labelsp_cpp_lambda_paren_brace.setVisible(filter=='' or 'sp_cpp_lambda_paren_brace'.find(filter)!=-1)
        if self.tr("code_sp_cpp_lambda_paren_brace")!="code_sp_cpp_lambda_paren_brace":
            self.codesp_cpp_lambda_paren_brace.setVisible(filter=='' or 'sp_cpp_lambda_paren_brace'.find(filter)!=-1)
        self.namesp_cpp_lambda_paren_brace.setVisible(filter=='' or 'sp_cpp_lambda_paren_brace'.find(filter)!=-1)
        self.sp_cpp_lambda_paren_brace.setVisible(filter=='' or 'sp_cpp_lambda_paren_brace'.find(filter)!=-1)
        self.labelsp_cpp_lambda_fparen.setVisible(filter=='' or 'sp_cpp_lambda_fparen'.find(filter)!=-1)
        if self.tr("code_sp_cpp_lambda_fparen")!="code_sp_cpp_lambda_fparen":
            self.codesp_cpp_lambda_fparen.setVisible(filter=='' or 'sp_cpp_lambda_fparen'.find(filter)!=-1)
        self.namesp_cpp_lambda_fparen.setVisible(filter=='' or 'sp_cpp_lambda_fparen'.find(filter)!=-1)
        self.sp_cpp_lambda_fparen.setVisible(filter=='' or 'sp_cpp_lambda_fparen'.find(filter)!=-1)
        self.labelsp_assign_default.setVisible(filter=='' or 'sp_assign_default'.find(filter)!=-1)
        if self.tr("code_sp_assign_default")!="code_sp_assign_default":
            self.codesp_assign_default.setVisible(filter=='' or 'sp_assign_default'.find(filter)!=-1)
        self.namesp_assign_default.setVisible(filter=='' or 'sp_assign_default'.find(filter)!=-1)
        self.sp_assign_default.setVisible(filter=='' or 'sp_assign_default'.find(filter)!=-1)
        self.labelsp_before_assign.setVisible(filter=='' or 'sp_before_assign'.find(filter)!=-1)
        if self.tr("code_sp_before_assign")!="code_sp_before_assign":
            self.codesp_before_assign.setVisible(filter=='' or 'sp_before_assign'.find(filter)!=-1)
        self.namesp_before_assign.setVisible(filter=='' or 'sp_before_assign'.find(filter)!=-1)
        self.sp_before_assign.setVisible(filter=='' or 'sp_before_assign'.find(filter)!=-1)
        self.labelsp_after_assign.setVisible(filter=='' or 'sp_after_assign'.find(filter)!=-1)
        if self.tr("code_sp_after_assign")!="code_sp_after_assign":
            self.codesp_after_assign.setVisible(filter=='' or 'sp_after_assign'.find(filter)!=-1)
        self.namesp_after_assign.setVisible(filter=='' or 'sp_after_assign'.find(filter)!=-1)
        self.sp_after_assign.setVisible(filter=='' or 'sp_after_assign'.find(filter)!=-1)
        self.labelsp_enum_paren.setVisible(filter=='' or 'sp_enum_paren'.find(filter)!=-1)
        if self.tr("code_sp_enum_paren")!="code_sp_enum_paren":
            self.codesp_enum_paren.setVisible(filter=='' or 'sp_enum_paren'.find(filter)!=-1)
        self.namesp_enum_paren.setVisible(filter=='' or 'sp_enum_paren'.find(filter)!=-1)
        self.sp_enum_paren.setVisible(filter=='' or 'sp_enum_paren'.find(filter)!=-1)
        self.labelsp_enum_assign.setVisible(filter=='' or 'sp_enum_assign'.find(filter)!=-1)
        if self.tr("code_sp_enum_assign")!="code_sp_enum_assign":
            self.codesp_enum_assign.setVisible(filter=='' or 'sp_enum_assign'.find(filter)!=-1)
        self.namesp_enum_assign.setVisible(filter=='' or 'sp_enum_assign'.find(filter)!=-1)
        self.sp_enum_assign.setVisible(filter=='' or 'sp_enum_assign'.find(filter)!=-1)
        self.labelsp_enum_before_assign.setVisible(filter=='' or 'sp_enum_before_assign'.find(filter)!=-1)
        if self.tr("code_sp_enum_before_assign")!="code_sp_enum_before_assign":
            self.codesp_enum_before_assign.setVisible(filter=='' or 'sp_enum_before_assign'.find(filter)!=-1)
        self.namesp_enum_before_assign.setVisible(filter=='' or 'sp_enum_before_assign'.find(filter)!=-1)
        self.sp_enum_before_assign.setVisible(filter=='' or 'sp_enum_before_assign'.find(filter)!=-1)
        self.labelsp_enum_after_assign.setVisible(filter=='' or 'sp_enum_after_assign'.find(filter)!=-1)
        if self.tr("code_sp_enum_after_assign")!="code_sp_enum_after_assign":
            self.codesp_enum_after_assign.setVisible(filter=='' or 'sp_enum_after_assign'.find(filter)!=-1)
        self.namesp_enum_after_assign.setVisible(filter=='' or 'sp_enum_after_assign'.find(filter)!=-1)
        self.sp_enum_after_assign.setVisible(filter=='' or 'sp_enum_after_assign'.find(filter)!=-1)
        self.labelsp_enum_colon.setVisible(filter=='' or 'sp_enum_colon'.find(filter)!=-1)
        if self.tr("code_sp_enum_colon")!="code_sp_enum_colon":
            self.codesp_enum_colon.setVisible(filter=='' or 'sp_enum_colon'.find(filter)!=-1)
        self.namesp_enum_colon.setVisible(filter=='' or 'sp_enum_colon'.find(filter)!=-1)
        self.sp_enum_colon.setVisible(filter=='' or 'sp_enum_colon'.find(filter)!=-1)
        self.labelsp_pp_concat.setVisible(filter=='' or 'sp_pp_concat'.find(filter)!=-1)
        if self.tr("code_sp_pp_concat")!="code_sp_pp_concat":
            self.codesp_pp_concat.setVisible(filter=='' or 'sp_pp_concat'.find(filter)!=-1)
        self.namesp_pp_concat.setVisible(filter=='' or 'sp_pp_concat'.find(filter)!=-1)
        self.sp_pp_concat.setVisible(filter=='' or 'sp_pp_concat'.find(filter)!=-1)
        self.labelsp_pp_stringify.setVisible(filter=='' or 'sp_pp_stringify'.find(filter)!=-1)
        if self.tr("code_sp_pp_stringify")!="code_sp_pp_stringify":
            self.codesp_pp_stringify.setVisible(filter=='' or 'sp_pp_stringify'.find(filter)!=-1)
        self.namesp_pp_stringify.setVisible(filter=='' or 'sp_pp_stringify'.find(filter)!=-1)
        self.sp_pp_stringify.setVisible(filter=='' or 'sp_pp_stringify'.find(filter)!=-1)
        self.labelsp_before_pp_stringify.setVisible(filter=='' or 'sp_before_pp_stringify'.find(filter)!=-1)
        if self.tr("code_sp_before_pp_stringify")!="code_sp_before_pp_stringify":
            self.codesp_before_pp_stringify.setVisible(filter=='' or 'sp_before_pp_stringify'.find(filter)!=-1)
        self.namesp_before_pp_stringify.setVisible(filter=='' or 'sp_before_pp_stringify'.find(filter)!=-1)
        self.sp_before_pp_stringify.setVisible(filter=='' or 'sp_before_pp_stringify'.find(filter)!=-1)
        self.labelsp_bool.setVisible(filter=='' or 'sp_bool'.find(filter)!=-1)
        if self.tr("code_sp_bool")!="code_sp_bool":
            self.codesp_bool.setVisible(filter=='' or 'sp_bool'.find(filter)!=-1)
        self.namesp_bool.setVisible(filter=='' or 'sp_bool'.find(filter)!=-1)
        self.sp_bool.setVisible(filter=='' or 'sp_bool'.find(filter)!=-1)
        self.labelsp_compare.setVisible(filter=='' or 'sp_compare'.find(filter)!=-1)
        if self.tr("code_sp_compare")!="code_sp_compare":
            self.codesp_compare.setVisible(filter=='' or 'sp_compare'.find(filter)!=-1)
        self.namesp_compare.setVisible(filter=='' or 'sp_compare'.find(filter)!=-1)
        self.sp_compare.setVisible(filter=='' or 'sp_compare'.find(filter)!=-1)
        self.labelsp_inside_paren.setVisible(filter=='' or 'sp_inside_paren'.find(filter)!=-1)
        if self.tr("code_sp_inside_paren")!="code_sp_inside_paren":
            self.codesp_inside_paren.setVisible(filter=='' or 'sp_inside_paren'.find(filter)!=-1)
        self.namesp_inside_paren.setVisible(filter=='' or 'sp_inside_paren'.find(filter)!=-1)
        self.sp_inside_paren.setVisible(filter=='' or 'sp_inside_paren'.find(filter)!=-1)
        self.labelsp_paren_paren.setVisible(filter=='' or 'sp_paren_paren'.find(filter)!=-1)
        if self.tr("code_sp_paren_paren")!="code_sp_paren_paren":
            self.codesp_paren_paren.setVisible(filter=='' or 'sp_paren_paren'.find(filter)!=-1)
        self.namesp_paren_paren.setVisible(filter=='' or 'sp_paren_paren'.find(filter)!=-1)
        self.sp_paren_paren.setVisible(filter=='' or 'sp_paren_paren'.find(filter)!=-1)
        self.labelsp_cparen_oparen.setVisible(filter=='' or 'sp_cparen_oparen'.find(filter)!=-1)
        if self.tr("code_sp_cparen_oparen")!="code_sp_cparen_oparen":
            self.codesp_cparen_oparen.setVisible(filter=='' or 'sp_cparen_oparen'.find(filter)!=-1)
        self.namesp_cparen_oparen.setVisible(filter=='' or 'sp_cparen_oparen'.find(filter)!=-1)
        self.sp_cparen_oparen.setVisible(filter=='' or 'sp_cparen_oparen'.find(filter)!=-1)
        self.labelsp_balance_nested_parens.setVisible(filter=='' or 'sp_balance_nested_parens'.find(filter)!=-1)
        if self.tr("code_sp_balance_nested_parens")!="code_sp_balance_nested_parens":
            self.codesp_balance_nested_parens.setVisible(filter=='' or 'sp_balance_nested_parens'.find(filter)!=-1)
        self.namesp_balance_nested_parens.setVisible(filter=='' or 'sp_balance_nested_parens'.find(filter)!=-1)
        self.sp_balance_nested_parens.setVisible(filter=='' or 'sp_balance_nested_parens'.find(filter)!=-1)
        self.labelsp_paren_brace.setVisible(filter=='' or 'sp_paren_brace'.find(filter)!=-1)
        if self.tr("code_sp_paren_brace")!="code_sp_paren_brace":
            self.codesp_paren_brace.setVisible(filter=='' or 'sp_paren_brace'.find(filter)!=-1)
        self.namesp_paren_brace.setVisible(filter=='' or 'sp_paren_brace'.find(filter)!=-1)
        self.sp_paren_brace.setVisible(filter=='' or 'sp_paren_brace'.find(filter)!=-1)
        self.labelsp_brace_brace.setVisible(filter=='' or 'sp_brace_brace'.find(filter)!=-1)
        if self.tr("code_sp_brace_brace")!="code_sp_brace_brace":
            self.codesp_brace_brace.setVisible(filter=='' or 'sp_brace_brace'.find(filter)!=-1)
        self.namesp_brace_brace.setVisible(filter=='' or 'sp_brace_brace'.find(filter)!=-1)
        self.sp_brace_brace.setVisible(filter=='' or 'sp_brace_brace'.find(filter)!=-1)
        self.labelsp_before_ptr_star.setVisible(filter=='' or 'sp_before_ptr_star'.find(filter)!=-1)
        if self.tr("code_sp_before_ptr_star")!="code_sp_before_ptr_star":
            self.codesp_before_ptr_star.setVisible(filter=='' or 'sp_before_ptr_star'.find(filter)!=-1)
        self.namesp_before_ptr_star.setVisible(filter=='' or 'sp_before_ptr_star'.find(filter)!=-1)
        self.sp_before_ptr_star.setVisible(filter=='' or 'sp_before_ptr_star'.find(filter)!=-1)
        self.labelsp_before_unnamed_ptr_star.setVisible(filter=='' or 'sp_before_unnamed_ptr_star'.find(filter)!=-1)
        if self.tr("code_sp_before_unnamed_ptr_star")!="code_sp_before_unnamed_ptr_star":
            self.codesp_before_unnamed_ptr_star.setVisible(filter=='' or 'sp_before_unnamed_ptr_star'.find(filter)!=-1)
        self.namesp_before_unnamed_ptr_star.setVisible(filter=='' or 'sp_before_unnamed_ptr_star'.find(filter)!=-1)
        self.sp_before_unnamed_ptr_star.setVisible(filter=='' or 'sp_before_unnamed_ptr_star'.find(filter)!=-1)
        self.labelsp_between_ptr_star.setVisible(filter=='' or 'sp_between_ptr_star'.find(filter)!=-1)
        if self.tr("code_sp_between_ptr_star")!="code_sp_between_ptr_star":
            self.codesp_between_ptr_star.setVisible(filter=='' or 'sp_between_ptr_star'.find(filter)!=-1)
        self.namesp_between_ptr_star.setVisible(filter=='' or 'sp_between_ptr_star'.find(filter)!=-1)
        self.sp_between_ptr_star.setVisible(filter=='' or 'sp_between_ptr_star'.find(filter)!=-1)
        self.labelsp_after_ptr_star.setVisible(filter=='' or 'sp_after_ptr_star'.find(filter)!=-1)
        if self.tr("code_sp_after_ptr_star")!="code_sp_after_ptr_star":
            self.codesp_after_ptr_star.setVisible(filter=='' or 'sp_after_ptr_star'.find(filter)!=-1)
        self.namesp_after_ptr_star.setVisible(filter=='' or 'sp_after_ptr_star'.find(filter)!=-1)
        self.sp_after_ptr_star.setVisible(filter=='' or 'sp_after_ptr_star'.find(filter)!=-1)
        self.labelsp_after_ptr_block_caret.setVisible(filter=='' or 'sp_after_ptr_block_caret'.find(filter)!=-1)
        if self.tr("code_sp_after_ptr_block_caret")!="code_sp_after_ptr_block_caret":
            self.codesp_after_ptr_block_caret.setVisible(filter=='' or 'sp_after_ptr_block_caret'.find(filter)!=-1)
        self.namesp_after_ptr_block_caret.setVisible(filter=='' or 'sp_after_ptr_block_caret'.find(filter)!=-1)
        self.sp_after_ptr_block_caret.setVisible(filter=='' or 'sp_after_ptr_block_caret'.find(filter)!=-1)
        self.labelsp_after_ptr_star_qualifier.setVisible(filter=='' or 'sp_after_ptr_star_qualifier'.find(filter)!=-1)
        if self.tr("code_sp_after_ptr_star_qualifier")!="code_sp_after_ptr_star_qualifier":
            self.codesp_after_ptr_star_qualifier.setVisible(filter=='' or 'sp_after_ptr_star_qualifier'.find(filter)!=-1)
        self.namesp_after_ptr_star_qualifier.setVisible(filter=='' or 'sp_after_ptr_star_qualifier'.find(filter)!=-1)
        self.sp_after_ptr_star_qualifier.setVisible(filter=='' or 'sp_after_ptr_star_qualifier'.find(filter)!=-1)
        self.labelsp_after_ptr_star_func.setVisible(filter=='' or 'sp_after_ptr_star_func'.find(filter)!=-1)
        if self.tr("code_sp_after_ptr_star_func")!="code_sp_after_ptr_star_func":
            self.codesp_after_ptr_star_func.setVisible(filter=='' or 'sp_after_ptr_star_func'.find(filter)!=-1)
        self.namesp_after_ptr_star_func.setVisible(filter=='' or 'sp_after_ptr_star_func'.find(filter)!=-1)
        self.sp_after_ptr_star_func.setVisible(filter=='' or 'sp_after_ptr_star_func'.find(filter)!=-1)
        self.labelsp_ptr_star_paren.setVisible(filter=='' or 'sp_ptr_star_paren'.find(filter)!=-1)
        if self.tr("code_sp_ptr_star_paren")!="code_sp_ptr_star_paren":
            self.codesp_ptr_star_paren.setVisible(filter=='' or 'sp_ptr_star_paren'.find(filter)!=-1)
        self.namesp_ptr_star_paren.setVisible(filter=='' or 'sp_ptr_star_paren'.find(filter)!=-1)
        self.sp_ptr_star_paren.setVisible(filter=='' or 'sp_ptr_star_paren'.find(filter)!=-1)
        self.labelsp_before_ptr_star_func.setVisible(filter=='' or 'sp_before_ptr_star_func'.find(filter)!=-1)
        if self.tr("code_sp_before_ptr_star_func")!="code_sp_before_ptr_star_func":
            self.codesp_before_ptr_star_func.setVisible(filter=='' or 'sp_before_ptr_star_func'.find(filter)!=-1)
        self.namesp_before_ptr_star_func.setVisible(filter=='' or 'sp_before_ptr_star_func'.find(filter)!=-1)
        self.sp_before_ptr_star_func.setVisible(filter=='' or 'sp_before_ptr_star_func'.find(filter)!=-1)
        self.labelsp_before_byref.setVisible(filter=='' or 'sp_before_byref'.find(filter)!=-1)
        if self.tr("code_sp_before_byref")!="code_sp_before_byref":
            self.codesp_before_byref.setVisible(filter=='' or 'sp_before_byref'.find(filter)!=-1)
        self.namesp_before_byref.setVisible(filter=='' or 'sp_before_byref'.find(filter)!=-1)
        self.sp_before_byref.setVisible(filter=='' or 'sp_before_byref'.find(filter)!=-1)
        self.labelsp_before_unnamed_byref.setVisible(filter=='' or 'sp_before_unnamed_byref'.find(filter)!=-1)
        if self.tr("code_sp_before_unnamed_byref")!="code_sp_before_unnamed_byref":
            self.codesp_before_unnamed_byref.setVisible(filter=='' or 'sp_before_unnamed_byref'.find(filter)!=-1)
        self.namesp_before_unnamed_byref.setVisible(filter=='' or 'sp_before_unnamed_byref'.find(filter)!=-1)
        self.sp_before_unnamed_byref.setVisible(filter=='' or 'sp_before_unnamed_byref'.find(filter)!=-1)
        self.labelsp_after_byref.setVisible(filter=='' or 'sp_after_byref'.find(filter)!=-1)
        if self.tr("code_sp_after_byref")!="code_sp_after_byref":
            self.codesp_after_byref.setVisible(filter=='' or 'sp_after_byref'.find(filter)!=-1)
        self.namesp_after_byref.setVisible(filter=='' or 'sp_after_byref'.find(filter)!=-1)
        self.sp_after_byref.setVisible(filter=='' or 'sp_after_byref'.find(filter)!=-1)
        self.labelsp_after_byref_func.setVisible(filter=='' or 'sp_after_byref_func'.find(filter)!=-1)
        if self.tr("code_sp_after_byref_func")!="code_sp_after_byref_func":
            self.codesp_after_byref_func.setVisible(filter=='' or 'sp_after_byref_func'.find(filter)!=-1)
        self.namesp_after_byref_func.setVisible(filter=='' or 'sp_after_byref_func'.find(filter)!=-1)
        self.sp_after_byref_func.setVisible(filter=='' or 'sp_after_byref_func'.find(filter)!=-1)
        self.labelsp_before_byref_func.setVisible(filter=='' or 'sp_before_byref_func'.find(filter)!=-1)
        if self.tr("code_sp_before_byref_func")!="code_sp_before_byref_func":
            self.codesp_before_byref_func.setVisible(filter=='' or 'sp_before_byref_func'.find(filter)!=-1)
        self.namesp_before_byref_func.setVisible(filter=='' or 'sp_before_byref_func'.find(filter)!=-1)
        self.sp_before_byref_func.setVisible(filter=='' or 'sp_before_byref_func'.find(filter)!=-1)
        self.labelsp_after_type.setVisible(filter=='' or 'sp_after_type'.find(filter)!=-1)
        if self.tr("code_sp_after_type")!="code_sp_after_type":
            self.codesp_after_type.setVisible(filter=='' or 'sp_after_type'.find(filter)!=-1)
        self.namesp_after_type.setVisible(filter=='' or 'sp_after_type'.find(filter)!=-1)
        self.sp_after_type.setVisible(filter=='' or 'sp_after_type'.find(filter)!=-1)
        self.labelsp_after_decltype.setVisible(filter=='' or 'sp_after_decltype'.find(filter)!=-1)
        if self.tr("code_sp_after_decltype")!="code_sp_after_decltype":
            self.codesp_after_decltype.setVisible(filter=='' or 'sp_after_decltype'.find(filter)!=-1)
        self.namesp_after_decltype.setVisible(filter=='' or 'sp_after_decltype'.find(filter)!=-1)
        self.sp_after_decltype.setVisible(filter=='' or 'sp_after_decltype'.find(filter)!=-1)
        self.labelsp_before_template_paren.setVisible(filter=='' or 'sp_before_template_paren'.find(filter)!=-1)
        if self.tr("code_sp_before_template_paren")!="code_sp_before_template_paren":
            self.codesp_before_template_paren.setVisible(filter=='' or 'sp_before_template_paren'.find(filter)!=-1)
        self.namesp_before_template_paren.setVisible(filter=='' or 'sp_before_template_paren'.find(filter)!=-1)
        self.sp_before_template_paren.setVisible(filter=='' or 'sp_before_template_paren'.find(filter)!=-1)
        self.labelsp_template_angle.setVisible(filter=='' or 'sp_template_angle'.find(filter)!=-1)
        if self.tr("code_sp_template_angle")!="code_sp_template_angle":
            self.codesp_template_angle.setVisible(filter=='' or 'sp_template_angle'.find(filter)!=-1)
        self.namesp_template_angle.setVisible(filter=='' or 'sp_template_angle'.find(filter)!=-1)
        self.sp_template_angle.setVisible(filter=='' or 'sp_template_angle'.find(filter)!=-1)
        self.labelsp_before_angle.setVisible(filter=='' or 'sp_before_angle'.find(filter)!=-1)
        if self.tr("code_sp_before_angle")!="code_sp_before_angle":
            self.codesp_before_angle.setVisible(filter=='' or 'sp_before_angle'.find(filter)!=-1)
        self.namesp_before_angle.setVisible(filter=='' or 'sp_before_angle'.find(filter)!=-1)
        self.sp_before_angle.setVisible(filter=='' or 'sp_before_angle'.find(filter)!=-1)
        self.labelsp_inside_angle.setVisible(filter=='' or 'sp_inside_angle'.find(filter)!=-1)
        if self.tr("code_sp_inside_angle")!="code_sp_inside_angle":
            self.codesp_inside_angle.setVisible(filter=='' or 'sp_inside_angle'.find(filter)!=-1)
        self.namesp_inside_angle.setVisible(filter=='' or 'sp_inside_angle'.find(filter)!=-1)
        self.sp_inside_angle.setVisible(filter=='' or 'sp_inside_angle'.find(filter)!=-1)
        self.labelsp_inside_angle_empty.setVisible(filter=='' or 'sp_inside_angle_empty'.find(filter)!=-1)
        if self.tr("code_sp_inside_angle_empty")!="code_sp_inside_angle_empty":
            self.codesp_inside_angle_empty.setVisible(filter=='' or 'sp_inside_angle_empty'.find(filter)!=-1)
        self.namesp_inside_angle_empty.setVisible(filter=='' or 'sp_inside_angle_empty'.find(filter)!=-1)
        self.sp_inside_angle_empty.setVisible(filter=='' or 'sp_inside_angle_empty'.find(filter)!=-1)
        self.labelsp_angle_colon.setVisible(filter=='' or 'sp_angle_colon'.find(filter)!=-1)
        if self.tr("code_sp_angle_colon")!="code_sp_angle_colon":
            self.codesp_angle_colon.setVisible(filter=='' or 'sp_angle_colon'.find(filter)!=-1)
        self.namesp_angle_colon.setVisible(filter=='' or 'sp_angle_colon'.find(filter)!=-1)
        self.sp_angle_colon.setVisible(filter=='' or 'sp_angle_colon'.find(filter)!=-1)
        self.labelsp_after_angle.setVisible(filter=='' or 'sp_after_angle'.find(filter)!=-1)
        if self.tr("code_sp_after_angle")!="code_sp_after_angle":
            self.codesp_after_angle.setVisible(filter=='' or 'sp_after_angle'.find(filter)!=-1)
        self.namesp_after_angle.setVisible(filter=='' or 'sp_after_angle'.find(filter)!=-1)
        self.sp_after_angle.setVisible(filter=='' or 'sp_after_angle'.find(filter)!=-1)
        self.labelsp_angle_paren.setVisible(filter=='' or 'sp_angle_paren'.find(filter)!=-1)
        if self.tr("code_sp_angle_paren")!="code_sp_angle_paren":
            self.codesp_angle_paren.setVisible(filter=='' or 'sp_angle_paren'.find(filter)!=-1)
        self.namesp_angle_paren.setVisible(filter=='' or 'sp_angle_paren'.find(filter)!=-1)
        self.sp_angle_paren.setVisible(filter=='' or 'sp_angle_paren'.find(filter)!=-1)
        self.labelsp_angle_paren_empty.setVisible(filter=='' or 'sp_angle_paren_empty'.find(filter)!=-1)
        if self.tr("code_sp_angle_paren_empty")!="code_sp_angle_paren_empty":
            self.codesp_angle_paren_empty.setVisible(filter=='' or 'sp_angle_paren_empty'.find(filter)!=-1)
        self.namesp_angle_paren_empty.setVisible(filter=='' or 'sp_angle_paren_empty'.find(filter)!=-1)
        self.sp_angle_paren_empty.setVisible(filter=='' or 'sp_angle_paren_empty'.find(filter)!=-1)
        self.labelsp_angle_word.setVisible(filter=='' or 'sp_angle_word'.find(filter)!=-1)
        if self.tr("code_sp_angle_word")!="code_sp_angle_word":
            self.codesp_angle_word.setVisible(filter=='' or 'sp_angle_word'.find(filter)!=-1)
        self.namesp_angle_word.setVisible(filter=='' or 'sp_angle_word'.find(filter)!=-1)
        self.sp_angle_word.setVisible(filter=='' or 'sp_angle_word'.find(filter)!=-1)
        self.labelsp_angle_shift.setVisible(filter=='' or 'sp_angle_shift'.find(filter)!=-1)
        if self.tr("code_sp_angle_shift")!="code_sp_angle_shift":
            self.codesp_angle_shift.setVisible(filter=='' or 'sp_angle_shift'.find(filter)!=-1)
        self.namesp_angle_shift.setVisible(filter=='' or 'sp_angle_shift'.find(filter)!=-1)
        self.sp_angle_shift.setVisible(filter=='' or 'sp_angle_shift'.find(filter)!=-1)
        self.labelsp_permit_cpp11_shift.setVisible(filter=='' or 'sp_permit_cpp11_shift'.find(filter)!=-1)
        if self.tr("code_sp_permit_cpp11_shift")!="code_sp_permit_cpp11_shift":
            self.codesp_permit_cpp11_shift.setVisible(filter=='' or 'sp_permit_cpp11_shift'.find(filter)!=-1)
        self.namesp_permit_cpp11_shift.setVisible(filter=='' or 'sp_permit_cpp11_shift'.find(filter)!=-1)
        self.sp_permit_cpp11_shift.setVisible(filter=='' or 'sp_permit_cpp11_shift'.find(filter)!=-1)
        self.labelsp_before_sparen.setVisible(filter=='' or 'sp_before_sparen'.find(filter)!=-1)
        if self.tr("code_sp_before_sparen")!="code_sp_before_sparen":
            self.codesp_before_sparen.setVisible(filter=='' or 'sp_before_sparen'.find(filter)!=-1)
        self.namesp_before_sparen.setVisible(filter=='' or 'sp_before_sparen'.find(filter)!=-1)
        self.sp_before_sparen.setVisible(filter=='' or 'sp_before_sparen'.find(filter)!=-1)
        self.labelsp_inside_sparen.setVisible(filter=='' or 'sp_inside_sparen'.find(filter)!=-1)
        if self.tr("code_sp_inside_sparen")!="code_sp_inside_sparen":
            self.codesp_inside_sparen.setVisible(filter=='' or 'sp_inside_sparen'.find(filter)!=-1)
        self.namesp_inside_sparen.setVisible(filter=='' or 'sp_inside_sparen'.find(filter)!=-1)
        self.sp_inside_sparen.setVisible(filter=='' or 'sp_inside_sparen'.find(filter)!=-1)
        self.labelsp_inside_sparen_open.setVisible(filter=='' or 'sp_inside_sparen_open'.find(filter)!=-1)
        if self.tr("code_sp_inside_sparen_open")!="code_sp_inside_sparen_open":
            self.codesp_inside_sparen_open.setVisible(filter=='' or 'sp_inside_sparen_open'.find(filter)!=-1)
        self.namesp_inside_sparen_open.setVisible(filter=='' or 'sp_inside_sparen_open'.find(filter)!=-1)
        self.sp_inside_sparen_open.setVisible(filter=='' or 'sp_inside_sparen_open'.find(filter)!=-1)
        self.labelsp_inside_sparen_close.setVisible(filter=='' or 'sp_inside_sparen_close'.find(filter)!=-1)
        if self.tr("code_sp_inside_sparen_close")!="code_sp_inside_sparen_close":
            self.codesp_inside_sparen_close.setVisible(filter=='' or 'sp_inside_sparen_close'.find(filter)!=-1)
        self.namesp_inside_sparen_close.setVisible(filter=='' or 'sp_inside_sparen_close'.find(filter)!=-1)
        self.sp_inside_sparen_close.setVisible(filter=='' or 'sp_inside_sparen_close'.find(filter)!=-1)
        self.labelsp_after_sparen.setVisible(filter=='' or 'sp_after_sparen'.find(filter)!=-1)
        if self.tr("code_sp_after_sparen")!="code_sp_after_sparen":
            self.codesp_after_sparen.setVisible(filter=='' or 'sp_after_sparen'.find(filter)!=-1)
        self.namesp_after_sparen.setVisible(filter=='' or 'sp_after_sparen'.find(filter)!=-1)
        self.sp_after_sparen.setVisible(filter=='' or 'sp_after_sparen'.find(filter)!=-1)
        self.labelsp_sparen_brace.setVisible(filter=='' or 'sp_sparen_brace'.find(filter)!=-1)
        if self.tr("code_sp_sparen_brace")!="code_sp_sparen_brace":
            self.codesp_sparen_brace.setVisible(filter=='' or 'sp_sparen_brace'.find(filter)!=-1)
        self.namesp_sparen_brace.setVisible(filter=='' or 'sp_sparen_brace'.find(filter)!=-1)
        self.sp_sparen_brace.setVisible(filter=='' or 'sp_sparen_brace'.find(filter)!=-1)
        self.labelsp_invariant_paren.setVisible(filter=='' or 'sp_invariant_paren'.find(filter)!=-1)
        if self.tr("code_sp_invariant_paren")!="code_sp_invariant_paren":
            self.codesp_invariant_paren.setVisible(filter=='' or 'sp_invariant_paren'.find(filter)!=-1)
        self.namesp_invariant_paren.setVisible(filter=='' or 'sp_invariant_paren'.find(filter)!=-1)
        self.sp_invariant_paren.setVisible(filter=='' or 'sp_invariant_paren'.find(filter)!=-1)
        self.labelsp_after_invariant_paren.setVisible(filter=='' or 'sp_after_invariant_paren'.find(filter)!=-1)
        if self.tr("code_sp_after_invariant_paren")!="code_sp_after_invariant_paren":
            self.codesp_after_invariant_paren.setVisible(filter=='' or 'sp_after_invariant_paren'.find(filter)!=-1)
        self.namesp_after_invariant_paren.setVisible(filter=='' or 'sp_after_invariant_paren'.find(filter)!=-1)
        self.sp_after_invariant_paren.setVisible(filter=='' or 'sp_after_invariant_paren'.find(filter)!=-1)
        self.labelsp_special_semi.setVisible(filter=='' or 'sp_special_semi'.find(filter)!=-1)
        if self.tr("code_sp_special_semi")!="code_sp_special_semi":
            self.codesp_special_semi.setVisible(filter=='' or 'sp_special_semi'.find(filter)!=-1)
        self.namesp_special_semi.setVisible(filter=='' or 'sp_special_semi'.find(filter)!=-1)
        self.sp_special_semi.setVisible(filter=='' or 'sp_special_semi'.find(filter)!=-1)
        self.labelsp_before_semi.setVisible(filter=='' or 'sp_before_semi'.find(filter)!=-1)
        if self.tr("code_sp_before_semi")!="code_sp_before_semi":
            self.codesp_before_semi.setVisible(filter=='' or 'sp_before_semi'.find(filter)!=-1)
        self.namesp_before_semi.setVisible(filter=='' or 'sp_before_semi'.find(filter)!=-1)
        self.sp_before_semi.setVisible(filter=='' or 'sp_before_semi'.find(filter)!=-1)
        self.labelsp_before_semi_for.setVisible(filter=='' or 'sp_before_semi_for'.find(filter)!=-1)
        if self.tr("code_sp_before_semi_for")!="code_sp_before_semi_for":
            self.codesp_before_semi_for.setVisible(filter=='' or 'sp_before_semi_for'.find(filter)!=-1)
        self.namesp_before_semi_for.setVisible(filter=='' or 'sp_before_semi_for'.find(filter)!=-1)
        self.sp_before_semi_for.setVisible(filter=='' or 'sp_before_semi_for'.find(filter)!=-1)
        self.labelsp_before_semi_for_empty.setVisible(filter=='' or 'sp_before_semi_for_empty'.find(filter)!=-1)
        if self.tr("code_sp_before_semi_for_empty")!="code_sp_before_semi_for_empty":
            self.codesp_before_semi_for_empty.setVisible(filter=='' or 'sp_before_semi_for_empty'.find(filter)!=-1)
        self.namesp_before_semi_for_empty.setVisible(filter=='' or 'sp_before_semi_for_empty'.find(filter)!=-1)
        self.sp_before_semi_for_empty.setVisible(filter=='' or 'sp_before_semi_for_empty'.find(filter)!=-1)
        self.labelsp_after_semi.setVisible(filter=='' or 'sp_after_semi'.find(filter)!=-1)
        if self.tr("code_sp_after_semi")!="code_sp_after_semi":
            self.codesp_after_semi.setVisible(filter=='' or 'sp_after_semi'.find(filter)!=-1)
        self.namesp_after_semi.setVisible(filter=='' or 'sp_after_semi'.find(filter)!=-1)
        self.sp_after_semi.setVisible(filter=='' or 'sp_after_semi'.find(filter)!=-1)
        self.labelsp_after_semi_for.setVisible(filter=='' or 'sp_after_semi_for'.find(filter)!=-1)
        if self.tr("code_sp_after_semi_for")!="code_sp_after_semi_for":
            self.codesp_after_semi_for.setVisible(filter=='' or 'sp_after_semi_for'.find(filter)!=-1)
        self.namesp_after_semi_for.setVisible(filter=='' or 'sp_after_semi_for'.find(filter)!=-1)
        self.sp_after_semi_for.setVisible(filter=='' or 'sp_after_semi_for'.find(filter)!=-1)
        self.labelsp_after_semi_for_empty.setVisible(filter=='' or 'sp_after_semi_for_empty'.find(filter)!=-1)
        if self.tr("code_sp_after_semi_for_empty")!="code_sp_after_semi_for_empty":
            self.codesp_after_semi_for_empty.setVisible(filter=='' or 'sp_after_semi_for_empty'.find(filter)!=-1)
        self.namesp_after_semi_for_empty.setVisible(filter=='' or 'sp_after_semi_for_empty'.find(filter)!=-1)
        self.sp_after_semi_for_empty.setVisible(filter=='' or 'sp_after_semi_for_empty'.find(filter)!=-1)
        self.labelsp_before_square.setVisible(filter=='' or 'sp_before_square'.find(filter)!=-1)
        if self.tr("code_sp_before_square")!="code_sp_before_square":
            self.codesp_before_square.setVisible(filter=='' or 'sp_before_square'.find(filter)!=-1)
        self.namesp_before_square.setVisible(filter=='' or 'sp_before_square'.find(filter)!=-1)
        self.sp_before_square.setVisible(filter=='' or 'sp_before_square'.find(filter)!=-1)
        self.labelsp_before_vardef_square.setVisible(filter=='' or 'sp_before_vardef_square'.find(filter)!=-1)
        if self.tr("code_sp_before_vardef_square")!="code_sp_before_vardef_square":
            self.codesp_before_vardef_square.setVisible(filter=='' or 'sp_before_vardef_square'.find(filter)!=-1)
        self.namesp_before_vardef_square.setVisible(filter=='' or 'sp_before_vardef_square'.find(filter)!=-1)
        self.sp_before_vardef_square.setVisible(filter=='' or 'sp_before_vardef_square'.find(filter)!=-1)
        self.labelsp_before_square_asm_block.setVisible(filter=='' or 'sp_before_square_asm_block'.find(filter)!=-1)
        if self.tr("code_sp_before_square_asm_block")!="code_sp_before_square_asm_block":
            self.codesp_before_square_asm_block.setVisible(filter=='' or 'sp_before_square_asm_block'.find(filter)!=-1)
        self.namesp_before_square_asm_block.setVisible(filter=='' or 'sp_before_square_asm_block'.find(filter)!=-1)
        self.sp_before_square_asm_block.setVisible(filter=='' or 'sp_before_square_asm_block'.find(filter)!=-1)
        self.labelsp_before_squares.setVisible(filter=='' or 'sp_before_squares'.find(filter)!=-1)
        if self.tr("code_sp_before_squares")!="code_sp_before_squares":
            self.codesp_before_squares.setVisible(filter=='' or 'sp_before_squares'.find(filter)!=-1)
        self.namesp_before_squares.setVisible(filter=='' or 'sp_before_squares'.find(filter)!=-1)
        self.sp_before_squares.setVisible(filter=='' or 'sp_before_squares'.find(filter)!=-1)
        self.labelsp_cpp_before_struct_binding.setVisible(filter=='' or 'sp_cpp_before_struct_binding'.find(filter)!=-1)
        if self.tr("code_sp_cpp_before_struct_binding")!="code_sp_cpp_before_struct_binding":
            self.codesp_cpp_before_struct_binding.setVisible(filter=='' or 'sp_cpp_before_struct_binding'.find(filter)!=-1)
        self.namesp_cpp_before_struct_binding.setVisible(filter=='' or 'sp_cpp_before_struct_binding'.find(filter)!=-1)
        self.sp_cpp_before_struct_binding.setVisible(filter=='' or 'sp_cpp_before_struct_binding'.find(filter)!=-1)
        self.labelsp_inside_square.setVisible(filter=='' or 'sp_inside_square'.find(filter)!=-1)
        if self.tr("code_sp_inside_square")!="code_sp_inside_square":
            self.codesp_inside_square.setVisible(filter=='' or 'sp_inside_square'.find(filter)!=-1)
        self.namesp_inside_square.setVisible(filter=='' or 'sp_inside_square'.find(filter)!=-1)
        self.sp_inside_square.setVisible(filter=='' or 'sp_inside_square'.find(filter)!=-1)
        self.labelsp_inside_square_oc_array.setVisible(filter=='' or 'sp_inside_square_oc_array'.find(filter)!=-1)
        if self.tr("code_sp_inside_square_oc_array")!="code_sp_inside_square_oc_array":
            self.codesp_inside_square_oc_array.setVisible(filter=='' or 'sp_inside_square_oc_array'.find(filter)!=-1)
        self.namesp_inside_square_oc_array.setVisible(filter=='' or 'sp_inside_square_oc_array'.find(filter)!=-1)
        self.sp_inside_square_oc_array.setVisible(filter=='' or 'sp_inside_square_oc_array'.find(filter)!=-1)
        self.labelsp_after_comma.setVisible(filter=='' or 'sp_after_comma'.find(filter)!=-1)
        if self.tr("code_sp_after_comma")!="code_sp_after_comma":
            self.codesp_after_comma.setVisible(filter=='' or 'sp_after_comma'.find(filter)!=-1)
        self.namesp_after_comma.setVisible(filter=='' or 'sp_after_comma'.find(filter)!=-1)
        self.sp_after_comma.setVisible(filter=='' or 'sp_after_comma'.find(filter)!=-1)
        self.labelsp_before_comma.setVisible(filter=='' or 'sp_before_comma'.find(filter)!=-1)
        if self.tr("code_sp_before_comma")!="code_sp_before_comma":
            self.codesp_before_comma.setVisible(filter=='' or 'sp_before_comma'.find(filter)!=-1)
        self.namesp_before_comma.setVisible(filter=='' or 'sp_before_comma'.find(filter)!=-1)
        self.sp_before_comma.setVisible(filter=='' or 'sp_before_comma'.find(filter)!=-1)
        self.labelsp_after_mdatype_commas.setVisible(filter=='' or 'sp_after_mdatype_commas'.find(filter)!=-1)
        if self.tr("code_sp_after_mdatype_commas")!="code_sp_after_mdatype_commas":
            self.codesp_after_mdatype_commas.setVisible(filter=='' or 'sp_after_mdatype_commas'.find(filter)!=-1)
        self.namesp_after_mdatype_commas.setVisible(filter=='' or 'sp_after_mdatype_commas'.find(filter)!=-1)
        self.sp_after_mdatype_commas.setVisible(filter=='' or 'sp_after_mdatype_commas'.find(filter)!=-1)
        self.labelsp_before_mdatype_commas.setVisible(filter=='' or 'sp_before_mdatype_commas'.find(filter)!=-1)
        if self.tr("code_sp_before_mdatype_commas")!="code_sp_before_mdatype_commas":
            self.codesp_before_mdatype_commas.setVisible(filter=='' or 'sp_before_mdatype_commas'.find(filter)!=-1)
        self.namesp_before_mdatype_commas.setVisible(filter=='' or 'sp_before_mdatype_commas'.find(filter)!=-1)
        self.sp_before_mdatype_commas.setVisible(filter=='' or 'sp_before_mdatype_commas'.find(filter)!=-1)
        self.labelsp_between_mdatype_commas.setVisible(filter=='' or 'sp_between_mdatype_commas'.find(filter)!=-1)
        if self.tr("code_sp_between_mdatype_commas")!="code_sp_between_mdatype_commas":
            self.codesp_between_mdatype_commas.setVisible(filter=='' or 'sp_between_mdatype_commas'.find(filter)!=-1)
        self.namesp_between_mdatype_commas.setVisible(filter=='' or 'sp_between_mdatype_commas'.find(filter)!=-1)
        self.sp_between_mdatype_commas.setVisible(filter=='' or 'sp_between_mdatype_commas'.find(filter)!=-1)
        self.labelsp_paren_comma.setVisible(filter=='' or 'sp_paren_comma'.find(filter)!=-1)
        if self.tr("code_sp_paren_comma")!="code_sp_paren_comma":
            self.codesp_paren_comma.setVisible(filter=='' or 'sp_paren_comma'.find(filter)!=-1)
        self.namesp_paren_comma.setVisible(filter=='' or 'sp_paren_comma'.find(filter)!=-1)
        self.sp_paren_comma.setVisible(filter=='' or 'sp_paren_comma'.find(filter)!=-1)
        self.labelsp_before_ellipsis.setVisible(filter=='' or 'sp_before_ellipsis'.find(filter)!=-1)
        if self.tr("code_sp_before_ellipsis")!="code_sp_before_ellipsis":
            self.codesp_before_ellipsis.setVisible(filter=='' or 'sp_before_ellipsis'.find(filter)!=-1)
        self.namesp_before_ellipsis.setVisible(filter=='' or 'sp_before_ellipsis'.find(filter)!=-1)
        self.sp_before_ellipsis.setVisible(filter=='' or 'sp_before_ellipsis'.find(filter)!=-1)
        self.labelsp_type_ellipsis.setVisible(filter=='' or 'sp_type_ellipsis'.find(filter)!=-1)
        if self.tr("code_sp_type_ellipsis")!="code_sp_type_ellipsis":
            self.codesp_type_ellipsis.setVisible(filter=='' or 'sp_type_ellipsis'.find(filter)!=-1)
        self.namesp_type_ellipsis.setVisible(filter=='' or 'sp_type_ellipsis'.find(filter)!=-1)
        self.sp_type_ellipsis.setVisible(filter=='' or 'sp_type_ellipsis'.find(filter)!=-1)
        self.labelsp_type_question.setVisible(filter=='' or 'sp_type_question'.find(filter)!=-1)
        if self.tr("code_sp_type_question")!="code_sp_type_question":
            self.codesp_type_question.setVisible(filter=='' or 'sp_type_question'.find(filter)!=-1)
        self.namesp_type_question.setVisible(filter=='' or 'sp_type_question'.find(filter)!=-1)
        self.sp_type_question.setVisible(filter=='' or 'sp_type_question'.find(filter)!=-1)
        self.labelsp_paren_ellipsis.setVisible(filter=='' or 'sp_paren_ellipsis'.find(filter)!=-1)
        if self.tr("code_sp_paren_ellipsis")!="code_sp_paren_ellipsis":
            self.codesp_paren_ellipsis.setVisible(filter=='' or 'sp_paren_ellipsis'.find(filter)!=-1)
        self.namesp_paren_ellipsis.setVisible(filter=='' or 'sp_paren_ellipsis'.find(filter)!=-1)
        self.sp_paren_ellipsis.setVisible(filter=='' or 'sp_paren_ellipsis'.find(filter)!=-1)
        self.labelsp_paren_qualifier.setVisible(filter=='' or 'sp_paren_qualifier'.find(filter)!=-1)
        if self.tr("code_sp_paren_qualifier")!="code_sp_paren_qualifier":
            self.codesp_paren_qualifier.setVisible(filter=='' or 'sp_paren_qualifier'.find(filter)!=-1)
        self.namesp_paren_qualifier.setVisible(filter=='' or 'sp_paren_qualifier'.find(filter)!=-1)
        self.sp_paren_qualifier.setVisible(filter=='' or 'sp_paren_qualifier'.find(filter)!=-1)
        self.labelsp_paren_noexcept.setVisible(filter=='' or 'sp_paren_noexcept'.find(filter)!=-1)
        if self.tr("code_sp_paren_noexcept")!="code_sp_paren_noexcept":
            self.codesp_paren_noexcept.setVisible(filter=='' or 'sp_paren_noexcept'.find(filter)!=-1)
        self.namesp_paren_noexcept.setVisible(filter=='' or 'sp_paren_noexcept'.find(filter)!=-1)
        self.sp_paren_noexcept.setVisible(filter=='' or 'sp_paren_noexcept'.find(filter)!=-1)
        self.labelsp_after_class_colon.setVisible(filter=='' or 'sp_after_class_colon'.find(filter)!=-1)
        if self.tr("code_sp_after_class_colon")!="code_sp_after_class_colon":
            self.codesp_after_class_colon.setVisible(filter=='' or 'sp_after_class_colon'.find(filter)!=-1)
        self.namesp_after_class_colon.setVisible(filter=='' or 'sp_after_class_colon'.find(filter)!=-1)
        self.sp_after_class_colon.setVisible(filter=='' or 'sp_after_class_colon'.find(filter)!=-1)
        self.labelsp_before_class_colon.setVisible(filter=='' or 'sp_before_class_colon'.find(filter)!=-1)
        if self.tr("code_sp_before_class_colon")!="code_sp_before_class_colon":
            self.codesp_before_class_colon.setVisible(filter=='' or 'sp_before_class_colon'.find(filter)!=-1)
        self.namesp_before_class_colon.setVisible(filter=='' or 'sp_before_class_colon'.find(filter)!=-1)
        self.sp_before_class_colon.setVisible(filter=='' or 'sp_before_class_colon'.find(filter)!=-1)
        self.labelsp_after_constr_colon.setVisible(filter=='' or 'sp_after_constr_colon'.find(filter)!=-1)
        if self.tr("code_sp_after_constr_colon")!="code_sp_after_constr_colon":
            self.codesp_after_constr_colon.setVisible(filter=='' or 'sp_after_constr_colon'.find(filter)!=-1)
        self.namesp_after_constr_colon.setVisible(filter=='' or 'sp_after_constr_colon'.find(filter)!=-1)
        self.sp_after_constr_colon.setVisible(filter=='' or 'sp_after_constr_colon'.find(filter)!=-1)
        self.labelsp_before_constr_colon.setVisible(filter=='' or 'sp_before_constr_colon'.find(filter)!=-1)
        if self.tr("code_sp_before_constr_colon")!="code_sp_before_constr_colon":
            self.codesp_before_constr_colon.setVisible(filter=='' or 'sp_before_constr_colon'.find(filter)!=-1)
        self.namesp_before_constr_colon.setVisible(filter=='' or 'sp_before_constr_colon'.find(filter)!=-1)
        self.sp_before_constr_colon.setVisible(filter=='' or 'sp_before_constr_colon'.find(filter)!=-1)
        self.labelsp_before_case_colon.setVisible(filter=='' or 'sp_before_case_colon'.find(filter)!=-1)
        if self.tr("code_sp_before_case_colon")!="code_sp_before_case_colon":
            self.codesp_before_case_colon.setVisible(filter=='' or 'sp_before_case_colon'.find(filter)!=-1)
        self.namesp_before_case_colon.setVisible(filter=='' or 'sp_before_case_colon'.find(filter)!=-1)
        self.sp_before_case_colon.setVisible(filter=='' or 'sp_before_case_colon'.find(filter)!=-1)
        self.labelsp_after_operator.setVisible(filter=='' or 'sp_after_operator'.find(filter)!=-1)
        if self.tr("code_sp_after_operator")!="code_sp_after_operator":
            self.codesp_after_operator.setVisible(filter=='' or 'sp_after_operator'.find(filter)!=-1)
        self.namesp_after_operator.setVisible(filter=='' or 'sp_after_operator'.find(filter)!=-1)
        self.sp_after_operator.setVisible(filter=='' or 'sp_after_operator'.find(filter)!=-1)
        self.labelsp_after_operator_sym.setVisible(filter=='' or 'sp_after_operator_sym'.find(filter)!=-1)
        if self.tr("code_sp_after_operator_sym")!="code_sp_after_operator_sym":
            self.codesp_after_operator_sym.setVisible(filter=='' or 'sp_after_operator_sym'.find(filter)!=-1)
        self.namesp_after_operator_sym.setVisible(filter=='' or 'sp_after_operator_sym'.find(filter)!=-1)
        self.sp_after_operator_sym.setVisible(filter=='' or 'sp_after_operator_sym'.find(filter)!=-1)
        self.labelsp_after_operator_sym_empty.setVisible(filter=='' or 'sp_after_operator_sym_empty'.find(filter)!=-1)
        if self.tr("code_sp_after_operator_sym_empty")!="code_sp_after_operator_sym_empty":
            self.codesp_after_operator_sym_empty.setVisible(filter=='' or 'sp_after_operator_sym_empty'.find(filter)!=-1)
        self.namesp_after_operator_sym_empty.setVisible(filter=='' or 'sp_after_operator_sym_empty'.find(filter)!=-1)
        self.sp_after_operator_sym_empty.setVisible(filter=='' or 'sp_after_operator_sym_empty'.find(filter)!=-1)
        self.labelsp_after_cast.setVisible(filter=='' or 'sp_after_cast'.find(filter)!=-1)
        if self.tr("code_sp_after_cast")!="code_sp_after_cast":
            self.codesp_after_cast.setVisible(filter=='' or 'sp_after_cast'.find(filter)!=-1)
        self.namesp_after_cast.setVisible(filter=='' or 'sp_after_cast'.find(filter)!=-1)
        self.sp_after_cast.setVisible(filter=='' or 'sp_after_cast'.find(filter)!=-1)
        self.labelsp_inside_paren_cast.setVisible(filter=='' or 'sp_inside_paren_cast'.find(filter)!=-1)
        if self.tr("code_sp_inside_paren_cast")!="code_sp_inside_paren_cast":
            self.codesp_inside_paren_cast.setVisible(filter=='' or 'sp_inside_paren_cast'.find(filter)!=-1)
        self.namesp_inside_paren_cast.setVisible(filter=='' or 'sp_inside_paren_cast'.find(filter)!=-1)
        self.sp_inside_paren_cast.setVisible(filter=='' or 'sp_inside_paren_cast'.find(filter)!=-1)
        self.labelsp_cpp_cast_paren.setVisible(filter=='' or 'sp_cpp_cast_paren'.find(filter)!=-1)
        if self.tr("code_sp_cpp_cast_paren")!="code_sp_cpp_cast_paren":
            self.codesp_cpp_cast_paren.setVisible(filter=='' or 'sp_cpp_cast_paren'.find(filter)!=-1)
        self.namesp_cpp_cast_paren.setVisible(filter=='' or 'sp_cpp_cast_paren'.find(filter)!=-1)
        self.sp_cpp_cast_paren.setVisible(filter=='' or 'sp_cpp_cast_paren'.find(filter)!=-1)
        self.labelsp_sizeof_paren.setVisible(filter=='' or 'sp_sizeof_paren'.find(filter)!=-1)
        if self.tr("code_sp_sizeof_paren")!="code_sp_sizeof_paren":
            self.codesp_sizeof_paren.setVisible(filter=='' or 'sp_sizeof_paren'.find(filter)!=-1)
        self.namesp_sizeof_paren.setVisible(filter=='' or 'sp_sizeof_paren'.find(filter)!=-1)
        self.sp_sizeof_paren.setVisible(filter=='' or 'sp_sizeof_paren'.find(filter)!=-1)
        self.labelsp_sizeof_ellipsis.setVisible(filter=='' or 'sp_sizeof_ellipsis'.find(filter)!=-1)
        if self.tr("code_sp_sizeof_ellipsis")!="code_sp_sizeof_ellipsis":
            self.codesp_sizeof_ellipsis.setVisible(filter=='' or 'sp_sizeof_ellipsis'.find(filter)!=-1)
        self.namesp_sizeof_ellipsis.setVisible(filter=='' or 'sp_sizeof_ellipsis'.find(filter)!=-1)
        self.sp_sizeof_ellipsis.setVisible(filter=='' or 'sp_sizeof_ellipsis'.find(filter)!=-1)
        self.labelsp_sizeof_ellipsis_paren.setVisible(filter=='' or 'sp_sizeof_ellipsis_paren'.find(filter)!=-1)
        if self.tr("code_sp_sizeof_ellipsis_paren")!="code_sp_sizeof_ellipsis_paren":
            self.codesp_sizeof_ellipsis_paren.setVisible(filter=='' or 'sp_sizeof_ellipsis_paren'.find(filter)!=-1)
        self.namesp_sizeof_ellipsis_paren.setVisible(filter=='' or 'sp_sizeof_ellipsis_paren'.find(filter)!=-1)
        self.sp_sizeof_ellipsis_paren.setVisible(filter=='' or 'sp_sizeof_ellipsis_paren'.find(filter)!=-1)
        self.labelsp_decltype_paren.setVisible(filter=='' or 'sp_decltype_paren'.find(filter)!=-1)
        if self.tr("code_sp_decltype_paren")!="code_sp_decltype_paren":
            self.codesp_decltype_paren.setVisible(filter=='' or 'sp_decltype_paren'.find(filter)!=-1)
        self.namesp_decltype_paren.setVisible(filter=='' or 'sp_decltype_paren'.find(filter)!=-1)
        self.sp_decltype_paren.setVisible(filter=='' or 'sp_decltype_paren'.find(filter)!=-1)
        self.labelsp_after_tag.setVisible(filter=='' or 'sp_after_tag'.find(filter)!=-1)
        if self.tr("code_sp_after_tag")!="code_sp_after_tag":
            self.codesp_after_tag.setVisible(filter=='' or 'sp_after_tag'.find(filter)!=-1)
        self.namesp_after_tag.setVisible(filter=='' or 'sp_after_tag'.find(filter)!=-1)
        self.sp_after_tag.setVisible(filter=='' or 'sp_after_tag'.find(filter)!=-1)
        self.labelsp_inside_braces_enum.setVisible(filter=='' or 'sp_inside_braces_enum'.find(filter)!=-1)
        if self.tr("code_sp_inside_braces_enum")!="code_sp_inside_braces_enum":
            self.codesp_inside_braces_enum.setVisible(filter=='' or 'sp_inside_braces_enum'.find(filter)!=-1)
        self.namesp_inside_braces_enum.setVisible(filter=='' or 'sp_inside_braces_enum'.find(filter)!=-1)
        self.sp_inside_braces_enum.setVisible(filter=='' or 'sp_inside_braces_enum'.find(filter)!=-1)
        self.labelsp_inside_braces_struct.setVisible(filter=='' or 'sp_inside_braces_struct'.find(filter)!=-1)
        if self.tr("code_sp_inside_braces_struct")!="code_sp_inside_braces_struct":
            self.codesp_inside_braces_struct.setVisible(filter=='' or 'sp_inside_braces_struct'.find(filter)!=-1)
        self.namesp_inside_braces_struct.setVisible(filter=='' or 'sp_inside_braces_struct'.find(filter)!=-1)
        self.sp_inside_braces_struct.setVisible(filter=='' or 'sp_inside_braces_struct'.find(filter)!=-1)
        self.labelsp_inside_braces_oc_dict.setVisible(filter=='' or 'sp_inside_braces_oc_dict'.find(filter)!=-1)
        if self.tr("code_sp_inside_braces_oc_dict")!="code_sp_inside_braces_oc_dict":
            self.codesp_inside_braces_oc_dict.setVisible(filter=='' or 'sp_inside_braces_oc_dict'.find(filter)!=-1)
        self.namesp_inside_braces_oc_dict.setVisible(filter=='' or 'sp_inside_braces_oc_dict'.find(filter)!=-1)
        self.sp_inside_braces_oc_dict.setVisible(filter=='' or 'sp_inside_braces_oc_dict'.find(filter)!=-1)
        self.labelsp_after_type_brace_init_lst_open.setVisible(filter=='' or 'sp_after_type_brace_init_lst_open'.find(filter)!=-1)
        if self.tr("code_sp_after_type_brace_init_lst_open")!="code_sp_after_type_brace_init_lst_open":
            self.codesp_after_type_brace_init_lst_open.setVisible(filter=='' or 'sp_after_type_brace_init_lst_open'.find(filter)!=-1)
        self.namesp_after_type_brace_init_lst_open.setVisible(filter=='' or 'sp_after_type_brace_init_lst_open'.find(filter)!=-1)
        self.sp_after_type_brace_init_lst_open.setVisible(filter=='' or 'sp_after_type_brace_init_lst_open'.find(filter)!=-1)
        self.labelsp_before_type_brace_init_lst_close.setVisible(filter=='' or 'sp_before_type_brace_init_lst_close'.find(filter)!=-1)
        if self.tr("code_sp_before_type_brace_init_lst_close")!="code_sp_before_type_brace_init_lst_close":
            self.codesp_before_type_brace_init_lst_close.setVisible(filter=='' or 'sp_before_type_brace_init_lst_close'.find(filter)!=-1)
        self.namesp_before_type_brace_init_lst_close.setVisible(filter=='' or 'sp_before_type_brace_init_lst_close'.find(filter)!=-1)
        self.sp_before_type_brace_init_lst_close.setVisible(filter=='' or 'sp_before_type_brace_init_lst_close'.find(filter)!=-1)
        self.labelsp_inside_type_brace_init_lst.setVisible(filter=='' or 'sp_inside_type_brace_init_lst'.find(filter)!=-1)
        if self.tr("code_sp_inside_type_brace_init_lst")!="code_sp_inside_type_brace_init_lst":
            self.codesp_inside_type_brace_init_lst.setVisible(filter=='' or 'sp_inside_type_brace_init_lst'.find(filter)!=-1)
        self.namesp_inside_type_brace_init_lst.setVisible(filter=='' or 'sp_inside_type_brace_init_lst'.find(filter)!=-1)
        self.sp_inside_type_brace_init_lst.setVisible(filter=='' or 'sp_inside_type_brace_init_lst'.find(filter)!=-1)
        self.labelsp_inside_braces.setVisible(filter=='' or 'sp_inside_braces'.find(filter)!=-1)
        if self.tr("code_sp_inside_braces")!="code_sp_inside_braces":
            self.codesp_inside_braces.setVisible(filter=='' or 'sp_inside_braces'.find(filter)!=-1)
        self.namesp_inside_braces.setVisible(filter=='' or 'sp_inside_braces'.find(filter)!=-1)
        self.sp_inside_braces.setVisible(filter=='' or 'sp_inside_braces'.find(filter)!=-1)
        self.labelsp_inside_braces_empty.setVisible(filter=='' or 'sp_inside_braces_empty'.find(filter)!=-1)
        if self.tr("code_sp_inside_braces_empty")!="code_sp_inside_braces_empty":
            self.codesp_inside_braces_empty.setVisible(filter=='' or 'sp_inside_braces_empty'.find(filter)!=-1)
        self.namesp_inside_braces_empty.setVisible(filter=='' or 'sp_inside_braces_empty'.find(filter)!=-1)
        self.sp_inside_braces_empty.setVisible(filter=='' or 'sp_inside_braces_empty'.find(filter)!=-1)
        self.labelsp_trailing_return.setVisible(filter=='' or 'sp_trailing_return'.find(filter)!=-1)
        if self.tr("code_sp_trailing_return")!="code_sp_trailing_return":
            self.codesp_trailing_return.setVisible(filter=='' or 'sp_trailing_return'.find(filter)!=-1)
        self.namesp_trailing_return.setVisible(filter=='' or 'sp_trailing_return'.find(filter)!=-1)
        self.sp_trailing_return.setVisible(filter=='' or 'sp_trailing_return'.find(filter)!=-1)
        self.labelsp_type_func.setVisible(filter=='' or 'sp_type_func'.find(filter)!=-1)
        if self.tr("code_sp_type_func")!="code_sp_type_func":
            self.codesp_type_func.setVisible(filter=='' or 'sp_type_func'.find(filter)!=-1)
        self.namesp_type_func.setVisible(filter=='' or 'sp_type_func'.find(filter)!=-1)
        self.sp_type_func.setVisible(filter=='' or 'sp_type_func'.find(filter)!=-1)
        self.labelsp_type_brace_init_lst.setVisible(filter=='' or 'sp_type_brace_init_lst'.find(filter)!=-1)
        if self.tr("code_sp_type_brace_init_lst")!="code_sp_type_brace_init_lst":
            self.codesp_type_brace_init_lst.setVisible(filter=='' or 'sp_type_brace_init_lst'.find(filter)!=-1)
        self.namesp_type_brace_init_lst.setVisible(filter=='' or 'sp_type_brace_init_lst'.find(filter)!=-1)
        self.sp_type_brace_init_lst.setVisible(filter=='' or 'sp_type_brace_init_lst'.find(filter)!=-1)
        self.labelsp_func_proto_paren.setVisible(filter=='' or 'sp_func_proto_paren'.find(filter)!=-1)
        if self.tr("code_sp_func_proto_paren")!="code_sp_func_proto_paren":
            self.codesp_func_proto_paren.setVisible(filter=='' or 'sp_func_proto_paren'.find(filter)!=-1)
        self.namesp_func_proto_paren.setVisible(filter=='' or 'sp_func_proto_paren'.find(filter)!=-1)
        self.sp_func_proto_paren.setVisible(filter=='' or 'sp_func_proto_paren'.find(filter)!=-1)
        self.labelsp_func_proto_paren_empty.setVisible(filter=='' or 'sp_func_proto_paren_empty'.find(filter)!=-1)
        if self.tr("code_sp_func_proto_paren_empty")!="code_sp_func_proto_paren_empty":
            self.codesp_func_proto_paren_empty.setVisible(filter=='' or 'sp_func_proto_paren_empty'.find(filter)!=-1)
        self.namesp_func_proto_paren_empty.setVisible(filter=='' or 'sp_func_proto_paren_empty'.find(filter)!=-1)
        self.sp_func_proto_paren_empty.setVisible(filter=='' or 'sp_func_proto_paren_empty'.find(filter)!=-1)
        self.labelsp_func_type_paren.setVisible(filter=='' or 'sp_func_type_paren'.find(filter)!=-1)
        if self.tr("code_sp_func_type_paren")!="code_sp_func_type_paren":
            self.codesp_func_type_paren.setVisible(filter=='' or 'sp_func_type_paren'.find(filter)!=-1)
        self.namesp_func_type_paren.setVisible(filter=='' or 'sp_func_type_paren'.find(filter)!=-1)
        self.sp_func_type_paren.setVisible(filter=='' or 'sp_func_type_paren'.find(filter)!=-1)
        self.labelsp_func_def_paren.setVisible(filter=='' or 'sp_func_def_paren'.find(filter)!=-1)
        if self.tr("code_sp_func_def_paren")!="code_sp_func_def_paren":
            self.codesp_func_def_paren.setVisible(filter=='' or 'sp_func_def_paren'.find(filter)!=-1)
        self.namesp_func_def_paren.setVisible(filter=='' or 'sp_func_def_paren'.find(filter)!=-1)
        self.sp_func_def_paren.setVisible(filter=='' or 'sp_func_def_paren'.find(filter)!=-1)
        self.labelsp_func_def_paren_empty.setVisible(filter=='' or 'sp_func_def_paren_empty'.find(filter)!=-1)
        if self.tr("code_sp_func_def_paren_empty")!="code_sp_func_def_paren_empty":
            self.codesp_func_def_paren_empty.setVisible(filter=='' or 'sp_func_def_paren_empty'.find(filter)!=-1)
        self.namesp_func_def_paren_empty.setVisible(filter=='' or 'sp_func_def_paren_empty'.find(filter)!=-1)
        self.sp_func_def_paren_empty.setVisible(filter=='' or 'sp_func_def_paren_empty'.find(filter)!=-1)
        self.labelsp_inside_fparens.setVisible(filter=='' or 'sp_inside_fparens'.find(filter)!=-1)
        if self.tr("code_sp_inside_fparens")!="code_sp_inside_fparens":
            self.codesp_inside_fparens.setVisible(filter=='' or 'sp_inside_fparens'.find(filter)!=-1)
        self.namesp_inside_fparens.setVisible(filter=='' or 'sp_inside_fparens'.find(filter)!=-1)
        self.sp_inside_fparens.setVisible(filter=='' or 'sp_inside_fparens'.find(filter)!=-1)
        self.labelsp_inside_fparen.setVisible(filter=='' or 'sp_inside_fparen'.find(filter)!=-1)
        if self.tr("code_sp_inside_fparen")!="code_sp_inside_fparen":
            self.codesp_inside_fparen.setVisible(filter=='' or 'sp_inside_fparen'.find(filter)!=-1)
        self.namesp_inside_fparen.setVisible(filter=='' or 'sp_inside_fparen'.find(filter)!=-1)
        self.sp_inside_fparen.setVisible(filter=='' or 'sp_inside_fparen'.find(filter)!=-1)
        self.labelsp_inside_tparen.setVisible(filter=='' or 'sp_inside_tparen'.find(filter)!=-1)
        if self.tr("code_sp_inside_tparen")!="code_sp_inside_tparen":
            self.codesp_inside_tparen.setVisible(filter=='' or 'sp_inside_tparen'.find(filter)!=-1)
        self.namesp_inside_tparen.setVisible(filter=='' or 'sp_inside_tparen'.find(filter)!=-1)
        self.sp_inside_tparen.setVisible(filter=='' or 'sp_inside_tparen'.find(filter)!=-1)
        self.labelsp_after_tparen_close.setVisible(filter=='' or 'sp_after_tparen_close'.find(filter)!=-1)
        if self.tr("code_sp_after_tparen_close")!="code_sp_after_tparen_close":
            self.codesp_after_tparen_close.setVisible(filter=='' or 'sp_after_tparen_close'.find(filter)!=-1)
        self.namesp_after_tparen_close.setVisible(filter=='' or 'sp_after_tparen_close'.find(filter)!=-1)
        self.sp_after_tparen_close.setVisible(filter=='' or 'sp_after_tparen_close'.find(filter)!=-1)
        self.labelsp_square_fparen.setVisible(filter=='' or 'sp_square_fparen'.find(filter)!=-1)
        if self.tr("code_sp_square_fparen")!="code_sp_square_fparen":
            self.codesp_square_fparen.setVisible(filter=='' or 'sp_square_fparen'.find(filter)!=-1)
        self.namesp_square_fparen.setVisible(filter=='' or 'sp_square_fparen'.find(filter)!=-1)
        self.sp_square_fparen.setVisible(filter=='' or 'sp_square_fparen'.find(filter)!=-1)
        self.labelsp_fparen_brace.setVisible(filter=='' or 'sp_fparen_brace'.find(filter)!=-1)
        if self.tr("code_sp_fparen_brace")!="code_sp_fparen_brace":
            self.codesp_fparen_brace.setVisible(filter=='' or 'sp_fparen_brace'.find(filter)!=-1)
        self.namesp_fparen_brace.setVisible(filter=='' or 'sp_fparen_brace'.find(filter)!=-1)
        self.sp_fparen_brace.setVisible(filter=='' or 'sp_fparen_brace'.find(filter)!=-1)
        self.labelsp_fparen_brace_initializer.setVisible(filter=='' or 'sp_fparen_brace_initializer'.find(filter)!=-1)
        if self.tr("code_sp_fparen_brace_initializer")!="code_sp_fparen_brace_initializer":
            self.codesp_fparen_brace_initializer.setVisible(filter=='' or 'sp_fparen_brace_initializer'.find(filter)!=-1)
        self.namesp_fparen_brace_initializer.setVisible(filter=='' or 'sp_fparen_brace_initializer'.find(filter)!=-1)
        self.sp_fparen_brace_initializer.setVisible(filter=='' or 'sp_fparen_brace_initializer'.find(filter)!=-1)
        self.labelsp_fparen_dbrace.setVisible(filter=='' or 'sp_fparen_dbrace'.find(filter)!=-1)
        if self.tr("code_sp_fparen_dbrace")!="code_sp_fparen_dbrace":
            self.codesp_fparen_dbrace.setVisible(filter=='' or 'sp_fparen_dbrace'.find(filter)!=-1)
        self.namesp_fparen_dbrace.setVisible(filter=='' or 'sp_fparen_dbrace'.find(filter)!=-1)
        self.sp_fparen_dbrace.setVisible(filter=='' or 'sp_fparen_dbrace'.find(filter)!=-1)
        self.labelsp_func_call_paren.setVisible(filter=='' or 'sp_func_call_paren'.find(filter)!=-1)
        if self.tr("code_sp_func_call_paren")!="code_sp_func_call_paren":
            self.codesp_func_call_paren.setVisible(filter=='' or 'sp_func_call_paren'.find(filter)!=-1)
        self.namesp_func_call_paren.setVisible(filter=='' or 'sp_func_call_paren'.find(filter)!=-1)
        self.sp_func_call_paren.setVisible(filter=='' or 'sp_func_call_paren'.find(filter)!=-1)
        self.labelsp_func_call_paren_empty.setVisible(filter=='' or 'sp_func_call_paren_empty'.find(filter)!=-1)
        if self.tr("code_sp_func_call_paren_empty")!="code_sp_func_call_paren_empty":
            self.codesp_func_call_paren_empty.setVisible(filter=='' or 'sp_func_call_paren_empty'.find(filter)!=-1)
        self.namesp_func_call_paren_empty.setVisible(filter=='' or 'sp_func_call_paren_empty'.find(filter)!=-1)
        self.sp_func_call_paren_empty.setVisible(filter=='' or 'sp_func_call_paren_empty'.find(filter)!=-1)
        self.labelsp_func_call_user_paren.setVisible(filter=='' or 'sp_func_call_user_paren'.find(filter)!=-1)
        if self.tr("code_sp_func_call_user_paren")!="code_sp_func_call_user_paren":
            self.codesp_func_call_user_paren.setVisible(filter=='' or 'sp_func_call_user_paren'.find(filter)!=-1)
        self.namesp_func_call_user_paren.setVisible(filter=='' or 'sp_func_call_user_paren'.find(filter)!=-1)
        self.sp_func_call_user_paren.setVisible(filter=='' or 'sp_func_call_user_paren'.find(filter)!=-1)
        self.labelsp_func_call_user_inside_fparen.setVisible(filter=='' or 'sp_func_call_user_inside_fparen'.find(filter)!=-1)
        if self.tr("code_sp_func_call_user_inside_fparen")!="code_sp_func_call_user_inside_fparen":
            self.codesp_func_call_user_inside_fparen.setVisible(filter=='' or 'sp_func_call_user_inside_fparen'.find(filter)!=-1)
        self.namesp_func_call_user_inside_fparen.setVisible(filter=='' or 'sp_func_call_user_inside_fparen'.find(filter)!=-1)
        self.sp_func_call_user_inside_fparen.setVisible(filter=='' or 'sp_func_call_user_inside_fparen'.find(filter)!=-1)
        self.labelsp_func_call_user_paren_paren.setVisible(filter=='' or 'sp_func_call_user_paren_paren'.find(filter)!=-1)
        if self.tr("code_sp_func_call_user_paren_paren")!="code_sp_func_call_user_paren_paren":
            self.codesp_func_call_user_paren_paren.setVisible(filter=='' or 'sp_func_call_user_paren_paren'.find(filter)!=-1)
        self.namesp_func_call_user_paren_paren.setVisible(filter=='' or 'sp_func_call_user_paren_paren'.find(filter)!=-1)
        self.sp_func_call_user_paren_paren.setVisible(filter=='' or 'sp_func_call_user_paren_paren'.find(filter)!=-1)
        self.labelsp_func_class_paren.setVisible(filter=='' or 'sp_func_class_paren'.find(filter)!=-1)
        if self.tr("code_sp_func_class_paren")!="code_sp_func_class_paren":
            self.codesp_func_class_paren.setVisible(filter=='' or 'sp_func_class_paren'.find(filter)!=-1)
        self.namesp_func_class_paren.setVisible(filter=='' or 'sp_func_class_paren'.find(filter)!=-1)
        self.sp_func_class_paren.setVisible(filter=='' or 'sp_func_class_paren'.find(filter)!=-1)
        self.labelsp_func_class_paren_empty.setVisible(filter=='' or 'sp_func_class_paren_empty'.find(filter)!=-1)
        if self.tr("code_sp_func_class_paren_empty")!="code_sp_func_class_paren_empty":
            self.codesp_func_class_paren_empty.setVisible(filter=='' or 'sp_func_class_paren_empty'.find(filter)!=-1)
        self.namesp_func_class_paren_empty.setVisible(filter=='' or 'sp_func_class_paren_empty'.find(filter)!=-1)
        self.sp_func_class_paren_empty.setVisible(filter=='' or 'sp_func_class_paren_empty'.find(filter)!=-1)
        self.labelsp_return_paren.setVisible(filter=='' or 'sp_return_paren'.find(filter)!=-1)
        if self.tr("code_sp_return_paren")!="code_sp_return_paren":
            self.codesp_return_paren.setVisible(filter=='' or 'sp_return_paren'.find(filter)!=-1)
        self.namesp_return_paren.setVisible(filter=='' or 'sp_return_paren'.find(filter)!=-1)
        self.sp_return_paren.setVisible(filter=='' or 'sp_return_paren'.find(filter)!=-1)
        self.labelsp_return_brace.setVisible(filter=='' or 'sp_return_brace'.find(filter)!=-1)
        if self.tr("code_sp_return_brace")!="code_sp_return_brace":
            self.codesp_return_brace.setVisible(filter=='' or 'sp_return_brace'.find(filter)!=-1)
        self.namesp_return_brace.setVisible(filter=='' or 'sp_return_brace'.find(filter)!=-1)
        self.sp_return_brace.setVisible(filter=='' or 'sp_return_brace'.find(filter)!=-1)
        self.labelsp_attribute_paren.setVisible(filter=='' or 'sp_attribute_paren'.find(filter)!=-1)
        if self.tr("code_sp_attribute_paren")!="code_sp_attribute_paren":
            self.codesp_attribute_paren.setVisible(filter=='' or 'sp_attribute_paren'.find(filter)!=-1)
        self.namesp_attribute_paren.setVisible(filter=='' or 'sp_attribute_paren'.find(filter)!=-1)
        self.sp_attribute_paren.setVisible(filter=='' or 'sp_attribute_paren'.find(filter)!=-1)
        self.labelsp_defined_paren.setVisible(filter=='' or 'sp_defined_paren'.find(filter)!=-1)
        if self.tr("code_sp_defined_paren")!="code_sp_defined_paren":
            self.codesp_defined_paren.setVisible(filter=='' or 'sp_defined_paren'.find(filter)!=-1)
        self.namesp_defined_paren.setVisible(filter=='' or 'sp_defined_paren'.find(filter)!=-1)
        self.sp_defined_paren.setVisible(filter=='' or 'sp_defined_paren'.find(filter)!=-1)
        self.labelsp_throw_paren.setVisible(filter=='' or 'sp_throw_paren'.find(filter)!=-1)
        if self.tr("code_sp_throw_paren")!="code_sp_throw_paren":
            self.codesp_throw_paren.setVisible(filter=='' or 'sp_throw_paren'.find(filter)!=-1)
        self.namesp_throw_paren.setVisible(filter=='' or 'sp_throw_paren'.find(filter)!=-1)
        self.sp_throw_paren.setVisible(filter=='' or 'sp_throw_paren'.find(filter)!=-1)
        self.labelsp_after_throw.setVisible(filter=='' or 'sp_after_throw'.find(filter)!=-1)
        if self.tr("code_sp_after_throw")!="code_sp_after_throw":
            self.codesp_after_throw.setVisible(filter=='' or 'sp_after_throw'.find(filter)!=-1)
        self.namesp_after_throw.setVisible(filter=='' or 'sp_after_throw'.find(filter)!=-1)
        self.sp_after_throw.setVisible(filter=='' or 'sp_after_throw'.find(filter)!=-1)
        self.labelsp_catch_paren.setVisible(filter=='' or 'sp_catch_paren'.find(filter)!=-1)
        if self.tr("code_sp_catch_paren")!="code_sp_catch_paren":
            self.codesp_catch_paren.setVisible(filter=='' or 'sp_catch_paren'.find(filter)!=-1)
        self.namesp_catch_paren.setVisible(filter=='' or 'sp_catch_paren'.find(filter)!=-1)
        self.sp_catch_paren.setVisible(filter=='' or 'sp_catch_paren'.find(filter)!=-1)
        self.labelsp_oc_catch_paren.setVisible(filter=='' or 'sp_oc_catch_paren'.find(filter)!=-1)
        if self.tr("code_sp_oc_catch_paren")!="code_sp_oc_catch_paren":
            self.codesp_oc_catch_paren.setVisible(filter=='' or 'sp_oc_catch_paren'.find(filter)!=-1)
        self.namesp_oc_catch_paren.setVisible(filter=='' or 'sp_oc_catch_paren'.find(filter)!=-1)
        self.sp_oc_catch_paren.setVisible(filter=='' or 'sp_oc_catch_paren'.find(filter)!=-1)
        self.labelsp_before_oc_proto_list.setVisible(filter=='' or 'sp_before_oc_proto_list'.find(filter)!=-1)
        if self.tr("code_sp_before_oc_proto_list")!="code_sp_before_oc_proto_list":
            self.codesp_before_oc_proto_list.setVisible(filter=='' or 'sp_before_oc_proto_list'.find(filter)!=-1)
        self.namesp_before_oc_proto_list.setVisible(filter=='' or 'sp_before_oc_proto_list'.find(filter)!=-1)
        self.sp_before_oc_proto_list.setVisible(filter=='' or 'sp_before_oc_proto_list'.find(filter)!=-1)
        self.labelsp_oc_classname_paren.setVisible(filter=='' or 'sp_oc_classname_paren'.find(filter)!=-1)
        if self.tr("code_sp_oc_classname_paren")!="code_sp_oc_classname_paren":
            self.codesp_oc_classname_paren.setVisible(filter=='' or 'sp_oc_classname_paren'.find(filter)!=-1)
        self.namesp_oc_classname_paren.setVisible(filter=='' or 'sp_oc_classname_paren'.find(filter)!=-1)
        self.sp_oc_classname_paren.setVisible(filter=='' or 'sp_oc_classname_paren'.find(filter)!=-1)
        self.labelsp_version_paren.setVisible(filter=='' or 'sp_version_paren'.find(filter)!=-1)
        if self.tr("code_sp_version_paren")!="code_sp_version_paren":
            self.codesp_version_paren.setVisible(filter=='' or 'sp_version_paren'.find(filter)!=-1)
        self.namesp_version_paren.setVisible(filter=='' or 'sp_version_paren'.find(filter)!=-1)
        self.sp_version_paren.setVisible(filter=='' or 'sp_version_paren'.find(filter)!=-1)
        self.labelsp_scope_paren.setVisible(filter=='' or 'sp_scope_paren'.find(filter)!=-1)
        if self.tr("code_sp_scope_paren")!="code_sp_scope_paren":
            self.codesp_scope_paren.setVisible(filter=='' or 'sp_scope_paren'.find(filter)!=-1)
        self.namesp_scope_paren.setVisible(filter=='' or 'sp_scope_paren'.find(filter)!=-1)
        self.sp_scope_paren.setVisible(filter=='' or 'sp_scope_paren'.find(filter)!=-1)
        self.labelsp_super_paren.setVisible(filter=='' or 'sp_super_paren'.find(filter)!=-1)
        if self.tr("code_sp_super_paren")!="code_sp_super_paren":
            self.codesp_super_paren.setVisible(filter=='' or 'sp_super_paren'.find(filter)!=-1)
        self.namesp_super_paren.setVisible(filter=='' or 'sp_super_paren'.find(filter)!=-1)
        self.sp_super_paren.setVisible(filter=='' or 'sp_super_paren'.find(filter)!=-1)
        self.labelsp_this_paren.setVisible(filter=='' or 'sp_this_paren'.find(filter)!=-1)
        if self.tr("code_sp_this_paren")!="code_sp_this_paren":
            self.codesp_this_paren.setVisible(filter=='' or 'sp_this_paren'.find(filter)!=-1)
        self.namesp_this_paren.setVisible(filter=='' or 'sp_this_paren'.find(filter)!=-1)
        self.sp_this_paren.setVisible(filter=='' or 'sp_this_paren'.find(filter)!=-1)
        self.labelsp_macro.setVisible(filter=='' or 'sp_macro'.find(filter)!=-1)
        if self.tr("code_sp_macro")!="code_sp_macro":
            self.codesp_macro.setVisible(filter=='' or 'sp_macro'.find(filter)!=-1)
        self.namesp_macro.setVisible(filter=='' or 'sp_macro'.find(filter)!=-1)
        self.sp_macro.setVisible(filter=='' or 'sp_macro'.find(filter)!=-1)
        self.labelsp_macro_func.setVisible(filter=='' or 'sp_macro_func'.find(filter)!=-1)
        if self.tr("code_sp_macro_func")!="code_sp_macro_func":
            self.codesp_macro_func.setVisible(filter=='' or 'sp_macro_func'.find(filter)!=-1)
        self.namesp_macro_func.setVisible(filter=='' or 'sp_macro_func'.find(filter)!=-1)
        self.sp_macro_func.setVisible(filter=='' or 'sp_macro_func'.find(filter)!=-1)
        self.labelsp_else_brace.setVisible(filter=='' or 'sp_else_brace'.find(filter)!=-1)
        if self.tr("code_sp_else_brace")!="code_sp_else_brace":
            self.codesp_else_brace.setVisible(filter=='' or 'sp_else_brace'.find(filter)!=-1)
        self.namesp_else_brace.setVisible(filter=='' or 'sp_else_brace'.find(filter)!=-1)
        self.sp_else_brace.setVisible(filter=='' or 'sp_else_brace'.find(filter)!=-1)
        self.labelsp_brace_else.setVisible(filter=='' or 'sp_brace_else'.find(filter)!=-1)
        if self.tr("code_sp_brace_else")!="code_sp_brace_else":
            self.codesp_brace_else.setVisible(filter=='' or 'sp_brace_else'.find(filter)!=-1)
        self.namesp_brace_else.setVisible(filter=='' or 'sp_brace_else'.find(filter)!=-1)
        self.sp_brace_else.setVisible(filter=='' or 'sp_brace_else'.find(filter)!=-1)
        self.labelsp_brace_typedef.setVisible(filter=='' or 'sp_brace_typedef'.find(filter)!=-1)
        if self.tr("code_sp_brace_typedef")!="code_sp_brace_typedef":
            self.codesp_brace_typedef.setVisible(filter=='' or 'sp_brace_typedef'.find(filter)!=-1)
        self.namesp_brace_typedef.setVisible(filter=='' or 'sp_brace_typedef'.find(filter)!=-1)
        self.sp_brace_typedef.setVisible(filter=='' or 'sp_brace_typedef'.find(filter)!=-1)
        self.labelsp_catch_brace.setVisible(filter=='' or 'sp_catch_brace'.find(filter)!=-1)
        if self.tr("code_sp_catch_brace")!="code_sp_catch_brace":
            self.codesp_catch_brace.setVisible(filter=='' or 'sp_catch_brace'.find(filter)!=-1)
        self.namesp_catch_brace.setVisible(filter=='' or 'sp_catch_brace'.find(filter)!=-1)
        self.sp_catch_brace.setVisible(filter=='' or 'sp_catch_brace'.find(filter)!=-1)
        self.labelsp_oc_catch_brace.setVisible(filter=='' or 'sp_oc_catch_brace'.find(filter)!=-1)
        if self.tr("code_sp_oc_catch_brace")!="code_sp_oc_catch_brace":
            self.codesp_oc_catch_brace.setVisible(filter=='' or 'sp_oc_catch_brace'.find(filter)!=-1)
        self.namesp_oc_catch_brace.setVisible(filter=='' or 'sp_oc_catch_brace'.find(filter)!=-1)
        self.sp_oc_catch_brace.setVisible(filter=='' or 'sp_oc_catch_brace'.find(filter)!=-1)
        self.labelsp_brace_catch.setVisible(filter=='' or 'sp_brace_catch'.find(filter)!=-1)
        if self.tr("code_sp_brace_catch")!="code_sp_brace_catch":
            self.codesp_brace_catch.setVisible(filter=='' or 'sp_brace_catch'.find(filter)!=-1)
        self.namesp_brace_catch.setVisible(filter=='' or 'sp_brace_catch'.find(filter)!=-1)
        self.sp_brace_catch.setVisible(filter=='' or 'sp_brace_catch'.find(filter)!=-1)
        self.labelsp_oc_brace_catch.setVisible(filter=='' or 'sp_oc_brace_catch'.find(filter)!=-1)
        if self.tr("code_sp_oc_brace_catch")!="code_sp_oc_brace_catch":
            self.codesp_oc_brace_catch.setVisible(filter=='' or 'sp_oc_brace_catch'.find(filter)!=-1)
        self.namesp_oc_brace_catch.setVisible(filter=='' or 'sp_oc_brace_catch'.find(filter)!=-1)
        self.sp_oc_brace_catch.setVisible(filter=='' or 'sp_oc_brace_catch'.find(filter)!=-1)
        self.labelsp_finally_brace.setVisible(filter=='' or 'sp_finally_brace'.find(filter)!=-1)
        if self.tr("code_sp_finally_brace")!="code_sp_finally_brace":
            self.codesp_finally_brace.setVisible(filter=='' or 'sp_finally_brace'.find(filter)!=-1)
        self.namesp_finally_brace.setVisible(filter=='' or 'sp_finally_brace'.find(filter)!=-1)
        self.sp_finally_brace.setVisible(filter=='' or 'sp_finally_brace'.find(filter)!=-1)
        self.labelsp_brace_finally.setVisible(filter=='' or 'sp_brace_finally'.find(filter)!=-1)
        if self.tr("code_sp_brace_finally")!="code_sp_brace_finally":
            self.codesp_brace_finally.setVisible(filter=='' or 'sp_brace_finally'.find(filter)!=-1)
        self.namesp_brace_finally.setVisible(filter=='' or 'sp_brace_finally'.find(filter)!=-1)
        self.sp_brace_finally.setVisible(filter=='' or 'sp_brace_finally'.find(filter)!=-1)
        self.labelsp_try_brace.setVisible(filter=='' or 'sp_try_brace'.find(filter)!=-1)
        if self.tr("code_sp_try_brace")!="code_sp_try_brace":
            self.codesp_try_brace.setVisible(filter=='' or 'sp_try_brace'.find(filter)!=-1)
        self.namesp_try_brace.setVisible(filter=='' or 'sp_try_brace'.find(filter)!=-1)
        self.sp_try_brace.setVisible(filter=='' or 'sp_try_brace'.find(filter)!=-1)
        self.labelsp_getset_brace.setVisible(filter=='' or 'sp_getset_brace'.find(filter)!=-1)
        if self.tr("code_sp_getset_brace")!="code_sp_getset_brace":
            self.codesp_getset_brace.setVisible(filter=='' or 'sp_getset_brace'.find(filter)!=-1)
        self.namesp_getset_brace.setVisible(filter=='' or 'sp_getset_brace'.find(filter)!=-1)
        self.sp_getset_brace.setVisible(filter=='' or 'sp_getset_brace'.find(filter)!=-1)
        self.labelsp_word_brace_init_lst.setVisible(filter=='' or 'sp_word_brace_init_lst'.find(filter)!=-1)
        if self.tr("code_sp_word_brace_init_lst")!="code_sp_word_brace_init_lst":
            self.codesp_word_brace_init_lst.setVisible(filter=='' or 'sp_word_brace_init_lst'.find(filter)!=-1)
        self.namesp_word_brace_init_lst.setVisible(filter=='' or 'sp_word_brace_init_lst'.find(filter)!=-1)
        self.sp_word_brace_init_lst.setVisible(filter=='' or 'sp_word_brace_init_lst'.find(filter)!=-1)
        self.labelsp_word_brace_ns.setVisible(filter=='' or 'sp_word_brace_ns'.find(filter)!=-1)
        if self.tr("code_sp_word_brace_ns")!="code_sp_word_brace_ns":
            self.codesp_word_brace_ns.setVisible(filter=='' or 'sp_word_brace_ns'.find(filter)!=-1)
        self.namesp_word_brace_ns.setVisible(filter=='' or 'sp_word_brace_ns'.find(filter)!=-1)
        self.sp_word_brace_ns.setVisible(filter=='' or 'sp_word_brace_ns'.find(filter)!=-1)
        self.labelsp_before_dc.setVisible(filter=='' or 'sp_before_dc'.find(filter)!=-1)
        if self.tr("code_sp_before_dc")!="code_sp_before_dc":
            self.codesp_before_dc.setVisible(filter=='' or 'sp_before_dc'.find(filter)!=-1)
        self.namesp_before_dc.setVisible(filter=='' or 'sp_before_dc'.find(filter)!=-1)
        self.sp_before_dc.setVisible(filter=='' or 'sp_before_dc'.find(filter)!=-1)
        self.labelsp_after_dc.setVisible(filter=='' or 'sp_after_dc'.find(filter)!=-1)
        if self.tr("code_sp_after_dc")!="code_sp_after_dc":
            self.codesp_after_dc.setVisible(filter=='' or 'sp_after_dc'.find(filter)!=-1)
        self.namesp_after_dc.setVisible(filter=='' or 'sp_after_dc'.find(filter)!=-1)
        self.sp_after_dc.setVisible(filter=='' or 'sp_after_dc'.find(filter)!=-1)
        self.labelsp_d_array_colon.setVisible(filter=='' or 'sp_d_array_colon'.find(filter)!=-1)
        if self.tr("code_sp_d_array_colon")!="code_sp_d_array_colon":
            self.codesp_d_array_colon.setVisible(filter=='' or 'sp_d_array_colon'.find(filter)!=-1)
        self.namesp_d_array_colon.setVisible(filter=='' or 'sp_d_array_colon'.find(filter)!=-1)
        self.sp_d_array_colon.setVisible(filter=='' or 'sp_d_array_colon'.find(filter)!=-1)
        self.labelsp_not.setVisible(filter=='' or 'sp_not'.find(filter)!=-1)
        if self.tr("code_sp_not")!="code_sp_not":
            self.codesp_not.setVisible(filter=='' or 'sp_not'.find(filter)!=-1)
        self.namesp_not.setVisible(filter=='' or 'sp_not'.find(filter)!=-1)
        self.sp_not.setVisible(filter=='' or 'sp_not'.find(filter)!=-1)
        self.labelsp_inv.setVisible(filter=='' or 'sp_inv'.find(filter)!=-1)
        if self.tr("code_sp_inv")!="code_sp_inv":
            self.codesp_inv.setVisible(filter=='' or 'sp_inv'.find(filter)!=-1)
        self.namesp_inv.setVisible(filter=='' or 'sp_inv'.find(filter)!=-1)
        self.sp_inv.setVisible(filter=='' or 'sp_inv'.find(filter)!=-1)
        self.labelsp_addr.setVisible(filter=='' or 'sp_addr'.find(filter)!=-1)
        if self.tr("code_sp_addr")!="code_sp_addr":
            self.codesp_addr.setVisible(filter=='' or 'sp_addr'.find(filter)!=-1)
        self.namesp_addr.setVisible(filter=='' or 'sp_addr'.find(filter)!=-1)
        self.sp_addr.setVisible(filter=='' or 'sp_addr'.find(filter)!=-1)
        self.labelsp_member.setVisible(filter=='' or 'sp_member'.find(filter)!=-1)
        if self.tr("code_sp_member")!="code_sp_member":
            self.codesp_member.setVisible(filter=='' or 'sp_member'.find(filter)!=-1)
        self.namesp_member.setVisible(filter=='' or 'sp_member'.find(filter)!=-1)
        self.sp_member.setVisible(filter=='' or 'sp_member'.find(filter)!=-1)
        self.labelsp_deref.setVisible(filter=='' or 'sp_deref'.find(filter)!=-1)
        if self.tr("code_sp_deref")!="code_sp_deref":
            self.codesp_deref.setVisible(filter=='' or 'sp_deref'.find(filter)!=-1)
        self.namesp_deref.setVisible(filter=='' or 'sp_deref'.find(filter)!=-1)
        self.sp_deref.setVisible(filter=='' or 'sp_deref'.find(filter)!=-1)
        self.labelsp_sign.setVisible(filter=='' or 'sp_sign'.find(filter)!=-1)
        if self.tr("code_sp_sign")!="code_sp_sign":
            self.codesp_sign.setVisible(filter=='' or 'sp_sign'.find(filter)!=-1)
        self.namesp_sign.setVisible(filter=='' or 'sp_sign'.find(filter)!=-1)
        self.sp_sign.setVisible(filter=='' or 'sp_sign'.find(filter)!=-1)
        self.labelsp_incdec.setVisible(filter=='' or 'sp_incdec'.find(filter)!=-1)
        if self.tr("code_sp_incdec")!="code_sp_incdec":
            self.codesp_incdec.setVisible(filter=='' or 'sp_incdec'.find(filter)!=-1)
        self.namesp_incdec.setVisible(filter=='' or 'sp_incdec'.find(filter)!=-1)
        self.sp_incdec.setVisible(filter=='' or 'sp_incdec'.find(filter)!=-1)
        self.labelsp_before_nl_cont.setVisible(filter=='' or 'sp_before_nl_cont'.find(filter)!=-1)
        if self.tr("code_sp_before_nl_cont")!="code_sp_before_nl_cont":
            self.codesp_before_nl_cont.setVisible(filter=='' or 'sp_before_nl_cont'.find(filter)!=-1)
        self.namesp_before_nl_cont.setVisible(filter=='' or 'sp_before_nl_cont'.find(filter)!=-1)
        self.sp_before_nl_cont.setVisible(filter=='' or 'sp_before_nl_cont'.find(filter)!=-1)
        self.labelsp_after_oc_scope.setVisible(filter=='' or 'sp_after_oc_scope'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_scope")!="code_sp_after_oc_scope":
            self.codesp_after_oc_scope.setVisible(filter=='' or 'sp_after_oc_scope'.find(filter)!=-1)
        self.namesp_after_oc_scope.setVisible(filter=='' or 'sp_after_oc_scope'.find(filter)!=-1)
        self.sp_after_oc_scope.setVisible(filter=='' or 'sp_after_oc_scope'.find(filter)!=-1)
        self.labelsp_after_oc_colon.setVisible(filter=='' or 'sp_after_oc_colon'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_colon")!="code_sp_after_oc_colon":
            self.codesp_after_oc_colon.setVisible(filter=='' or 'sp_after_oc_colon'.find(filter)!=-1)
        self.namesp_after_oc_colon.setVisible(filter=='' or 'sp_after_oc_colon'.find(filter)!=-1)
        self.sp_after_oc_colon.setVisible(filter=='' or 'sp_after_oc_colon'.find(filter)!=-1)
        self.labelsp_before_oc_colon.setVisible(filter=='' or 'sp_before_oc_colon'.find(filter)!=-1)
        if self.tr("code_sp_before_oc_colon")!="code_sp_before_oc_colon":
            self.codesp_before_oc_colon.setVisible(filter=='' or 'sp_before_oc_colon'.find(filter)!=-1)
        self.namesp_before_oc_colon.setVisible(filter=='' or 'sp_before_oc_colon'.find(filter)!=-1)
        self.sp_before_oc_colon.setVisible(filter=='' or 'sp_before_oc_colon'.find(filter)!=-1)
        self.labelsp_after_oc_dict_colon.setVisible(filter=='' or 'sp_after_oc_dict_colon'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_dict_colon")!="code_sp_after_oc_dict_colon":
            self.codesp_after_oc_dict_colon.setVisible(filter=='' or 'sp_after_oc_dict_colon'.find(filter)!=-1)
        self.namesp_after_oc_dict_colon.setVisible(filter=='' or 'sp_after_oc_dict_colon'.find(filter)!=-1)
        self.sp_after_oc_dict_colon.setVisible(filter=='' or 'sp_after_oc_dict_colon'.find(filter)!=-1)
        self.labelsp_before_oc_dict_colon.setVisible(filter=='' or 'sp_before_oc_dict_colon'.find(filter)!=-1)
        if self.tr("code_sp_before_oc_dict_colon")!="code_sp_before_oc_dict_colon":
            self.codesp_before_oc_dict_colon.setVisible(filter=='' or 'sp_before_oc_dict_colon'.find(filter)!=-1)
        self.namesp_before_oc_dict_colon.setVisible(filter=='' or 'sp_before_oc_dict_colon'.find(filter)!=-1)
        self.sp_before_oc_dict_colon.setVisible(filter=='' or 'sp_before_oc_dict_colon'.find(filter)!=-1)
        self.labelsp_after_send_oc_colon.setVisible(filter=='' or 'sp_after_send_oc_colon'.find(filter)!=-1)
        if self.tr("code_sp_after_send_oc_colon")!="code_sp_after_send_oc_colon":
            self.codesp_after_send_oc_colon.setVisible(filter=='' or 'sp_after_send_oc_colon'.find(filter)!=-1)
        self.namesp_after_send_oc_colon.setVisible(filter=='' or 'sp_after_send_oc_colon'.find(filter)!=-1)
        self.sp_after_send_oc_colon.setVisible(filter=='' or 'sp_after_send_oc_colon'.find(filter)!=-1)
        self.labelsp_before_send_oc_colon.setVisible(filter=='' or 'sp_before_send_oc_colon'.find(filter)!=-1)
        if self.tr("code_sp_before_send_oc_colon")!="code_sp_before_send_oc_colon":
            self.codesp_before_send_oc_colon.setVisible(filter=='' or 'sp_before_send_oc_colon'.find(filter)!=-1)
        self.namesp_before_send_oc_colon.setVisible(filter=='' or 'sp_before_send_oc_colon'.find(filter)!=-1)
        self.sp_before_send_oc_colon.setVisible(filter=='' or 'sp_before_send_oc_colon'.find(filter)!=-1)
        self.labelsp_after_oc_type.setVisible(filter=='' or 'sp_after_oc_type'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_type")!="code_sp_after_oc_type":
            self.codesp_after_oc_type.setVisible(filter=='' or 'sp_after_oc_type'.find(filter)!=-1)
        self.namesp_after_oc_type.setVisible(filter=='' or 'sp_after_oc_type'.find(filter)!=-1)
        self.sp_after_oc_type.setVisible(filter=='' or 'sp_after_oc_type'.find(filter)!=-1)
        self.labelsp_after_oc_return_type.setVisible(filter=='' or 'sp_after_oc_return_type'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_return_type")!="code_sp_after_oc_return_type":
            self.codesp_after_oc_return_type.setVisible(filter=='' or 'sp_after_oc_return_type'.find(filter)!=-1)
        self.namesp_after_oc_return_type.setVisible(filter=='' or 'sp_after_oc_return_type'.find(filter)!=-1)
        self.sp_after_oc_return_type.setVisible(filter=='' or 'sp_after_oc_return_type'.find(filter)!=-1)
        self.labelsp_after_oc_at_sel.setVisible(filter=='' or 'sp_after_oc_at_sel'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_at_sel")!="code_sp_after_oc_at_sel":
            self.codesp_after_oc_at_sel.setVisible(filter=='' or 'sp_after_oc_at_sel'.find(filter)!=-1)
        self.namesp_after_oc_at_sel.setVisible(filter=='' or 'sp_after_oc_at_sel'.find(filter)!=-1)
        self.sp_after_oc_at_sel.setVisible(filter=='' or 'sp_after_oc_at_sel'.find(filter)!=-1)
        self.labelsp_after_oc_at_sel_parens.setVisible(filter=='' or 'sp_after_oc_at_sel_parens'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_at_sel_parens")!="code_sp_after_oc_at_sel_parens":
            self.codesp_after_oc_at_sel_parens.setVisible(filter=='' or 'sp_after_oc_at_sel_parens'.find(filter)!=-1)
        self.namesp_after_oc_at_sel_parens.setVisible(filter=='' or 'sp_after_oc_at_sel_parens'.find(filter)!=-1)
        self.sp_after_oc_at_sel_parens.setVisible(filter=='' or 'sp_after_oc_at_sel_parens'.find(filter)!=-1)
        self.labelsp_inside_oc_at_sel_parens.setVisible(filter=='' or 'sp_inside_oc_at_sel_parens'.find(filter)!=-1)
        if self.tr("code_sp_inside_oc_at_sel_parens")!="code_sp_inside_oc_at_sel_parens":
            self.codesp_inside_oc_at_sel_parens.setVisible(filter=='' or 'sp_inside_oc_at_sel_parens'.find(filter)!=-1)
        self.namesp_inside_oc_at_sel_parens.setVisible(filter=='' or 'sp_inside_oc_at_sel_parens'.find(filter)!=-1)
        self.sp_inside_oc_at_sel_parens.setVisible(filter=='' or 'sp_inside_oc_at_sel_parens'.find(filter)!=-1)
        self.labelsp_before_oc_block_caret.setVisible(filter=='' or 'sp_before_oc_block_caret'.find(filter)!=-1)
        if self.tr("code_sp_before_oc_block_caret")!="code_sp_before_oc_block_caret":
            self.codesp_before_oc_block_caret.setVisible(filter=='' or 'sp_before_oc_block_caret'.find(filter)!=-1)
        self.namesp_before_oc_block_caret.setVisible(filter=='' or 'sp_before_oc_block_caret'.find(filter)!=-1)
        self.sp_before_oc_block_caret.setVisible(filter=='' or 'sp_before_oc_block_caret'.find(filter)!=-1)
        self.labelsp_after_oc_block_caret.setVisible(filter=='' or 'sp_after_oc_block_caret'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_block_caret")!="code_sp_after_oc_block_caret":
            self.codesp_after_oc_block_caret.setVisible(filter=='' or 'sp_after_oc_block_caret'.find(filter)!=-1)
        self.namesp_after_oc_block_caret.setVisible(filter=='' or 'sp_after_oc_block_caret'.find(filter)!=-1)
        self.sp_after_oc_block_caret.setVisible(filter=='' or 'sp_after_oc_block_caret'.find(filter)!=-1)
        self.labelsp_after_oc_msg_receiver.setVisible(filter=='' or 'sp_after_oc_msg_receiver'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_msg_receiver")!="code_sp_after_oc_msg_receiver":
            self.codesp_after_oc_msg_receiver.setVisible(filter=='' or 'sp_after_oc_msg_receiver'.find(filter)!=-1)
        self.namesp_after_oc_msg_receiver.setVisible(filter=='' or 'sp_after_oc_msg_receiver'.find(filter)!=-1)
        self.sp_after_oc_msg_receiver.setVisible(filter=='' or 'sp_after_oc_msg_receiver'.find(filter)!=-1)
        self.labelsp_after_oc_property.setVisible(filter=='' or 'sp_after_oc_property'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_property")!="code_sp_after_oc_property":
            self.codesp_after_oc_property.setVisible(filter=='' or 'sp_after_oc_property'.find(filter)!=-1)
        self.namesp_after_oc_property.setVisible(filter=='' or 'sp_after_oc_property'.find(filter)!=-1)
        self.sp_after_oc_property.setVisible(filter=='' or 'sp_after_oc_property'.find(filter)!=-1)
        self.labelsp_after_oc_synchronized.setVisible(filter=='' or 'sp_after_oc_synchronized'.find(filter)!=-1)
        if self.tr("code_sp_after_oc_synchronized")!="code_sp_after_oc_synchronized":
            self.codesp_after_oc_synchronized.setVisible(filter=='' or 'sp_after_oc_synchronized'.find(filter)!=-1)
        self.namesp_after_oc_synchronized.setVisible(filter=='' or 'sp_after_oc_synchronized'.find(filter)!=-1)
        self.sp_after_oc_synchronized.setVisible(filter=='' or 'sp_after_oc_synchronized'.find(filter)!=-1)
        self.labelsp_cond_colon.setVisible(filter=='' or 'sp_cond_colon'.find(filter)!=-1)
        if self.tr("code_sp_cond_colon")!="code_sp_cond_colon":
            self.codesp_cond_colon.setVisible(filter=='' or 'sp_cond_colon'.find(filter)!=-1)
        self.namesp_cond_colon.setVisible(filter=='' or 'sp_cond_colon'.find(filter)!=-1)
        self.sp_cond_colon.setVisible(filter=='' or 'sp_cond_colon'.find(filter)!=-1)
        self.labelsp_cond_colon_before.setVisible(filter=='' or 'sp_cond_colon_before'.find(filter)!=-1)
        if self.tr("code_sp_cond_colon_before")!="code_sp_cond_colon_before":
            self.codesp_cond_colon_before.setVisible(filter=='' or 'sp_cond_colon_before'.find(filter)!=-1)
        self.namesp_cond_colon_before.setVisible(filter=='' or 'sp_cond_colon_before'.find(filter)!=-1)
        self.sp_cond_colon_before.setVisible(filter=='' or 'sp_cond_colon_before'.find(filter)!=-1)
        self.labelsp_cond_colon_after.setVisible(filter=='' or 'sp_cond_colon_after'.find(filter)!=-1)
        if self.tr("code_sp_cond_colon_after")!="code_sp_cond_colon_after":
            self.codesp_cond_colon_after.setVisible(filter=='' or 'sp_cond_colon_after'.find(filter)!=-1)
        self.namesp_cond_colon_after.setVisible(filter=='' or 'sp_cond_colon_after'.find(filter)!=-1)
        self.sp_cond_colon_after.setVisible(filter=='' or 'sp_cond_colon_after'.find(filter)!=-1)
        self.labelsp_cond_question.setVisible(filter=='' or 'sp_cond_question'.find(filter)!=-1)
        if self.tr("code_sp_cond_question")!="code_sp_cond_question":
            self.codesp_cond_question.setVisible(filter=='' or 'sp_cond_question'.find(filter)!=-1)
        self.namesp_cond_question.setVisible(filter=='' or 'sp_cond_question'.find(filter)!=-1)
        self.sp_cond_question.setVisible(filter=='' or 'sp_cond_question'.find(filter)!=-1)
        self.labelsp_cond_question_before.setVisible(filter=='' or 'sp_cond_question_before'.find(filter)!=-1)
        if self.tr("code_sp_cond_question_before")!="code_sp_cond_question_before":
            self.codesp_cond_question_before.setVisible(filter=='' or 'sp_cond_question_before'.find(filter)!=-1)
        self.namesp_cond_question_before.setVisible(filter=='' or 'sp_cond_question_before'.find(filter)!=-1)
        self.sp_cond_question_before.setVisible(filter=='' or 'sp_cond_question_before'.find(filter)!=-1)
        self.labelsp_cond_question_after.setVisible(filter=='' or 'sp_cond_question_after'.find(filter)!=-1)
        if self.tr("code_sp_cond_question_after")!="code_sp_cond_question_after":
            self.codesp_cond_question_after.setVisible(filter=='' or 'sp_cond_question_after'.find(filter)!=-1)
        self.namesp_cond_question_after.setVisible(filter=='' or 'sp_cond_question_after'.find(filter)!=-1)
        self.sp_cond_question_after.setVisible(filter=='' or 'sp_cond_question_after'.find(filter)!=-1)
        self.labelsp_cond_ternary_short.setVisible(filter=='' or 'sp_cond_ternary_short'.find(filter)!=-1)
        if self.tr("code_sp_cond_ternary_short")!="code_sp_cond_ternary_short":
            self.codesp_cond_ternary_short.setVisible(filter=='' or 'sp_cond_ternary_short'.find(filter)!=-1)
        self.namesp_cond_ternary_short.setVisible(filter=='' or 'sp_cond_ternary_short'.find(filter)!=-1)
        self.sp_cond_ternary_short.setVisible(filter=='' or 'sp_cond_ternary_short'.find(filter)!=-1)
        self.labelsp_case_label.setVisible(filter=='' or 'sp_case_label'.find(filter)!=-1)
        if self.tr("code_sp_case_label")!="code_sp_case_label":
            self.codesp_case_label.setVisible(filter=='' or 'sp_case_label'.find(filter)!=-1)
        self.namesp_case_label.setVisible(filter=='' or 'sp_case_label'.find(filter)!=-1)
        self.sp_case_label.setVisible(filter=='' or 'sp_case_label'.find(filter)!=-1)
        self.labelsp_range.setVisible(filter=='' or 'sp_range'.find(filter)!=-1)
        if self.tr("code_sp_range")!="code_sp_range":
            self.codesp_range.setVisible(filter=='' or 'sp_range'.find(filter)!=-1)
        self.namesp_range.setVisible(filter=='' or 'sp_range'.find(filter)!=-1)
        self.sp_range.setVisible(filter=='' or 'sp_range'.find(filter)!=-1)
        self.labelsp_after_for_colon.setVisible(filter=='' or 'sp_after_for_colon'.find(filter)!=-1)
        if self.tr("code_sp_after_for_colon")!="code_sp_after_for_colon":
            self.codesp_after_for_colon.setVisible(filter=='' or 'sp_after_for_colon'.find(filter)!=-1)
        self.namesp_after_for_colon.setVisible(filter=='' or 'sp_after_for_colon'.find(filter)!=-1)
        self.sp_after_for_colon.setVisible(filter=='' or 'sp_after_for_colon'.find(filter)!=-1)
        self.labelsp_before_for_colon.setVisible(filter=='' or 'sp_before_for_colon'.find(filter)!=-1)
        if self.tr("code_sp_before_for_colon")!="code_sp_before_for_colon":
            self.codesp_before_for_colon.setVisible(filter=='' or 'sp_before_for_colon'.find(filter)!=-1)
        self.namesp_before_for_colon.setVisible(filter=='' or 'sp_before_for_colon'.find(filter)!=-1)
        self.sp_before_for_colon.setVisible(filter=='' or 'sp_before_for_colon'.find(filter)!=-1)
        self.labelsp_extern_paren.setVisible(filter=='' or 'sp_extern_paren'.find(filter)!=-1)
        if self.tr("code_sp_extern_paren")!="code_sp_extern_paren":
            self.codesp_extern_paren.setVisible(filter=='' or 'sp_extern_paren'.find(filter)!=-1)
        self.namesp_extern_paren.setVisible(filter=='' or 'sp_extern_paren'.find(filter)!=-1)
        self.sp_extern_paren.setVisible(filter=='' or 'sp_extern_paren'.find(filter)!=-1)
        self.labelsp_cmt_cpp_start.setVisible(filter=='' or 'sp_cmt_cpp_start'.find(filter)!=-1)
        if self.tr("code_sp_cmt_cpp_start")!="code_sp_cmt_cpp_start":
            self.codesp_cmt_cpp_start.setVisible(filter=='' or 'sp_cmt_cpp_start'.find(filter)!=-1)
        self.namesp_cmt_cpp_start.setVisible(filter=='' or 'sp_cmt_cpp_start'.find(filter)!=-1)
        self.sp_cmt_cpp_start.setVisible(filter=='' or 'sp_cmt_cpp_start'.find(filter)!=-1)
        self.labelsp_cmt_cpp_doxygen.setVisible(filter=='' or 'sp_cmt_cpp_doxygen'.find(filter)!=-1)
        if self.tr("code_sp_cmt_cpp_doxygen")!="code_sp_cmt_cpp_doxygen":
            self.codesp_cmt_cpp_doxygen.setVisible(filter=='' or 'sp_cmt_cpp_doxygen'.find(filter)!=-1)
        self.namesp_cmt_cpp_doxygen.setVisible(filter=='' or 'sp_cmt_cpp_doxygen'.find(filter)!=-1)
        self.sp_cmt_cpp_doxygen.setVisible(filter=='' or 'sp_cmt_cpp_doxygen'.find(filter)!=-1)
        self.labelsp_cmt_cpp_qttr.setVisible(filter=='' or 'sp_cmt_cpp_qttr'.find(filter)!=-1)
        if self.tr("code_sp_cmt_cpp_qttr")!="code_sp_cmt_cpp_qttr":
            self.codesp_cmt_cpp_qttr.setVisible(filter=='' or 'sp_cmt_cpp_qttr'.find(filter)!=-1)
        self.namesp_cmt_cpp_qttr.setVisible(filter=='' or 'sp_cmt_cpp_qttr'.find(filter)!=-1)
        self.sp_cmt_cpp_qttr.setVisible(filter=='' or 'sp_cmt_cpp_qttr'.find(filter)!=-1)
        self.labelsp_endif_cmt.setVisible(filter=='' or 'sp_endif_cmt'.find(filter)!=-1)
        if self.tr("code_sp_endif_cmt")!="code_sp_endif_cmt":
            self.codesp_endif_cmt.setVisible(filter=='' or 'sp_endif_cmt'.find(filter)!=-1)
        self.namesp_endif_cmt.setVisible(filter=='' or 'sp_endif_cmt'.find(filter)!=-1)
        self.sp_endif_cmt.setVisible(filter=='' or 'sp_endif_cmt'.find(filter)!=-1)
        self.labelsp_after_new.setVisible(filter=='' or 'sp_after_new'.find(filter)!=-1)
        if self.tr("code_sp_after_new")!="code_sp_after_new":
            self.codesp_after_new.setVisible(filter=='' or 'sp_after_new'.find(filter)!=-1)
        self.namesp_after_new.setVisible(filter=='' or 'sp_after_new'.find(filter)!=-1)
        self.sp_after_new.setVisible(filter=='' or 'sp_after_new'.find(filter)!=-1)
        self.labelsp_between_new_paren.setVisible(filter=='' or 'sp_between_new_paren'.find(filter)!=-1)
        if self.tr("code_sp_between_new_paren")!="code_sp_between_new_paren":
            self.codesp_between_new_paren.setVisible(filter=='' or 'sp_between_new_paren'.find(filter)!=-1)
        self.namesp_between_new_paren.setVisible(filter=='' or 'sp_between_new_paren'.find(filter)!=-1)
        self.sp_between_new_paren.setVisible(filter=='' or 'sp_between_new_paren'.find(filter)!=-1)
        self.labelsp_after_newop_paren.setVisible(filter=='' or 'sp_after_newop_paren'.find(filter)!=-1)
        if self.tr("code_sp_after_newop_paren")!="code_sp_after_newop_paren":
            self.codesp_after_newop_paren.setVisible(filter=='' or 'sp_after_newop_paren'.find(filter)!=-1)
        self.namesp_after_newop_paren.setVisible(filter=='' or 'sp_after_newop_paren'.find(filter)!=-1)
        self.sp_after_newop_paren.setVisible(filter=='' or 'sp_after_newop_paren'.find(filter)!=-1)
        self.labelsp_inside_newop_paren.setVisible(filter=='' or 'sp_inside_newop_paren'.find(filter)!=-1)
        if self.tr("code_sp_inside_newop_paren")!="code_sp_inside_newop_paren":
            self.codesp_inside_newop_paren.setVisible(filter=='' or 'sp_inside_newop_paren'.find(filter)!=-1)
        self.namesp_inside_newop_paren.setVisible(filter=='' or 'sp_inside_newop_paren'.find(filter)!=-1)
        self.sp_inside_newop_paren.setVisible(filter=='' or 'sp_inside_newop_paren'.find(filter)!=-1)
        self.labelsp_inside_newop_paren_open.setVisible(filter=='' or 'sp_inside_newop_paren_open'.find(filter)!=-1)
        if self.tr("code_sp_inside_newop_paren_open")!="code_sp_inside_newop_paren_open":
            self.codesp_inside_newop_paren_open.setVisible(filter=='' or 'sp_inside_newop_paren_open'.find(filter)!=-1)
        self.namesp_inside_newop_paren_open.setVisible(filter=='' or 'sp_inside_newop_paren_open'.find(filter)!=-1)
        self.sp_inside_newop_paren_open.setVisible(filter=='' or 'sp_inside_newop_paren_open'.find(filter)!=-1)
        self.labelsp_inside_newop_paren_close.setVisible(filter=='' or 'sp_inside_newop_paren_close'.find(filter)!=-1)
        if self.tr("code_sp_inside_newop_paren_close")!="code_sp_inside_newop_paren_close":
            self.codesp_inside_newop_paren_close.setVisible(filter=='' or 'sp_inside_newop_paren_close'.find(filter)!=-1)
        self.namesp_inside_newop_paren_close.setVisible(filter=='' or 'sp_inside_newop_paren_close'.find(filter)!=-1)
        self.sp_inside_newop_paren_close.setVisible(filter=='' or 'sp_inside_newop_paren_close'.find(filter)!=-1)
        self.labelsp_before_tr_emb_cmt.setVisible(filter=='' or 'sp_before_tr_emb_cmt'.find(filter)!=-1)
        if self.tr("code_sp_before_tr_emb_cmt")!="code_sp_before_tr_emb_cmt":
            self.codesp_before_tr_emb_cmt.setVisible(filter=='' or 'sp_before_tr_emb_cmt'.find(filter)!=-1)
        self.namesp_before_tr_emb_cmt.setVisible(filter=='' or 'sp_before_tr_emb_cmt'.find(filter)!=-1)
        self.sp_before_tr_emb_cmt.setVisible(filter=='' or 'sp_before_tr_emb_cmt'.find(filter)!=-1)
        self.labelsp_num_before_tr_emb_cmt.setVisible(filter=='' or 'sp_num_before_tr_emb_cmt'.find(filter)!=-1)
        if self.tr("code_sp_num_before_tr_emb_cmt")!="code_sp_num_before_tr_emb_cmt":
            self.codesp_num_before_tr_emb_cmt.setVisible(filter=='' or 'sp_num_before_tr_emb_cmt'.find(filter)!=-1)
        self.namesp_num_before_tr_emb_cmt.setVisible(filter=='' or 'sp_num_before_tr_emb_cmt'.find(filter)!=-1)
        self.sp_num_before_tr_emb_cmt.setVisible(filter=='' or 'sp_num_before_tr_emb_cmt'.find(filter)!=-1)
        self.labelsp_annotation_paren.setVisible(filter=='' or 'sp_annotation_paren'.find(filter)!=-1)
        if self.tr("code_sp_annotation_paren")!="code_sp_annotation_paren":
            self.codesp_annotation_paren.setVisible(filter=='' or 'sp_annotation_paren'.find(filter)!=-1)
        self.namesp_annotation_paren.setVisible(filter=='' or 'sp_annotation_paren'.find(filter)!=-1)
        self.sp_annotation_paren.setVisible(filter=='' or 'sp_annotation_paren'.find(filter)!=-1)
        self.labelsp_skip_vbrace_tokens.setVisible(filter=='' or 'sp_skip_vbrace_tokens'.find(filter)!=-1)
        if self.tr("code_sp_skip_vbrace_tokens")!="code_sp_skip_vbrace_tokens":
            self.codesp_skip_vbrace_tokens.setVisible(filter=='' or 'sp_skip_vbrace_tokens'.find(filter)!=-1)
        self.namesp_skip_vbrace_tokens.setVisible(filter=='' or 'sp_skip_vbrace_tokens'.find(filter)!=-1)
        self.sp_skip_vbrace_tokens.setVisible(filter=='' or 'sp_skip_vbrace_tokens'.find(filter)!=-1)
        self.labelsp_after_noexcept.setVisible(filter=='' or 'sp_after_noexcept'.find(filter)!=-1)
        if self.tr("code_sp_after_noexcept")!="code_sp_after_noexcept":
            self.codesp_after_noexcept.setVisible(filter=='' or 'sp_after_noexcept'.find(filter)!=-1)
        self.namesp_after_noexcept.setVisible(filter=='' or 'sp_after_noexcept'.find(filter)!=-1)
        self.sp_after_noexcept.setVisible(filter=='' or 'sp_after_noexcept'.find(filter)!=-1)
        self.labelsp_vala_after_translation.setVisible(filter=='' or 'sp_vala_after_translation'.find(filter)!=-1)
        if self.tr("code_sp_vala_after_translation")!="code_sp_vala_after_translation":
            self.codesp_vala_after_translation.setVisible(filter=='' or 'sp_vala_after_translation'.find(filter)!=-1)
        self.namesp_vala_after_translation.setVisible(filter=='' or 'sp_vala_after_translation'.find(filter)!=-1)
        self.sp_vala_after_translation.setVisible(filter=='' or 'sp_vala_after_translation'.find(filter)!=-1)
        self.labelforce_tab_after_define.setVisible(filter=='' or 'force_tab_after_define'.find(filter)!=-1)
        if self.tr("code_force_tab_after_define")!="code_force_tab_after_define":
            self.codeforce_tab_after_define.setVisible(filter=='' or 'force_tab_after_define'.find(filter)!=-1)
        self.nameforce_tab_after_define.setVisible(filter=='' or 'force_tab_after_define'.find(filter)!=-1)
        self.force_tab_after_define.setVisible(filter=='' or 'force_tab_after_define'.find(filter)!=-1)
        self.labelindent_columns.setVisible(filter=='' or 'indent_columns'.find(filter)!=-1)
        if self.tr("code_indent_columns")!="code_indent_columns":
            self.codeindent_columns.setVisible(filter=='' or 'indent_columns'.find(filter)!=-1)
        self.nameindent_columns.setVisible(filter=='' or 'indent_columns'.find(filter)!=-1)
        self.indent_columns.setVisible(filter=='' or 'indent_columns'.find(filter)!=-1)
        self.labelindent_continue.setVisible(filter=='' or 'indent_continue'.find(filter)!=-1)
        if self.tr("code_indent_continue")!="code_indent_continue":
            self.codeindent_continue.setVisible(filter=='' or 'indent_continue'.find(filter)!=-1)
        self.nameindent_continue.setVisible(filter=='' or 'indent_continue'.find(filter)!=-1)
        self.indent_continue.setVisible(filter=='' or 'indent_continue'.find(filter)!=-1)
        self.labelindent_continue_class_head.setVisible(filter=='' or 'indent_continue_class_head'.find(filter)!=-1)
        if self.tr("code_indent_continue_class_head")!="code_indent_continue_class_head":
            self.codeindent_continue_class_head.setVisible(filter=='' or 'indent_continue_class_head'.find(filter)!=-1)
        self.nameindent_continue_class_head.setVisible(filter=='' or 'indent_continue_class_head'.find(filter)!=-1)
        self.indent_continue_class_head.setVisible(filter=='' or 'indent_continue_class_head'.find(filter)!=-1)
        self.labelindent_single_newlines.setVisible(filter=='' or 'indent_single_newlines'.find(filter)!=-1)
        if self.tr("code_indent_single_newlines")!="code_indent_single_newlines":
            self.codeindent_single_newlines.setVisible(filter=='' or 'indent_single_newlines'.find(filter)!=-1)
        self.nameindent_single_newlines.setVisible(filter=='' or 'indent_single_newlines'.find(filter)!=-1)
        self.indent_single_newlines.setVisible(filter=='' or 'indent_single_newlines'.find(filter)!=-1)
        self.labelindent_param.setVisible(filter=='' or 'indent_param'.find(filter)!=-1)
        if self.tr("code_indent_param")!="code_indent_param":
            self.codeindent_param.setVisible(filter=='' or 'indent_param'.find(filter)!=-1)
        self.nameindent_param.setVisible(filter=='' or 'indent_param'.find(filter)!=-1)
        self.indent_param.setVisible(filter=='' or 'indent_param'.find(filter)!=-1)
        self.labelindent_with_tabs.setVisible(filter=='' or 'indent_with_tabs'.find(filter)!=-1)
        if self.tr("code_indent_with_tabs")!="code_indent_with_tabs":
            self.codeindent_with_tabs.setVisible(filter=='' or 'indent_with_tabs'.find(filter)!=-1)
        self.nameindent_with_tabs.setVisible(filter=='' or 'indent_with_tabs'.find(filter)!=-1)
        self.indent_with_tabs.setVisible(filter=='' or 'indent_with_tabs'.find(filter)!=-1)
        self.labelindent_cmt_with_tabs.setVisible(filter=='' or 'indent_cmt_with_tabs'.find(filter)!=-1)
        if self.tr("code_indent_cmt_with_tabs")!="code_indent_cmt_with_tabs":
            self.codeindent_cmt_with_tabs.setVisible(filter=='' or 'indent_cmt_with_tabs'.find(filter)!=-1)
        self.nameindent_cmt_with_tabs.setVisible(filter=='' or 'indent_cmt_with_tabs'.find(filter)!=-1)
        self.indent_cmt_with_tabs.setVisible(filter=='' or 'indent_cmt_with_tabs'.find(filter)!=-1)
        self.labelindent_align_string.setVisible(filter=='' or 'indent_align_string'.find(filter)!=-1)
        if self.tr("code_indent_align_string")!="code_indent_align_string":
            self.codeindent_align_string.setVisible(filter=='' or 'indent_align_string'.find(filter)!=-1)
        self.nameindent_align_string.setVisible(filter=='' or 'indent_align_string'.find(filter)!=-1)
        self.indent_align_string.setVisible(filter=='' or 'indent_align_string'.find(filter)!=-1)
        self.labelindent_xml_string.setVisible(filter=='' or 'indent_xml_string'.find(filter)!=-1)
        if self.tr("code_indent_xml_string")!="code_indent_xml_string":
            self.codeindent_xml_string.setVisible(filter=='' or 'indent_xml_string'.find(filter)!=-1)
        self.nameindent_xml_string.setVisible(filter=='' or 'indent_xml_string'.find(filter)!=-1)
        self.indent_xml_string.setVisible(filter=='' or 'indent_xml_string'.find(filter)!=-1)
        self.labelindent_brace.setVisible(filter=='' or 'indent_brace'.find(filter)!=-1)
        if self.tr("code_indent_brace")!="code_indent_brace":
            self.codeindent_brace.setVisible(filter=='' or 'indent_brace'.find(filter)!=-1)
        self.nameindent_brace.setVisible(filter=='' or 'indent_brace'.find(filter)!=-1)
        self.indent_brace.setVisible(filter=='' or 'indent_brace'.find(filter)!=-1)
        self.labelindent_braces.setVisible(filter=='' or 'indent_braces'.find(filter)!=-1)
        if self.tr("code_indent_braces")!="code_indent_braces":
            self.codeindent_braces.setVisible(filter=='' or 'indent_braces'.find(filter)!=-1)
        self.nameindent_braces.setVisible(filter=='' or 'indent_braces'.find(filter)!=-1)
        self.indent_braces.setVisible(filter=='' or 'indent_braces'.find(filter)!=-1)
        self.labelindent_braces_no_func.setVisible(filter=='' or 'indent_braces_no_func'.find(filter)!=-1)
        if self.tr("code_indent_braces_no_func")!="code_indent_braces_no_func":
            self.codeindent_braces_no_func.setVisible(filter=='' or 'indent_braces_no_func'.find(filter)!=-1)
        self.nameindent_braces_no_func.setVisible(filter=='' or 'indent_braces_no_func'.find(filter)!=-1)
        self.indent_braces_no_func.setVisible(filter=='' or 'indent_braces_no_func'.find(filter)!=-1)
        self.labelindent_braces_no_class.setVisible(filter=='' or 'indent_braces_no_class'.find(filter)!=-1)
        if self.tr("code_indent_braces_no_class")!="code_indent_braces_no_class":
            self.codeindent_braces_no_class.setVisible(filter=='' or 'indent_braces_no_class'.find(filter)!=-1)
        self.nameindent_braces_no_class.setVisible(filter=='' or 'indent_braces_no_class'.find(filter)!=-1)
        self.indent_braces_no_class.setVisible(filter=='' or 'indent_braces_no_class'.find(filter)!=-1)
        self.labelindent_braces_no_struct.setVisible(filter=='' or 'indent_braces_no_struct'.find(filter)!=-1)
        if self.tr("code_indent_braces_no_struct")!="code_indent_braces_no_struct":
            self.codeindent_braces_no_struct.setVisible(filter=='' or 'indent_braces_no_struct'.find(filter)!=-1)
        self.nameindent_braces_no_struct.setVisible(filter=='' or 'indent_braces_no_struct'.find(filter)!=-1)
        self.indent_braces_no_struct.setVisible(filter=='' or 'indent_braces_no_struct'.find(filter)!=-1)
        self.labelindent_brace_parent.setVisible(filter=='' or 'indent_brace_parent'.find(filter)!=-1)
        if self.tr("code_indent_brace_parent")!="code_indent_brace_parent":
            self.codeindent_brace_parent.setVisible(filter=='' or 'indent_brace_parent'.find(filter)!=-1)
        self.nameindent_brace_parent.setVisible(filter=='' or 'indent_brace_parent'.find(filter)!=-1)
        self.indent_brace_parent.setVisible(filter=='' or 'indent_brace_parent'.find(filter)!=-1)
        self.labelindent_paren_open_brace.setVisible(filter=='' or 'indent_paren_open_brace'.find(filter)!=-1)
        if self.tr("code_indent_paren_open_brace")!="code_indent_paren_open_brace":
            self.codeindent_paren_open_brace.setVisible(filter=='' or 'indent_paren_open_brace'.find(filter)!=-1)
        self.nameindent_paren_open_brace.setVisible(filter=='' or 'indent_paren_open_brace'.find(filter)!=-1)
        self.indent_paren_open_brace.setVisible(filter=='' or 'indent_paren_open_brace'.find(filter)!=-1)
        self.labelindent_cs_delegate_brace.setVisible(filter=='' or 'indent_cs_delegate_brace'.find(filter)!=-1)
        if self.tr("code_indent_cs_delegate_brace")!="code_indent_cs_delegate_brace":
            self.codeindent_cs_delegate_brace.setVisible(filter=='' or 'indent_cs_delegate_brace'.find(filter)!=-1)
        self.nameindent_cs_delegate_brace.setVisible(filter=='' or 'indent_cs_delegate_brace'.find(filter)!=-1)
        self.indent_cs_delegate_brace.setVisible(filter=='' or 'indent_cs_delegate_brace'.find(filter)!=-1)
        self.labelindent_cs_delegate_body.setVisible(filter=='' or 'indent_cs_delegate_body'.find(filter)!=-1)
        if self.tr("code_indent_cs_delegate_body")!="code_indent_cs_delegate_body":
            self.codeindent_cs_delegate_body.setVisible(filter=='' or 'indent_cs_delegate_body'.find(filter)!=-1)
        self.nameindent_cs_delegate_body.setVisible(filter=='' or 'indent_cs_delegate_body'.find(filter)!=-1)
        self.indent_cs_delegate_body.setVisible(filter=='' or 'indent_cs_delegate_body'.find(filter)!=-1)
        self.labelindent_namespace.setVisible(filter=='' or 'indent_namespace'.find(filter)!=-1)
        if self.tr("code_indent_namespace")!="code_indent_namespace":
            self.codeindent_namespace.setVisible(filter=='' or 'indent_namespace'.find(filter)!=-1)
        self.nameindent_namespace.setVisible(filter=='' or 'indent_namespace'.find(filter)!=-1)
        self.indent_namespace.setVisible(filter=='' or 'indent_namespace'.find(filter)!=-1)
        self.labelindent_namespace_single_indent.setVisible(filter=='' or 'indent_namespace_single_indent'.find(filter)!=-1)
        if self.tr("code_indent_namespace_single_indent")!="code_indent_namespace_single_indent":
            self.codeindent_namespace_single_indent.setVisible(filter=='' or 'indent_namespace_single_indent'.find(filter)!=-1)
        self.nameindent_namespace_single_indent.setVisible(filter=='' or 'indent_namespace_single_indent'.find(filter)!=-1)
        self.indent_namespace_single_indent.setVisible(filter=='' or 'indent_namespace_single_indent'.find(filter)!=-1)
        self.labelindent_namespace_level.setVisible(filter=='' or 'indent_namespace_level'.find(filter)!=-1)
        if self.tr("code_indent_namespace_level")!="code_indent_namespace_level":
            self.codeindent_namespace_level.setVisible(filter=='' or 'indent_namespace_level'.find(filter)!=-1)
        self.nameindent_namespace_level.setVisible(filter=='' or 'indent_namespace_level'.find(filter)!=-1)
        self.indent_namespace_level.setVisible(filter=='' or 'indent_namespace_level'.find(filter)!=-1)
        self.labelindent_namespace_limit.setVisible(filter=='' or 'indent_namespace_limit'.find(filter)!=-1)
        if self.tr("code_indent_namespace_limit")!="code_indent_namespace_limit":
            self.codeindent_namespace_limit.setVisible(filter=='' or 'indent_namespace_limit'.find(filter)!=-1)
        self.nameindent_namespace_limit.setVisible(filter=='' or 'indent_namespace_limit'.find(filter)!=-1)
        self.indent_namespace_limit.setVisible(filter=='' or 'indent_namespace_limit'.find(filter)!=-1)
        self.labelindent_extern.setVisible(filter=='' or 'indent_extern'.find(filter)!=-1)
        if self.tr("code_indent_extern")!="code_indent_extern":
            self.codeindent_extern.setVisible(filter=='' or 'indent_extern'.find(filter)!=-1)
        self.nameindent_extern.setVisible(filter=='' or 'indent_extern'.find(filter)!=-1)
        self.indent_extern.setVisible(filter=='' or 'indent_extern'.find(filter)!=-1)
        self.labelindent_class.setVisible(filter=='' or 'indent_class'.find(filter)!=-1)
        if self.tr("code_indent_class")!="code_indent_class":
            self.codeindent_class.setVisible(filter=='' or 'indent_class'.find(filter)!=-1)
        self.nameindent_class.setVisible(filter=='' or 'indent_class'.find(filter)!=-1)
        self.indent_class.setVisible(filter=='' or 'indent_class'.find(filter)!=-1)
        self.labelindent_class_colon.setVisible(filter=='' or 'indent_class_colon'.find(filter)!=-1)
        if self.tr("code_indent_class_colon")!="code_indent_class_colon":
            self.codeindent_class_colon.setVisible(filter=='' or 'indent_class_colon'.find(filter)!=-1)
        self.nameindent_class_colon.setVisible(filter=='' or 'indent_class_colon'.find(filter)!=-1)
        self.indent_class_colon.setVisible(filter=='' or 'indent_class_colon'.find(filter)!=-1)
        self.labelindent_class_on_colon.setVisible(filter=='' or 'indent_class_on_colon'.find(filter)!=-1)
        if self.tr("code_indent_class_on_colon")!="code_indent_class_on_colon":
            self.codeindent_class_on_colon.setVisible(filter=='' or 'indent_class_on_colon'.find(filter)!=-1)
        self.nameindent_class_on_colon.setVisible(filter=='' or 'indent_class_on_colon'.find(filter)!=-1)
        self.indent_class_on_colon.setVisible(filter=='' or 'indent_class_on_colon'.find(filter)!=-1)
        self.labelindent_constr_colon.setVisible(filter=='' or 'indent_constr_colon'.find(filter)!=-1)
        if self.tr("code_indent_constr_colon")!="code_indent_constr_colon":
            self.codeindent_constr_colon.setVisible(filter=='' or 'indent_constr_colon'.find(filter)!=-1)
        self.nameindent_constr_colon.setVisible(filter=='' or 'indent_constr_colon'.find(filter)!=-1)
        self.indent_constr_colon.setVisible(filter=='' or 'indent_constr_colon'.find(filter)!=-1)
        self.labelindent_ctor_init_leading.setVisible(filter=='' or 'indent_ctor_init_leading'.find(filter)!=-1)
        if self.tr("code_indent_ctor_init_leading")!="code_indent_ctor_init_leading":
            self.codeindent_ctor_init_leading.setVisible(filter=='' or 'indent_ctor_init_leading'.find(filter)!=-1)
        self.nameindent_ctor_init_leading.setVisible(filter=='' or 'indent_ctor_init_leading'.find(filter)!=-1)
        self.indent_ctor_init_leading.setVisible(filter=='' or 'indent_ctor_init_leading'.find(filter)!=-1)
        self.labelindent_ctor_init.setVisible(filter=='' or 'indent_ctor_init'.find(filter)!=-1)
        if self.tr("code_indent_ctor_init")!="code_indent_ctor_init":
            self.codeindent_ctor_init.setVisible(filter=='' or 'indent_ctor_init'.find(filter)!=-1)
        self.nameindent_ctor_init.setVisible(filter=='' or 'indent_ctor_init'.find(filter)!=-1)
        self.indent_ctor_init.setVisible(filter=='' or 'indent_ctor_init'.find(filter)!=-1)
        self.labelindent_else_if.setVisible(filter=='' or 'indent_else_if'.find(filter)!=-1)
        if self.tr("code_indent_else_if")!="code_indent_else_if":
            self.codeindent_else_if.setVisible(filter=='' or 'indent_else_if'.find(filter)!=-1)
        self.nameindent_else_if.setVisible(filter=='' or 'indent_else_if'.find(filter)!=-1)
        self.indent_else_if.setVisible(filter=='' or 'indent_else_if'.find(filter)!=-1)
        self.labelindent_var_def_blk.setVisible(filter=='' or 'indent_var_def_blk'.find(filter)!=-1)
        if self.tr("code_indent_var_def_blk")!="code_indent_var_def_blk":
            self.codeindent_var_def_blk.setVisible(filter=='' or 'indent_var_def_blk'.find(filter)!=-1)
        self.nameindent_var_def_blk.setVisible(filter=='' or 'indent_var_def_blk'.find(filter)!=-1)
        self.indent_var_def_blk.setVisible(filter=='' or 'indent_var_def_blk'.find(filter)!=-1)
        self.labelindent_var_def_cont.setVisible(filter=='' or 'indent_var_def_cont'.find(filter)!=-1)
        if self.tr("code_indent_var_def_cont")!="code_indent_var_def_cont":
            self.codeindent_var_def_cont.setVisible(filter=='' or 'indent_var_def_cont'.find(filter)!=-1)
        self.nameindent_var_def_cont.setVisible(filter=='' or 'indent_var_def_cont'.find(filter)!=-1)
        self.indent_var_def_cont.setVisible(filter=='' or 'indent_var_def_cont'.find(filter)!=-1)
        self.labelindent_shift.setVisible(filter=='' or 'indent_shift'.find(filter)!=-1)
        if self.tr("code_indent_shift")!="code_indent_shift":
            self.codeindent_shift.setVisible(filter=='' or 'indent_shift'.find(filter)!=-1)
        self.nameindent_shift.setVisible(filter=='' or 'indent_shift'.find(filter)!=-1)
        self.indent_shift.setVisible(filter=='' or 'indent_shift'.find(filter)!=-1)
        self.labelindent_func_def_force_col1.setVisible(filter=='' or 'indent_func_def_force_col1'.find(filter)!=-1)
        if self.tr("code_indent_func_def_force_col1")!="code_indent_func_def_force_col1":
            self.codeindent_func_def_force_col1.setVisible(filter=='' or 'indent_func_def_force_col1'.find(filter)!=-1)
        self.nameindent_func_def_force_col1.setVisible(filter=='' or 'indent_func_def_force_col1'.find(filter)!=-1)
        self.indent_func_def_force_col1.setVisible(filter=='' or 'indent_func_def_force_col1'.find(filter)!=-1)
        self.labelindent_func_call_param.setVisible(filter=='' or 'indent_func_call_param'.find(filter)!=-1)
        if self.tr("code_indent_func_call_param")!="code_indent_func_call_param":
            self.codeindent_func_call_param.setVisible(filter=='' or 'indent_func_call_param'.find(filter)!=-1)
        self.nameindent_func_call_param.setVisible(filter=='' or 'indent_func_call_param'.find(filter)!=-1)
        self.indent_func_call_param.setVisible(filter=='' or 'indent_func_call_param'.find(filter)!=-1)
        self.labelindent_func_def_param.setVisible(filter=='' or 'indent_func_def_param'.find(filter)!=-1)
        if self.tr("code_indent_func_def_param")!="code_indent_func_def_param":
            self.codeindent_func_def_param.setVisible(filter=='' or 'indent_func_def_param'.find(filter)!=-1)
        self.nameindent_func_def_param.setVisible(filter=='' or 'indent_func_def_param'.find(filter)!=-1)
        self.indent_func_def_param.setVisible(filter=='' or 'indent_func_def_param'.find(filter)!=-1)
        self.labelindent_func_def_param_paren_pos_threshold.setVisible(filter=='' or 'indent_func_def_param_paren_pos_threshold'.find(filter)!=-1)
        if self.tr("code_indent_func_def_param_paren_pos_threshold")!="code_indent_func_def_param_paren_pos_threshold":
            self.codeindent_func_def_param_paren_pos_threshold.setVisible(filter=='' or 'indent_func_def_param_paren_pos_threshold'.find(filter)!=-1)
        self.nameindent_func_def_param_paren_pos_threshold.setVisible(filter=='' or 'indent_func_def_param_paren_pos_threshold'.find(filter)!=-1)
        self.indent_func_def_param_paren_pos_threshold.setVisible(filter=='' or 'indent_func_def_param_paren_pos_threshold'.find(filter)!=-1)
        self.labelindent_func_proto_param.setVisible(filter=='' or 'indent_func_proto_param'.find(filter)!=-1)
        if self.tr("code_indent_func_proto_param")!="code_indent_func_proto_param":
            self.codeindent_func_proto_param.setVisible(filter=='' or 'indent_func_proto_param'.find(filter)!=-1)
        self.nameindent_func_proto_param.setVisible(filter=='' or 'indent_func_proto_param'.find(filter)!=-1)
        self.indent_func_proto_param.setVisible(filter=='' or 'indent_func_proto_param'.find(filter)!=-1)
        self.labelindent_func_class_param.setVisible(filter=='' or 'indent_func_class_param'.find(filter)!=-1)
        if self.tr("code_indent_func_class_param")!="code_indent_func_class_param":
            self.codeindent_func_class_param.setVisible(filter=='' or 'indent_func_class_param'.find(filter)!=-1)
        self.nameindent_func_class_param.setVisible(filter=='' or 'indent_func_class_param'.find(filter)!=-1)
        self.indent_func_class_param.setVisible(filter=='' or 'indent_func_class_param'.find(filter)!=-1)
        self.labelindent_func_ctor_var_param.setVisible(filter=='' or 'indent_func_ctor_var_param'.find(filter)!=-1)
        if self.tr("code_indent_func_ctor_var_param")!="code_indent_func_ctor_var_param":
            self.codeindent_func_ctor_var_param.setVisible(filter=='' or 'indent_func_ctor_var_param'.find(filter)!=-1)
        self.nameindent_func_ctor_var_param.setVisible(filter=='' or 'indent_func_ctor_var_param'.find(filter)!=-1)
        self.indent_func_ctor_var_param.setVisible(filter=='' or 'indent_func_ctor_var_param'.find(filter)!=-1)
        self.labelindent_template_param.setVisible(filter=='' or 'indent_template_param'.find(filter)!=-1)
        if self.tr("code_indent_template_param")!="code_indent_template_param":
            self.codeindent_template_param.setVisible(filter=='' or 'indent_template_param'.find(filter)!=-1)
        self.nameindent_template_param.setVisible(filter=='' or 'indent_template_param'.find(filter)!=-1)
        self.indent_template_param.setVisible(filter=='' or 'indent_template_param'.find(filter)!=-1)
        self.labelindent_func_param_double.setVisible(filter=='' or 'indent_func_param_double'.find(filter)!=-1)
        if self.tr("code_indent_func_param_double")!="code_indent_func_param_double":
            self.codeindent_func_param_double.setVisible(filter=='' or 'indent_func_param_double'.find(filter)!=-1)
        self.nameindent_func_param_double.setVisible(filter=='' or 'indent_func_param_double'.find(filter)!=-1)
        self.indent_func_param_double.setVisible(filter=='' or 'indent_func_param_double'.find(filter)!=-1)
        self.labelindent_func_const.setVisible(filter=='' or 'indent_func_const'.find(filter)!=-1)
        if self.tr("code_indent_func_const")!="code_indent_func_const":
            self.codeindent_func_const.setVisible(filter=='' or 'indent_func_const'.find(filter)!=-1)
        self.nameindent_func_const.setVisible(filter=='' or 'indent_func_const'.find(filter)!=-1)
        self.indent_func_const.setVisible(filter=='' or 'indent_func_const'.find(filter)!=-1)
        self.labelindent_func_throw.setVisible(filter=='' or 'indent_func_throw'.find(filter)!=-1)
        if self.tr("code_indent_func_throw")!="code_indent_func_throw":
            self.codeindent_func_throw.setVisible(filter=='' or 'indent_func_throw'.find(filter)!=-1)
        self.nameindent_func_throw.setVisible(filter=='' or 'indent_func_throw'.find(filter)!=-1)
        self.indent_func_throw.setVisible(filter=='' or 'indent_func_throw'.find(filter)!=-1)
        self.labelindent_macro_brace.setVisible(filter=='' or 'indent_macro_brace'.find(filter)!=-1)
        if self.tr("code_indent_macro_brace")!="code_indent_macro_brace":
            self.codeindent_macro_brace.setVisible(filter=='' or 'indent_macro_brace'.find(filter)!=-1)
        self.nameindent_macro_brace.setVisible(filter=='' or 'indent_macro_brace'.find(filter)!=-1)
        self.indent_macro_brace.setVisible(filter=='' or 'indent_macro_brace'.find(filter)!=-1)
        self.labelindent_member.setVisible(filter=='' or 'indent_member'.find(filter)!=-1)
        if self.tr("code_indent_member")!="code_indent_member":
            self.codeindent_member.setVisible(filter=='' or 'indent_member'.find(filter)!=-1)
        self.nameindent_member.setVisible(filter=='' or 'indent_member'.find(filter)!=-1)
        self.indent_member.setVisible(filter=='' or 'indent_member'.find(filter)!=-1)
        self.labelindent_member_single.setVisible(filter=='' or 'indent_member_single'.find(filter)!=-1)
        if self.tr("code_indent_member_single")!="code_indent_member_single":
            self.codeindent_member_single.setVisible(filter=='' or 'indent_member_single'.find(filter)!=-1)
        self.nameindent_member_single.setVisible(filter=='' or 'indent_member_single'.find(filter)!=-1)
        self.indent_member_single.setVisible(filter=='' or 'indent_member_single'.find(filter)!=-1)
        self.labelindent_sing_line_comments.setVisible(filter=='' or 'indent_sing_line_comments'.find(filter)!=-1)
        if self.tr("code_indent_sing_line_comments")!="code_indent_sing_line_comments":
            self.codeindent_sing_line_comments.setVisible(filter=='' or 'indent_sing_line_comments'.find(filter)!=-1)
        self.nameindent_sing_line_comments.setVisible(filter=='' or 'indent_sing_line_comments'.find(filter)!=-1)
        self.indent_sing_line_comments.setVisible(filter=='' or 'indent_sing_line_comments'.find(filter)!=-1)
        self.labelindent_sparen_extra.setVisible(filter=='' or 'indent_sparen_extra'.find(filter)!=-1)
        if self.tr("code_indent_sparen_extra")!="code_indent_sparen_extra":
            self.codeindent_sparen_extra.setVisible(filter=='' or 'indent_sparen_extra'.find(filter)!=-1)
        self.nameindent_sparen_extra.setVisible(filter=='' or 'indent_sparen_extra'.find(filter)!=-1)
        self.indent_sparen_extra.setVisible(filter=='' or 'indent_sparen_extra'.find(filter)!=-1)
        self.labelindent_relative_single_line_comments.setVisible(filter=='' or 'indent_relative_single_line_comments'.find(filter)!=-1)
        if self.tr("code_indent_relative_single_line_comments")!="code_indent_relative_single_line_comments":
            self.codeindent_relative_single_line_comments.setVisible(filter=='' or 'indent_relative_single_line_comments'.find(filter)!=-1)
        self.nameindent_relative_single_line_comments.setVisible(filter=='' or 'indent_relative_single_line_comments'.find(filter)!=-1)
        self.indent_relative_single_line_comments.setVisible(filter=='' or 'indent_relative_single_line_comments'.find(filter)!=-1)
        self.labelindent_switch_case.setVisible(filter=='' or 'indent_switch_case'.find(filter)!=-1)
        if self.tr("code_indent_switch_case")!="code_indent_switch_case":
            self.codeindent_switch_case.setVisible(filter=='' or 'indent_switch_case'.find(filter)!=-1)
        self.nameindent_switch_case.setVisible(filter=='' or 'indent_switch_case'.find(filter)!=-1)
        self.indent_switch_case.setVisible(filter=='' or 'indent_switch_case'.find(filter)!=-1)
        self.labelindent_switch_break_with_case.setVisible(filter=='' or 'indent_switch_break_with_case'.find(filter)!=-1)
        if self.tr("code_indent_switch_break_with_case")!="code_indent_switch_break_with_case":
            self.codeindent_switch_break_with_case.setVisible(filter=='' or 'indent_switch_break_with_case'.find(filter)!=-1)
        self.nameindent_switch_break_with_case.setVisible(filter=='' or 'indent_switch_break_with_case'.find(filter)!=-1)
        self.indent_switch_break_with_case.setVisible(filter=='' or 'indent_switch_break_with_case'.find(filter)!=-1)
        self.labelindent_switch_pp.setVisible(filter=='' or 'indent_switch_pp'.find(filter)!=-1)
        if self.tr("code_indent_switch_pp")!="code_indent_switch_pp":
            self.codeindent_switch_pp.setVisible(filter=='' or 'indent_switch_pp'.find(filter)!=-1)
        self.nameindent_switch_pp.setVisible(filter=='' or 'indent_switch_pp'.find(filter)!=-1)
        self.indent_switch_pp.setVisible(filter=='' or 'indent_switch_pp'.find(filter)!=-1)
        self.labelindent_case_shift.setVisible(filter=='' or 'indent_case_shift'.find(filter)!=-1)
        if self.tr("code_indent_case_shift")!="code_indent_case_shift":
            self.codeindent_case_shift.setVisible(filter=='' or 'indent_case_shift'.find(filter)!=-1)
        self.nameindent_case_shift.setVisible(filter=='' or 'indent_case_shift'.find(filter)!=-1)
        self.indent_case_shift.setVisible(filter=='' or 'indent_case_shift'.find(filter)!=-1)
        self.labelindent_case_brace.setVisible(filter=='' or 'indent_case_brace'.find(filter)!=-1)
        if self.tr("code_indent_case_brace")!="code_indent_case_brace":
            self.codeindent_case_brace.setVisible(filter=='' or 'indent_case_brace'.find(filter)!=-1)
        self.nameindent_case_brace.setVisible(filter=='' or 'indent_case_brace'.find(filter)!=-1)
        self.indent_case_brace.setVisible(filter=='' or 'indent_case_brace'.find(filter)!=-1)
        self.labelindent_col1_comment.setVisible(filter=='' or 'indent_col1_comment'.find(filter)!=-1)
        if self.tr("code_indent_col1_comment")!="code_indent_col1_comment":
            self.codeindent_col1_comment.setVisible(filter=='' or 'indent_col1_comment'.find(filter)!=-1)
        self.nameindent_col1_comment.setVisible(filter=='' or 'indent_col1_comment'.find(filter)!=-1)
        self.indent_col1_comment.setVisible(filter=='' or 'indent_col1_comment'.find(filter)!=-1)
        self.labelindent_col1_multi_string_literal.setVisible(filter=='' or 'indent_col1_multi_string_literal'.find(filter)!=-1)
        if self.tr("code_indent_col1_multi_string_literal")!="code_indent_col1_multi_string_literal":
            self.codeindent_col1_multi_string_literal.setVisible(filter=='' or 'indent_col1_multi_string_literal'.find(filter)!=-1)
        self.nameindent_col1_multi_string_literal.setVisible(filter=='' or 'indent_col1_multi_string_literal'.find(filter)!=-1)
        self.indent_col1_multi_string_literal.setVisible(filter=='' or 'indent_col1_multi_string_literal'.find(filter)!=-1)
        self.labelindent_label.setVisible(filter=='' or 'indent_label'.find(filter)!=-1)
        if self.tr("code_indent_label")!="code_indent_label":
            self.codeindent_label.setVisible(filter=='' or 'indent_label'.find(filter)!=-1)
        self.nameindent_label.setVisible(filter=='' or 'indent_label'.find(filter)!=-1)
        self.indent_label.setVisible(filter=='' or 'indent_label'.find(filter)!=-1)
        self.labelindent_access_spec.setVisible(filter=='' or 'indent_access_spec'.find(filter)!=-1)
        if self.tr("code_indent_access_spec")!="code_indent_access_spec":
            self.codeindent_access_spec.setVisible(filter=='' or 'indent_access_spec'.find(filter)!=-1)
        self.nameindent_access_spec.setVisible(filter=='' or 'indent_access_spec'.find(filter)!=-1)
        self.indent_access_spec.setVisible(filter=='' or 'indent_access_spec'.find(filter)!=-1)
        self.labelindent_access_spec_body.setVisible(filter=='' or 'indent_access_spec_body'.find(filter)!=-1)
        if self.tr("code_indent_access_spec_body")!="code_indent_access_spec_body":
            self.codeindent_access_spec_body.setVisible(filter=='' or 'indent_access_spec_body'.find(filter)!=-1)
        self.nameindent_access_spec_body.setVisible(filter=='' or 'indent_access_spec_body'.find(filter)!=-1)
        self.indent_access_spec_body.setVisible(filter=='' or 'indent_access_spec_body'.find(filter)!=-1)
        self.labelindent_paren_nl.setVisible(filter=='' or 'indent_paren_nl'.find(filter)!=-1)
        if self.tr("code_indent_paren_nl")!="code_indent_paren_nl":
            self.codeindent_paren_nl.setVisible(filter=='' or 'indent_paren_nl'.find(filter)!=-1)
        self.nameindent_paren_nl.setVisible(filter=='' or 'indent_paren_nl'.find(filter)!=-1)
        self.indent_paren_nl.setVisible(filter=='' or 'indent_paren_nl'.find(filter)!=-1)
        self.labelindent_paren_close.setVisible(filter=='' or 'indent_paren_close'.find(filter)!=-1)
        if self.tr("code_indent_paren_close")!="code_indent_paren_close":
            self.codeindent_paren_close.setVisible(filter=='' or 'indent_paren_close'.find(filter)!=-1)
        self.nameindent_paren_close.setVisible(filter=='' or 'indent_paren_close'.find(filter)!=-1)
        self.indent_paren_close.setVisible(filter=='' or 'indent_paren_close'.find(filter)!=-1)
        self.labelindent_paren_after_func_def.setVisible(filter=='' or 'indent_paren_after_func_def'.find(filter)!=-1)
        if self.tr("code_indent_paren_after_func_def")!="code_indent_paren_after_func_def":
            self.codeindent_paren_after_func_def.setVisible(filter=='' or 'indent_paren_after_func_def'.find(filter)!=-1)
        self.nameindent_paren_after_func_def.setVisible(filter=='' or 'indent_paren_after_func_def'.find(filter)!=-1)
        self.indent_paren_after_func_def.setVisible(filter=='' or 'indent_paren_after_func_def'.find(filter)!=-1)
        self.labelindent_paren_after_func_decl.setVisible(filter=='' or 'indent_paren_after_func_decl'.find(filter)!=-1)
        if self.tr("code_indent_paren_after_func_decl")!="code_indent_paren_after_func_decl":
            self.codeindent_paren_after_func_decl.setVisible(filter=='' or 'indent_paren_after_func_decl'.find(filter)!=-1)
        self.nameindent_paren_after_func_decl.setVisible(filter=='' or 'indent_paren_after_func_decl'.find(filter)!=-1)
        self.indent_paren_after_func_decl.setVisible(filter=='' or 'indent_paren_after_func_decl'.find(filter)!=-1)
        self.labelindent_paren_after_func_call.setVisible(filter=='' or 'indent_paren_after_func_call'.find(filter)!=-1)
        if self.tr("code_indent_paren_after_func_call")!="code_indent_paren_after_func_call":
            self.codeindent_paren_after_func_call.setVisible(filter=='' or 'indent_paren_after_func_call'.find(filter)!=-1)
        self.nameindent_paren_after_func_call.setVisible(filter=='' or 'indent_paren_after_func_call'.find(filter)!=-1)
        self.indent_paren_after_func_call.setVisible(filter=='' or 'indent_paren_after_func_call'.find(filter)!=-1)
        self.labelindent_comma_paren.setVisible(filter=='' or 'indent_comma_paren'.find(filter)!=-1)
        if self.tr("code_indent_comma_paren")!="code_indent_comma_paren":
            self.codeindent_comma_paren.setVisible(filter=='' or 'indent_comma_paren'.find(filter)!=-1)
        self.nameindent_comma_paren.setVisible(filter=='' or 'indent_comma_paren'.find(filter)!=-1)
        self.indent_comma_paren.setVisible(filter=='' or 'indent_comma_paren'.find(filter)!=-1)
        self.labelindent_bool_paren.setVisible(filter=='' or 'indent_bool_paren'.find(filter)!=-1)
        if self.tr("code_indent_bool_paren")!="code_indent_bool_paren":
            self.codeindent_bool_paren.setVisible(filter=='' or 'indent_bool_paren'.find(filter)!=-1)
        self.nameindent_bool_paren.setVisible(filter=='' or 'indent_bool_paren'.find(filter)!=-1)
        self.indent_bool_paren.setVisible(filter=='' or 'indent_bool_paren'.find(filter)!=-1)
        self.labelindent_semicolon_for_paren.setVisible(filter=='' or 'indent_semicolon_for_paren'.find(filter)!=-1)
        if self.tr("code_indent_semicolon_for_paren")!="code_indent_semicolon_for_paren":
            self.codeindent_semicolon_for_paren.setVisible(filter=='' or 'indent_semicolon_for_paren'.find(filter)!=-1)
        self.nameindent_semicolon_for_paren.setVisible(filter=='' or 'indent_semicolon_for_paren'.find(filter)!=-1)
        self.indent_semicolon_for_paren.setVisible(filter=='' or 'indent_semicolon_for_paren'.find(filter)!=-1)
        self.labelindent_first_bool_expr.setVisible(filter=='' or 'indent_first_bool_expr'.find(filter)!=-1)
        if self.tr("code_indent_first_bool_expr")!="code_indent_first_bool_expr":
            self.codeindent_first_bool_expr.setVisible(filter=='' or 'indent_first_bool_expr'.find(filter)!=-1)
        self.nameindent_first_bool_expr.setVisible(filter=='' or 'indent_first_bool_expr'.find(filter)!=-1)
        self.indent_first_bool_expr.setVisible(filter=='' or 'indent_first_bool_expr'.find(filter)!=-1)
        self.labelindent_first_for_expr.setVisible(filter=='' or 'indent_first_for_expr'.find(filter)!=-1)
        if self.tr("code_indent_first_for_expr")!="code_indent_first_for_expr":
            self.codeindent_first_for_expr.setVisible(filter=='' or 'indent_first_for_expr'.find(filter)!=-1)
        self.nameindent_first_for_expr.setVisible(filter=='' or 'indent_first_for_expr'.find(filter)!=-1)
        self.indent_first_for_expr.setVisible(filter=='' or 'indent_first_for_expr'.find(filter)!=-1)
        self.labelindent_square_nl.setVisible(filter=='' or 'indent_square_nl'.find(filter)!=-1)
        if self.tr("code_indent_square_nl")!="code_indent_square_nl":
            self.codeindent_square_nl.setVisible(filter=='' or 'indent_square_nl'.find(filter)!=-1)
        self.nameindent_square_nl.setVisible(filter=='' or 'indent_square_nl'.find(filter)!=-1)
        self.indent_square_nl.setVisible(filter=='' or 'indent_square_nl'.find(filter)!=-1)
        self.labelindent_preserve_sql.setVisible(filter=='' or 'indent_preserve_sql'.find(filter)!=-1)
        if self.tr("code_indent_preserve_sql")!="code_indent_preserve_sql":
            self.codeindent_preserve_sql.setVisible(filter=='' or 'indent_preserve_sql'.find(filter)!=-1)
        self.nameindent_preserve_sql.setVisible(filter=='' or 'indent_preserve_sql'.find(filter)!=-1)
        self.indent_preserve_sql.setVisible(filter=='' or 'indent_preserve_sql'.find(filter)!=-1)
        self.labelindent_align_assign.setVisible(filter=='' or 'indent_align_assign'.find(filter)!=-1)
        if self.tr("code_indent_align_assign")!="code_indent_align_assign":
            self.codeindent_align_assign.setVisible(filter=='' or 'indent_align_assign'.find(filter)!=-1)
        self.nameindent_align_assign.setVisible(filter=='' or 'indent_align_assign'.find(filter)!=-1)
        self.indent_align_assign.setVisible(filter=='' or 'indent_align_assign'.find(filter)!=-1)
        self.labelindent_off_after_assign.setVisible(filter=='' or 'indent_off_after_assign'.find(filter)!=-1)
        if self.tr("code_indent_off_after_assign")!="code_indent_off_after_assign":
            self.codeindent_off_after_assign.setVisible(filter=='' or 'indent_off_after_assign'.find(filter)!=-1)
        self.nameindent_off_after_assign.setVisible(filter=='' or 'indent_off_after_assign'.find(filter)!=-1)
        self.indent_off_after_assign.setVisible(filter=='' or 'indent_off_after_assign'.find(filter)!=-1)
        self.labelindent_align_paren.setVisible(filter=='' or 'indent_align_paren'.find(filter)!=-1)
        if self.tr("code_indent_align_paren")!="code_indent_align_paren":
            self.codeindent_align_paren.setVisible(filter=='' or 'indent_align_paren'.find(filter)!=-1)
        self.nameindent_align_paren.setVisible(filter=='' or 'indent_align_paren'.find(filter)!=-1)
        self.indent_align_paren.setVisible(filter=='' or 'indent_align_paren'.find(filter)!=-1)
        self.labelindent_oc_inside_msg_sel.setVisible(filter=='' or 'indent_oc_inside_msg_sel'.find(filter)!=-1)
        if self.tr("code_indent_oc_inside_msg_sel")!="code_indent_oc_inside_msg_sel":
            self.codeindent_oc_inside_msg_sel.setVisible(filter=='' or 'indent_oc_inside_msg_sel'.find(filter)!=-1)
        self.nameindent_oc_inside_msg_sel.setVisible(filter=='' or 'indent_oc_inside_msg_sel'.find(filter)!=-1)
        self.indent_oc_inside_msg_sel.setVisible(filter=='' or 'indent_oc_inside_msg_sel'.find(filter)!=-1)
        self.labelindent_oc_block.setVisible(filter=='' or 'indent_oc_block'.find(filter)!=-1)
        if self.tr("code_indent_oc_block")!="code_indent_oc_block":
            self.codeindent_oc_block.setVisible(filter=='' or 'indent_oc_block'.find(filter)!=-1)
        self.nameindent_oc_block.setVisible(filter=='' or 'indent_oc_block'.find(filter)!=-1)
        self.indent_oc_block.setVisible(filter=='' or 'indent_oc_block'.find(filter)!=-1)
        self.labelindent_oc_block_msg.setVisible(filter=='' or 'indent_oc_block_msg'.find(filter)!=-1)
        if self.tr("code_indent_oc_block_msg")!="code_indent_oc_block_msg":
            self.codeindent_oc_block_msg.setVisible(filter=='' or 'indent_oc_block_msg'.find(filter)!=-1)
        self.nameindent_oc_block_msg.setVisible(filter=='' or 'indent_oc_block_msg'.find(filter)!=-1)
        self.indent_oc_block_msg.setVisible(filter=='' or 'indent_oc_block_msg'.find(filter)!=-1)
        self.labelindent_oc_msg_colon.setVisible(filter=='' or 'indent_oc_msg_colon'.find(filter)!=-1)
        if self.tr("code_indent_oc_msg_colon")!="code_indent_oc_msg_colon":
            self.codeindent_oc_msg_colon.setVisible(filter=='' or 'indent_oc_msg_colon'.find(filter)!=-1)
        self.nameindent_oc_msg_colon.setVisible(filter=='' or 'indent_oc_msg_colon'.find(filter)!=-1)
        self.indent_oc_msg_colon.setVisible(filter=='' or 'indent_oc_msg_colon'.find(filter)!=-1)
        self.labelindent_oc_msg_prioritize_first_colon.setVisible(filter=='' or 'indent_oc_msg_prioritize_first_colon'.find(filter)!=-1)
        if self.tr("code_indent_oc_msg_prioritize_first_colon")!="code_indent_oc_msg_prioritize_first_colon":
            self.codeindent_oc_msg_prioritize_first_colon.setVisible(filter=='' or 'indent_oc_msg_prioritize_first_colon'.find(filter)!=-1)
        self.nameindent_oc_msg_prioritize_first_colon.setVisible(filter=='' or 'indent_oc_msg_prioritize_first_colon'.find(filter)!=-1)
        self.indent_oc_msg_prioritize_first_colon.setVisible(filter=='' or 'indent_oc_msg_prioritize_first_colon'.find(filter)!=-1)
        self.labelindent_oc_block_msg_xcode_style.setVisible(filter=='' or 'indent_oc_block_msg_xcode_style'.find(filter)!=-1)
        if self.tr("code_indent_oc_block_msg_xcode_style")!="code_indent_oc_block_msg_xcode_style":
            self.codeindent_oc_block_msg_xcode_style.setVisible(filter=='' or 'indent_oc_block_msg_xcode_style'.find(filter)!=-1)
        self.nameindent_oc_block_msg_xcode_style.setVisible(filter=='' or 'indent_oc_block_msg_xcode_style'.find(filter)!=-1)
        self.indent_oc_block_msg_xcode_style.setVisible(filter=='' or 'indent_oc_block_msg_xcode_style'.find(filter)!=-1)
        self.labelindent_oc_block_msg_from_keyword.setVisible(filter=='' or 'indent_oc_block_msg_from_keyword'.find(filter)!=-1)
        if self.tr("code_indent_oc_block_msg_from_keyword")!="code_indent_oc_block_msg_from_keyword":
            self.codeindent_oc_block_msg_from_keyword.setVisible(filter=='' or 'indent_oc_block_msg_from_keyword'.find(filter)!=-1)
        self.nameindent_oc_block_msg_from_keyword.setVisible(filter=='' or 'indent_oc_block_msg_from_keyword'.find(filter)!=-1)
        self.indent_oc_block_msg_from_keyword.setVisible(filter=='' or 'indent_oc_block_msg_from_keyword'.find(filter)!=-1)
        self.labelindent_oc_block_msg_from_colon.setVisible(filter=='' or 'indent_oc_block_msg_from_colon'.find(filter)!=-1)
        if self.tr("code_indent_oc_block_msg_from_colon")!="code_indent_oc_block_msg_from_colon":
            self.codeindent_oc_block_msg_from_colon.setVisible(filter=='' or 'indent_oc_block_msg_from_colon'.find(filter)!=-1)
        self.nameindent_oc_block_msg_from_colon.setVisible(filter=='' or 'indent_oc_block_msg_from_colon'.find(filter)!=-1)
        self.indent_oc_block_msg_from_colon.setVisible(filter=='' or 'indent_oc_block_msg_from_colon'.find(filter)!=-1)
        self.labelindent_oc_block_msg_from_caret.setVisible(filter=='' or 'indent_oc_block_msg_from_caret'.find(filter)!=-1)
        if self.tr("code_indent_oc_block_msg_from_caret")!="code_indent_oc_block_msg_from_caret":
            self.codeindent_oc_block_msg_from_caret.setVisible(filter=='' or 'indent_oc_block_msg_from_caret'.find(filter)!=-1)
        self.nameindent_oc_block_msg_from_caret.setVisible(filter=='' or 'indent_oc_block_msg_from_caret'.find(filter)!=-1)
        self.indent_oc_block_msg_from_caret.setVisible(filter=='' or 'indent_oc_block_msg_from_caret'.find(filter)!=-1)
        self.labelindent_oc_block_msg_from_brace.setVisible(filter=='' or 'indent_oc_block_msg_from_brace'.find(filter)!=-1)
        if self.tr("code_indent_oc_block_msg_from_brace")!="code_indent_oc_block_msg_from_brace":
            self.codeindent_oc_block_msg_from_brace.setVisible(filter=='' or 'indent_oc_block_msg_from_brace'.find(filter)!=-1)
        self.nameindent_oc_block_msg_from_brace.setVisible(filter=='' or 'indent_oc_block_msg_from_brace'.find(filter)!=-1)
        self.indent_oc_block_msg_from_brace.setVisible(filter=='' or 'indent_oc_block_msg_from_brace'.find(filter)!=-1)
        self.labelindent_min_vbrace_open.setVisible(filter=='' or 'indent_min_vbrace_open'.find(filter)!=-1)
        if self.tr("code_indent_min_vbrace_open")!="code_indent_min_vbrace_open":
            self.codeindent_min_vbrace_open.setVisible(filter=='' or 'indent_min_vbrace_open'.find(filter)!=-1)
        self.nameindent_min_vbrace_open.setVisible(filter=='' or 'indent_min_vbrace_open'.find(filter)!=-1)
        self.indent_min_vbrace_open.setVisible(filter=='' or 'indent_min_vbrace_open'.find(filter)!=-1)
        self.labelindent_vbrace_open_on_tabstop.setVisible(filter=='' or 'indent_vbrace_open_on_tabstop'.find(filter)!=-1)
        if self.tr("code_indent_vbrace_open_on_tabstop")!="code_indent_vbrace_open_on_tabstop":
            self.codeindent_vbrace_open_on_tabstop.setVisible(filter=='' or 'indent_vbrace_open_on_tabstop'.find(filter)!=-1)
        self.nameindent_vbrace_open_on_tabstop.setVisible(filter=='' or 'indent_vbrace_open_on_tabstop'.find(filter)!=-1)
        self.indent_vbrace_open_on_tabstop.setVisible(filter=='' or 'indent_vbrace_open_on_tabstop'.find(filter)!=-1)
        self.labelindent_token_after_brace.setVisible(filter=='' or 'indent_token_after_brace'.find(filter)!=-1)
        if self.tr("code_indent_token_after_brace")!="code_indent_token_after_brace":
            self.codeindent_token_after_brace.setVisible(filter=='' or 'indent_token_after_brace'.find(filter)!=-1)
        self.nameindent_token_after_brace.setVisible(filter=='' or 'indent_token_after_brace'.find(filter)!=-1)
        self.indent_token_after_brace.setVisible(filter=='' or 'indent_token_after_brace'.find(filter)!=-1)
        self.labelindent_cpp_lambda_body.setVisible(filter=='' or 'indent_cpp_lambda_body'.find(filter)!=-1)
        if self.tr("code_indent_cpp_lambda_body")!="code_indent_cpp_lambda_body":
            self.codeindent_cpp_lambda_body.setVisible(filter=='' or 'indent_cpp_lambda_body'.find(filter)!=-1)
        self.nameindent_cpp_lambda_body.setVisible(filter=='' or 'indent_cpp_lambda_body'.find(filter)!=-1)
        self.indent_cpp_lambda_body.setVisible(filter=='' or 'indent_cpp_lambda_body'.find(filter)!=-1)
        self.labelindent_compound_literal_return.setVisible(filter=='' or 'indent_compound_literal_return'.find(filter)!=-1)
        if self.tr("code_indent_compound_literal_return")!="code_indent_compound_literal_return":
            self.codeindent_compound_literal_return.setVisible(filter=='' or 'indent_compound_literal_return'.find(filter)!=-1)
        self.nameindent_compound_literal_return.setVisible(filter=='' or 'indent_compound_literal_return'.find(filter)!=-1)
        self.indent_compound_literal_return.setVisible(filter=='' or 'indent_compound_literal_return'.find(filter)!=-1)
        self.labelindent_using_block.setVisible(filter=='' or 'indent_using_block'.find(filter)!=-1)
        if self.tr("code_indent_using_block")!="code_indent_using_block":
            self.codeindent_using_block.setVisible(filter=='' or 'indent_using_block'.find(filter)!=-1)
        self.nameindent_using_block.setVisible(filter=='' or 'indent_using_block'.find(filter)!=-1)
        self.indent_using_block.setVisible(filter=='' or 'indent_using_block'.find(filter)!=-1)
        self.labelindent_ternary_operator.setVisible(filter=='' or 'indent_ternary_operator'.find(filter)!=-1)
        if self.tr("code_indent_ternary_operator")!="code_indent_ternary_operator":
            self.codeindent_ternary_operator.setVisible(filter=='' or 'indent_ternary_operator'.find(filter)!=-1)
        self.nameindent_ternary_operator.setVisible(filter=='' or 'indent_ternary_operator'.find(filter)!=-1)
        self.indent_ternary_operator.setVisible(filter=='' or 'indent_ternary_operator'.find(filter)!=-1)
        self.labelindent_inside_ternary_operator.setVisible(filter=='' or 'indent_inside_ternary_operator'.find(filter)!=-1)
        if self.tr("code_indent_inside_ternary_operator")!="code_indent_inside_ternary_operator":
            self.codeindent_inside_ternary_operator.setVisible(filter=='' or 'indent_inside_ternary_operator'.find(filter)!=-1)
        self.nameindent_inside_ternary_operator.setVisible(filter=='' or 'indent_inside_ternary_operator'.find(filter)!=-1)
        self.indent_inside_ternary_operator.setVisible(filter=='' or 'indent_inside_ternary_operator'.find(filter)!=-1)
        self.labelindent_off_after_return.setVisible(filter=='' or 'indent_off_after_return'.find(filter)!=-1)
        if self.tr("code_indent_off_after_return")!="code_indent_off_after_return":
            self.codeindent_off_after_return.setVisible(filter=='' or 'indent_off_after_return'.find(filter)!=-1)
        self.nameindent_off_after_return.setVisible(filter=='' or 'indent_off_after_return'.find(filter)!=-1)
        self.indent_off_after_return.setVisible(filter=='' or 'indent_off_after_return'.find(filter)!=-1)
        self.labelindent_off_after_return_new.setVisible(filter=='' or 'indent_off_after_return_new'.find(filter)!=-1)
        if self.tr("code_indent_off_after_return_new")!="code_indent_off_after_return_new":
            self.codeindent_off_after_return_new.setVisible(filter=='' or 'indent_off_after_return_new'.find(filter)!=-1)
        self.nameindent_off_after_return_new.setVisible(filter=='' or 'indent_off_after_return_new'.find(filter)!=-1)
        self.indent_off_after_return_new.setVisible(filter=='' or 'indent_off_after_return_new'.find(filter)!=-1)
        self.labelindent_single_after_return.setVisible(filter=='' or 'indent_single_after_return'.find(filter)!=-1)
        if self.tr("code_indent_single_after_return")!="code_indent_single_after_return":
            self.codeindent_single_after_return.setVisible(filter=='' or 'indent_single_after_return'.find(filter)!=-1)
        self.nameindent_single_after_return.setVisible(filter=='' or 'indent_single_after_return'.find(filter)!=-1)
        self.indent_single_after_return.setVisible(filter=='' or 'indent_single_after_return'.find(filter)!=-1)
        self.labelindent_ignore_asm_block.setVisible(filter=='' or 'indent_ignore_asm_block'.find(filter)!=-1)
        if self.tr("code_indent_ignore_asm_block")!="code_indent_ignore_asm_block":
            self.codeindent_ignore_asm_block.setVisible(filter=='' or 'indent_ignore_asm_block'.find(filter)!=-1)
        self.nameindent_ignore_asm_block.setVisible(filter=='' or 'indent_ignore_asm_block'.find(filter)!=-1)
        self.indent_ignore_asm_block.setVisible(filter=='' or 'indent_ignore_asm_block'.find(filter)!=-1)
        self.labelnl_collapse_empty_body.setVisible(filter=='' or 'nl_collapse_empty_body'.find(filter)!=-1)
        if self.tr("code_nl_collapse_empty_body")!="code_nl_collapse_empty_body":
            self.codenl_collapse_empty_body.setVisible(filter=='' or 'nl_collapse_empty_body'.find(filter)!=-1)
        self.namenl_collapse_empty_body.setVisible(filter=='' or 'nl_collapse_empty_body'.find(filter)!=-1)
        self.nl_collapse_empty_body.setVisible(filter=='' or 'nl_collapse_empty_body'.find(filter)!=-1)
        self.labelnl_assign_leave_one_liners.setVisible(filter=='' or 'nl_assign_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_assign_leave_one_liners")!="code_nl_assign_leave_one_liners":
            self.codenl_assign_leave_one_liners.setVisible(filter=='' or 'nl_assign_leave_one_liners'.find(filter)!=-1)
        self.namenl_assign_leave_one_liners.setVisible(filter=='' or 'nl_assign_leave_one_liners'.find(filter)!=-1)
        self.nl_assign_leave_one_liners.setVisible(filter=='' or 'nl_assign_leave_one_liners'.find(filter)!=-1)
        self.labelnl_class_leave_one_liners.setVisible(filter=='' or 'nl_class_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_class_leave_one_liners")!="code_nl_class_leave_one_liners":
            self.codenl_class_leave_one_liners.setVisible(filter=='' or 'nl_class_leave_one_liners'.find(filter)!=-1)
        self.namenl_class_leave_one_liners.setVisible(filter=='' or 'nl_class_leave_one_liners'.find(filter)!=-1)
        self.nl_class_leave_one_liners.setVisible(filter=='' or 'nl_class_leave_one_liners'.find(filter)!=-1)
        self.labelnl_enum_leave_one_liners.setVisible(filter=='' or 'nl_enum_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_enum_leave_one_liners")!="code_nl_enum_leave_one_liners":
            self.codenl_enum_leave_one_liners.setVisible(filter=='' or 'nl_enum_leave_one_liners'.find(filter)!=-1)
        self.namenl_enum_leave_one_liners.setVisible(filter=='' or 'nl_enum_leave_one_liners'.find(filter)!=-1)
        self.nl_enum_leave_one_liners.setVisible(filter=='' or 'nl_enum_leave_one_liners'.find(filter)!=-1)
        self.labelnl_getset_leave_one_liners.setVisible(filter=='' or 'nl_getset_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_getset_leave_one_liners")!="code_nl_getset_leave_one_liners":
            self.codenl_getset_leave_one_liners.setVisible(filter=='' or 'nl_getset_leave_one_liners'.find(filter)!=-1)
        self.namenl_getset_leave_one_liners.setVisible(filter=='' or 'nl_getset_leave_one_liners'.find(filter)!=-1)
        self.nl_getset_leave_one_liners.setVisible(filter=='' or 'nl_getset_leave_one_liners'.find(filter)!=-1)
        self.labelnl_cs_property_leave_one_liners.setVisible(filter=='' or 'nl_cs_property_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_cs_property_leave_one_liners")!="code_nl_cs_property_leave_one_liners":
            self.codenl_cs_property_leave_one_liners.setVisible(filter=='' or 'nl_cs_property_leave_one_liners'.find(filter)!=-1)
        self.namenl_cs_property_leave_one_liners.setVisible(filter=='' or 'nl_cs_property_leave_one_liners'.find(filter)!=-1)
        self.nl_cs_property_leave_one_liners.setVisible(filter=='' or 'nl_cs_property_leave_one_liners'.find(filter)!=-1)
        self.labelnl_func_leave_one_liners.setVisible(filter=='' or 'nl_func_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_func_leave_one_liners")!="code_nl_func_leave_one_liners":
            self.codenl_func_leave_one_liners.setVisible(filter=='' or 'nl_func_leave_one_liners'.find(filter)!=-1)
        self.namenl_func_leave_one_liners.setVisible(filter=='' or 'nl_func_leave_one_liners'.find(filter)!=-1)
        self.nl_func_leave_one_liners.setVisible(filter=='' or 'nl_func_leave_one_liners'.find(filter)!=-1)
        self.labelnl_cpp_lambda_leave_one_liners.setVisible(filter=='' or 'nl_cpp_lambda_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_cpp_lambda_leave_one_liners")!="code_nl_cpp_lambda_leave_one_liners":
            self.codenl_cpp_lambda_leave_one_liners.setVisible(filter=='' or 'nl_cpp_lambda_leave_one_liners'.find(filter)!=-1)
        self.namenl_cpp_lambda_leave_one_liners.setVisible(filter=='' or 'nl_cpp_lambda_leave_one_liners'.find(filter)!=-1)
        self.nl_cpp_lambda_leave_one_liners.setVisible(filter=='' or 'nl_cpp_lambda_leave_one_liners'.find(filter)!=-1)
        self.labelnl_if_leave_one_liners.setVisible(filter=='' or 'nl_if_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_if_leave_one_liners")!="code_nl_if_leave_one_liners":
            self.codenl_if_leave_one_liners.setVisible(filter=='' or 'nl_if_leave_one_liners'.find(filter)!=-1)
        self.namenl_if_leave_one_liners.setVisible(filter=='' or 'nl_if_leave_one_liners'.find(filter)!=-1)
        self.nl_if_leave_one_liners.setVisible(filter=='' or 'nl_if_leave_one_liners'.find(filter)!=-1)
        self.labelnl_while_leave_one_liners.setVisible(filter=='' or 'nl_while_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_while_leave_one_liners")!="code_nl_while_leave_one_liners":
            self.codenl_while_leave_one_liners.setVisible(filter=='' or 'nl_while_leave_one_liners'.find(filter)!=-1)
        self.namenl_while_leave_one_liners.setVisible(filter=='' or 'nl_while_leave_one_liners'.find(filter)!=-1)
        self.nl_while_leave_one_liners.setVisible(filter=='' or 'nl_while_leave_one_liners'.find(filter)!=-1)
        self.labelnl_for_leave_one_liners.setVisible(filter=='' or 'nl_for_leave_one_liners'.find(filter)!=-1)
        if self.tr("code_nl_for_leave_one_liners")!="code_nl_for_leave_one_liners":
            self.codenl_for_leave_one_liners.setVisible(filter=='' or 'nl_for_leave_one_liners'.find(filter)!=-1)
        self.namenl_for_leave_one_liners.setVisible(filter=='' or 'nl_for_leave_one_liners'.find(filter)!=-1)
        self.nl_for_leave_one_liners.setVisible(filter=='' or 'nl_for_leave_one_liners'.find(filter)!=-1)
        self.labelnl_oc_msg_leave_one_liner.setVisible(filter=='' or 'nl_oc_msg_leave_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_oc_msg_leave_one_liner")!="code_nl_oc_msg_leave_one_liner":
            self.codenl_oc_msg_leave_one_liner.setVisible(filter=='' or 'nl_oc_msg_leave_one_liner'.find(filter)!=-1)
        self.namenl_oc_msg_leave_one_liner.setVisible(filter=='' or 'nl_oc_msg_leave_one_liner'.find(filter)!=-1)
        self.nl_oc_msg_leave_one_liner.setVisible(filter=='' or 'nl_oc_msg_leave_one_liner'.find(filter)!=-1)
        self.labelnl_oc_mdef_brace.setVisible(filter=='' or 'nl_oc_mdef_brace'.find(filter)!=-1)
        if self.tr("code_nl_oc_mdef_brace")!="code_nl_oc_mdef_brace":
            self.codenl_oc_mdef_brace.setVisible(filter=='' or 'nl_oc_mdef_brace'.find(filter)!=-1)
        self.namenl_oc_mdef_brace.setVisible(filter=='' or 'nl_oc_mdef_brace'.find(filter)!=-1)
        self.nl_oc_mdef_brace.setVisible(filter=='' or 'nl_oc_mdef_brace'.find(filter)!=-1)
        self.labelnl_oc_block_brace.setVisible(filter=='' or 'nl_oc_block_brace'.find(filter)!=-1)
        if self.tr("code_nl_oc_block_brace")!="code_nl_oc_block_brace":
            self.codenl_oc_block_brace.setVisible(filter=='' or 'nl_oc_block_brace'.find(filter)!=-1)
        self.namenl_oc_block_brace.setVisible(filter=='' or 'nl_oc_block_brace'.find(filter)!=-1)
        self.nl_oc_block_brace.setVisible(filter=='' or 'nl_oc_block_brace'.find(filter)!=-1)
        self.labelnl_oc_before_interface.setVisible(filter=='' or 'nl_oc_before_interface'.find(filter)!=-1)
        if self.tr("code_nl_oc_before_interface")!="code_nl_oc_before_interface":
            self.codenl_oc_before_interface.setVisible(filter=='' or 'nl_oc_before_interface'.find(filter)!=-1)
        self.namenl_oc_before_interface.setVisible(filter=='' or 'nl_oc_before_interface'.find(filter)!=-1)
        self.nl_oc_before_interface.setVisible(filter=='' or 'nl_oc_before_interface'.find(filter)!=-1)
        self.labelnl_oc_before_implementation.setVisible(filter=='' or 'nl_oc_before_implementation'.find(filter)!=-1)
        if self.tr("code_nl_oc_before_implementation")!="code_nl_oc_before_implementation":
            self.codenl_oc_before_implementation.setVisible(filter=='' or 'nl_oc_before_implementation'.find(filter)!=-1)
        self.namenl_oc_before_implementation.setVisible(filter=='' or 'nl_oc_before_implementation'.find(filter)!=-1)
        self.nl_oc_before_implementation.setVisible(filter=='' or 'nl_oc_before_implementation'.find(filter)!=-1)
        self.labelnl_oc_before_end.setVisible(filter=='' or 'nl_oc_before_end'.find(filter)!=-1)
        if self.tr("code_nl_oc_before_end")!="code_nl_oc_before_end":
            self.codenl_oc_before_end.setVisible(filter=='' or 'nl_oc_before_end'.find(filter)!=-1)
        self.namenl_oc_before_end.setVisible(filter=='' or 'nl_oc_before_end'.find(filter)!=-1)
        self.nl_oc_before_end.setVisible(filter=='' or 'nl_oc_before_end'.find(filter)!=-1)
        self.labelnl_oc_interface_brace.setVisible(filter=='' or 'nl_oc_interface_brace'.find(filter)!=-1)
        if self.tr("code_nl_oc_interface_brace")!="code_nl_oc_interface_brace":
            self.codenl_oc_interface_brace.setVisible(filter=='' or 'nl_oc_interface_brace'.find(filter)!=-1)
        self.namenl_oc_interface_brace.setVisible(filter=='' or 'nl_oc_interface_brace'.find(filter)!=-1)
        self.nl_oc_interface_brace.setVisible(filter=='' or 'nl_oc_interface_brace'.find(filter)!=-1)
        self.labelnl_oc_implementation_brace.setVisible(filter=='' or 'nl_oc_implementation_brace'.find(filter)!=-1)
        if self.tr("code_nl_oc_implementation_brace")!="code_nl_oc_implementation_brace":
            self.codenl_oc_implementation_brace.setVisible(filter=='' or 'nl_oc_implementation_brace'.find(filter)!=-1)
        self.namenl_oc_implementation_brace.setVisible(filter=='' or 'nl_oc_implementation_brace'.find(filter)!=-1)
        self.nl_oc_implementation_brace.setVisible(filter=='' or 'nl_oc_implementation_brace'.find(filter)!=-1)
        self.labelnl_start_of_file.setVisible(filter=='' or 'nl_start_of_file'.find(filter)!=-1)
        if self.tr("code_nl_start_of_file")!="code_nl_start_of_file":
            self.codenl_start_of_file.setVisible(filter=='' or 'nl_start_of_file'.find(filter)!=-1)
        self.namenl_start_of_file.setVisible(filter=='' or 'nl_start_of_file'.find(filter)!=-1)
        self.nl_start_of_file.setVisible(filter=='' or 'nl_start_of_file'.find(filter)!=-1)
        self.labelnl_start_of_file_min.setVisible(filter=='' or 'nl_start_of_file_min'.find(filter)!=-1)
        if self.tr("code_nl_start_of_file_min")!="code_nl_start_of_file_min":
            self.codenl_start_of_file_min.setVisible(filter=='' or 'nl_start_of_file_min'.find(filter)!=-1)
        self.namenl_start_of_file_min.setVisible(filter=='' or 'nl_start_of_file_min'.find(filter)!=-1)
        self.nl_start_of_file_min.setVisible(filter=='' or 'nl_start_of_file_min'.find(filter)!=-1)
        self.labelnl_end_of_file.setVisible(filter=='' or 'nl_end_of_file'.find(filter)!=-1)
        if self.tr("code_nl_end_of_file")!="code_nl_end_of_file":
            self.codenl_end_of_file.setVisible(filter=='' or 'nl_end_of_file'.find(filter)!=-1)
        self.namenl_end_of_file.setVisible(filter=='' or 'nl_end_of_file'.find(filter)!=-1)
        self.nl_end_of_file.setVisible(filter=='' or 'nl_end_of_file'.find(filter)!=-1)
        self.labelnl_end_of_file_min.setVisible(filter=='' or 'nl_end_of_file_min'.find(filter)!=-1)
        if self.tr("code_nl_end_of_file_min")!="code_nl_end_of_file_min":
            self.codenl_end_of_file_min.setVisible(filter=='' or 'nl_end_of_file_min'.find(filter)!=-1)
        self.namenl_end_of_file_min.setVisible(filter=='' or 'nl_end_of_file_min'.find(filter)!=-1)
        self.nl_end_of_file_min.setVisible(filter=='' or 'nl_end_of_file_min'.find(filter)!=-1)
        self.labelnl_assign_brace.setVisible(filter=='' or 'nl_assign_brace'.find(filter)!=-1)
        if self.tr("code_nl_assign_brace")!="code_nl_assign_brace":
            self.codenl_assign_brace.setVisible(filter=='' or 'nl_assign_brace'.find(filter)!=-1)
        self.namenl_assign_brace.setVisible(filter=='' or 'nl_assign_brace'.find(filter)!=-1)
        self.nl_assign_brace.setVisible(filter=='' or 'nl_assign_brace'.find(filter)!=-1)
        self.labelnl_assign_square.setVisible(filter=='' or 'nl_assign_square'.find(filter)!=-1)
        if self.tr("code_nl_assign_square")!="code_nl_assign_square":
            self.codenl_assign_square.setVisible(filter=='' or 'nl_assign_square'.find(filter)!=-1)
        self.namenl_assign_square.setVisible(filter=='' or 'nl_assign_square'.find(filter)!=-1)
        self.nl_assign_square.setVisible(filter=='' or 'nl_assign_square'.find(filter)!=-1)
        self.labelnl_tsquare_brace.setVisible(filter=='' or 'nl_tsquare_brace'.find(filter)!=-1)
        if self.tr("code_nl_tsquare_brace")!="code_nl_tsquare_brace":
            self.codenl_tsquare_brace.setVisible(filter=='' or 'nl_tsquare_brace'.find(filter)!=-1)
        self.namenl_tsquare_brace.setVisible(filter=='' or 'nl_tsquare_brace'.find(filter)!=-1)
        self.nl_tsquare_brace.setVisible(filter=='' or 'nl_tsquare_brace'.find(filter)!=-1)
        self.labelnl_after_square_assign.setVisible(filter=='' or 'nl_after_square_assign'.find(filter)!=-1)
        if self.tr("code_nl_after_square_assign")!="code_nl_after_square_assign":
            self.codenl_after_square_assign.setVisible(filter=='' or 'nl_after_square_assign'.find(filter)!=-1)
        self.namenl_after_square_assign.setVisible(filter=='' or 'nl_after_square_assign'.find(filter)!=-1)
        self.nl_after_square_assign.setVisible(filter=='' or 'nl_after_square_assign'.find(filter)!=-1)
        self.labelnl_fcall_brace.setVisible(filter=='' or 'nl_fcall_brace'.find(filter)!=-1)
        if self.tr("code_nl_fcall_brace")!="code_nl_fcall_brace":
            self.codenl_fcall_brace.setVisible(filter=='' or 'nl_fcall_brace'.find(filter)!=-1)
        self.namenl_fcall_brace.setVisible(filter=='' or 'nl_fcall_brace'.find(filter)!=-1)
        self.nl_fcall_brace.setVisible(filter=='' or 'nl_fcall_brace'.find(filter)!=-1)
        self.labelnl_enum_brace.setVisible(filter=='' or 'nl_enum_brace'.find(filter)!=-1)
        if self.tr("code_nl_enum_brace")!="code_nl_enum_brace":
            self.codenl_enum_brace.setVisible(filter=='' or 'nl_enum_brace'.find(filter)!=-1)
        self.namenl_enum_brace.setVisible(filter=='' or 'nl_enum_brace'.find(filter)!=-1)
        self.nl_enum_brace.setVisible(filter=='' or 'nl_enum_brace'.find(filter)!=-1)
        self.labelnl_enum_class.setVisible(filter=='' or 'nl_enum_class'.find(filter)!=-1)
        if self.tr("code_nl_enum_class")!="code_nl_enum_class":
            self.codenl_enum_class.setVisible(filter=='' or 'nl_enum_class'.find(filter)!=-1)
        self.namenl_enum_class.setVisible(filter=='' or 'nl_enum_class'.find(filter)!=-1)
        self.nl_enum_class.setVisible(filter=='' or 'nl_enum_class'.find(filter)!=-1)
        self.labelnl_enum_class_identifier.setVisible(filter=='' or 'nl_enum_class_identifier'.find(filter)!=-1)
        if self.tr("code_nl_enum_class_identifier")!="code_nl_enum_class_identifier":
            self.codenl_enum_class_identifier.setVisible(filter=='' or 'nl_enum_class_identifier'.find(filter)!=-1)
        self.namenl_enum_class_identifier.setVisible(filter=='' or 'nl_enum_class_identifier'.find(filter)!=-1)
        self.nl_enum_class_identifier.setVisible(filter=='' or 'nl_enum_class_identifier'.find(filter)!=-1)
        self.labelnl_enum_identifier_colon.setVisible(filter=='' or 'nl_enum_identifier_colon'.find(filter)!=-1)
        if self.tr("code_nl_enum_identifier_colon")!="code_nl_enum_identifier_colon":
            self.codenl_enum_identifier_colon.setVisible(filter=='' or 'nl_enum_identifier_colon'.find(filter)!=-1)
        self.namenl_enum_identifier_colon.setVisible(filter=='' or 'nl_enum_identifier_colon'.find(filter)!=-1)
        self.nl_enum_identifier_colon.setVisible(filter=='' or 'nl_enum_identifier_colon'.find(filter)!=-1)
        self.labelnl_enum_colon_type.setVisible(filter=='' or 'nl_enum_colon_type'.find(filter)!=-1)
        if self.tr("code_nl_enum_colon_type")!="code_nl_enum_colon_type":
            self.codenl_enum_colon_type.setVisible(filter=='' or 'nl_enum_colon_type'.find(filter)!=-1)
        self.namenl_enum_colon_type.setVisible(filter=='' or 'nl_enum_colon_type'.find(filter)!=-1)
        self.nl_enum_colon_type.setVisible(filter=='' or 'nl_enum_colon_type'.find(filter)!=-1)
        self.labelnl_struct_brace.setVisible(filter=='' or 'nl_struct_brace'.find(filter)!=-1)
        if self.tr("code_nl_struct_brace")!="code_nl_struct_brace":
            self.codenl_struct_brace.setVisible(filter=='' or 'nl_struct_brace'.find(filter)!=-1)
        self.namenl_struct_brace.setVisible(filter=='' or 'nl_struct_brace'.find(filter)!=-1)
        self.nl_struct_brace.setVisible(filter=='' or 'nl_struct_brace'.find(filter)!=-1)
        self.labelnl_union_brace.setVisible(filter=='' or 'nl_union_brace'.find(filter)!=-1)
        if self.tr("code_nl_union_brace")!="code_nl_union_brace":
            self.codenl_union_brace.setVisible(filter=='' or 'nl_union_brace'.find(filter)!=-1)
        self.namenl_union_brace.setVisible(filter=='' or 'nl_union_brace'.find(filter)!=-1)
        self.nl_union_brace.setVisible(filter=='' or 'nl_union_brace'.find(filter)!=-1)
        self.labelnl_if_brace.setVisible(filter=='' or 'nl_if_brace'.find(filter)!=-1)
        if self.tr("code_nl_if_brace")!="code_nl_if_brace":
            self.codenl_if_brace.setVisible(filter=='' or 'nl_if_brace'.find(filter)!=-1)
        self.namenl_if_brace.setVisible(filter=='' or 'nl_if_brace'.find(filter)!=-1)
        self.nl_if_brace.setVisible(filter=='' or 'nl_if_brace'.find(filter)!=-1)
        self.labelnl_brace_else.setVisible(filter=='' or 'nl_brace_else'.find(filter)!=-1)
        if self.tr("code_nl_brace_else")!="code_nl_brace_else":
            self.codenl_brace_else.setVisible(filter=='' or 'nl_brace_else'.find(filter)!=-1)
        self.namenl_brace_else.setVisible(filter=='' or 'nl_brace_else'.find(filter)!=-1)
        self.nl_brace_else.setVisible(filter=='' or 'nl_brace_else'.find(filter)!=-1)
        self.labelnl_elseif_brace.setVisible(filter=='' or 'nl_elseif_brace'.find(filter)!=-1)
        if self.tr("code_nl_elseif_brace")!="code_nl_elseif_brace":
            self.codenl_elseif_brace.setVisible(filter=='' or 'nl_elseif_brace'.find(filter)!=-1)
        self.namenl_elseif_brace.setVisible(filter=='' or 'nl_elseif_brace'.find(filter)!=-1)
        self.nl_elseif_brace.setVisible(filter=='' or 'nl_elseif_brace'.find(filter)!=-1)
        self.labelnl_else_brace.setVisible(filter=='' or 'nl_else_brace'.find(filter)!=-1)
        if self.tr("code_nl_else_brace")!="code_nl_else_brace":
            self.codenl_else_brace.setVisible(filter=='' or 'nl_else_brace'.find(filter)!=-1)
        self.namenl_else_brace.setVisible(filter=='' or 'nl_else_brace'.find(filter)!=-1)
        self.nl_else_brace.setVisible(filter=='' or 'nl_else_brace'.find(filter)!=-1)
        self.labelnl_else_if.setVisible(filter=='' or 'nl_else_if'.find(filter)!=-1)
        if self.tr("code_nl_else_if")!="code_nl_else_if":
            self.codenl_else_if.setVisible(filter=='' or 'nl_else_if'.find(filter)!=-1)
        self.namenl_else_if.setVisible(filter=='' or 'nl_else_if'.find(filter)!=-1)
        self.nl_else_if.setVisible(filter=='' or 'nl_else_if'.find(filter)!=-1)
        self.labelnl_before_opening_brace_func_class_def.setVisible(filter=='' or 'nl_before_opening_brace_func_class_def'.find(filter)!=-1)
        if self.tr("code_nl_before_opening_brace_func_class_def")!="code_nl_before_opening_brace_func_class_def":
            self.codenl_before_opening_brace_func_class_def.setVisible(filter=='' or 'nl_before_opening_brace_func_class_def'.find(filter)!=-1)
        self.namenl_before_opening_brace_func_class_def.setVisible(filter=='' or 'nl_before_opening_brace_func_class_def'.find(filter)!=-1)
        self.nl_before_opening_brace_func_class_def.setVisible(filter=='' or 'nl_before_opening_brace_func_class_def'.find(filter)!=-1)
        self.labelnl_before_if_closing_paren.setVisible(filter=='' or 'nl_before_if_closing_paren'.find(filter)!=-1)
        if self.tr("code_nl_before_if_closing_paren")!="code_nl_before_if_closing_paren":
            self.codenl_before_if_closing_paren.setVisible(filter=='' or 'nl_before_if_closing_paren'.find(filter)!=-1)
        self.namenl_before_if_closing_paren.setVisible(filter=='' or 'nl_before_if_closing_paren'.find(filter)!=-1)
        self.nl_before_if_closing_paren.setVisible(filter=='' or 'nl_before_if_closing_paren'.find(filter)!=-1)
        self.labelnl_brace_finally.setVisible(filter=='' or 'nl_brace_finally'.find(filter)!=-1)
        if self.tr("code_nl_brace_finally")!="code_nl_brace_finally":
            self.codenl_brace_finally.setVisible(filter=='' or 'nl_brace_finally'.find(filter)!=-1)
        self.namenl_brace_finally.setVisible(filter=='' or 'nl_brace_finally'.find(filter)!=-1)
        self.nl_brace_finally.setVisible(filter=='' or 'nl_brace_finally'.find(filter)!=-1)
        self.labelnl_finally_brace.setVisible(filter=='' or 'nl_finally_brace'.find(filter)!=-1)
        if self.tr("code_nl_finally_brace")!="code_nl_finally_brace":
            self.codenl_finally_brace.setVisible(filter=='' or 'nl_finally_brace'.find(filter)!=-1)
        self.namenl_finally_brace.setVisible(filter=='' or 'nl_finally_brace'.find(filter)!=-1)
        self.nl_finally_brace.setVisible(filter=='' or 'nl_finally_brace'.find(filter)!=-1)
        self.labelnl_try_brace.setVisible(filter=='' or 'nl_try_brace'.find(filter)!=-1)
        if self.tr("code_nl_try_brace")!="code_nl_try_brace":
            self.codenl_try_brace.setVisible(filter=='' or 'nl_try_brace'.find(filter)!=-1)
        self.namenl_try_brace.setVisible(filter=='' or 'nl_try_brace'.find(filter)!=-1)
        self.nl_try_brace.setVisible(filter=='' or 'nl_try_brace'.find(filter)!=-1)
        self.labelnl_getset_brace.setVisible(filter=='' or 'nl_getset_brace'.find(filter)!=-1)
        if self.tr("code_nl_getset_brace")!="code_nl_getset_brace":
            self.codenl_getset_brace.setVisible(filter=='' or 'nl_getset_brace'.find(filter)!=-1)
        self.namenl_getset_brace.setVisible(filter=='' or 'nl_getset_brace'.find(filter)!=-1)
        self.nl_getset_brace.setVisible(filter=='' or 'nl_getset_brace'.find(filter)!=-1)
        self.labelnl_for_brace.setVisible(filter=='' or 'nl_for_brace'.find(filter)!=-1)
        if self.tr("code_nl_for_brace")!="code_nl_for_brace":
            self.codenl_for_brace.setVisible(filter=='' or 'nl_for_brace'.find(filter)!=-1)
        self.namenl_for_brace.setVisible(filter=='' or 'nl_for_brace'.find(filter)!=-1)
        self.nl_for_brace.setVisible(filter=='' or 'nl_for_brace'.find(filter)!=-1)
        self.labelnl_catch_brace.setVisible(filter=='' or 'nl_catch_brace'.find(filter)!=-1)
        if self.tr("code_nl_catch_brace")!="code_nl_catch_brace":
            self.codenl_catch_brace.setVisible(filter=='' or 'nl_catch_brace'.find(filter)!=-1)
        self.namenl_catch_brace.setVisible(filter=='' or 'nl_catch_brace'.find(filter)!=-1)
        self.nl_catch_brace.setVisible(filter=='' or 'nl_catch_brace'.find(filter)!=-1)
        self.labelnl_oc_catch_brace.setVisible(filter=='' or 'nl_oc_catch_brace'.find(filter)!=-1)
        if self.tr("code_nl_oc_catch_brace")!="code_nl_oc_catch_brace":
            self.codenl_oc_catch_brace.setVisible(filter=='' or 'nl_oc_catch_brace'.find(filter)!=-1)
        self.namenl_oc_catch_brace.setVisible(filter=='' or 'nl_oc_catch_brace'.find(filter)!=-1)
        self.nl_oc_catch_brace.setVisible(filter=='' or 'nl_oc_catch_brace'.find(filter)!=-1)
        self.labelnl_brace_catch.setVisible(filter=='' or 'nl_brace_catch'.find(filter)!=-1)
        if self.tr("code_nl_brace_catch")!="code_nl_brace_catch":
            self.codenl_brace_catch.setVisible(filter=='' or 'nl_brace_catch'.find(filter)!=-1)
        self.namenl_brace_catch.setVisible(filter=='' or 'nl_brace_catch'.find(filter)!=-1)
        self.nl_brace_catch.setVisible(filter=='' or 'nl_brace_catch'.find(filter)!=-1)
        self.labelnl_oc_brace_catch.setVisible(filter=='' or 'nl_oc_brace_catch'.find(filter)!=-1)
        if self.tr("code_nl_oc_brace_catch")!="code_nl_oc_brace_catch":
            self.codenl_oc_brace_catch.setVisible(filter=='' or 'nl_oc_brace_catch'.find(filter)!=-1)
        self.namenl_oc_brace_catch.setVisible(filter=='' or 'nl_oc_brace_catch'.find(filter)!=-1)
        self.nl_oc_brace_catch.setVisible(filter=='' or 'nl_oc_brace_catch'.find(filter)!=-1)
        self.labelnl_brace_square.setVisible(filter=='' or 'nl_brace_square'.find(filter)!=-1)
        if self.tr("code_nl_brace_square")!="code_nl_brace_square":
            self.codenl_brace_square.setVisible(filter=='' or 'nl_brace_square'.find(filter)!=-1)
        self.namenl_brace_square.setVisible(filter=='' or 'nl_brace_square'.find(filter)!=-1)
        self.nl_brace_square.setVisible(filter=='' or 'nl_brace_square'.find(filter)!=-1)
        self.labelnl_brace_fparen.setVisible(filter=='' or 'nl_brace_fparen'.find(filter)!=-1)
        if self.tr("code_nl_brace_fparen")!="code_nl_brace_fparen":
            self.codenl_brace_fparen.setVisible(filter=='' or 'nl_brace_fparen'.find(filter)!=-1)
        self.namenl_brace_fparen.setVisible(filter=='' or 'nl_brace_fparen'.find(filter)!=-1)
        self.nl_brace_fparen.setVisible(filter=='' or 'nl_brace_fparen'.find(filter)!=-1)
        self.labelnl_while_brace.setVisible(filter=='' or 'nl_while_brace'.find(filter)!=-1)
        if self.tr("code_nl_while_brace")!="code_nl_while_brace":
            self.codenl_while_brace.setVisible(filter=='' or 'nl_while_brace'.find(filter)!=-1)
        self.namenl_while_brace.setVisible(filter=='' or 'nl_while_brace'.find(filter)!=-1)
        self.nl_while_brace.setVisible(filter=='' or 'nl_while_brace'.find(filter)!=-1)
        self.labelnl_scope_brace.setVisible(filter=='' or 'nl_scope_brace'.find(filter)!=-1)
        if self.tr("code_nl_scope_brace")!="code_nl_scope_brace":
            self.codenl_scope_brace.setVisible(filter=='' or 'nl_scope_brace'.find(filter)!=-1)
        self.namenl_scope_brace.setVisible(filter=='' or 'nl_scope_brace'.find(filter)!=-1)
        self.nl_scope_brace.setVisible(filter=='' or 'nl_scope_brace'.find(filter)!=-1)
        self.labelnl_unittest_brace.setVisible(filter=='' or 'nl_unittest_brace'.find(filter)!=-1)
        if self.tr("code_nl_unittest_brace")!="code_nl_unittest_brace":
            self.codenl_unittest_brace.setVisible(filter=='' or 'nl_unittest_brace'.find(filter)!=-1)
        self.namenl_unittest_brace.setVisible(filter=='' or 'nl_unittest_brace'.find(filter)!=-1)
        self.nl_unittest_brace.setVisible(filter=='' or 'nl_unittest_brace'.find(filter)!=-1)
        self.labelnl_version_brace.setVisible(filter=='' or 'nl_version_brace'.find(filter)!=-1)
        if self.tr("code_nl_version_brace")!="code_nl_version_brace":
            self.codenl_version_brace.setVisible(filter=='' or 'nl_version_brace'.find(filter)!=-1)
        self.namenl_version_brace.setVisible(filter=='' or 'nl_version_brace'.find(filter)!=-1)
        self.nl_version_brace.setVisible(filter=='' or 'nl_version_brace'.find(filter)!=-1)
        self.labelnl_using_brace.setVisible(filter=='' or 'nl_using_brace'.find(filter)!=-1)
        if self.tr("code_nl_using_brace")!="code_nl_using_brace":
            self.codenl_using_brace.setVisible(filter=='' or 'nl_using_brace'.find(filter)!=-1)
        self.namenl_using_brace.setVisible(filter=='' or 'nl_using_brace'.find(filter)!=-1)
        self.nl_using_brace.setVisible(filter=='' or 'nl_using_brace'.find(filter)!=-1)
        self.labelnl_brace_brace.setVisible(filter=='' or 'nl_brace_brace'.find(filter)!=-1)
        if self.tr("code_nl_brace_brace")!="code_nl_brace_brace":
            self.codenl_brace_brace.setVisible(filter=='' or 'nl_brace_brace'.find(filter)!=-1)
        self.namenl_brace_brace.setVisible(filter=='' or 'nl_brace_brace'.find(filter)!=-1)
        self.nl_brace_brace.setVisible(filter=='' or 'nl_brace_brace'.find(filter)!=-1)
        self.labelnl_do_brace.setVisible(filter=='' or 'nl_do_brace'.find(filter)!=-1)
        if self.tr("code_nl_do_brace")!="code_nl_do_brace":
            self.codenl_do_brace.setVisible(filter=='' or 'nl_do_brace'.find(filter)!=-1)
        self.namenl_do_brace.setVisible(filter=='' or 'nl_do_brace'.find(filter)!=-1)
        self.nl_do_brace.setVisible(filter=='' or 'nl_do_brace'.find(filter)!=-1)
        self.labelnl_brace_while.setVisible(filter=='' or 'nl_brace_while'.find(filter)!=-1)
        if self.tr("code_nl_brace_while")!="code_nl_brace_while":
            self.codenl_brace_while.setVisible(filter=='' or 'nl_brace_while'.find(filter)!=-1)
        self.namenl_brace_while.setVisible(filter=='' or 'nl_brace_while'.find(filter)!=-1)
        self.nl_brace_while.setVisible(filter=='' or 'nl_brace_while'.find(filter)!=-1)
        self.labelnl_switch_brace.setVisible(filter=='' or 'nl_switch_brace'.find(filter)!=-1)
        if self.tr("code_nl_switch_brace")!="code_nl_switch_brace":
            self.codenl_switch_brace.setVisible(filter=='' or 'nl_switch_brace'.find(filter)!=-1)
        self.namenl_switch_brace.setVisible(filter=='' or 'nl_switch_brace'.find(filter)!=-1)
        self.nl_switch_brace.setVisible(filter=='' or 'nl_switch_brace'.find(filter)!=-1)
        self.labelnl_synchronized_brace.setVisible(filter=='' or 'nl_synchronized_brace'.find(filter)!=-1)
        if self.tr("code_nl_synchronized_brace")!="code_nl_synchronized_brace":
            self.codenl_synchronized_brace.setVisible(filter=='' or 'nl_synchronized_brace'.find(filter)!=-1)
        self.namenl_synchronized_brace.setVisible(filter=='' or 'nl_synchronized_brace'.find(filter)!=-1)
        self.nl_synchronized_brace.setVisible(filter=='' or 'nl_synchronized_brace'.find(filter)!=-1)
        self.labelnl_multi_line_cond.setVisible(filter=='' or 'nl_multi_line_cond'.find(filter)!=-1)
        if self.tr("code_nl_multi_line_cond")!="code_nl_multi_line_cond":
            self.codenl_multi_line_cond.setVisible(filter=='' or 'nl_multi_line_cond'.find(filter)!=-1)
        self.namenl_multi_line_cond.setVisible(filter=='' or 'nl_multi_line_cond'.find(filter)!=-1)
        self.nl_multi_line_cond.setVisible(filter=='' or 'nl_multi_line_cond'.find(filter)!=-1)
        self.labelnl_multi_line_sparen_open.setVisible(filter=='' or 'nl_multi_line_sparen_open'.find(filter)!=-1)
        if self.tr("code_nl_multi_line_sparen_open")!="code_nl_multi_line_sparen_open":
            self.codenl_multi_line_sparen_open.setVisible(filter=='' or 'nl_multi_line_sparen_open'.find(filter)!=-1)
        self.namenl_multi_line_sparen_open.setVisible(filter=='' or 'nl_multi_line_sparen_open'.find(filter)!=-1)
        self.nl_multi_line_sparen_open.setVisible(filter=='' or 'nl_multi_line_sparen_open'.find(filter)!=-1)
        self.labelnl_multi_line_sparen_close.setVisible(filter=='' or 'nl_multi_line_sparen_close'.find(filter)!=-1)
        if self.tr("code_nl_multi_line_sparen_close")!="code_nl_multi_line_sparen_close":
            self.codenl_multi_line_sparen_close.setVisible(filter=='' or 'nl_multi_line_sparen_close'.find(filter)!=-1)
        self.namenl_multi_line_sparen_close.setVisible(filter=='' or 'nl_multi_line_sparen_close'.find(filter)!=-1)
        self.nl_multi_line_sparen_close.setVisible(filter=='' or 'nl_multi_line_sparen_close'.find(filter)!=-1)
        self.labelnl_multi_line_define.setVisible(filter=='' or 'nl_multi_line_define'.find(filter)!=-1)
        if self.tr("code_nl_multi_line_define")!="code_nl_multi_line_define":
            self.codenl_multi_line_define.setVisible(filter=='' or 'nl_multi_line_define'.find(filter)!=-1)
        self.namenl_multi_line_define.setVisible(filter=='' or 'nl_multi_line_define'.find(filter)!=-1)
        self.nl_multi_line_define.setVisible(filter=='' or 'nl_multi_line_define'.find(filter)!=-1)
        self.labelnl_before_case.setVisible(filter=='' or 'nl_before_case'.find(filter)!=-1)
        if self.tr("code_nl_before_case")!="code_nl_before_case":
            self.codenl_before_case.setVisible(filter=='' or 'nl_before_case'.find(filter)!=-1)
        self.namenl_before_case.setVisible(filter=='' or 'nl_before_case'.find(filter)!=-1)
        self.nl_before_case.setVisible(filter=='' or 'nl_before_case'.find(filter)!=-1)
        self.labelnl_after_case.setVisible(filter=='' or 'nl_after_case'.find(filter)!=-1)
        if self.tr("code_nl_after_case")!="code_nl_after_case":
            self.codenl_after_case.setVisible(filter=='' or 'nl_after_case'.find(filter)!=-1)
        self.namenl_after_case.setVisible(filter=='' or 'nl_after_case'.find(filter)!=-1)
        self.nl_after_case.setVisible(filter=='' or 'nl_after_case'.find(filter)!=-1)
        self.labelnl_case_colon_brace.setVisible(filter=='' or 'nl_case_colon_brace'.find(filter)!=-1)
        if self.tr("code_nl_case_colon_brace")!="code_nl_case_colon_brace":
            self.codenl_case_colon_brace.setVisible(filter=='' or 'nl_case_colon_brace'.find(filter)!=-1)
        self.namenl_case_colon_brace.setVisible(filter=='' or 'nl_case_colon_brace'.find(filter)!=-1)
        self.nl_case_colon_brace.setVisible(filter=='' or 'nl_case_colon_brace'.find(filter)!=-1)
        self.labelnl_before_throw.setVisible(filter=='' or 'nl_before_throw'.find(filter)!=-1)
        if self.tr("code_nl_before_throw")!="code_nl_before_throw":
            self.codenl_before_throw.setVisible(filter=='' or 'nl_before_throw'.find(filter)!=-1)
        self.namenl_before_throw.setVisible(filter=='' or 'nl_before_throw'.find(filter)!=-1)
        self.nl_before_throw.setVisible(filter=='' or 'nl_before_throw'.find(filter)!=-1)
        self.labelnl_namespace_brace.setVisible(filter=='' or 'nl_namespace_brace'.find(filter)!=-1)
        if self.tr("code_nl_namespace_brace")!="code_nl_namespace_brace":
            self.codenl_namespace_brace.setVisible(filter=='' or 'nl_namespace_brace'.find(filter)!=-1)
        self.namenl_namespace_brace.setVisible(filter=='' or 'nl_namespace_brace'.find(filter)!=-1)
        self.nl_namespace_brace.setVisible(filter=='' or 'nl_namespace_brace'.find(filter)!=-1)
        self.labelnl_template_class.setVisible(filter=='' or 'nl_template_class'.find(filter)!=-1)
        if self.tr("code_nl_template_class")!="code_nl_template_class":
            self.codenl_template_class.setVisible(filter=='' or 'nl_template_class'.find(filter)!=-1)
        self.namenl_template_class.setVisible(filter=='' or 'nl_template_class'.find(filter)!=-1)
        self.nl_template_class.setVisible(filter=='' or 'nl_template_class'.find(filter)!=-1)
        self.labelnl_template_class_decl.setVisible(filter=='' or 'nl_template_class_decl'.find(filter)!=-1)
        if self.tr("code_nl_template_class_decl")!="code_nl_template_class_decl":
            self.codenl_template_class_decl.setVisible(filter=='' or 'nl_template_class_decl'.find(filter)!=-1)
        self.namenl_template_class_decl.setVisible(filter=='' or 'nl_template_class_decl'.find(filter)!=-1)
        self.nl_template_class_decl.setVisible(filter=='' or 'nl_template_class_decl'.find(filter)!=-1)
        self.labelnl_template_class_decl_special.setVisible(filter=='' or 'nl_template_class_decl_special'.find(filter)!=-1)
        if self.tr("code_nl_template_class_decl_special")!="code_nl_template_class_decl_special":
            self.codenl_template_class_decl_special.setVisible(filter=='' or 'nl_template_class_decl_special'.find(filter)!=-1)
        self.namenl_template_class_decl_special.setVisible(filter=='' or 'nl_template_class_decl_special'.find(filter)!=-1)
        self.nl_template_class_decl_special.setVisible(filter=='' or 'nl_template_class_decl_special'.find(filter)!=-1)
        self.labelnl_template_class_def.setVisible(filter=='' or 'nl_template_class_def'.find(filter)!=-1)
        if self.tr("code_nl_template_class_def")!="code_nl_template_class_def":
            self.codenl_template_class_def.setVisible(filter=='' or 'nl_template_class_def'.find(filter)!=-1)
        self.namenl_template_class_def.setVisible(filter=='' or 'nl_template_class_def'.find(filter)!=-1)
        self.nl_template_class_def.setVisible(filter=='' or 'nl_template_class_def'.find(filter)!=-1)
        self.labelnl_template_class_def_special.setVisible(filter=='' or 'nl_template_class_def_special'.find(filter)!=-1)
        if self.tr("code_nl_template_class_def_special")!="code_nl_template_class_def_special":
            self.codenl_template_class_def_special.setVisible(filter=='' or 'nl_template_class_def_special'.find(filter)!=-1)
        self.namenl_template_class_def_special.setVisible(filter=='' or 'nl_template_class_def_special'.find(filter)!=-1)
        self.nl_template_class_def_special.setVisible(filter=='' or 'nl_template_class_def_special'.find(filter)!=-1)
        self.labelnl_template_func.setVisible(filter=='' or 'nl_template_func'.find(filter)!=-1)
        if self.tr("code_nl_template_func")!="code_nl_template_func":
            self.codenl_template_func.setVisible(filter=='' or 'nl_template_func'.find(filter)!=-1)
        self.namenl_template_func.setVisible(filter=='' or 'nl_template_func'.find(filter)!=-1)
        self.nl_template_func.setVisible(filter=='' or 'nl_template_func'.find(filter)!=-1)
        self.labelnl_template_func_decl.setVisible(filter=='' or 'nl_template_func_decl'.find(filter)!=-1)
        if self.tr("code_nl_template_func_decl")!="code_nl_template_func_decl":
            self.codenl_template_func_decl.setVisible(filter=='' or 'nl_template_func_decl'.find(filter)!=-1)
        self.namenl_template_func_decl.setVisible(filter=='' or 'nl_template_func_decl'.find(filter)!=-1)
        self.nl_template_func_decl.setVisible(filter=='' or 'nl_template_func_decl'.find(filter)!=-1)
        self.labelnl_template_func_decl_special.setVisible(filter=='' or 'nl_template_func_decl_special'.find(filter)!=-1)
        if self.tr("code_nl_template_func_decl_special")!="code_nl_template_func_decl_special":
            self.codenl_template_func_decl_special.setVisible(filter=='' or 'nl_template_func_decl_special'.find(filter)!=-1)
        self.namenl_template_func_decl_special.setVisible(filter=='' or 'nl_template_func_decl_special'.find(filter)!=-1)
        self.nl_template_func_decl_special.setVisible(filter=='' or 'nl_template_func_decl_special'.find(filter)!=-1)
        self.labelnl_template_func_def.setVisible(filter=='' or 'nl_template_func_def'.find(filter)!=-1)
        if self.tr("code_nl_template_func_def")!="code_nl_template_func_def":
            self.codenl_template_func_def.setVisible(filter=='' or 'nl_template_func_def'.find(filter)!=-1)
        self.namenl_template_func_def.setVisible(filter=='' or 'nl_template_func_def'.find(filter)!=-1)
        self.nl_template_func_def.setVisible(filter=='' or 'nl_template_func_def'.find(filter)!=-1)
        self.labelnl_template_func_def_special.setVisible(filter=='' or 'nl_template_func_def_special'.find(filter)!=-1)
        if self.tr("code_nl_template_func_def_special")!="code_nl_template_func_def_special":
            self.codenl_template_func_def_special.setVisible(filter=='' or 'nl_template_func_def_special'.find(filter)!=-1)
        self.namenl_template_func_def_special.setVisible(filter=='' or 'nl_template_func_def_special'.find(filter)!=-1)
        self.nl_template_func_def_special.setVisible(filter=='' or 'nl_template_func_def_special'.find(filter)!=-1)
        self.labelnl_template_var.setVisible(filter=='' or 'nl_template_var'.find(filter)!=-1)
        if self.tr("code_nl_template_var")!="code_nl_template_var":
            self.codenl_template_var.setVisible(filter=='' or 'nl_template_var'.find(filter)!=-1)
        self.namenl_template_var.setVisible(filter=='' or 'nl_template_var'.find(filter)!=-1)
        self.nl_template_var.setVisible(filter=='' or 'nl_template_var'.find(filter)!=-1)
        self.labelnl_template_using.setVisible(filter=='' or 'nl_template_using'.find(filter)!=-1)
        if self.tr("code_nl_template_using")!="code_nl_template_using":
            self.codenl_template_using.setVisible(filter=='' or 'nl_template_using'.find(filter)!=-1)
        self.namenl_template_using.setVisible(filter=='' or 'nl_template_using'.find(filter)!=-1)
        self.nl_template_using.setVisible(filter=='' or 'nl_template_using'.find(filter)!=-1)
        self.labelnl_class_brace.setVisible(filter=='' or 'nl_class_brace'.find(filter)!=-1)
        if self.tr("code_nl_class_brace")!="code_nl_class_brace":
            self.codenl_class_brace.setVisible(filter=='' or 'nl_class_brace'.find(filter)!=-1)
        self.namenl_class_brace.setVisible(filter=='' or 'nl_class_brace'.find(filter)!=-1)
        self.nl_class_brace.setVisible(filter=='' or 'nl_class_brace'.find(filter)!=-1)
        self.labelnl_class_init_args.setVisible(filter=='' or 'nl_class_init_args'.find(filter)!=-1)
        if self.tr("code_nl_class_init_args")!="code_nl_class_init_args":
            self.codenl_class_init_args.setVisible(filter=='' or 'nl_class_init_args'.find(filter)!=-1)
        self.namenl_class_init_args.setVisible(filter=='' or 'nl_class_init_args'.find(filter)!=-1)
        self.nl_class_init_args.setVisible(filter=='' or 'nl_class_init_args'.find(filter)!=-1)
        self.labelnl_constr_init_args.setVisible(filter=='' or 'nl_constr_init_args'.find(filter)!=-1)
        if self.tr("code_nl_constr_init_args")!="code_nl_constr_init_args":
            self.codenl_constr_init_args.setVisible(filter=='' or 'nl_constr_init_args'.find(filter)!=-1)
        self.namenl_constr_init_args.setVisible(filter=='' or 'nl_constr_init_args'.find(filter)!=-1)
        self.nl_constr_init_args.setVisible(filter=='' or 'nl_constr_init_args'.find(filter)!=-1)
        self.labelnl_enum_own_lines.setVisible(filter=='' or 'nl_enum_own_lines'.find(filter)!=-1)
        if self.tr("code_nl_enum_own_lines")!="code_nl_enum_own_lines":
            self.codenl_enum_own_lines.setVisible(filter=='' or 'nl_enum_own_lines'.find(filter)!=-1)
        self.namenl_enum_own_lines.setVisible(filter=='' or 'nl_enum_own_lines'.find(filter)!=-1)
        self.nl_enum_own_lines.setVisible(filter=='' or 'nl_enum_own_lines'.find(filter)!=-1)
        self.labelnl_func_type_name.setVisible(filter=='' or 'nl_func_type_name'.find(filter)!=-1)
        if self.tr("code_nl_func_type_name")!="code_nl_func_type_name":
            self.codenl_func_type_name.setVisible(filter=='' or 'nl_func_type_name'.find(filter)!=-1)
        self.namenl_func_type_name.setVisible(filter=='' or 'nl_func_type_name'.find(filter)!=-1)
        self.nl_func_type_name.setVisible(filter=='' or 'nl_func_type_name'.find(filter)!=-1)
        self.labelnl_func_type_name_class.setVisible(filter=='' or 'nl_func_type_name_class'.find(filter)!=-1)
        if self.tr("code_nl_func_type_name_class")!="code_nl_func_type_name_class":
            self.codenl_func_type_name_class.setVisible(filter=='' or 'nl_func_type_name_class'.find(filter)!=-1)
        self.namenl_func_type_name_class.setVisible(filter=='' or 'nl_func_type_name_class'.find(filter)!=-1)
        self.nl_func_type_name_class.setVisible(filter=='' or 'nl_func_type_name_class'.find(filter)!=-1)
        self.labelnl_func_class_scope.setVisible(filter=='' or 'nl_func_class_scope'.find(filter)!=-1)
        if self.tr("code_nl_func_class_scope")!="code_nl_func_class_scope":
            self.codenl_func_class_scope.setVisible(filter=='' or 'nl_func_class_scope'.find(filter)!=-1)
        self.namenl_func_class_scope.setVisible(filter=='' or 'nl_func_class_scope'.find(filter)!=-1)
        self.nl_func_class_scope.setVisible(filter=='' or 'nl_func_class_scope'.find(filter)!=-1)
        self.labelnl_func_scope_name.setVisible(filter=='' or 'nl_func_scope_name'.find(filter)!=-1)
        if self.tr("code_nl_func_scope_name")!="code_nl_func_scope_name":
            self.codenl_func_scope_name.setVisible(filter=='' or 'nl_func_scope_name'.find(filter)!=-1)
        self.namenl_func_scope_name.setVisible(filter=='' or 'nl_func_scope_name'.find(filter)!=-1)
        self.nl_func_scope_name.setVisible(filter=='' or 'nl_func_scope_name'.find(filter)!=-1)
        self.labelnl_func_proto_type_name.setVisible(filter=='' or 'nl_func_proto_type_name'.find(filter)!=-1)
        if self.tr("code_nl_func_proto_type_name")!="code_nl_func_proto_type_name":
            self.codenl_func_proto_type_name.setVisible(filter=='' or 'nl_func_proto_type_name'.find(filter)!=-1)
        self.namenl_func_proto_type_name.setVisible(filter=='' or 'nl_func_proto_type_name'.find(filter)!=-1)
        self.nl_func_proto_type_name.setVisible(filter=='' or 'nl_func_proto_type_name'.find(filter)!=-1)
        self.labelnl_func_paren.setVisible(filter=='' or 'nl_func_paren'.find(filter)!=-1)
        if self.tr("code_nl_func_paren")!="code_nl_func_paren":
            self.codenl_func_paren.setVisible(filter=='' or 'nl_func_paren'.find(filter)!=-1)
        self.namenl_func_paren.setVisible(filter=='' or 'nl_func_paren'.find(filter)!=-1)
        self.nl_func_paren.setVisible(filter=='' or 'nl_func_paren'.find(filter)!=-1)
        self.labelnl_func_paren_empty.setVisible(filter=='' or 'nl_func_paren_empty'.find(filter)!=-1)
        if self.tr("code_nl_func_paren_empty")!="code_nl_func_paren_empty":
            self.codenl_func_paren_empty.setVisible(filter=='' or 'nl_func_paren_empty'.find(filter)!=-1)
        self.namenl_func_paren_empty.setVisible(filter=='' or 'nl_func_paren_empty'.find(filter)!=-1)
        self.nl_func_paren_empty.setVisible(filter=='' or 'nl_func_paren_empty'.find(filter)!=-1)
        self.labelnl_func_def_paren.setVisible(filter=='' or 'nl_func_def_paren'.find(filter)!=-1)
        if self.tr("code_nl_func_def_paren")!="code_nl_func_def_paren":
            self.codenl_func_def_paren.setVisible(filter=='' or 'nl_func_def_paren'.find(filter)!=-1)
        self.namenl_func_def_paren.setVisible(filter=='' or 'nl_func_def_paren'.find(filter)!=-1)
        self.nl_func_def_paren.setVisible(filter=='' or 'nl_func_def_paren'.find(filter)!=-1)
        self.labelnl_func_def_paren_empty.setVisible(filter=='' or 'nl_func_def_paren_empty'.find(filter)!=-1)
        if self.tr("code_nl_func_def_paren_empty")!="code_nl_func_def_paren_empty":
            self.codenl_func_def_paren_empty.setVisible(filter=='' or 'nl_func_def_paren_empty'.find(filter)!=-1)
        self.namenl_func_def_paren_empty.setVisible(filter=='' or 'nl_func_def_paren_empty'.find(filter)!=-1)
        self.nl_func_def_paren_empty.setVisible(filter=='' or 'nl_func_def_paren_empty'.find(filter)!=-1)
        self.labelnl_func_call_paren.setVisible(filter=='' or 'nl_func_call_paren'.find(filter)!=-1)
        if self.tr("code_nl_func_call_paren")!="code_nl_func_call_paren":
            self.codenl_func_call_paren.setVisible(filter=='' or 'nl_func_call_paren'.find(filter)!=-1)
        self.namenl_func_call_paren.setVisible(filter=='' or 'nl_func_call_paren'.find(filter)!=-1)
        self.nl_func_call_paren.setVisible(filter=='' or 'nl_func_call_paren'.find(filter)!=-1)
        self.labelnl_func_call_paren_empty.setVisible(filter=='' or 'nl_func_call_paren_empty'.find(filter)!=-1)
        if self.tr("code_nl_func_call_paren_empty")!="code_nl_func_call_paren_empty":
            self.codenl_func_call_paren_empty.setVisible(filter=='' or 'nl_func_call_paren_empty'.find(filter)!=-1)
        self.namenl_func_call_paren_empty.setVisible(filter=='' or 'nl_func_call_paren_empty'.find(filter)!=-1)
        self.nl_func_call_paren_empty.setVisible(filter=='' or 'nl_func_call_paren_empty'.find(filter)!=-1)
        self.labelnl_func_decl_start.setVisible(filter=='' or 'nl_func_decl_start'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_start")!="code_nl_func_decl_start":
            self.codenl_func_decl_start.setVisible(filter=='' or 'nl_func_decl_start'.find(filter)!=-1)
        self.namenl_func_decl_start.setVisible(filter=='' or 'nl_func_decl_start'.find(filter)!=-1)
        self.nl_func_decl_start.setVisible(filter=='' or 'nl_func_decl_start'.find(filter)!=-1)
        self.labelnl_func_def_start.setVisible(filter=='' or 'nl_func_def_start'.find(filter)!=-1)
        if self.tr("code_nl_func_def_start")!="code_nl_func_def_start":
            self.codenl_func_def_start.setVisible(filter=='' or 'nl_func_def_start'.find(filter)!=-1)
        self.namenl_func_def_start.setVisible(filter=='' or 'nl_func_def_start'.find(filter)!=-1)
        self.nl_func_def_start.setVisible(filter=='' or 'nl_func_def_start'.find(filter)!=-1)
        self.labelnl_func_decl_start_single.setVisible(filter=='' or 'nl_func_decl_start_single'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_start_single")!="code_nl_func_decl_start_single":
            self.codenl_func_decl_start_single.setVisible(filter=='' or 'nl_func_decl_start_single'.find(filter)!=-1)
        self.namenl_func_decl_start_single.setVisible(filter=='' or 'nl_func_decl_start_single'.find(filter)!=-1)
        self.nl_func_decl_start_single.setVisible(filter=='' or 'nl_func_decl_start_single'.find(filter)!=-1)
        self.labelnl_func_def_start_single.setVisible(filter=='' or 'nl_func_def_start_single'.find(filter)!=-1)
        if self.tr("code_nl_func_def_start_single")!="code_nl_func_def_start_single":
            self.codenl_func_def_start_single.setVisible(filter=='' or 'nl_func_def_start_single'.find(filter)!=-1)
        self.namenl_func_def_start_single.setVisible(filter=='' or 'nl_func_def_start_single'.find(filter)!=-1)
        self.nl_func_def_start_single.setVisible(filter=='' or 'nl_func_def_start_single'.find(filter)!=-1)
        self.labelnl_func_decl_start_multi_line.setVisible(filter=='' or 'nl_func_decl_start_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_start_multi_line")!="code_nl_func_decl_start_multi_line":
            self.codenl_func_decl_start_multi_line.setVisible(filter=='' or 'nl_func_decl_start_multi_line'.find(filter)!=-1)
        self.namenl_func_decl_start_multi_line.setVisible(filter=='' or 'nl_func_decl_start_multi_line'.find(filter)!=-1)
        self.nl_func_decl_start_multi_line.setVisible(filter=='' or 'nl_func_decl_start_multi_line'.find(filter)!=-1)
        self.labelnl_func_def_start_multi_line.setVisible(filter=='' or 'nl_func_def_start_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_def_start_multi_line")!="code_nl_func_def_start_multi_line":
            self.codenl_func_def_start_multi_line.setVisible(filter=='' or 'nl_func_def_start_multi_line'.find(filter)!=-1)
        self.namenl_func_def_start_multi_line.setVisible(filter=='' or 'nl_func_def_start_multi_line'.find(filter)!=-1)
        self.nl_func_def_start_multi_line.setVisible(filter=='' or 'nl_func_def_start_multi_line'.find(filter)!=-1)
        self.labelnl_func_decl_args.setVisible(filter=='' or 'nl_func_decl_args'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_args")!="code_nl_func_decl_args":
            self.codenl_func_decl_args.setVisible(filter=='' or 'nl_func_decl_args'.find(filter)!=-1)
        self.namenl_func_decl_args.setVisible(filter=='' or 'nl_func_decl_args'.find(filter)!=-1)
        self.nl_func_decl_args.setVisible(filter=='' or 'nl_func_decl_args'.find(filter)!=-1)
        self.labelnl_func_def_args.setVisible(filter=='' or 'nl_func_def_args'.find(filter)!=-1)
        if self.tr("code_nl_func_def_args")!="code_nl_func_def_args":
            self.codenl_func_def_args.setVisible(filter=='' or 'nl_func_def_args'.find(filter)!=-1)
        self.namenl_func_def_args.setVisible(filter=='' or 'nl_func_def_args'.find(filter)!=-1)
        self.nl_func_def_args.setVisible(filter=='' or 'nl_func_def_args'.find(filter)!=-1)
        self.labelnl_func_call_args.setVisible(filter=='' or 'nl_func_call_args'.find(filter)!=-1)
        if self.tr("code_nl_func_call_args")!="code_nl_func_call_args":
            self.codenl_func_call_args.setVisible(filter=='' or 'nl_func_call_args'.find(filter)!=-1)
        self.namenl_func_call_args.setVisible(filter=='' or 'nl_func_call_args'.find(filter)!=-1)
        self.nl_func_call_args.setVisible(filter=='' or 'nl_func_call_args'.find(filter)!=-1)
        self.labelnl_func_decl_args_multi_line.setVisible(filter=='' or 'nl_func_decl_args_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_args_multi_line")!="code_nl_func_decl_args_multi_line":
            self.codenl_func_decl_args_multi_line.setVisible(filter=='' or 'nl_func_decl_args_multi_line'.find(filter)!=-1)
        self.namenl_func_decl_args_multi_line.setVisible(filter=='' or 'nl_func_decl_args_multi_line'.find(filter)!=-1)
        self.nl_func_decl_args_multi_line.setVisible(filter=='' or 'nl_func_decl_args_multi_line'.find(filter)!=-1)
        self.labelnl_func_def_args_multi_line.setVisible(filter=='' or 'nl_func_def_args_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_def_args_multi_line")!="code_nl_func_def_args_multi_line":
            self.codenl_func_def_args_multi_line.setVisible(filter=='' or 'nl_func_def_args_multi_line'.find(filter)!=-1)
        self.namenl_func_def_args_multi_line.setVisible(filter=='' or 'nl_func_def_args_multi_line'.find(filter)!=-1)
        self.nl_func_def_args_multi_line.setVisible(filter=='' or 'nl_func_def_args_multi_line'.find(filter)!=-1)
        self.labelnl_func_decl_end.setVisible(filter=='' or 'nl_func_decl_end'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_end")!="code_nl_func_decl_end":
            self.codenl_func_decl_end.setVisible(filter=='' or 'nl_func_decl_end'.find(filter)!=-1)
        self.namenl_func_decl_end.setVisible(filter=='' or 'nl_func_decl_end'.find(filter)!=-1)
        self.nl_func_decl_end.setVisible(filter=='' or 'nl_func_decl_end'.find(filter)!=-1)
        self.labelnl_func_def_end.setVisible(filter=='' or 'nl_func_def_end'.find(filter)!=-1)
        if self.tr("code_nl_func_def_end")!="code_nl_func_def_end":
            self.codenl_func_def_end.setVisible(filter=='' or 'nl_func_def_end'.find(filter)!=-1)
        self.namenl_func_def_end.setVisible(filter=='' or 'nl_func_def_end'.find(filter)!=-1)
        self.nl_func_def_end.setVisible(filter=='' or 'nl_func_def_end'.find(filter)!=-1)
        self.labelnl_func_decl_end_single.setVisible(filter=='' or 'nl_func_decl_end_single'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_end_single")!="code_nl_func_decl_end_single":
            self.codenl_func_decl_end_single.setVisible(filter=='' or 'nl_func_decl_end_single'.find(filter)!=-1)
        self.namenl_func_decl_end_single.setVisible(filter=='' or 'nl_func_decl_end_single'.find(filter)!=-1)
        self.nl_func_decl_end_single.setVisible(filter=='' or 'nl_func_decl_end_single'.find(filter)!=-1)
        self.labelnl_func_def_end_single.setVisible(filter=='' or 'nl_func_def_end_single'.find(filter)!=-1)
        if self.tr("code_nl_func_def_end_single")!="code_nl_func_def_end_single":
            self.codenl_func_def_end_single.setVisible(filter=='' or 'nl_func_def_end_single'.find(filter)!=-1)
        self.namenl_func_def_end_single.setVisible(filter=='' or 'nl_func_def_end_single'.find(filter)!=-1)
        self.nl_func_def_end_single.setVisible(filter=='' or 'nl_func_def_end_single'.find(filter)!=-1)
        self.labelnl_func_decl_end_multi_line.setVisible(filter=='' or 'nl_func_decl_end_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_end_multi_line")!="code_nl_func_decl_end_multi_line":
            self.codenl_func_decl_end_multi_line.setVisible(filter=='' or 'nl_func_decl_end_multi_line'.find(filter)!=-1)
        self.namenl_func_decl_end_multi_line.setVisible(filter=='' or 'nl_func_decl_end_multi_line'.find(filter)!=-1)
        self.nl_func_decl_end_multi_line.setVisible(filter=='' or 'nl_func_decl_end_multi_line'.find(filter)!=-1)
        self.labelnl_func_def_end_multi_line.setVisible(filter=='' or 'nl_func_def_end_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_def_end_multi_line")!="code_nl_func_def_end_multi_line":
            self.codenl_func_def_end_multi_line.setVisible(filter=='' or 'nl_func_def_end_multi_line'.find(filter)!=-1)
        self.namenl_func_def_end_multi_line.setVisible(filter=='' or 'nl_func_def_end_multi_line'.find(filter)!=-1)
        self.nl_func_def_end_multi_line.setVisible(filter=='' or 'nl_func_def_end_multi_line'.find(filter)!=-1)
        self.labelnl_func_decl_empty.setVisible(filter=='' or 'nl_func_decl_empty'.find(filter)!=-1)
        if self.tr("code_nl_func_decl_empty")!="code_nl_func_decl_empty":
            self.codenl_func_decl_empty.setVisible(filter=='' or 'nl_func_decl_empty'.find(filter)!=-1)
        self.namenl_func_decl_empty.setVisible(filter=='' or 'nl_func_decl_empty'.find(filter)!=-1)
        self.nl_func_decl_empty.setVisible(filter=='' or 'nl_func_decl_empty'.find(filter)!=-1)
        self.labelnl_func_def_empty.setVisible(filter=='' or 'nl_func_def_empty'.find(filter)!=-1)
        if self.tr("code_nl_func_def_empty")!="code_nl_func_def_empty":
            self.codenl_func_def_empty.setVisible(filter=='' or 'nl_func_def_empty'.find(filter)!=-1)
        self.namenl_func_def_empty.setVisible(filter=='' or 'nl_func_def_empty'.find(filter)!=-1)
        self.nl_func_def_empty.setVisible(filter=='' or 'nl_func_def_empty'.find(filter)!=-1)
        self.labelnl_func_call_empty.setVisible(filter=='' or 'nl_func_call_empty'.find(filter)!=-1)
        if self.tr("code_nl_func_call_empty")!="code_nl_func_call_empty":
            self.codenl_func_call_empty.setVisible(filter=='' or 'nl_func_call_empty'.find(filter)!=-1)
        self.namenl_func_call_empty.setVisible(filter=='' or 'nl_func_call_empty'.find(filter)!=-1)
        self.nl_func_call_empty.setVisible(filter=='' or 'nl_func_call_empty'.find(filter)!=-1)
        self.labelnl_func_call_start.setVisible(filter=='' or 'nl_func_call_start'.find(filter)!=-1)
        if self.tr("code_nl_func_call_start")!="code_nl_func_call_start":
            self.codenl_func_call_start.setVisible(filter=='' or 'nl_func_call_start'.find(filter)!=-1)
        self.namenl_func_call_start.setVisible(filter=='' or 'nl_func_call_start'.find(filter)!=-1)
        self.nl_func_call_start.setVisible(filter=='' or 'nl_func_call_start'.find(filter)!=-1)
        self.labelnl_func_call_end.setVisible(filter=='' or 'nl_func_call_end'.find(filter)!=-1)
        if self.tr("code_nl_func_call_end")!="code_nl_func_call_end":
            self.codenl_func_call_end.setVisible(filter=='' or 'nl_func_call_end'.find(filter)!=-1)
        self.namenl_func_call_end.setVisible(filter=='' or 'nl_func_call_end'.find(filter)!=-1)
        self.nl_func_call_end.setVisible(filter=='' or 'nl_func_call_end'.find(filter)!=-1)
        self.labelnl_func_call_start_multi_line.setVisible(filter=='' or 'nl_func_call_start_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_call_start_multi_line")!="code_nl_func_call_start_multi_line":
            self.codenl_func_call_start_multi_line.setVisible(filter=='' or 'nl_func_call_start_multi_line'.find(filter)!=-1)
        self.namenl_func_call_start_multi_line.setVisible(filter=='' or 'nl_func_call_start_multi_line'.find(filter)!=-1)
        self.nl_func_call_start_multi_line.setVisible(filter=='' or 'nl_func_call_start_multi_line'.find(filter)!=-1)
        self.labelnl_func_call_args_multi_line.setVisible(filter=='' or 'nl_func_call_args_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_call_args_multi_line")!="code_nl_func_call_args_multi_line":
            self.codenl_func_call_args_multi_line.setVisible(filter=='' or 'nl_func_call_args_multi_line'.find(filter)!=-1)
        self.namenl_func_call_args_multi_line.setVisible(filter=='' or 'nl_func_call_args_multi_line'.find(filter)!=-1)
        self.nl_func_call_args_multi_line.setVisible(filter=='' or 'nl_func_call_args_multi_line'.find(filter)!=-1)
        self.labelnl_func_call_end_multi_line.setVisible(filter=='' or 'nl_func_call_end_multi_line'.find(filter)!=-1)
        if self.tr("code_nl_func_call_end_multi_line")!="code_nl_func_call_end_multi_line":
            self.codenl_func_call_end_multi_line.setVisible(filter=='' or 'nl_func_call_end_multi_line'.find(filter)!=-1)
        self.namenl_func_call_end_multi_line.setVisible(filter=='' or 'nl_func_call_end_multi_line'.find(filter)!=-1)
        self.nl_func_call_end_multi_line.setVisible(filter=='' or 'nl_func_call_end_multi_line'.find(filter)!=-1)
        self.labelnl_func_call_args_multi_line_ignore_closures.setVisible(filter=='' or 'nl_func_call_args_multi_line_ignore_closures'.find(filter)!=-1)
        if self.tr("code_nl_func_call_args_multi_line_ignore_closures")!="code_nl_func_call_args_multi_line_ignore_closures":
            self.codenl_func_call_args_multi_line_ignore_closures.setVisible(filter=='' or 'nl_func_call_args_multi_line_ignore_closures'.find(filter)!=-1)
        self.namenl_func_call_args_multi_line_ignore_closures.setVisible(filter=='' or 'nl_func_call_args_multi_line_ignore_closures'.find(filter)!=-1)
        self.nl_func_call_args_multi_line_ignore_closures.setVisible(filter=='' or 'nl_func_call_args_multi_line_ignore_closures'.find(filter)!=-1)
        self.labelnl_template_start.setVisible(filter=='' or 'nl_template_start'.find(filter)!=-1)
        if self.tr("code_nl_template_start")!="code_nl_template_start":
            self.codenl_template_start.setVisible(filter=='' or 'nl_template_start'.find(filter)!=-1)
        self.namenl_template_start.setVisible(filter=='' or 'nl_template_start'.find(filter)!=-1)
        self.nl_template_start.setVisible(filter=='' or 'nl_template_start'.find(filter)!=-1)
        self.labelnl_template_args.setVisible(filter=='' or 'nl_template_args'.find(filter)!=-1)
        if self.tr("code_nl_template_args")!="code_nl_template_args":
            self.codenl_template_args.setVisible(filter=='' or 'nl_template_args'.find(filter)!=-1)
        self.namenl_template_args.setVisible(filter=='' or 'nl_template_args'.find(filter)!=-1)
        self.nl_template_args.setVisible(filter=='' or 'nl_template_args'.find(filter)!=-1)
        self.labelnl_template_end.setVisible(filter=='' or 'nl_template_end'.find(filter)!=-1)
        if self.tr("code_nl_template_end")!="code_nl_template_end":
            self.codenl_template_end.setVisible(filter=='' or 'nl_template_end'.find(filter)!=-1)
        self.namenl_template_end.setVisible(filter=='' or 'nl_template_end'.find(filter)!=-1)
        self.nl_template_end.setVisible(filter=='' or 'nl_template_end'.find(filter)!=-1)
        self.labelnl_oc_msg_args.setVisible(filter=='' or 'nl_oc_msg_args'.find(filter)!=-1)
        if self.tr("code_nl_oc_msg_args")!="code_nl_oc_msg_args":
            self.codenl_oc_msg_args.setVisible(filter=='' or 'nl_oc_msg_args'.find(filter)!=-1)
        self.namenl_oc_msg_args.setVisible(filter=='' or 'nl_oc_msg_args'.find(filter)!=-1)
        self.nl_oc_msg_args.setVisible(filter=='' or 'nl_oc_msg_args'.find(filter)!=-1)
        self.labelnl_fdef_brace.setVisible(filter=='' or 'nl_fdef_brace'.find(filter)!=-1)
        if self.tr("code_nl_fdef_brace")!="code_nl_fdef_brace":
            self.codenl_fdef_brace.setVisible(filter=='' or 'nl_fdef_brace'.find(filter)!=-1)
        self.namenl_fdef_brace.setVisible(filter=='' or 'nl_fdef_brace'.find(filter)!=-1)
        self.nl_fdef_brace.setVisible(filter=='' or 'nl_fdef_brace'.find(filter)!=-1)
        self.labelnl_fdef_brace_cond.setVisible(filter=='' or 'nl_fdef_brace_cond'.find(filter)!=-1)
        if self.tr("code_nl_fdef_brace_cond")!="code_nl_fdef_brace_cond":
            self.codenl_fdef_brace_cond.setVisible(filter=='' or 'nl_fdef_brace_cond'.find(filter)!=-1)
        self.namenl_fdef_brace_cond.setVisible(filter=='' or 'nl_fdef_brace_cond'.find(filter)!=-1)
        self.nl_fdef_brace_cond.setVisible(filter=='' or 'nl_fdef_brace_cond'.find(filter)!=-1)
        self.labelnl_cpp_ldef_brace.setVisible(filter=='' or 'nl_cpp_ldef_brace'.find(filter)!=-1)
        if self.tr("code_nl_cpp_ldef_brace")!="code_nl_cpp_ldef_brace":
            self.codenl_cpp_ldef_brace.setVisible(filter=='' or 'nl_cpp_ldef_brace'.find(filter)!=-1)
        self.namenl_cpp_ldef_brace.setVisible(filter=='' or 'nl_cpp_ldef_brace'.find(filter)!=-1)
        self.nl_cpp_ldef_brace.setVisible(filter=='' or 'nl_cpp_ldef_brace'.find(filter)!=-1)
        self.labelnl_return_expr.setVisible(filter=='' or 'nl_return_expr'.find(filter)!=-1)
        if self.tr("code_nl_return_expr")!="code_nl_return_expr":
            self.codenl_return_expr.setVisible(filter=='' or 'nl_return_expr'.find(filter)!=-1)
        self.namenl_return_expr.setVisible(filter=='' or 'nl_return_expr'.find(filter)!=-1)
        self.nl_return_expr.setVisible(filter=='' or 'nl_return_expr'.find(filter)!=-1)
        self.labelnl_after_semicolon.setVisible(filter=='' or 'nl_after_semicolon'.find(filter)!=-1)
        if self.tr("code_nl_after_semicolon")!="code_nl_after_semicolon":
            self.codenl_after_semicolon.setVisible(filter=='' or 'nl_after_semicolon'.find(filter)!=-1)
        self.namenl_after_semicolon.setVisible(filter=='' or 'nl_after_semicolon'.find(filter)!=-1)
        self.nl_after_semicolon.setVisible(filter=='' or 'nl_after_semicolon'.find(filter)!=-1)
        self.labelnl_paren_dbrace_open.setVisible(filter=='' or 'nl_paren_dbrace_open'.find(filter)!=-1)
        if self.tr("code_nl_paren_dbrace_open")!="code_nl_paren_dbrace_open":
            self.codenl_paren_dbrace_open.setVisible(filter=='' or 'nl_paren_dbrace_open'.find(filter)!=-1)
        self.namenl_paren_dbrace_open.setVisible(filter=='' or 'nl_paren_dbrace_open'.find(filter)!=-1)
        self.nl_paren_dbrace_open.setVisible(filter=='' or 'nl_paren_dbrace_open'.find(filter)!=-1)
        self.labelnl_type_brace_init_lst.setVisible(filter=='' or 'nl_type_brace_init_lst'.find(filter)!=-1)
        if self.tr("code_nl_type_brace_init_lst")!="code_nl_type_brace_init_lst":
            self.codenl_type_brace_init_lst.setVisible(filter=='' or 'nl_type_brace_init_lst'.find(filter)!=-1)
        self.namenl_type_brace_init_lst.setVisible(filter=='' or 'nl_type_brace_init_lst'.find(filter)!=-1)
        self.nl_type_brace_init_lst.setVisible(filter=='' or 'nl_type_brace_init_lst'.find(filter)!=-1)
        self.labelnl_type_brace_init_lst_open.setVisible(filter=='' or 'nl_type_brace_init_lst_open'.find(filter)!=-1)
        if self.tr("code_nl_type_brace_init_lst_open")!="code_nl_type_brace_init_lst_open":
            self.codenl_type_brace_init_lst_open.setVisible(filter=='' or 'nl_type_brace_init_lst_open'.find(filter)!=-1)
        self.namenl_type_brace_init_lst_open.setVisible(filter=='' or 'nl_type_brace_init_lst_open'.find(filter)!=-1)
        self.nl_type_brace_init_lst_open.setVisible(filter=='' or 'nl_type_brace_init_lst_open'.find(filter)!=-1)
        self.labelnl_type_brace_init_lst_close.setVisible(filter=='' or 'nl_type_brace_init_lst_close'.find(filter)!=-1)
        if self.tr("code_nl_type_brace_init_lst_close")!="code_nl_type_brace_init_lst_close":
            self.codenl_type_brace_init_lst_close.setVisible(filter=='' or 'nl_type_brace_init_lst_close'.find(filter)!=-1)
        self.namenl_type_brace_init_lst_close.setVisible(filter=='' or 'nl_type_brace_init_lst_close'.find(filter)!=-1)
        self.nl_type_brace_init_lst_close.setVisible(filter=='' or 'nl_type_brace_init_lst_close'.find(filter)!=-1)
        self.labelnl_after_brace_open.setVisible(filter=='' or 'nl_after_brace_open'.find(filter)!=-1)
        if self.tr("code_nl_after_brace_open")!="code_nl_after_brace_open":
            self.codenl_after_brace_open.setVisible(filter=='' or 'nl_after_brace_open'.find(filter)!=-1)
        self.namenl_after_brace_open.setVisible(filter=='' or 'nl_after_brace_open'.find(filter)!=-1)
        self.nl_after_brace_open.setVisible(filter=='' or 'nl_after_brace_open'.find(filter)!=-1)
        self.labelnl_after_brace_open_cmt.setVisible(filter=='' or 'nl_after_brace_open_cmt'.find(filter)!=-1)
        if self.tr("code_nl_after_brace_open_cmt")!="code_nl_after_brace_open_cmt":
            self.codenl_after_brace_open_cmt.setVisible(filter=='' or 'nl_after_brace_open_cmt'.find(filter)!=-1)
        self.namenl_after_brace_open_cmt.setVisible(filter=='' or 'nl_after_brace_open_cmt'.find(filter)!=-1)
        self.nl_after_brace_open_cmt.setVisible(filter=='' or 'nl_after_brace_open_cmt'.find(filter)!=-1)
        self.labelnl_after_vbrace_open.setVisible(filter=='' or 'nl_after_vbrace_open'.find(filter)!=-1)
        if self.tr("code_nl_after_vbrace_open")!="code_nl_after_vbrace_open":
            self.codenl_after_vbrace_open.setVisible(filter=='' or 'nl_after_vbrace_open'.find(filter)!=-1)
        self.namenl_after_vbrace_open.setVisible(filter=='' or 'nl_after_vbrace_open'.find(filter)!=-1)
        self.nl_after_vbrace_open.setVisible(filter=='' or 'nl_after_vbrace_open'.find(filter)!=-1)
        self.labelnl_after_vbrace_open_empty.setVisible(filter=='' or 'nl_after_vbrace_open_empty'.find(filter)!=-1)
        if self.tr("code_nl_after_vbrace_open_empty")!="code_nl_after_vbrace_open_empty":
            self.codenl_after_vbrace_open_empty.setVisible(filter=='' or 'nl_after_vbrace_open_empty'.find(filter)!=-1)
        self.namenl_after_vbrace_open_empty.setVisible(filter=='' or 'nl_after_vbrace_open_empty'.find(filter)!=-1)
        self.nl_after_vbrace_open_empty.setVisible(filter=='' or 'nl_after_vbrace_open_empty'.find(filter)!=-1)
        self.labelnl_after_brace_close.setVisible(filter=='' or 'nl_after_brace_close'.find(filter)!=-1)
        if self.tr("code_nl_after_brace_close")!="code_nl_after_brace_close":
            self.codenl_after_brace_close.setVisible(filter=='' or 'nl_after_brace_close'.find(filter)!=-1)
        self.namenl_after_brace_close.setVisible(filter=='' or 'nl_after_brace_close'.find(filter)!=-1)
        self.nl_after_brace_close.setVisible(filter=='' or 'nl_after_brace_close'.find(filter)!=-1)
        self.labelnl_after_vbrace_close.setVisible(filter=='' or 'nl_after_vbrace_close'.find(filter)!=-1)
        if self.tr("code_nl_after_vbrace_close")!="code_nl_after_vbrace_close":
            self.codenl_after_vbrace_close.setVisible(filter=='' or 'nl_after_vbrace_close'.find(filter)!=-1)
        self.namenl_after_vbrace_close.setVisible(filter=='' or 'nl_after_vbrace_close'.find(filter)!=-1)
        self.nl_after_vbrace_close.setVisible(filter=='' or 'nl_after_vbrace_close'.find(filter)!=-1)
        self.labelnl_brace_struct_var.setVisible(filter=='' or 'nl_brace_struct_var'.find(filter)!=-1)
        if self.tr("code_nl_brace_struct_var")!="code_nl_brace_struct_var":
            self.codenl_brace_struct_var.setVisible(filter=='' or 'nl_brace_struct_var'.find(filter)!=-1)
        self.namenl_brace_struct_var.setVisible(filter=='' or 'nl_brace_struct_var'.find(filter)!=-1)
        self.nl_brace_struct_var.setVisible(filter=='' or 'nl_brace_struct_var'.find(filter)!=-1)
        self.labelnl_define_macro.setVisible(filter=='' or 'nl_define_macro'.find(filter)!=-1)
        if self.tr("code_nl_define_macro")!="code_nl_define_macro":
            self.codenl_define_macro.setVisible(filter=='' or 'nl_define_macro'.find(filter)!=-1)
        self.namenl_define_macro.setVisible(filter=='' or 'nl_define_macro'.find(filter)!=-1)
        self.nl_define_macro.setVisible(filter=='' or 'nl_define_macro'.find(filter)!=-1)
        self.labelnl_squeeze_paren_close.setVisible(filter=='' or 'nl_squeeze_paren_close'.find(filter)!=-1)
        if self.tr("code_nl_squeeze_paren_close")!="code_nl_squeeze_paren_close":
            self.codenl_squeeze_paren_close.setVisible(filter=='' or 'nl_squeeze_paren_close'.find(filter)!=-1)
        self.namenl_squeeze_paren_close.setVisible(filter=='' or 'nl_squeeze_paren_close'.find(filter)!=-1)
        self.nl_squeeze_paren_close.setVisible(filter=='' or 'nl_squeeze_paren_close'.find(filter)!=-1)
        self.labelnl_squeeze_ifdef.setVisible(filter=='' or 'nl_squeeze_ifdef'.find(filter)!=-1)
        if self.tr("code_nl_squeeze_ifdef")!="code_nl_squeeze_ifdef":
            self.codenl_squeeze_ifdef.setVisible(filter=='' or 'nl_squeeze_ifdef'.find(filter)!=-1)
        self.namenl_squeeze_ifdef.setVisible(filter=='' or 'nl_squeeze_ifdef'.find(filter)!=-1)
        self.nl_squeeze_ifdef.setVisible(filter=='' or 'nl_squeeze_ifdef'.find(filter)!=-1)
        self.labelnl_squeeze_ifdef_top_level.setVisible(filter=='' or 'nl_squeeze_ifdef_top_level'.find(filter)!=-1)
        if self.tr("code_nl_squeeze_ifdef_top_level")!="code_nl_squeeze_ifdef_top_level":
            self.codenl_squeeze_ifdef_top_level.setVisible(filter=='' or 'nl_squeeze_ifdef_top_level'.find(filter)!=-1)
        self.namenl_squeeze_ifdef_top_level.setVisible(filter=='' or 'nl_squeeze_ifdef_top_level'.find(filter)!=-1)
        self.nl_squeeze_ifdef_top_level.setVisible(filter=='' or 'nl_squeeze_ifdef_top_level'.find(filter)!=-1)
        self.labelnl_before_if.setVisible(filter=='' or 'nl_before_if'.find(filter)!=-1)
        if self.tr("code_nl_before_if")!="code_nl_before_if":
            self.codenl_before_if.setVisible(filter=='' or 'nl_before_if'.find(filter)!=-1)
        self.namenl_before_if.setVisible(filter=='' or 'nl_before_if'.find(filter)!=-1)
        self.nl_before_if.setVisible(filter=='' or 'nl_before_if'.find(filter)!=-1)
        self.labelnl_after_if.setVisible(filter=='' or 'nl_after_if'.find(filter)!=-1)
        if self.tr("code_nl_after_if")!="code_nl_after_if":
            self.codenl_after_if.setVisible(filter=='' or 'nl_after_if'.find(filter)!=-1)
        self.namenl_after_if.setVisible(filter=='' or 'nl_after_if'.find(filter)!=-1)
        self.nl_after_if.setVisible(filter=='' or 'nl_after_if'.find(filter)!=-1)
        self.labelnl_before_for.setVisible(filter=='' or 'nl_before_for'.find(filter)!=-1)
        if self.tr("code_nl_before_for")!="code_nl_before_for":
            self.codenl_before_for.setVisible(filter=='' or 'nl_before_for'.find(filter)!=-1)
        self.namenl_before_for.setVisible(filter=='' or 'nl_before_for'.find(filter)!=-1)
        self.nl_before_for.setVisible(filter=='' or 'nl_before_for'.find(filter)!=-1)
        self.labelnl_after_for.setVisible(filter=='' or 'nl_after_for'.find(filter)!=-1)
        if self.tr("code_nl_after_for")!="code_nl_after_for":
            self.codenl_after_for.setVisible(filter=='' or 'nl_after_for'.find(filter)!=-1)
        self.namenl_after_for.setVisible(filter=='' or 'nl_after_for'.find(filter)!=-1)
        self.nl_after_for.setVisible(filter=='' or 'nl_after_for'.find(filter)!=-1)
        self.labelnl_before_while.setVisible(filter=='' or 'nl_before_while'.find(filter)!=-1)
        if self.tr("code_nl_before_while")!="code_nl_before_while":
            self.codenl_before_while.setVisible(filter=='' or 'nl_before_while'.find(filter)!=-1)
        self.namenl_before_while.setVisible(filter=='' or 'nl_before_while'.find(filter)!=-1)
        self.nl_before_while.setVisible(filter=='' or 'nl_before_while'.find(filter)!=-1)
        self.labelnl_after_while.setVisible(filter=='' or 'nl_after_while'.find(filter)!=-1)
        if self.tr("code_nl_after_while")!="code_nl_after_while":
            self.codenl_after_while.setVisible(filter=='' or 'nl_after_while'.find(filter)!=-1)
        self.namenl_after_while.setVisible(filter=='' or 'nl_after_while'.find(filter)!=-1)
        self.nl_after_while.setVisible(filter=='' or 'nl_after_while'.find(filter)!=-1)
        self.labelnl_before_switch.setVisible(filter=='' or 'nl_before_switch'.find(filter)!=-1)
        if self.tr("code_nl_before_switch")!="code_nl_before_switch":
            self.codenl_before_switch.setVisible(filter=='' or 'nl_before_switch'.find(filter)!=-1)
        self.namenl_before_switch.setVisible(filter=='' or 'nl_before_switch'.find(filter)!=-1)
        self.nl_before_switch.setVisible(filter=='' or 'nl_before_switch'.find(filter)!=-1)
        self.labelnl_after_switch.setVisible(filter=='' or 'nl_after_switch'.find(filter)!=-1)
        if self.tr("code_nl_after_switch")!="code_nl_after_switch":
            self.codenl_after_switch.setVisible(filter=='' or 'nl_after_switch'.find(filter)!=-1)
        self.namenl_after_switch.setVisible(filter=='' or 'nl_after_switch'.find(filter)!=-1)
        self.nl_after_switch.setVisible(filter=='' or 'nl_after_switch'.find(filter)!=-1)
        self.labelnl_before_synchronized.setVisible(filter=='' or 'nl_before_synchronized'.find(filter)!=-1)
        if self.tr("code_nl_before_synchronized")!="code_nl_before_synchronized":
            self.codenl_before_synchronized.setVisible(filter=='' or 'nl_before_synchronized'.find(filter)!=-1)
        self.namenl_before_synchronized.setVisible(filter=='' or 'nl_before_synchronized'.find(filter)!=-1)
        self.nl_before_synchronized.setVisible(filter=='' or 'nl_before_synchronized'.find(filter)!=-1)
        self.labelnl_after_synchronized.setVisible(filter=='' or 'nl_after_synchronized'.find(filter)!=-1)
        if self.tr("code_nl_after_synchronized")!="code_nl_after_synchronized":
            self.codenl_after_synchronized.setVisible(filter=='' or 'nl_after_synchronized'.find(filter)!=-1)
        self.namenl_after_synchronized.setVisible(filter=='' or 'nl_after_synchronized'.find(filter)!=-1)
        self.nl_after_synchronized.setVisible(filter=='' or 'nl_after_synchronized'.find(filter)!=-1)
        self.labelnl_before_do.setVisible(filter=='' or 'nl_before_do'.find(filter)!=-1)
        if self.tr("code_nl_before_do")!="code_nl_before_do":
            self.codenl_before_do.setVisible(filter=='' or 'nl_before_do'.find(filter)!=-1)
        self.namenl_before_do.setVisible(filter=='' or 'nl_before_do'.find(filter)!=-1)
        self.nl_before_do.setVisible(filter=='' or 'nl_before_do'.find(filter)!=-1)
        self.labelnl_after_do.setVisible(filter=='' or 'nl_after_do'.find(filter)!=-1)
        if self.tr("code_nl_after_do")!="code_nl_after_do":
            self.codenl_after_do.setVisible(filter=='' or 'nl_after_do'.find(filter)!=-1)
        self.namenl_after_do.setVisible(filter=='' or 'nl_after_do'.find(filter)!=-1)
        self.nl_after_do.setVisible(filter=='' or 'nl_after_do'.find(filter)!=-1)
        self.labelnl_before_return.setVisible(filter=='' or 'nl_before_return'.find(filter)!=-1)
        if self.tr("code_nl_before_return")!="code_nl_before_return":
            self.codenl_before_return.setVisible(filter=='' or 'nl_before_return'.find(filter)!=-1)
        self.namenl_before_return.setVisible(filter=='' or 'nl_before_return'.find(filter)!=-1)
        self.nl_before_return.setVisible(filter=='' or 'nl_before_return'.find(filter)!=-1)
        self.labelnl_after_return.setVisible(filter=='' or 'nl_after_return'.find(filter)!=-1)
        if self.tr("code_nl_after_return")!="code_nl_after_return":
            self.codenl_after_return.setVisible(filter=='' or 'nl_after_return'.find(filter)!=-1)
        self.namenl_after_return.setVisible(filter=='' or 'nl_after_return'.find(filter)!=-1)
        self.nl_after_return.setVisible(filter=='' or 'nl_after_return'.find(filter)!=-1)
        self.labelnl_before_member.setVisible(filter=='' or 'nl_before_member'.find(filter)!=-1)
        if self.tr("code_nl_before_member")!="code_nl_before_member":
            self.codenl_before_member.setVisible(filter=='' or 'nl_before_member'.find(filter)!=-1)
        self.namenl_before_member.setVisible(filter=='' or 'nl_before_member'.find(filter)!=-1)
        self.nl_before_member.setVisible(filter=='' or 'nl_before_member'.find(filter)!=-1)
        self.labelnl_after_member.setVisible(filter=='' or 'nl_after_member'.find(filter)!=-1)
        if self.tr("code_nl_after_member")!="code_nl_after_member":
            self.codenl_after_member.setVisible(filter=='' or 'nl_after_member'.find(filter)!=-1)
        self.namenl_after_member.setVisible(filter=='' or 'nl_after_member'.find(filter)!=-1)
        self.nl_after_member.setVisible(filter=='' or 'nl_after_member'.find(filter)!=-1)
        self.labelnl_ds_struct_enum_cmt.setVisible(filter=='' or 'nl_ds_struct_enum_cmt'.find(filter)!=-1)
        if self.tr("code_nl_ds_struct_enum_cmt")!="code_nl_ds_struct_enum_cmt":
            self.codenl_ds_struct_enum_cmt.setVisible(filter=='' or 'nl_ds_struct_enum_cmt'.find(filter)!=-1)
        self.namenl_ds_struct_enum_cmt.setVisible(filter=='' or 'nl_ds_struct_enum_cmt'.find(filter)!=-1)
        self.nl_ds_struct_enum_cmt.setVisible(filter=='' or 'nl_ds_struct_enum_cmt'.find(filter)!=-1)
        self.labelnl_ds_struct_enum_close_brace.setVisible(filter=='' or 'nl_ds_struct_enum_close_brace'.find(filter)!=-1)
        if self.tr("code_nl_ds_struct_enum_close_brace")!="code_nl_ds_struct_enum_close_brace":
            self.codenl_ds_struct_enum_close_brace.setVisible(filter=='' or 'nl_ds_struct_enum_close_brace'.find(filter)!=-1)
        self.namenl_ds_struct_enum_close_brace.setVisible(filter=='' or 'nl_ds_struct_enum_close_brace'.find(filter)!=-1)
        self.nl_ds_struct_enum_close_brace.setVisible(filter=='' or 'nl_ds_struct_enum_close_brace'.find(filter)!=-1)
        self.labelnl_class_colon.setVisible(filter=='' or 'nl_class_colon'.find(filter)!=-1)
        if self.tr("code_nl_class_colon")!="code_nl_class_colon":
            self.codenl_class_colon.setVisible(filter=='' or 'nl_class_colon'.find(filter)!=-1)
        self.namenl_class_colon.setVisible(filter=='' or 'nl_class_colon'.find(filter)!=-1)
        self.nl_class_colon.setVisible(filter=='' or 'nl_class_colon'.find(filter)!=-1)
        self.labelnl_constr_colon.setVisible(filter=='' or 'nl_constr_colon'.find(filter)!=-1)
        if self.tr("code_nl_constr_colon")!="code_nl_constr_colon":
            self.codenl_constr_colon.setVisible(filter=='' or 'nl_constr_colon'.find(filter)!=-1)
        self.namenl_constr_colon.setVisible(filter=='' or 'nl_constr_colon'.find(filter)!=-1)
        self.nl_constr_colon.setVisible(filter=='' or 'nl_constr_colon'.find(filter)!=-1)
        self.labelnl_namespace_two_to_one_liner.setVisible(filter=='' or 'nl_namespace_two_to_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_namespace_two_to_one_liner")!="code_nl_namespace_two_to_one_liner":
            self.codenl_namespace_two_to_one_liner.setVisible(filter=='' or 'nl_namespace_two_to_one_liner'.find(filter)!=-1)
        self.namenl_namespace_two_to_one_liner.setVisible(filter=='' or 'nl_namespace_two_to_one_liner'.find(filter)!=-1)
        self.nl_namespace_two_to_one_liner.setVisible(filter=='' or 'nl_namespace_two_to_one_liner'.find(filter)!=-1)
        self.labelnl_create_if_one_liner.setVisible(filter=='' or 'nl_create_if_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_create_if_one_liner")!="code_nl_create_if_one_liner":
            self.codenl_create_if_one_liner.setVisible(filter=='' or 'nl_create_if_one_liner'.find(filter)!=-1)
        self.namenl_create_if_one_liner.setVisible(filter=='' or 'nl_create_if_one_liner'.find(filter)!=-1)
        self.nl_create_if_one_liner.setVisible(filter=='' or 'nl_create_if_one_liner'.find(filter)!=-1)
        self.labelnl_create_for_one_liner.setVisible(filter=='' or 'nl_create_for_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_create_for_one_liner")!="code_nl_create_for_one_liner":
            self.codenl_create_for_one_liner.setVisible(filter=='' or 'nl_create_for_one_liner'.find(filter)!=-1)
        self.namenl_create_for_one_liner.setVisible(filter=='' or 'nl_create_for_one_liner'.find(filter)!=-1)
        self.nl_create_for_one_liner.setVisible(filter=='' or 'nl_create_for_one_liner'.find(filter)!=-1)
        self.labelnl_create_while_one_liner.setVisible(filter=='' or 'nl_create_while_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_create_while_one_liner")!="code_nl_create_while_one_liner":
            self.codenl_create_while_one_liner.setVisible(filter=='' or 'nl_create_while_one_liner'.find(filter)!=-1)
        self.namenl_create_while_one_liner.setVisible(filter=='' or 'nl_create_while_one_liner'.find(filter)!=-1)
        self.nl_create_while_one_liner.setVisible(filter=='' or 'nl_create_while_one_liner'.find(filter)!=-1)
        self.labelnl_create_func_def_one_liner.setVisible(filter=='' or 'nl_create_func_def_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_create_func_def_one_liner")!="code_nl_create_func_def_one_liner":
            self.codenl_create_func_def_one_liner.setVisible(filter=='' or 'nl_create_func_def_one_liner'.find(filter)!=-1)
        self.namenl_create_func_def_one_liner.setVisible(filter=='' or 'nl_create_func_def_one_liner'.find(filter)!=-1)
        self.nl_create_func_def_one_liner.setVisible(filter=='' or 'nl_create_func_def_one_liner'.find(filter)!=-1)
        self.labelnl_create_list_one_liner.setVisible(filter=='' or 'nl_create_list_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_create_list_one_liner")!="code_nl_create_list_one_liner":
            self.codenl_create_list_one_liner.setVisible(filter=='' or 'nl_create_list_one_liner'.find(filter)!=-1)
        self.namenl_create_list_one_liner.setVisible(filter=='' or 'nl_create_list_one_liner'.find(filter)!=-1)
        self.nl_create_list_one_liner.setVisible(filter=='' or 'nl_create_list_one_liner'.find(filter)!=-1)
        self.labelnl_split_if_one_liner.setVisible(filter=='' or 'nl_split_if_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_split_if_one_liner")!="code_nl_split_if_one_liner":
            self.codenl_split_if_one_liner.setVisible(filter=='' or 'nl_split_if_one_liner'.find(filter)!=-1)
        self.namenl_split_if_one_liner.setVisible(filter=='' or 'nl_split_if_one_liner'.find(filter)!=-1)
        self.nl_split_if_one_liner.setVisible(filter=='' or 'nl_split_if_one_liner'.find(filter)!=-1)
        self.labelnl_split_for_one_liner.setVisible(filter=='' or 'nl_split_for_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_split_for_one_liner")!="code_nl_split_for_one_liner":
            self.codenl_split_for_one_liner.setVisible(filter=='' or 'nl_split_for_one_liner'.find(filter)!=-1)
        self.namenl_split_for_one_liner.setVisible(filter=='' or 'nl_split_for_one_liner'.find(filter)!=-1)
        self.nl_split_for_one_liner.setVisible(filter=='' or 'nl_split_for_one_liner'.find(filter)!=-1)
        self.labelnl_split_while_one_liner.setVisible(filter=='' or 'nl_split_while_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_split_while_one_liner")!="code_nl_split_while_one_liner":
            self.codenl_split_while_one_liner.setVisible(filter=='' or 'nl_split_while_one_liner'.find(filter)!=-1)
        self.namenl_split_while_one_liner.setVisible(filter=='' or 'nl_split_while_one_liner'.find(filter)!=-1)
        self.nl_split_while_one_liner.setVisible(filter=='' or 'nl_split_while_one_liner'.find(filter)!=-1)
        self.labelnl_max.setVisible(filter=='' or 'nl_max'.find(filter)!=-1)
        if self.tr("code_nl_max")!="code_nl_max":
            self.codenl_max.setVisible(filter=='' or 'nl_max'.find(filter)!=-1)
        self.namenl_max.setVisible(filter=='' or 'nl_max'.find(filter)!=-1)
        self.nl_max.setVisible(filter=='' or 'nl_max'.find(filter)!=-1)
        self.labelnl_max_blank_in_func.setVisible(filter=='' or 'nl_max_blank_in_func'.find(filter)!=-1)
        if self.tr("code_nl_max_blank_in_func")!="code_nl_max_blank_in_func":
            self.codenl_max_blank_in_func.setVisible(filter=='' or 'nl_max_blank_in_func'.find(filter)!=-1)
        self.namenl_max_blank_in_func.setVisible(filter=='' or 'nl_max_blank_in_func'.find(filter)!=-1)
        self.nl_max_blank_in_func.setVisible(filter=='' or 'nl_max_blank_in_func'.find(filter)!=-1)
        self.labelnl_before_func_body_proto.setVisible(filter=='' or 'nl_before_func_body_proto'.find(filter)!=-1)
        if self.tr("code_nl_before_func_body_proto")!="code_nl_before_func_body_proto":
            self.codenl_before_func_body_proto.setVisible(filter=='' or 'nl_before_func_body_proto'.find(filter)!=-1)
        self.namenl_before_func_body_proto.setVisible(filter=='' or 'nl_before_func_body_proto'.find(filter)!=-1)
        self.nl_before_func_body_proto.setVisible(filter=='' or 'nl_before_func_body_proto'.find(filter)!=-1)
        self.labelnl_before_func_body_def.setVisible(filter=='' or 'nl_before_func_body_def'.find(filter)!=-1)
        if self.tr("code_nl_before_func_body_def")!="code_nl_before_func_body_def":
            self.codenl_before_func_body_def.setVisible(filter=='' or 'nl_before_func_body_def'.find(filter)!=-1)
        self.namenl_before_func_body_def.setVisible(filter=='' or 'nl_before_func_body_def'.find(filter)!=-1)
        self.nl_before_func_body_def.setVisible(filter=='' or 'nl_before_func_body_def'.find(filter)!=-1)
        self.labelnl_before_func_class_proto.setVisible(filter=='' or 'nl_before_func_class_proto'.find(filter)!=-1)
        if self.tr("code_nl_before_func_class_proto")!="code_nl_before_func_class_proto":
            self.codenl_before_func_class_proto.setVisible(filter=='' or 'nl_before_func_class_proto'.find(filter)!=-1)
        self.namenl_before_func_class_proto.setVisible(filter=='' or 'nl_before_func_class_proto'.find(filter)!=-1)
        self.nl_before_func_class_proto.setVisible(filter=='' or 'nl_before_func_class_proto'.find(filter)!=-1)
        self.labelnl_before_func_class_def.setVisible(filter=='' or 'nl_before_func_class_def'.find(filter)!=-1)
        if self.tr("code_nl_before_func_class_def")!="code_nl_before_func_class_def":
            self.codenl_before_func_class_def.setVisible(filter=='' or 'nl_before_func_class_def'.find(filter)!=-1)
        self.namenl_before_func_class_def.setVisible(filter=='' or 'nl_before_func_class_def'.find(filter)!=-1)
        self.nl_before_func_class_def.setVisible(filter=='' or 'nl_before_func_class_def'.find(filter)!=-1)
        self.labelnl_after_func_proto.setVisible(filter=='' or 'nl_after_func_proto'.find(filter)!=-1)
        if self.tr("code_nl_after_func_proto")!="code_nl_after_func_proto":
            self.codenl_after_func_proto.setVisible(filter=='' or 'nl_after_func_proto'.find(filter)!=-1)
        self.namenl_after_func_proto.setVisible(filter=='' or 'nl_after_func_proto'.find(filter)!=-1)
        self.nl_after_func_proto.setVisible(filter=='' or 'nl_after_func_proto'.find(filter)!=-1)
        self.labelnl_after_func_proto_group.setVisible(filter=='' or 'nl_after_func_proto_group'.find(filter)!=-1)
        if self.tr("code_nl_after_func_proto_group")!="code_nl_after_func_proto_group":
            self.codenl_after_func_proto_group.setVisible(filter=='' or 'nl_after_func_proto_group'.find(filter)!=-1)
        self.namenl_after_func_proto_group.setVisible(filter=='' or 'nl_after_func_proto_group'.find(filter)!=-1)
        self.nl_after_func_proto_group.setVisible(filter=='' or 'nl_after_func_proto_group'.find(filter)!=-1)
        self.labelnl_after_func_class_proto.setVisible(filter=='' or 'nl_after_func_class_proto'.find(filter)!=-1)
        if self.tr("code_nl_after_func_class_proto")!="code_nl_after_func_class_proto":
            self.codenl_after_func_class_proto.setVisible(filter=='' or 'nl_after_func_class_proto'.find(filter)!=-1)
        self.namenl_after_func_class_proto.setVisible(filter=='' or 'nl_after_func_class_proto'.find(filter)!=-1)
        self.nl_after_func_class_proto.setVisible(filter=='' or 'nl_after_func_class_proto'.find(filter)!=-1)
        self.labelnl_after_func_class_proto_group.setVisible(filter=='' or 'nl_after_func_class_proto_group'.find(filter)!=-1)
        if self.tr("code_nl_after_func_class_proto_group")!="code_nl_after_func_class_proto_group":
            self.codenl_after_func_class_proto_group.setVisible(filter=='' or 'nl_after_func_class_proto_group'.find(filter)!=-1)
        self.namenl_after_func_class_proto_group.setVisible(filter=='' or 'nl_after_func_class_proto_group'.find(filter)!=-1)
        self.nl_after_func_class_proto_group.setVisible(filter=='' or 'nl_after_func_class_proto_group'.find(filter)!=-1)
        self.labelnl_class_leave_one_liner_groups.setVisible(filter=='' or 'nl_class_leave_one_liner_groups'.find(filter)!=-1)
        if self.tr("code_nl_class_leave_one_liner_groups")!="code_nl_class_leave_one_liner_groups":
            self.codenl_class_leave_one_liner_groups.setVisible(filter=='' or 'nl_class_leave_one_liner_groups'.find(filter)!=-1)
        self.namenl_class_leave_one_liner_groups.setVisible(filter=='' or 'nl_class_leave_one_liner_groups'.find(filter)!=-1)
        self.nl_class_leave_one_liner_groups.setVisible(filter=='' or 'nl_class_leave_one_liner_groups'.find(filter)!=-1)
        self.labelnl_after_func_body.setVisible(filter=='' or 'nl_after_func_body'.find(filter)!=-1)
        if self.tr("code_nl_after_func_body")!="code_nl_after_func_body":
            self.codenl_after_func_body.setVisible(filter=='' or 'nl_after_func_body'.find(filter)!=-1)
        self.namenl_after_func_body.setVisible(filter=='' or 'nl_after_func_body'.find(filter)!=-1)
        self.nl_after_func_body.setVisible(filter=='' or 'nl_after_func_body'.find(filter)!=-1)
        self.labelnl_after_func_body_class.setVisible(filter=='' or 'nl_after_func_body_class'.find(filter)!=-1)
        if self.tr("code_nl_after_func_body_class")!="code_nl_after_func_body_class":
            self.codenl_after_func_body_class.setVisible(filter=='' or 'nl_after_func_body_class'.find(filter)!=-1)
        self.namenl_after_func_body_class.setVisible(filter=='' or 'nl_after_func_body_class'.find(filter)!=-1)
        self.nl_after_func_body_class.setVisible(filter=='' or 'nl_after_func_body_class'.find(filter)!=-1)
        self.labelnl_after_func_body_one_liner.setVisible(filter=='' or 'nl_after_func_body_one_liner'.find(filter)!=-1)
        if self.tr("code_nl_after_func_body_one_liner")!="code_nl_after_func_body_one_liner":
            self.codenl_after_func_body_one_liner.setVisible(filter=='' or 'nl_after_func_body_one_liner'.find(filter)!=-1)
        self.namenl_after_func_body_one_liner.setVisible(filter=='' or 'nl_after_func_body_one_liner'.find(filter)!=-1)
        self.nl_after_func_body_one_liner.setVisible(filter=='' or 'nl_after_func_body_one_liner'.find(filter)!=-1)
        self.labelnl_func_var_def_blk.setVisible(filter=='' or 'nl_func_var_def_blk'.find(filter)!=-1)
        if self.tr("code_nl_func_var_def_blk")!="code_nl_func_var_def_blk":
            self.codenl_func_var_def_blk.setVisible(filter=='' or 'nl_func_var_def_blk'.find(filter)!=-1)
        self.namenl_func_var_def_blk.setVisible(filter=='' or 'nl_func_var_def_blk'.find(filter)!=-1)
        self.nl_func_var_def_blk.setVisible(filter=='' or 'nl_func_var_def_blk'.find(filter)!=-1)
        self.labelnl_typedef_blk_start.setVisible(filter=='' or 'nl_typedef_blk_start'.find(filter)!=-1)
        if self.tr("code_nl_typedef_blk_start")!="code_nl_typedef_blk_start":
            self.codenl_typedef_blk_start.setVisible(filter=='' or 'nl_typedef_blk_start'.find(filter)!=-1)
        self.namenl_typedef_blk_start.setVisible(filter=='' or 'nl_typedef_blk_start'.find(filter)!=-1)
        self.nl_typedef_blk_start.setVisible(filter=='' or 'nl_typedef_blk_start'.find(filter)!=-1)
        self.labelnl_typedef_blk_end.setVisible(filter=='' or 'nl_typedef_blk_end'.find(filter)!=-1)
        if self.tr("code_nl_typedef_blk_end")!="code_nl_typedef_blk_end":
            self.codenl_typedef_blk_end.setVisible(filter=='' or 'nl_typedef_blk_end'.find(filter)!=-1)
        self.namenl_typedef_blk_end.setVisible(filter=='' or 'nl_typedef_blk_end'.find(filter)!=-1)
        self.nl_typedef_blk_end.setVisible(filter=='' or 'nl_typedef_blk_end'.find(filter)!=-1)
        self.labelnl_typedef_blk_in.setVisible(filter=='' or 'nl_typedef_blk_in'.find(filter)!=-1)
        if self.tr("code_nl_typedef_blk_in")!="code_nl_typedef_blk_in":
            self.codenl_typedef_blk_in.setVisible(filter=='' or 'nl_typedef_blk_in'.find(filter)!=-1)
        self.namenl_typedef_blk_in.setVisible(filter=='' or 'nl_typedef_blk_in'.find(filter)!=-1)
        self.nl_typedef_blk_in.setVisible(filter=='' or 'nl_typedef_blk_in'.find(filter)!=-1)
        self.labelnl_var_def_blk_start.setVisible(filter=='' or 'nl_var_def_blk_start'.find(filter)!=-1)
        if self.tr("code_nl_var_def_blk_start")!="code_nl_var_def_blk_start":
            self.codenl_var_def_blk_start.setVisible(filter=='' or 'nl_var_def_blk_start'.find(filter)!=-1)
        self.namenl_var_def_blk_start.setVisible(filter=='' or 'nl_var_def_blk_start'.find(filter)!=-1)
        self.nl_var_def_blk_start.setVisible(filter=='' or 'nl_var_def_blk_start'.find(filter)!=-1)
        self.labelnl_var_def_blk_end.setVisible(filter=='' or 'nl_var_def_blk_end'.find(filter)!=-1)
        if self.tr("code_nl_var_def_blk_end")!="code_nl_var_def_blk_end":
            self.codenl_var_def_blk_end.setVisible(filter=='' or 'nl_var_def_blk_end'.find(filter)!=-1)
        self.namenl_var_def_blk_end.setVisible(filter=='' or 'nl_var_def_blk_end'.find(filter)!=-1)
        self.nl_var_def_blk_end.setVisible(filter=='' or 'nl_var_def_blk_end'.find(filter)!=-1)
        self.labelnl_var_def_blk_in.setVisible(filter=='' or 'nl_var_def_blk_in'.find(filter)!=-1)
        if self.tr("code_nl_var_def_blk_in")!="code_nl_var_def_blk_in":
            self.codenl_var_def_blk_in.setVisible(filter=='' or 'nl_var_def_blk_in'.find(filter)!=-1)
        self.namenl_var_def_blk_in.setVisible(filter=='' or 'nl_var_def_blk_in'.find(filter)!=-1)
        self.nl_var_def_blk_in.setVisible(filter=='' or 'nl_var_def_blk_in'.find(filter)!=-1)
        self.labelnl_before_block_comment.setVisible(filter=='' or 'nl_before_block_comment'.find(filter)!=-1)
        if self.tr("code_nl_before_block_comment")!="code_nl_before_block_comment":
            self.codenl_before_block_comment.setVisible(filter=='' or 'nl_before_block_comment'.find(filter)!=-1)
        self.namenl_before_block_comment.setVisible(filter=='' or 'nl_before_block_comment'.find(filter)!=-1)
        self.nl_before_block_comment.setVisible(filter=='' or 'nl_before_block_comment'.find(filter)!=-1)
        self.labelnl_before_c_comment.setVisible(filter=='' or 'nl_before_c_comment'.find(filter)!=-1)
        if self.tr("code_nl_before_c_comment")!="code_nl_before_c_comment":
            self.codenl_before_c_comment.setVisible(filter=='' or 'nl_before_c_comment'.find(filter)!=-1)
        self.namenl_before_c_comment.setVisible(filter=='' or 'nl_before_c_comment'.find(filter)!=-1)
        self.nl_before_c_comment.setVisible(filter=='' or 'nl_before_c_comment'.find(filter)!=-1)
        self.labelnl_before_cpp_comment.setVisible(filter=='' or 'nl_before_cpp_comment'.find(filter)!=-1)
        if self.tr("code_nl_before_cpp_comment")!="code_nl_before_cpp_comment":
            self.codenl_before_cpp_comment.setVisible(filter=='' or 'nl_before_cpp_comment'.find(filter)!=-1)
        self.namenl_before_cpp_comment.setVisible(filter=='' or 'nl_before_cpp_comment'.find(filter)!=-1)
        self.nl_before_cpp_comment.setVisible(filter=='' or 'nl_before_cpp_comment'.find(filter)!=-1)
        self.labelnl_after_multiline_comment.setVisible(filter=='' or 'nl_after_multiline_comment'.find(filter)!=-1)
        if self.tr("code_nl_after_multiline_comment")!="code_nl_after_multiline_comment":
            self.codenl_after_multiline_comment.setVisible(filter=='' or 'nl_after_multiline_comment'.find(filter)!=-1)
        self.namenl_after_multiline_comment.setVisible(filter=='' or 'nl_after_multiline_comment'.find(filter)!=-1)
        self.nl_after_multiline_comment.setVisible(filter=='' or 'nl_after_multiline_comment'.find(filter)!=-1)
        self.labelnl_after_label_colon.setVisible(filter=='' or 'nl_after_label_colon'.find(filter)!=-1)
        if self.tr("code_nl_after_label_colon")!="code_nl_after_label_colon":
            self.codenl_after_label_colon.setVisible(filter=='' or 'nl_after_label_colon'.find(filter)!=-1)
        self.namenl_after_label_colon.setVisible(filter=='' or 'nl_after_label_colon'.find(filter)!=-1)
        self.nl_after_label_colon.setVisible(filter=='' or 'nl_after_label_colon'.find(filter)!=-1)
        self.labelnl_after_struct.setVisible(filter=='' or 'nl_after_struct'.find(filter)!=-1)
        if self.tr("code_nl_after_struct")!="code_nl_after_struct":
            self.codenl_after_struct.setVisible(filter=='' or 'nl_after_struct'.find(filter)!=-1)
        self.namenl_after_struct.setVisible(filter=='' or 'nl_after_struct'.find(filter)!=-1)
        self.nl_after_struct.setVisible(filter=='' or 'nl_after_struct'.find(filter)!=-1)
        self.labelnl_before_class.setVisible(filter=='' or 'nl_before_class'.find(filter)!=-1)
        if self.tr("code_nl_before_class")!="code_nl_before_class":
            self.codenl_before_class.setVisible(filter=='' or 'nl_before_class'.find(filter)!=-1)
        self.namenl_before_class.setVisible(filter=='' or 'nl_before_class'.find(filter)!=-1)
        self.nl_before_class.setVisible(filter=='' or 'nl_before_class'.find(filter)!=-1)
        self.labelnl_after_class.setVisible(filter=='' or 'nl_after_class'.find(filter)!=-1)
        if self.tr("code_nl_after_class")!="code_nl_after_class":
            self.codenl_after_class.setVisible(filter=='' or 'nl_after_class'.find(filter)!=-1)
        self.namenl_after_class.setVisible(filter=='' or 'nl_after_class'.find(filter)!=-1)
        self.nl_after_class.setVisible(filter=='' or 'nl_after_class'.find(filter)!=-1)
        self.labelnl_before_namespace.setVisible(filter=='' or 'nl_before_namespace'.find(filter)!=-1)
        if self.tr("code_nl_before_namespace")!="code_nl_before_namespace":
            self.codenl_before_namespace.setVisible(filter=='' or 'nl_before_namespace'.find(filter)!=-1)
        self.namenl_before_namespace.setVisible(filter=='' or 'nl_before_namespace'.find(filter)!=-1)
        self.nl_before_namespace.setVisible(filter=='' or 'nl_before_namespace'.find(filter)!=-1)
        self.labelnl_inside_namespace.setVisible(filter=='' or 'nl_inside_namespace'.find(filter)!=-1)
        if self.tr("code_nl_inside_namespace")!="code_nl_inside_namespace":
            self.codenl_inside_namespace.setVisible(filter=='' or 'nl_inside_namespace'.find(filter)!=-1)
        self.namenl_inside_namespace.setVisible(filter=='' or 'nl_inside_namespace'.find(filter)!=-1)
        self.nl_inside_namespace.setVisible(filter=='' or 'nl_inside_namespace'.find(filter)!=-1)
        self.labelnl_after_namespace.setVisible(filter=='' or 'nl_after_namespace'.find(filter)!=-1)
        if self.tr("code_nl_after_namespace")!="code_nl_after_namespace":
            self.codenl_after_namespace.setVisible(filter=='' or 'nl_after_namespace'.find(filter)!=-1)
        self.namenl_after_namespace.setVisible(filter=='' or 'nl_after_namespace'.find(filter)!=-1)
        self.nl_after_namespace.setVisible(filter=='' or 'nl_after_namespace'.find(filter)!=-1)
        self.labelnl_before_access_spec.setVisible(filter=='' or 'nl_before_access_spec'.find(filter)!=-1)
        if self.tr("code_nl_before_access_spec")!="code_nl_before_access_spec":
            self.codenl_before_access_spec.setVisible(filter=='' or 'nl_before_access_spec'.find(filter)!=-1)
        self.namenl_before_access_spec.setVisible(filter=='' or 'nl_before_access_spec'.find(filter)!=-1)
        self.nl_before_access_spec.setVisible(filter=='' or 'nl_before_access_spec'.find(filter)!=-1)
        self.labelnl_after_access_spec.setVisible(filter=='' or 'nl_after_access_spec'.find(filter)!=-1)
        if self.tr("code_nl_after_access_spec")!="code_nl_after_access_spec":
            self.codenl_after_access_spec.setVisible(filter=='' or 'nl_after_access_spec'.find(filter)!=-1)
        self.namenl_after_access_spec.setVisible(filter=='' or 'nl_after_access_spec'.find(filter)!=-1)
        self.nl_after_access_spec.setVisible(filter=='' or 'nl_after_access_spec'.find(filter)!=-1)
        self.labelnl_comment_func_def.setVisible(filter=='' or 'nl_comment_func_def'.find(filter)!=-1)
        if self.tr("code_nl_comment_func_def")!="code_nl_comment_func_def":
            self.codenl_comment_func_def.setVisible(filter=='' or 'nl_comment_func_def'.find(filter)!=-1)
        self.namenl_comment_func_def.setVisible(filter=='' or 'nl_comment_func_def'.find(filter)!=-1)
        self.nl_comment_func_def.setVisible(filter=='' or 'nl_comment_func_def'.find(filter)!=-1)
        self.labelnl_after_try_catch_finally.setVisible(filter=='' or 'nl_after_try_catch_finally'.find(filter)!=-1)
        if self.tr("code_nl_after_try_catch_finally")!="code_nl_after_try_catch_finally":
            self.codenl_after_try_catch_finally.setVisible(filter=='' or 'nl_after_try_catch_finally'.find(filter)!=-1)
        self.namenl_after_try_catch_finally.setVisible(filter=='' or 'nl_after_try_catch_finally'.find(filter)!=-1)
        self.nl_after_try_catch_finally.setVisible(filter=='' or 'nl_after_try_catch_finally'.find(filter)!=-1)
        self.labelnl_around_cs_property.setVisible(filter=='' or 'nl_around_cs_property'.find(filter)!=-1)
        if self.tr("code_nl_around_cs_property")!="code_nl_around_cs_property":
            self.codenl_around_cs_property.setVisible(filter=='' or 'nl_around_cs_property'.find(filter)!=-1)
        self.namenl_around_cs_property.setVisible(filter=='' or 'nl_around_cs_property'.find(filter)!=-1)
        self.nl_around_cs_property.setVisible(filter=='' or 'nl_around_cs_property'.find(filter)!=-1)
        self.labelnl_between_get_set.setVisible(filter=='' or 'nl_between_get_set'.find(filter)!=-1)
        if self.tr("code_nl_between_get_set")!="code_nl_between_get_set":
            self.codenl_between_get_set.setVisible(filter=='' or 'nl_between_get_set'.find(filter)!=-1)
        self.namenl_between_get_set.setVisible(filter=='' or 'nl_between_get_set'.find(filter)!=-1)
        self.nl_between_get_set.setVisible(filter=='' or 'nl_between_get_set'.find(filter)!=-1)
        self.labelnl_property_brace.setVisible(filter=='' or 'nl_property_brace'.find(filter)!=-1)
        if self.tr("code_nl_property_brace")!="code_nl_property_brace":
            self.codenl_property_brace.setVisible(filter=='' or 'nl_property_brace'.find(filter)!=-1)
        self.namenl_property_brace.setVisible(filter=='' or 'nl_property_brace'.find(filter)!=-1)
        self.nl_property_brace.setVisible(filter=='' or 'nl_property_brace'.find(filter)!=-1)
        self.labeleat_blanks_after_open_brace.setVisible(filter=='' or 'eat_blanks_after_open_brace'.find(filter)!=-1)
        if self.tr("code_eat_blanks_after_open_brace")!="code_eat_blanks_after_open_brace":
            self.codeeat_blanks_after_open_brace.setVisible(filter=='' or 'eat_blanks_after_open_brace'.find(filter)!=-1)
        self.nameeat_blanks_after_open_brace.setVisible(filter=='' or 'eat_blanks_after_open_brace'.find(filter)!=-1)
        self.eat_blanks_after_open_brace.setVisible(filter=='' or 'eat_blanks_after_open_brace'.find(filter)!=-1)
        self.labeleat_blanks_before_close_brace.setVisible(filter=='' or 'eat_blanks_before_close_brace'.find(filter)!=-1)
        if self.tr("code_eat_blanks_before_close_brace")!="code_eat_blanks_before_close_brace":
            self.codeeat_blanks_before_close_brace.setVisible(filter=='' or 'eat_blanks_before_close_brace'.find(filter)!=-1)
        self.nameeat_blanks_before_close_brace.setVisible(filter=='' or 'eat_blanks_before_close_brace'.find(filter)!=-1)
        self.eat_blanks_before_close_brace.setVisible(filter=='' or 'eat_blanks_before_close_brace'.find(filter)!=-1)
        self.labelnl_remove_extra_newlines.setVisible(filter=='' or 'nl_remove_extra_newlines'.find(filter)!=-1)
        if self.tr("code_nl_remove_extra_newlines")!="code_nl_remove_extra_newlines":
            self.codenl_remove_extra_newlines.setVisible(filter=='' or 'nl_remove_extra_newlines'.find(filter)!=-1)
        self.namenl_remove_extra_newlines.setVisible(filter=='' or 'nl_remove_extra_newlines'.find(filter)!=-1)
        self.nl_remove_extra_newlines.setVisible(filter=='' or 'nl_remove_extra_newlines'.find(filter)!=-1)
        self.labelnl_after_annotation.setVisible(filter=='' or 'nl_after_annotation'.find(filter)!=-1)
        if self.tr("code_nl_after_annotation")!="code_nl_after_annotation":
            self.codenl_after_annotation.setVisible(filter=='' or 'nl_after_annotation'.find(filter)!=-1)
        self.namenl_after_annotation.setVisible(filter=='' or 'nl_after_annotation'.find(filter)!=-1)
        self.nl_after_annotation.setVisible(filter=='' or 'nl_after_annotation'.find(filter)!=-1)
        self.labelnl_between_annotation.setVisible(filter=='' or 'nl_between_annotation'.find(filter)!=-1)
        if self.tr("code_nl_between_annotation")!="code_nl_between_annotation":
            self.codenl_between_annotation.setVisible(filter=='' or 'nl_between_annotation'.find(filter)!=-1)
        self.namenl_between_annotation.setVisible(filter=='' or 'nl_between_annotation'.find(filter)!=-1)
        self.nl_between_annotation.setVisible(filter=='' or 'nl_between_annotation'.find(filter)!=-1)
        self.labelnl_before_whole_file_ifdef.setVisible(filter=='' or 'nl_before_whole_file_ifdef'.find(filter)!=-1)
        if self.tr("code_nl_before_whole_file_ifdef")!="code_nl_before_whole_file_ifdef":
            self.codenl_before_whole_file_ifdef.setVisible(filter=='' or 'nl_before_whole_file_ifdef'.find(filter)!=-1)
        self.namenl_before_whole_file_ifdef.setVisible(filter=='' or 'nl_before_whole_file_ifdef'.find(filter)!=-1)
        self.nl_before_whole_file_ifdef.setVisible(filter=='' or 'nl_before_whole_file_ifdef'.find(filter)!=-1)
        self.labelnl_after_whole_file_ifdef.setVisible(filter=='' or 'nl_after_whole_file_ifdef'.find(filter)!=-1)
        if self.tr("code_nl_after_whole_file_ifdef")!="code_nl_after_whole_file_ifdef":
            self.codenl_after_whole_file_ifdef.setVisible(filter=='' or 'nl_after_whole_file_ifdef'.find(filter)!=-1)
        self.namenl_after_whole_file_ifdef.setVisible(filter=='' or 'nl_after_whole_file_ifdef'.find(filter)!=-1)
        self.nl_after_whole_file_ifdef.setVisible(filter=='' or 'nl_after_whole_file_ifdef'.find(filter)!=-1)
        self.labelnl_before_whole_file_endif.setVisible(filter=='' or 'nl_before_whole_file_endif'.find(filter)!=-1)
        if self.tr("code_nl_before_whole_file_endif")!="code_nl_before_whole_file_endif":
            self.codenl_before_whole_file_endif.setVisible(filter=='' or 'nl_before_whole_file_endif'.find(filter)!=-1)
        self.namenl_before_whole_file_endif.setVisible(filter=='' or 'nl_before_whole_file_endif'.find(filter)!=-1)
        self.nl_before_whole_file_endif.setVisible(filter=='' or 'nl_before_whole_file_endif'.find(filter)!=-1)
        self.labelnl_after_whole_file_endif.setVisible(filter=='' or 'nl_after_whole_file_endif'.find(filter)!=-1)
        if self.tr("code_nl_after_whole_file_endif")!="code_nl_after_whole_file_endif":
            self.codenl_after_whole_file_endif.setVisible(filter=='' or 'nl_after_whole_file_endif'.find(filter)!=-1)
        self.namenl_after_whole_file_endif.setVisible(filter=='' or 'nl_after_whole_file_endif'.find(filter)!=-1)
        self.nl_after_whole_file_endif.setVisible(filter=='' or 'nl_after_whole_file_endif'.find(filter)!=-1)
        self.labelpos_arith.setVisible(filter=='' or 'pos_arith'.find(filter)!=-1)
        if self.tr("code_pos_arith")!="code_pos_arith":
            self.codepos_arith.setVisible(filter=='' or 'pos_arith'.find(filter)!=-1)
        self.namepos_arith.setVisible(filter=='' or 'pos_arith'.find(filter)!=-1)
        self.pos_arith.setVisible(filter=='' or 'pos_arith'.find(filter)!=-1)
        self.labelpos_assign.setVisible(filter=='' or 'pos_assign'.find(filter)!=-1)
        if self.tr("code_pos_assign")!="code_pos_assign":
            self.codepos_assign.setVisible(filter=='' or 'pos_assign'.find(filter)!=-1)
        self.namepos_assign.setVisible(filter=='' or 'pos_assign'.find(filter)!=-1)
        self.pos_assign.setVisible(filter=='' or 'pos_assign'.find(filter)!=-1)
        self.labelpos_bool.setVisible(filter=='' or 'pos_bool'.find(filter)!=-1)
        if self.tr("code_pos_bool")!="code_pos_bool":
            self.codepos_bool.setVisible(filter=='' or 'pos_bool'.find(filter)!=-1)
        self.namepos_bool.setVisible(filter=='' or 'pos_bool'.find(filter)!=-1)
        self.pos_bool.setVisible(filter=='' or 'pos_bool'.find(filter)!=-1)
        self.labelpos_compare.setVisible(filter=='' or 'pos_compare'.find(filter)!=-1)
        if self.tr("code_pos_compare")!="code_pos_compare":
            self.codepos_compare.setVisible(filter=='' or 'pos_compare'.find(filter)!=-1)
        self.namepos_compare.setVisible(filter=='' or 'pos_compare'.find(filter)!=-1)
        self.pos_compare.setVisible(filter=='' or 'pos_compare'.find(filter)!=-1)
        self.labelpos_conditional.setVisible(filter=='' or 'pos_conditional'.find(filter)!=-1)
        if self.tr("code_pos_conditional")!="code_pos_conditional":
            self.codepos_conditional.setVisible(filter=='' or 'pos_conditional'.find(filter)!=-1)
        self.namepos_conditional.setVisible(filter=='' or 'pos_conditional'.find(filter)!=-1)
        self.pos_conditional.setVisible(filter=='' or 'pos_conditional'.find(filter)!=-1)
        self.labelpos_comma.setVisible(filter=='' or 'pos_comma'.find(filter)!=-1)
        if self.tr("code_pos_comma")!="code_pos_comma":
            self.codepos_comma.setVisible(filter=='' or 'pos_comma'.find(filter)!=-1)
        self.namepos_comma.setVisible(filter=='' or 'pos_comma'.find(filter)!=-1)
        self.pos_comma.setVisible(filter=='' or 'pos_comma'.find(filter)!=-1)
        self.labelpos_enum_comma.setVisible(filter=='' or 'pos_enum_comma'.find(filter)!=-1)
        if self.tr("code_pos_enum_comma")!="code_pos_enum_comma":
            self.codepos_enum_comma.setVisible(filter=='' or 'pos_enum_comma'.find(filter)!=-1)
        self.namepos_enum_comma.setVisible(filter=='' or 'pos_enum_comma'.find(filter)!=-1)
        self.pos_enum_comma.setVisible(filter=='' or 'pos_enum_comma'.find(filter)!=-1)
        self.labelpos_class_comma.setVisible(filter=='' or 'pos_class_comma'.find(filter)!=-1)
        if self.tr("code_pos_class_comma")!="code_pos_class_comma":
            self.codepos_class_comma.setVisible(filter=='' or 'pos_class_comma'.find(filter)!=-1)
        self.namepos_class_comma.setVisible(filter=='' or 'pos_class_comma'.find(filter)!=-1)
        self.pos_class_comma.setVisible(filter=='' or 'pos_class_comma'.find(filter)!=-1)
        self.labelpos_constr_comma.setVisible(filter=='' or 'pos_constr_comma'.find(filter)!=-1)
        if self.tr("code_pos_constr_comma")!="code_pos_constr_comma":
            self.codepos_constr_comma.setVisible(filter=='' or 'pos_constr_comma'.find(filter)!=-1)
        self.namepos_constr_comma.setVisible(filter=='' or 'pos_constr_comma'.find(filter)!=-1)
        self.pos_constr_comma.setVisible(filter=='' or 'pos_constr_comma'.find(filter)!=-1)
        self.labelpos_class_colon.setVisible(filter=='' or 'pos_class_colon'.find(filter)!=-1)
        if self.tr("code_pos_class_colon")!="code_pos_class_colon":
            self.codepos_class_colon.setVisible(filter=='' or 'pos_class_colon'.find(filter)!=-1)
        self.namepos_class_colon.setVisible(filter=='' or 'pos_class_colon'.find(filter)!=-1)
        self.pos_class_colon.setVisible(filter=='' or 'pos_class_colon'.find(filter)!=-1)
        self.labelpos_constr_colon.setVisible(filter=='' or 'pos_constr_colon'.find(filter)!=-1)
        if self.tr("code_pos_constr_colon")!="code_pos_constr_colon":
            self.codepos_constr_colon.setVisible(filter=='' or 'pos_constr_colon'.find(filter)!=-1)
        self.namepos_constr_colon.setVisible(filter=='' or 'pos_constr_colon'.find(filter)!=-1)
        self.pos_constr_colon.setVisible(filter=='' or 'pos_constr_colon'.find(filter)!=-1)
        self.labelcode_width.setVisible(filter=='' or 'code_width'.find(filter)!=-1)
        if self.tr("code_code_width")!="code_code_width":
            self.codecode_width.setVisible(filter=='' or 'code_width'.find(filter)!=-1)
        self.namecode_width.setVisible(filter=='' or 'code_width'.find(filter)!=-1)
        self.code_width.setVisible(filter=='' or 'code_width'.find(filter)!=-1)
        self.labells_for_split_full.setVisible(filter=='' or 'ls_for_split_full'.find(filter)!=-1)
        if self.tr("code_ls_for_split_full")!="code_ls_for_split_full":
            self.codels_for_split_full.setVisible(filter=='' or 'ls_for_split_full'.find(filter)!=-1)
        self.namels_for_split_full.setVisible(filter=='' or 'ls_for_split_full'.find(filter)!=-1)
        self.ls_for_split_full.setVisible(filter=='' or 'ls_for_split_full'.find(filter)!=-1)
        self.labells_func_split_full.setVisible(filter=='' or 'ls_func_split_full'.find(filter)!=-1)
        if self.tr("code_ls_func_split_full")!="code_ls_func_split_full":
            self.codels_func_split_full.setVisible(filter=='' or 'ls_func_split_full'.find(filter)!=-1)
        self.namels_func_split_full.setVisible(filter=='' or 'ls_func_split_full'.find(filter)!=-1)
        self.ls_func_split_full.setVisible(filter=='' or 'ls_func_split_full'.find(filter)!=-1)
        self.labells_code_width.setVisible(filter=='' or 'ls_code_width'.find(filter)!=-1)
        if self.tr("code_ls_code_width")!="code_ls_code_width":
            self.codels_code_width.setVisible(filter=='' or 'ls_code_width'.find(filter)!=-1)
        self.namels_code_width.setVisible(filter=='' or 'ls_code_width'.find(filter)!=-1)
        self.ls_code_width.setVisible(filter=='' or 'ls_code_width'.find(filter)!=-1)
        self.labelalign_keep_tabs.setVisible(filter=='' or 'align_keep_tabs'.find(filter)!=-1)
        if self.tr("code_align_keep_tabs")!="code_align_keep_tabs":
            self.codealign_keep_tabs.setVisible(filter=='' or 'align_keep_tabs'.find(filter)!=-1)
        self.namealign_keep_tabs.setVisible(filter=='' or 'align_keep_tabs'.find(filter)!=-1)
        self.align_keep_tabs.setVisible(filter=='' or 'align_keep_tabs'.find(filter)!=-1)
        self.labelalign_with_tabs.setVisible(filter=='' or 'align_with_tabs'.find(filter)!=-1)
        if self.tr("code_align_with_tabs")!="code_align_with_tabs":
            self.codealign_with_tabs.setVisible(filter=='' or 'align_with_tabs'.find(filter)!=-1)
        self.namealign_with_tabs.setVisible(filter=='' or 'align_with_tabs'.find(filter)!=-1)
        self.align_with_tabs.setVisible(filter=='' or 'align_with_tabs'.find(filter)!=-1)
        self.labelalign_on_tabstop.setVisible(filter=='' or 'align_on_tabstop'.find(filter)!=-1)
        if self.tr("code_align_on_tabstop")!="code_align_on_tabstop":
            self.codealign_on_tabstop.setVisible(filter=='' or 'align_on_tabstop'.find(filter)!=-1)
        self.namealign_on_tabstop.setVisible(filter=='' or 'align_on_tabstop'.find(filter)!=-1)
        self.align_on_tabstop.setVisible(filter=='' or 'align_on_tabstop'.find(filter)!=-1)
        self.labelalign_number_right.setVisible(filter=='' or 'align_number_right'.find(filter)!=-1)
        if self.tr("code_align_number_right")!="code_align_number_right":
            self.codealign_number_right.setVisible(filter=='' or 'align_number_right'.find(filter)!=-1)
        self.namealign_number_right.setVisible(filter=='' or 'align_number_right'.find(filter)!=-1)
        self.align_number_right.setVisible(filter=='' or 'align_number_right'.find(filter)!=-1)
        self.labelalign_keep_extra_space.setVisible(filter=='' or 'align_keep_extra_space'.find(filter)!=-1)
        if self.tr("code_align_keep_extra_space")!="code_align_keep_extra_space":
            self.codealign_keep_extra_space.setVisible(filter=='' or 'align_keep_extra_space'.find(filter)!=-1)
        self.namealign_keep_extra_space.setVisible(filter=='' or 'align_keep_extra_space'.find(filter)!=-1)
        self.align_keep_extra_space.setVisible(filter=='' or 'align_keep_extra_space'.find(filter)!=-1)
        self.labelalign_func_params.setVisible(filter=='' or 'align_func_params'.find(filter)!=-1)
        if self.tr("code_align_func_params")!="code_align_func_params":
            self.codealign_func_params.setVisible(filter=='' or 'align_func_params'.find(filter)!=-1)
        self.namealign_func_params.setVisible(filter=='' or 'align_func_params'.find(filter)!=-1)
        self.align_func_params.setVisible(filter=='' or 'align_func_params'.find(filter)!=-1)
        self.labelalign_func_params_span.setVisible(filter=='' or 'align_func_params_span'.find(filter)!=-1)
        if self.tr("code_align_func_params_span")!="code_align_func_params_span":
            self.codealign_func_params_span.setVisible(filter=='' or 'align_func_params_span'.find(filter)!=-1)
        self.namealign_func_params_span.setVisible(filter=='' or 'align_func_params_span'.find(filter)!=-1)
        self.align_func_params_span.setVisible(filter=='' or 'align_func_params_span'.find(filter)!=-1)
        self.labelalign_func_params_thresh.setVisible(filter=='' or 'align_func_params_thresh'.find(filter)!=-1)
        if self.tr("code_align_func_params_thresh")!="code_align_func_params_thresh":
            self.codealign_func_params_thresh.setVisible(filter=='' or 'align_func_params_thresh'.find(filter)!=-1)
        self.namealign_func_params_thresh.setVisible(filter=='' or 'align_func_params_thresh'.find(filter)!=-1)
        self.align_func_params_thresh.setVisible(filter=='' or 'align_func_params_thresh'.find(filter)!=-1)
        self.labelalign_func_params_gap.setVisible(filter=='' or 'align_func_params_gap'.find(filter)!=-1)
        if self.tr("code_align_func_params_gap")!="code_align_func_params_gap":
            self.codealign_func_params_gap.setVisible(filter=='' or 'align_func_params_gap'.find(filter)!=-1)
        self.namealign_func_params_gap.setVisible(filter=='' or 'align_func_params_gap'.find(filter)!=-1)
        self.align_func_params_gap.setVisible(filter=='' or 'align_func_params_gap'.find(filter)!=-1)
        self.labelalign_constr_value_span.setVisible(filter=='' or 'align_constr_value_span'.find(filter)!=-1)
        if self.tr("code_align_constr_value_span")!="code_align_constr_value_span":
            self.codealign_constr_value_span.setVisible(filter=='' or 'align_constr_value_span'.find(filter)!=-1)
        self.namealign_constr_value_span.setVisible(filter=='' or 'align_constr_value_span'.find(filter)!=-1)
        self.align_constr_value_span.setVisible(filter=='' or 'align_constr_value_span'.find(filter)!=-1)
        self.labelalign_constr_value_thresh.setVisible(filter=='' or 'align_constr_value_thresh'.find(filter)!=-1)
        if self.tr("code_align_constr_value_thresh")!="code_align_constr_value_thresh":
            self.codealign_constr_value_thresh.setVisible(filter=='' or 'align_constr_value_thresh'.find(filter)!=-1)
        self.namealign_constr_value_thresh.setVisible(filter=='' or 'align_constr_value_thresh'.find(filter)!=-1)
        self.align_constr_value_thresh.setVisible(filter=='' or 'align_constr_value_thresh'.find(filter)!=-1)
        self.labelalign_constr_value_gap.setVisible(filter=='' or 'align_constr_value_gap'.find(filter)!=-1)
        if self.tr("code_align_constr_value_gap")!="code_align_constr_value_gap":
            self.codealign_constr_value_gap.setVisible(filter=='' or 'align_constr_value_gap'.find(filter)!=-1)
        self.namealign_constr_value_gap.setVisible(filter=='' or 'align_constr_value_gap'.find(filter)!=-1)
        self.align_constr_value_gap.setVisible(filter=='' or 'align_constr_value_gap'.find(filter)!=-1)
        self.labelalign_same_func_call_params.setVisible(filter=='' or 'align_same_func_call_params'.find(filter)!=-1)
        if self.tr("code_align_same_func_call_params")!="code_align_same_func_call_params":
            self.codealign_same_func_call_params.setVisible(filter=='' or 'align_same_func_call_params'.find(filter)!=-1)
        self.namealign_same_func_call_params.setVisible(filter=='' or 'align_same_func_call_params'.find(filter)!=-1)
        self.align_same_func_call_params.setVisible(filter=='' or 'align_same_func_call_params'.find(filter)!=-1)
        self.labelalign_same_func_call_params_span.setVisible(filter=='' or 'align_same_func_call_params_span'.find(filter)!=-1)
        if self.tr("code_align_same_func_call_params_span")!="code_align_same_func_call_params_span":
            self.codealign_same_func_call_params_span.setVisible(filter=='' or 'align_same_func_call_params_span'.find(filter)!=-1)
        self.namealign_same_func_call_params_span.setVisible(filter=='' or 'align_same_func_call_params_span'.find(filter)!=-1)
        self.align_same_func_call_params_span.setVisible(filter=='' or 'align_same_func_call_params_span'.find(filter)!=-1)
        self.labelalign_same_func_call_params_thresh.setVisible(filter=='' or 'align_same_func_call_params_thresh'.find(filter)!=-1)
        if self.tr("code_align_same_func_call_params_thresh")!="code_align_same_func_call_params_thresh":
            self.codealign_same_func_call_params_thresh.setVisible(filter=='' or 'align_same_func_call_params_thresh'.find(filter)!=-1)
        self.namealign_same_func_call_params_thresh.setVisible(filter=='' or 'align_same_func_call_params_thresh'.find(filter)!=-1)
        self.align_same_func_call_params_thresh.setVisible(filter=='' or 'align_same_func_call_params_thresh'.find(filter)!=-1)
        self.labelalign_var_def_span.setVisible(filter=='' or 'align_var_def_span'.find(filter)!=-1)
        if self.tr("code_align_var_def_span")!="code_align_var_def_span":
            self.codealign_var_def_span.setVisible(filter=='' or 'align_var_def_span'.find(filter)!=-1)
        self.namealign_var_def_span.setVisible(filter=='' or 'align_var_def_span'.find(filter)!=-1)
        self.align_var_def_span.setVisible(filter=='' or 'align_var_def_span'.find(filter)!=-1)
        self.labelalign_var_def_star_style.setVisible(filter=='' or 'align_var_def_star_style'.find(filter)!=-1)
        if self.tr("code_align_var_def_star_style")!="code_align_var_def_star_style":
            self.codealign_var_def_star_style.setVisible(filter=='' or 'align_var_def_star_style'.find(filter)!=-1)
        self.namealign_var_def_star_style.setVisible(filter=='' or 'align_var_def_star_style'.find(filter)!=-1)
        self.align_var_def_star_style.setVisible(filter=='' or 'align_var_def_star_style'.find(filter)!=-1)
        self.labelalign_var_def_amp_style.setVisible(filter=='' or 'align_var_def_amp_style'.find(filter)!=-1)
        if self.tr("code_align_var_def_amp_style")!="code_align_var_def_amp_style":
            self.codealign_var_def_amp_style.setVisible(filter=='' or 'align_var_def_amp_style'.find(filter)!=-1)
        self.namealign_var_def_amp_style.setVisible(filter=='' or 'align_var_def_amp_style'.find(filter)!=-1)
        self.align_var_def_amp_style.setVisible(filter=='' or 'align_var_def_amp_style'.find(filter)!=-1)
        self.labelalign_var_def_thresh.setVisible(filter=='' or 'align_var_def_thresh'.find(filter)!=-1)
        if self.tr("code_align_var_def_thresh")!="code_align_var_def_thresh":
            self.codealign_var_def_thresh.setVisible(filter=='' or 'align_var_def_thresh'.find(filter)!=-1)
        self.namealign_var_def_thresh.setVisible(filter=='' or 'align_var_def_thresh'.find(filter)!=-1)
        self.align_var_def_thresh.setVisible(filter=='' or 'align_var_def_thresh'.find(filter)!=-1)
        self.labelalign_var_def_gap.setVisible(filter=='' or 'align_var_def_gap'.find(filter)!=-1)
        if self.tr("code_align_var_def_gap")!="code_align_var_def_gap":
            self.codealign_var_def_gap.setVisible(filter=='' or 'align_var_def_gap'.find(filter)!=-1)
        self.namealign_var_def_gap.setVisible(filter=='' or 'align_var_def_gap'.find(filter)!=-1)
        self.align_var_def_gap.setVisible(filter=='' or 'align_var_def_gap'.find(filter)!=-1)
        self.labelalign_var_def_colon.setVisible(filter=='' or 'align_var_def_colon'.find(filter)!=-1)
        if self.tr("code_align_var_def_colon")!="code_align_var_def_colon":
            self.codealign_var_def_colon.setVisible(filter=='' or 'align_var_def_colon'.find(filter)!=-1)
        self.namealign_var_def_colon.setVisible(filter=='' or 'align_var_def_colon'.find(filter)!=-1)
        self.align_var_def_colon.setVisible(filter=='' or 'align_var_def_colon'.find(filter)!=-1)
        self.labelalign_var_def_colon_gap.setVisible(filter=='' or 'align_var_def_colon_gap'.find(filter)!=-1)
        if self.tr("code_align_var_def_colon_gap")!="code_align_var_def_colon_gap":
            self.codealign_var_def_colon_gap.setVisible(filter=='' or 'align_var_def_colon_gap'.find(filter)!=-1)
        self.namealign_var_def_colon_gap.setVisible(filter=='' or 'align_var_def_colon_gap'.find(filter)!=-1)
        self.align_var_def_colon_gap.setVisible(filter=='' or 'align_var_def_colon_gap'.find(filter)!=-1)
        self.labelalign_var_def_attribute.setVisible(filter=='' or 'align_var_def_attribute'.find(filter)!=-1)
        if self.tr("code_align_var_def_attribute")!="code_align_var_def_attribute":
            self.codealign_var_def_attribute.setVisible(filter=='' or 'align_var_def_attribute'.find(filter)!=-1)
        self.namealign_var_def_attribute.setVisible(filter=='' or 'align_var_def_attribute'.find(filter)!=-1)
        self.align_var_def_attribute.setVisible(filter=='' or 'align_var_def_attribute'.find(filter)!=-1)
        self.labelalign_var_def_inline.setVisible(filter=='' or 'align_var_def_inline'.find(filter)!=-1)
        if self.tr("code_align_var_def_inline")!="code_align_var_def_inline":
            self.codealign_var_def_inline.setVisible(filter=='' or 'align_var_def_inline'.find(filter)!=-1)
        self.namealign_var_def_inline.setVisible(filter=='' or 'align_var_def_inline'.find(filter)!=-1)
        self.align_var_def_inline.setVisible(filter=='' or 'align_var_def_inline'.find(filter)!=-1)
        self.labelalign_assign_span.setVisible(filter=='' or 'align_assign_span'.find(filter)!=-1)
        if self.tr("code_align_assign_span")!="code_align_assign_span":
            self.codealign_assign_span.setVisible(filter=='' or 'align_assign_span'.find(filter)!=-1)
        self.namealign_assign_span.setVisible(filter=='' or 'align_assign_span'.find(filter)!=-1)
        self.align_assign_span.setVisible(filter=='' or 'align_assign_span'.find(filter)!=-1)
        self.labelalign_assign_func_proto_span.setVisible(filter=='' or 'align_assign_func_proto_span'.find(filter)!=-1)
        if self.tr("code_align_assign_func_proto_span")!="code_align_assign_func_proto_span":
            self.codealign_assign_func_proto_span.setVisible(filter=='' or 'align_assign_func_proto_span'.find(filter)!=-1)
        self.namealign_assign_func_proto_span.setVisible(filter=='' or 'align_assign_func_proto_span'.find(filter)!=-1)
        self.align_assign_func_proto_span.setVisible(filter=='' or 'align_assign_func_proto_span'.find(filter)!=-1)
        self.labelalign_assign_thresh.setVisible(filter=='' or 'align_assign_thresh'.find(filter)!=-1)
        if self.tr("code_align_assign_thresh")!="code_align_assign_thresh":
            self.codealign_assign_thresh.setVisible(filter=='' or 'align_assign_thresh'.find(filter)!=-1)
        self.namealign_assign_thresh.setVisible(filter=='' or 'align_assign_thresh'.find(filter)!=-1)
        self.align_assign_thresh.setVisible(filter=='' or 'align_assign_thresh'.find(filter)!=-1)
        self.labelalign_assign_decl_func.setVisible(filter=='' or 'align_assign_decl_func'.find(filter)!=-1)
        if self.tr("code_align_assign_decl_func")!="code_align_assign_decl_func":
            self.codealign_assign_decl_func.setVisible(filter=='' or 'align_assign_decl_func'.find(filter)!=-1)
        self.namealign_assign_decl_func.setVisible(filter=='' or 'align_assign_decl_func'.find(filter)!=-1)
        self.align_assign_decl_func.setVisible(filter=='' or 'align_assign_decl_func'.find(filter)!=-1)
        self.labelalign_enum_equ_span.setVisible(filter=='' or 'align_enum_equ_span'.find(filter)!=-1)
        if self.tr("code_align_enum_equ_span")!="code_align_enum_equ_span":
            self.codealign_enum_equ_span.setVisible(filter=='' or 'align_enum_equ_span'.find(filter)!=-1)
        self.namealign_enum_equ_span.setVisible(filter=='' or 'align_enum_equ_span'.find(filter)!=-1)
        self.align_enum_equ_span.setVisible(filter=='' or 'align_enum_equ_span'.find(filter)!=-1)
        self.labelalign_enum_equ_thresh.setVisible(filter=='' or 'align_enum_equ_thresh'.find(filter)!=-1)
        if self.tr("code_align_enum_equ_thresh")!="code_align_enum_equ_thresh":
            self.codealign_enum_equ_thresh.setVisible(filter=='' or 'align_enum_equ_thresh'.find(filter)!=-1)
        self.namealign_enum_equ_thresh.setVisible(filter=='' or 'align_enum_equ_thresh'.find(filter)!=-1)
        self.align_enum_equ_thresh.setVisible(filter=='' or 'align_enum_equ_thresh'.find(filter)!=-1)
        self.labelalign_var_class_span.setVisible(filter=='' or 'align_var_class_span'.find(filter)!=-1)
        if self.tr("code_align_var_class_span")!="code_align_var_class_span":
            self.codealign_var_class_span.setVisible(filter=='' or 'align_var_class_span'.find(filter)!=-1)
        self.namealign_var_class_span.setVisible(filter=='' or 'align_var_class_span'.find(filter)!=-1)
        self.align_var_class_span.setVisible(filter=='' or 'align_var_class_span'.find(filter)!=-1)
        self.labelalign_var_class_thresh.setVisible(filter=='' or 'align_var_class_thresh'.find(filter)!=-1)
        if self.tr("code_align_var_class_thresh")!="code_align_var_class_thresh":
            self.codealign_var_class_thresh.setVisible(filter=='' or 'align_var_class_thresh'.find(filter)!=-1)
        self.namealign_var_class_thresh.setVisible(filter=='' or 'align_var_class_thresh'.find(filter)!=-1)
        self.align_var_class_thresh.setVisible(filter=='' or 'align_var_class_thresh'.find(filter)!=-1)
        self.labelalign_var_class_gap.setVisible(filter=='' or 'align_var_class_gap'.find(filter)!=-1)
        if self.tr("code_align_var_class_gap")!="code_align_var_class_gap":
            self.codealign_var_class_gap.setVisible(filter=='' or 'align_var_class_gap'.find(filter)!=-1)
        self.namealign_var_class_gap.setVisible(filter=='' or 'align_var_class_gap'.find(filter)!=-1)
        self.align_var_class_gap.setVisible(filter=='' or 'align_var_class_gap'.find(filter)!=-1)
        self.labelalign_var_struct_span.setVisible(filter=='' or 'align_var_struct_span'.find(filter)!=-1)
        if self.tr("code_align_var_struct_span")!="code_align_var_struct_span":
            self.codealign_var_struct_span.setVisible(filter=='' or 'align_var_struct_span'.find(filter)!=-1)
        self.namealign_var_struct_span.setVisible(filter=='' or 'align_var_struct_span'.find(filter)!=-1)
        self.align_var_struct_span.setVisible(filter=='' or 'align_var_struct_span'.find(filter)!=-1)
        self.labelalign_var_struct_thresh.setVisible(filter=='' or 'align_var_struct_thresh'.find(filter)!=-1)
        if self.tr("code_align_var_struct_thresh")!="code_align_var_struct_thresh":
            self.codealign_var_struct_thresh.setVisible(filter=='' or 'align_var_struct_thresh'.find(filter)!=-1)
        self.namealign_var_struct_thresh.setVisible(filter=='' or 'align_var_struct_thresh'.find(filter)!=-1)
        self.align_var_struct_thresh.setVisible(filter=='' or 'align_var_struct_thresh'.find(filter)!=-1)
        self.labelalign_var_struct_gap.setVisible(filter=='' or 'align_var_struct_gap'.find(filter)!=-1)
        if self.tr("code_align_var_struct_gap")!="code_align_var_struct_gap":
            self.codealign_var_struct_gap.setVisible(filter=='' or 'align_var_struct_gap'.find(filter)!=-1)
        self.namealign_var_struct_gap.setVisible(filter=='' or 'align_var_struct_gap'.find(filter)!=-1)
        self.align_var_struct_gap.setVisible(filter=='' or 'align_var_struct_gap'.find(filter)!=-1)
        self.labelalign_struct_init_span.setVisible(filter=='' or 'align_struct_init_span'.find(filter)!=-1)
        if self.tr("code_align_struct_init_span")!="code_align_struct_init_span":
            self.codealign_struct_init_span.setVisible(filter=='' or 'align_struct_init_span'.find(filter)!=-1)
        self.namealign_struct_init_span.setVisible(filter=='' or 'align_struct_init_span'.find(filter)!=-1)
        self.align_struct_init_span.setVisible(filter=='' or 'align_struct_init_span'.find(filter)!=-1)
        self.labelalign_typedef_span.setVisible(filter=='' or 'align_typedef_span'.find(filter)!=-1)
        if self.tr("code_align_typedef_span")!="code_align_typedef_span":
            self.codealign_typedef_span.setVisible(filter=='' or 'align_typedef_span'.find(filter)!=-1)
        self.namealign_typedef_span.setVisible(filter=='' or 'align_typedef_span'.find(filter)!=-1)
        self.align_typedef_span.setVisible(filter=='' or 'align_typedef_span'.find(filter)!=-1)
        self.labelalign_typedef_gap.setVisible(filter=='' or 'align_typedef_gap'.find(filter)!=-1)
        if self.tr("code_align_typedef_gap")!="code_align_typedef_gap":
            self.codealign_typedef_gap.setVisible(filter=='' or 'align_typedef_gap'.find(filter)!=-1)
        self.namealign_typedef_gap.setVisible(filter=='' or 'align_typedef_gap'.find(filter)!=-1)
        self.align_typedef_gap.setVisible(filter=='' or 'align_typedef_gap'.find(filter)!=-1)
        self.labelalign_typedef_func.setVisible(filter=='' or 'align_typedef_func'.find(filter)!=-1)
        if self.tr("code_align_typedef_func")!="code_align_typedef_func":
            self.codealign_typedef_func.setVisible(filter=='' or 'align_typedef_func'.find(filter)!=-1)
        self.namealign_typedef_func.setVisible(filter=='' or 'align_typedef_func'.find(filter)!=-1)
        self.align_typedef_func.setVisible(filter=='' or 'align_typedef_func'.find(filter)!=-1)
        self.labelalign_typedef_star_style.setVisible(filter=='' or 'align_typedef_star_style'.find(filter)!=-1)
        if self.tr("code_align_typedef_star_style")!="code_align_typedef_star_style":
            self.codealign_typedef_star_style.setVisible(filter=='' or 'align_typedef_star_style'.find(filter)!=-1)
        self.namealign_typedef_star_style.setVisible(filter=='' or 'align_typedef_star_style'.find(filter)!=-1)
        self.align_typedef_star_style.setVisible(filter=='' or 'align_typedef_star_style'.find(filter)!=-1)
        self.labelalign_typedef_amp_style.setVisible(filter=='' or 'align_typedef_amp_style'.find(filter)!=-1)
        if self.tr("code_align_typedef_amp_style")!="code_align_typedef_amp_style":
            self.codealign_typedef_amp_style.setVisible(filter=='' or 'align_typedef_amp_style'.find(filter)!=-1)
        self.namealign_typedef_amp_style.setVisible(filter=='' or 'align_typedef_amp_style'.find(filter)!=-1)
        self.align_typedef_amp_style.setVisible(filter=='' or 'align_typedef_amp_style'.find(filter)!=-1)
        self.labelalign_right_cmt_span.setVisible(filter=='' or 'align_right_cmt_span'.find(filter)!=-1)
        if self.tr("code_align_right_cmt_span")!="code_align_right_cmt_span":
            self.codealign_right_cmt_span.setVisible(filter=='' or 'align_right_cmt_span'.find(filter)!=-1)
        self.namealign_right_cmt_span.setVisible(filter=='' or 'align_right_cmt_span'.find(filter)!=-1)
        self.align_right_cmt_span.setVisible(filter=='' or 'align_right_cmt_span'.find(filter)!=-1)
        self.labelalign_right_cmt_gap.setVisible(filter=='' or 'align_right_cmt_gap'.find(filter)!=-1)
        if self.tr("code_align_right_cmt_gap")!="code_align_right_cmt_gap":
            self.codealign_right_cmt_gap.setVisible(filter=='' or 'align_right_cmt_gap'.find(filter)!=-1)
        self.namealign_right_cmt_gap.setVisible(filter=='' or 'align_right_cmt_gap'.find(filter)!=-1)
        self.align_right_cmt_gap.setVisible(filter=='' or 'align_right_cmt_gap'.find(filter)!=-1)
        self.labelalign_right_cmt_mix.setVisible(filter=='' or 'align_right_cmt_mix'.find(filter)!=-1)
        if self.tr("code_align_right_cmt_mix")!="code_align_right_cmt_mix":
            self.codealign_right_cmt_mix.setVisible(filter=='' or 'align_right_cmt_mix'.find(filter)!=-1)
        self.namealign_right_cmt_mix.setVisible(filter=='' or 'align_right_cmt_mix'.find(filter)!=-1)
        self.align_right_cmt_mix.setVisible(filter=='' or 'align_right_cmt_mix'.find(filter)!=-1)
        self.labelalign_right_cmt_same_level.setVisible(filter=='' or 'align_right_cmt_same_level'.find(filter)!=-1)
        if self.tr("code_align_right_cmt_same_level")!="code_align_right_cmt_same_level":
            self.codealign_right_cmt_same_level.setVisible(filter=='' or 'align_right_cmt_same_level'.find(filter)!=-1)
        self.namealign_right_cmt_same_level.setVisible(filter=='' or 'align_right_cmt_same_level'.find(filter)!=-1)
        self.align_right_cmt_same_level.setVisible(filter=='' or 'align_right_cmt_same_level'.find(filter)!=-1)
        self.labelalign_right_cmt_at_col.setVisible(filter=='' or 'align_right_cmt_at_col'.find(filter)!=-1)
        if self.tr("code_align_right_cmt_at_col")!="code_align_right_cmt_at_col":
            self.codealign_right_cmt_at_col.setVisible(filter=='' or 'align_right_cmt_at_col'.find(filter)!=-1)
        self.namealign_right_cmt_at_col.setVisible(filter=='' or 'align_right_cmt_at_col'.find(filter)!=-1)
        self.align_right_cmt_at_col.setVisible(filter=='' or 'align_right_cmt_at_col'.find(filter)!=-1)
        self.labelalign_func_proto_span.setVisible(filter=='' or 'align_func_proto_span'.find(filter)!=-1)
        if self.tr("code_align_func_proto_span")!="code_align_func_proto_span":
            self.codealign_func_proto_span.setVisible(filter=='' or 'align_func_proto_span'.find(filter)!=-1)
        self.namealign_func_proto_span.setVisible(filter=='' or 'align_func_proto_span'.find(filter)!=-1)
        self.align_func_proto_span.setVisible(filter=='' or 'align_func_proto_span'.find(filter)!=-1)
        self.labelalign_func_proto_thresh.setVisible(filter=='' or 'align_func_proto_thresh'.find(filter)!=-1)
        if self.tr("code_align_func_proto_thresh")!="code_align_func_proto_thresh":
            self.codealign_func_proto_thresh.setVisible(filter=='' or 'align_func_proto_thresh'.find(filter)!=-1)
        self.namealign_func_proto_thresh.setVisible(filter=='' or 'align_func_proto_thresh'.find(filter)!=-1)
        self.align_func_proto_thresh.setVisible(filter=='' or 'align_func_proto_thresh'.find(filter)!=-1)
        self.labelalign_func_proto_gap.setVisible(filter=='' or 'align_func_proto_gap'.find(filter)!=-1)
        if self.tr("code_align_func_proto_gap")!="code_align_func_proto_gap":
            self.codealign_func_proto_gap.setVisible(filter=='' or 'align_func_proto_gap'.find(filter)!=-1)
        self.namealign_func_proto_gap.setVisible(filter=='' or 'align_func_proto_gap'.find(filter)!=-1)
        self.align_func_proto_gap.setVisible(filter=='' or 'align_func_proto_gap'.find(filter)!=-1)
        self.labelalign_on_operator.setVisible(filter=='' or 'align_on_operator'.find(filter)!=-1)
        if self.tr("code_align_on_operator")!="code_align_on_operator":
            self.codealign_on_operator.setVisible(filter=='' or 'align_on_operator'.find(filter)!=-1)
        self.namealign_on_operator.setVisible(filter=='' or 'align_on_operator'.find(filter)!=-1)
        self.align_on_operator.setVisible(filter=='' or 'align_on_operator'.find(filter)!=-1)
        self.labelalign_mix_var_proto.setVisible(filter=='' or 'align_mix_var_proto'.find(filter)!=-1)
        if self.tr("code_align_mix_var_proto")!="code_align_mix_var_proto":
            self.codealign_mix_var_proto.setVisible(filter=='' or 'align_mix_var_proto'.find(filter)!=-1)
        self.namealign_mix_var_proto.setVisible(filter=='' or 'align_mix_var_proto'.find(filter)!=-1)
        self.align_mix_var_proto.setVisible(filter=='' or 'align_mix_var_proto'.find(filter)!=-1)
        self.labelalign_single_line_func.setVisible(filter=='' or 'align_single_line_func'.find(filter)!=-1)
        if self.tr("code_align_single_line_func")!="code_align_single_line_func":
            self.codealign_single_line_func.setVisible(filter=='' or 'align_single_line_func'.find(filter)!=-1)
        self.namealign_single_line_func.setVisible(filter=='' or 'align_single_line_func'.find(filter)!=-1)
        self.align_single_line_func.setVisible(filter=='' or 'align_single_line_func'.find(filter)!=-1)
        self.labelalign_single_line_brace.setVisible(filter=='' or 'align_single_line_brace'.find(filter)!=-1)
        if self.tr("code_align_single_line_brace")!="code_align_single_line_brace":
            self.codealign_single_line_brace.setVisible(filter=='' or 'align_single_line_brace'.find(filter)!=-1)
        self.namealign_single_line_brace.setVisible(filter=='' or 'align_single_line_brace'.find(filter)!=-1)
        self.align_single_line_brace.setVisible(filter=='' or 'align_single_line_brace'.find(filter)!=-1)
        self.labelalign_single_line_brace_gap.setVisible(filter=='' or 'align_single_line_brace_gap'.find(filter)!=-1)
        if self.tr("code_align_single_line_brace_gap")!="code_align_single_line_brace_gap":
            self.codealign_single_line_brace_gap.setVisible(filter=='' or 'align_single_line_brace_gap'.find(filter)!=-1)
        self.namealign_single_line_brace_gap.setVisible(filter=='' or 'align_single_line_brace_gap'.find(filter)!=-1)
        self.align_single_line_brace_gap.setVisible(filter=='' or 'align_single_line_brace_gap'.find(filter)!=-1)
        self.labelalign_oc_msg_spec_span.setVisible(filter=='' or 'align_oc_msg_spec_span'.find(filter)!=-1)
        if self.tr("code_align_oc_msg_spec_span")!="code_align_oc_msg_spec_span":
            self.codealign_oc_msg_spec_span.setVisible(filter=='' or 'align_oc_msg_spec_span'.find(filter)!=-1)
        self.namealign_oc_msg_spec_span.setVisible(filter=='' or 'align_oc_msg_spec_span'.find(filter)!=-1)
        self.align_oc_msg_spec_span.setVisible(filter=='' or 'align_oc_msg_spec_span'.find(filter)!=-1)
        self.labelalign_nl_cont.setVisible(filter=='' or 'align_nl_cont'.find(filter)!=-1)
        if self.tr("code_align_nl_cont")!="code_align_nl_cont":
            self.codealign_nl_cont.setVisible(filter=='' or 'align_nl_cont'.find(filter)!=-1)
        self.namealign_nl_cont.setVisible(filter=='' or 'align_nl_cont'.find(filter)!=-1)
        self.align_nl_cont.setVisible(filter=='' or 'align_nl_cont'.find(filter)!=-1)
        self.labelalign_pp_define_together.setVisible(filter=='' or 'align_pp_define_together'.find(filter)!=-1)
        if self.tr("code_align_pp_define_together")!="code_align_pp_define_together":
            self.codealign_pp_define_together.setVisible(filter=='' or 'align_pp_define_together'.find(filter)!=-1)
        self.namealign_pp_define_together.setVisible(filter=='' or 'align_pp_define_together'.find(filter)!=-1)
        self.align_pp_define_together.setVisible(filter=='' or 'align_pp_define_together'.find(filter)!=-1)
        self.labelalign_pp_define_span.setVisible(filter=='' or 'align_pp_define_span'.find(filter)!=-1)
        if self.tr("code_align_pp_define_span")!="code_align_pp_define_span":
            self.codealign_pp_define_span.setVisible(filter=='' or 'align_pp_define_span'.find(filter)!=-1)
        self.namealign_pp_define_span.setVisible(filter=='' or 'align_pp_define_span'.find(filter)!=-1)
        self.align_pp_define_span.setVisible(filter=='' or 'align_pp_define_span'.find(filter)!=-1)
        self.labelalign_pp_define_gap.setVisible(filter=='' or 'align_pp_define_gap'.find(filter)!=-1)
        if self.tr("code_align_pp_define_gap")!="code_align_pp_define_gap":
            self.codealign_pp_define_gap.setVisible(filter=='' or 'align_pp_define_gap'.find(filter)!=-1)
        self.namealign_pp_define_gap.setVisible(filter=='' or 'align_pp_define_gap'.find(filter)!=-1)
        self.align_pp_define_gap.setVisible(filter=='' or 'align_pp_define_gap'.find(filter)!=-1)
        self.labelalign_left_shift.setVisible(filter=='' or 'align_left_shift'.find(filter)!=-1)
        if self.tr("code_align_left_shift")!="code_align_left_shift":
            self.codealign_left_shift.setVisible(filter=='' or 'align_left_shift'.find(filter)!=-1)
        self.namealign_left_shift.setVisible(filter=='' or 'align_left_shift'.find(filter)!=-1)
        self.align_left_shift.setVisible(filter=='' or 'align_left_shift'.find(filter)!=-1)
        self.labelalign_asm_colon.setVisible(filter=='' or 'align_asm_colon'.find(filter)!=-1)
        if self.tr("code_align_asm_colon")!="code_align_asm_colon":
            self.codealign_asm_colon.setVisible(filter=='' or 'align_asm_colon'.find(filter)!=-1)
        self.namealign_asm_colon.setVisible(filter=='' or 'align_asm_colon'.find(filter)!=-1)
        self.align_asm_colon.setVisible(filter=='' or 'align_asm_colon'.find(filter)!=-1)
        self.labelalign_oc_msg_colon_span.setVisible(filter=='' or 'align_oc_msg_colon_span'.find(filter)!=-1)
        if self.tr("code_align_oc_msg_colon_span")!="code_align_oc_msg_colon_span":
            self.codealign_oc_msg_colon_span.setVisible(filter=='' or 'align_oc_msg_colon_span'.find(filter)!=-1)
        self.namealign_oc_msg_colon_span.setVisible(filter=='' or 'align_oc_msg_colon_span'.find(filter)!=-1)
        self.align_oc_msg_colon_span.setVisible(filter=='' or 'align_oc_msg_colon_span'.find(filter)!=-1)
        self.labelalign_oc_msg_colon_first.setVisible(filter=='' or 'align_oc_msg_colon_first'.find(filter)!=-1)
        if self.tr("code_align_oc_msg_colon_first")!="code_align_oc_msg_colon_first":
            self.codealign_oc_msg_colon_first.setVisible(filter=='' or 'align_oc_msg_colon_first'.find(filter)!=-1)
        self.namealign_oc_msg_colon_first.setVisible(filter=='' or 'align_oc_msg_colon_first'.find(filter)!=-1)
        self.align_oc_msg_colon_first.setVisible(filter=='' or 'align_oc_msg_colon_first'.find(filter)!=-1)
        self.labelalign_oc_decl_colon.setVisible(filter=='' or 'align_oc_decl_colon'.find(filter)!=-1)
        if self.tr("code_align_oc_decl_colon")!="code_align_oc_decl_colon":
            self.codealign_oc_decl_colon.setVisible(filter=='' or 'align_oc_decl_colon'.find(filter)!=-1)
        self.namealign_oc_decl_colon.setVisible(filter=='' or 'align_oc_decl_colon'.find(filter)!=-1)
        self.align_oc_decl_colon.setVisible(filter=='' or 'align_oc_decl_colon'.find(filter)!=-1)
        self.labelalign_oc_msg_colon_xcode_like.setVisible(filter=='' or 'align_oc_msg_colon_xcode_like'.find(filter)!=-1)
        if self.tr("code_align_oc_msg_colon_xcode_like")!="code_align_oc_msg_colon_xcode_like":
            self.codealign_oc_msg_colon_xcode_like.setVisible(filter=='' or 'align_oc_msg_colon_xcode_like'.find(filter)!=-1)
        self.namealign_oc_msg_colon_xcode_like.setVisible(filter=='' or 'align_oc_msg_colon_xcode_like'.find(filter)!=-1)
        self.align_oc_msg_colon_xcode_like.setVisible(filter=='' or 'align_oc_msg_colon_xcode_like'.find(filter)!=-1)
        self.labelcmt_width.setVisible(filter=='' or 'cmt_width'.find(filter)!=-1)
        if self.tr("code_cmt_width")!="code_cmt_width":
            self.codecmt_width.setVisible(filter=='' or 'cmt_width'.find(filter)!=-1)
        self.namecmt_width.setVisible(filter=='' or 'cmt_width'.find(filter)!=-1)
        self.cmt_width.setVisible(filter=='' or 'cmt_width'.find(filter)!=-1)
        self.labelcmt_reflow_mode.setVisible(filter=='' or 'cmt_reflow_mode'.find(filter)!=-1)
        if self.tr("code_cmt_reflow_mode")!="code_cmt_reflow_mode":
            self.codecmt_reflow_mode.setVisible(filter=='' or 'cmt_reflow_mode'.find(filter)!=-1)
        self.namecmt_reflow_mode.setVisible(filter=='' or 'cmt_reflow_mode'.find(filter)!=-1)
        self.cmt_reflow_mode.setVisible(filter=='' or 'cmt_reflow_mode'.find(filter)!=-1)
        self.labelcmt_convert_tab_to_spaces.setVisible(filter=='' or 'cmt_convert_tab_to_spaces'.find(filter)!=-1)
        if self.tr("code_cmt_convert_tab_to_spaces")!="code_cmt_convert_tab_to_spaces":
            self.codecmt_convert_tab_to_spaces.setVisible(filter=='' or 'cmt_convert_tab_to_spaces'.find(filter)!=-1)
        self.namecmt_convert_tab_to_spaces.setVisible(filter=='' or 'cmt_convert_tab_to_spaces'.find(filter)!=-1)
        self.cmt_convert_tab_to_spaces.setVisible(filter=='' or 'cmt_convert_tab_to_spaces'.find(filter)!=-1)
        self.labelcmt_indent_multi.setVisible(filter=='' or 'cmt_indent_multi'.find(filter)!=-1)
        if self.tr("code_cmt_indent_multi")!="code_cmt_indent_multi":
            self.codecmt_indent_multi.setVisible(filter=='' or 'cmt_indent_multi'.find(filter)!=-1)
        self.namecmt_indent_multi.setVisible(filter=='' or 'cmt_indent_multi'.find(filter)!=-1)
        self.cmt_indent_multi.setVisible(filter=='' or 'cmt_indent_multi'.find(filter)!=-1)
        self.labelcmt_c_group.setVisible(filter=='' or 'cmt_c_group'.find(filter)!=-1)
        if self.tr("code_cmt_c_group")!="code_cmt_c_group":
            self.codecmt_c_group.setVisible(filter=='' or 'cmt_c_group'.find(filter)!=-1)
        self.namecmt_c_group.setVisible(filter=='' or 'cmt_c_group'.find(filter)!=-1)
        self.cmt_c_group.setVisible(filter=='' or 'cmt_c_group'.find(filter)!=-1)
        self.labelcmt_c_nl_start.setVisible(filter=='' or 'cmt_c_nl_start'.find(filter)!=-1)
        if self.tr("code_cmt_c_nl_start")!="code_cmt_c_nl_start":
            self.codecmt_c_nl_start.setVisible(filter=='' or 'cmt_c_nl_start'.find(filter)!=-1)
        self.namecmt_c_nl_start.setVisible(filter=='' or 'cmt_c_nl_start'.find(filter)!=-1)
        self.cmt_c_nl_start.setVisible(filter=='' or 'cmt_c_nl_start'.find(filter)!=-1)
        self.labelcmt_c_nl_end.setVisible(filter=='' or 'cmt_c_nl_end'.find(filter)!=-1)
        if self.tr("code_cmt_c_nl_end")!="code_cmt_c_nl_end":
            self.codecmt_c_nl_end.setVisible(filter=='' or 'cmt_c_nl_end'.find(filter)!=-1)
        self.namecmt_c_nl_end.setVisible(filter=='' or 'cmt_c_nl_end'.find(filter)!=-1)
        self.cmt_c_nl_end.setVisible(filter=='' or 'cmt_c_nl_end'.find(filter)!=-1)
        self.labelcmt_cpp_to_c.setVisible(filter=='' or 'cmt_cpp_to_c'.find(filter)!=-1)
        if self.tr("code_cmt_cpp_to_c")!="code_cmt_cpp_to_c":
            self.codecmt_cpp_to_c.setVisible(filter=='' or 'cmt_cpp_to_c'.find(filter)!=-1)
        self.namecmt_cpp_to_c.setVisible(filter=='' or 'cmt_cpp_to_c'.find(filter)!=-1)
        self.cmt_cpp_to_c.setVisible(filter=='' or 'cmt_cpp_to_c'.find(filter)!=-1)
        self.labelcmt_cpp_group.setVisible(filter=='' or 'cmt_cpp_group'.find(filter)!=-1)
        if self.tr("code_cmt_cpp_group")!="code_cmt_cpp_group":
            self.codecmt_cpp_group.setVisible(filter=='' or 'cmt_cpp_group'.find(filter)!=-1)
        self.namecmt_cpp_group.setVisible(filter=='' or 'cmt_cpp_group'.find(filter)!=-1)
        self.cmt_cpp_group.setVisible(filter=='' or 'cmt_cpp_group'.find(filter)!=-1)
        self.labelcmt_cpp_nl_start.setVisible(filter=='' or 'cmt_cpp_nl_start'.find(filter)!=-1)
        if self.tr("code_cmt_cpp_nl_start")!="code_cmt_cpp_nl_start":
            self.codecmt_cpp_nl_start.setVisible(filter=='' or 'cmt_cpp_nl_start'.find(filter)!=-1)
        self.namecmt_cpp_nl_start.setVisible(filter=='' or 'cmt_cpp_nl_start'.find(filter)!=-1)
        self.cmt_cpp_nl_start.setVisible(filter=='' or 'cmt_cpp_nl_start'.find(filter)!=-1)
        self.labelcmt_cpp_nl_end.setVisible(filter=='' or 'cmt_cpp_nl_end'.find(filter)!=-1)
        if self.tr("code_cmt_cpp_nl_end")!="code_cmt_cpp_nl_end":
            self.codecmt_cpp_nl_end.setVisible(filter=='' or 'cmt_cpp_nl_end'.find(filter)!=-1)
        self.namecmt_cpp_nl_end.setVisible(filter=='' or 'cmt_cpp_nl_end'.find(filter)!=-1)
        self.cmt_cpp_nl_end.setVisible(filter=='' or 'cmt_cpp_nl_end'.find(filter)!=-1)
        self.labelcmt_star_cont.setVisible(filter=='' or 'cmt_star_cont'.find(filter)!=-1)
        if self.tr("code_cmt_star_cont")!="code_cmt_star_cont":
            self.codecmt_star_cont.setVisible(filter=='' or 'cmt_star_cont'.find(filter)!=-1)
        self.namecmt_star_cont.setVisible(filter=='' or 'cmt_star_cont'.find(filter)!=-1)
        self.cmt_star_cont.setVisible(filter=='' or 'cmt_star_cont'.find(filter)!=-1)
        self.labelcmt_sp_before_star_cont.setVisible(filter=='' or 'cmt_sp_before_star_cont'.find(filter)!=-1)
        if self.tr("code_cmt_sp_before_star_cont")!="code_cmt_sp_before_star_cont":
            self.codecmt_sp_before_star_cont.setVisible(filter=='' or 'cmt_sp_before_star_cont'.find(filter)!=-1)
        self.namecmt_sp_before_star_cont.setVisible(filter=='' or 'cmt_sp_before_star_cont'.find(filter)!=-1)
        self.cmt_sp_before_star_cont.setVisible(filter=='' or 'cmt_sp_before_star_cont'.find(filter)!=-1)
        self.labelcmt_sp_after_star_cont.setVisible(filter=='' or 'cmt_sp_after_star_cont'.find(filter)!=-1)
        if self.tr("code_cmt_sp_after_star_cont")!="code_cmt_sp_after_star_cont":
            self.codecmt_sp_after_star_cont.setVisible(filter=='' or 'cmt_sp_after_star_cont'.find(filter)!=-1)
        self.namecmt_sp_after_star_cont.setVisible(filter=='' or 'cmt_sp_after_star_cont'.find(filter)!=-1)
        self.cmt_sp_after_star_cont.setVisible(filter=='' or 'cmt_sp_after_star_cont'.find(filter)!=-1)
        self.labelcmt_multi_check_last.setVisible(filter=='' or 'cmt_multi_check_last'.find(filter)!=-1)
        if self.tr("code_cmt_multi_check_last")!="code_cmt_multi_check_last":
            self.codecmt_multi_check_last.setVisible(filter=='' or 'cmt_multi_check_last'.find(filter)!=-1)
        self.namecmt_multi_check_last.setVisible(filter=='' or 'cmt_multi_check_last'.find(filter)!=-1)
        self.cmt_multi_check_last.setVisible(filter=='' or 'cmt_multi_check_last'.find(filter)!=-1)
        self.labelcmt_multi_first_len_minimum.setVisible(filter=='' or 'cmt_multi_first_len_minimum'.find(filter)!=-1)
        if self.tr("code_cmt_multi_first_len_minimum")!="code_cmt_multi_first_len_minimum":
            self.codecmt_multi_first_len_minimum.setVisible(filter=='' or 'cmt_multi_first_len_minimum'.find(filter)!=-1)
        self.namecmt_multi_first_len_minimum.setVisible(filter=='' or 'cmt_multi_first_len_minimum'.find(filter)!=-1)
        self.cmt_multi_first_len_minimum.setVisible(filter=='' or 'cmt_multi_first_len_minimum'.find(filter)!=-1)
        self.labelcmt_insert_file_header.setVisible(filter=='' or 'cmt_insert_file_header'.find(filter)!=-1)
        if self.tr("code_cmt_insert_file_header")!="code_cmt_insert_file_header":
            self.codecmt_insert_file_header.setVisible(filter=='' or 'cmt_insert_file_header'.find(filter)!=-1)
        self.namecmt_insert_file_header.setVisible(filter=='' or 'cmt_insert_file_header'.find(filter)!=-1)
        self.cmt_insert_file_header.setVisible(filter=='' or 'cmt_insert_file_header'.find(filter)!=-1)
        self.labelcmt_insert_file_footer.setVisible(filter=='' or 'cmt_insert_file_footer'.find(filter)!=-1)
        if self.tr("code_cmt_insert_file_footer")!="code_cmt_insert_file_footer":
            self.codecmt_insert_file_footer.setVisible(filter=='' or 'cmt_insert_file_footer'.find(filter)!=-1)
        self.namecmt_insert_file_footer.setVisible(filter=='' or 'cmt_insert_file_footer'.find(filter)!=-1)
        self.cmt_insert_file_footer.setVisible(filter=='' or 'cmt_insert_file_footer'.find(filter)!=-1)
        self.labelcmt_insert_func_header.setVisible(filter=='' or 'cmt_insert_func_header'.find(filter)!=-1)
        if self.tr("code_cmt_insert_func_header")!="code_cmt_insert_func_header":
            self.codecmt_insert_func_header.setVisible(filter=='' or 'cmt_insert_func_header'.find(filter)!=-1)
        self.namecmt_insert_func_header.setVisible(filter=='' or 'cmt_insert_func_header'.find(filter)!=-1)
        self.cmt_insert_func_header.setVisible(filter=='' or 'cmt_insert_func_header'.find(filter)!=-1)
        self.labelcmt_insert_class_header.setVisible(filter=='' or 'cmt_insert_class_header'.find(filter)!=-1)
        if self.tr("code_cmt_insert_class_header")!="code_cmt_insert_class_header":
            self.codecmt_insert_class_header.setVisible(filter=='' or 'cmt_insert_class_header'.find(filter)!=-1)
        self.namecmt_insert_class_header.setVisible(filter=='' or 'cmt_insert_class_header'.find(filter)!=-1)
        self.cmt_insert_class_header.setVisible(filter=='' or 'cmt_insert_class_header'.find(filter)!=-1)
        self.labelcmt_insert_oc_msg_header.setVisible(filter=='' or 'cmt_insert_oc_msg_header'.find(filter)!=-1)
        if self.tr("code_cmt_insert_oc_msg_header")!="code_cmt_insert_oc_msg_header":
            self.codecmt_insert_oc_msg_header.setVisible(filter=='' or 'cmt_insert_oc_msg_header'.find(filter)!=-1)
        self.namecmt_insert_oc_msg_header.setVisible(filter=='' or 'cmt_insert_oc_msg_header'.find(filter)!=-1)
        self.cmt_insert_oc_msg_header.setVisible(filter=='' or 'cmt_insert_oc_msg_header'.find(filter)!=-1)
        self.labelcmt_insert_before_preproc.setVisible(filter=='' or 'cmt_insert_before_preproc'.find(filter)!=-1)
        if self.tr("code_cmt_insert_before_preproc")!="code_cmt_insert_before_preproc":
            self.codecmt_insert_before_preproc.setVisible(filter=='' or 'cmt_insert_before_preproc'.find(filter)!=-1)
        self.namecmt_insert_before_preproc.setVisible(filter=='' or 'cmt_insert_before_preproc'.find(filter)!=-1)
        self.cmt_insert_before_preproc.setVisible(filter=='' or 'cmt_insert_before_preproc'.find(filter)!=-1)
        self.labelcmt_insert_before_inlines.setVisible(filter=='' or 'cmt_insert_before_inlines'.find(filter)!=-1)
        if self.tr("code_cmt_insert_before_inlines")!="code_cmt_insert_before_inlines":
            self.codecmt_insert_before_inlines.setVisible(filter=='' or 'cmt_insert_before_inlines'.find(filter)!=-1)
        self.namecmt_insert_before_inlines.setVisible(filter=='' or 'cmt_insert_before_inlines'.find(filter)!=-1)
        self.cmt_insert_before_inlines.setVisible(filter=='' or 'cmt_insert_before_inlines'.find(filter)!=-1)
        self.labelcmt_insert_before_ctor_dtor.setVisible(filter=='' or 'cmt_insert_before_ctor_dtor'.find(filter)!=-1)
        if self.tr("code_cmt_insert_before_ctor_dtor")!="code_cmt_insert_before_ctor_dtor":
            self.codecmt_insert_before_ctor_dtor.setVisible(filter=='' or 'cmt_insert_before_ctor_dtor'.find(filter)!=-1)
        self.namecmt_insert_before_ctor_dtor.setVisible(filter=='' or 'cmt_insert_before_ctor_dtor'.find(filter)!=-1)
        self.cmt_insert_before_ctor_dtor.setVisible(filter=='' or 'cmt_insert_before_ctor_dtor'.find(filter)!=-1)
        self.labelmod_full_brace_do.setVisible(filter=='' or 'mod_full_brace_do'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_do")!="code_mod_full_brace_do":
            self.codemod_full_brace_do.setVisible(filter=='' or 'mod_full_brace_do'.find(filter)!=-1)
        self.namemod_full_brace_do.setVisible(filter=='' or 'mod_full_brace_do'.find(filter)!=-1)
        self.mod_full_brace_do.setVisible(filter=='' or 'mod_full_brace_do'.find(filter)!=-1)
        self.labelmod_full_brace_for.setVisible(filter=='' or 'mod_full_brace_for'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_for")!="code_mod_full_brace_for":
            self.codemod_full_brace_for.setVisible(filter=='' or 'mod_full_brace_for'.find(filter)!=-1)
        self.namemod_full_brace_for.setVisible(filter=='' or 'mod_full_brace_for'.find(filter)!=-1)
        self.mod_full_brace_for.setVisible(filter=='' or 'mod_full_brace_for'.find(filter)!=-1)
        self.labelmod_full_brace_function.setVisible(filter=='' or 'mod_full_brace_function'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_function")!="code_mod_full_brace_function":
            self.codemod_full_brace_function.setVisible(filter=='' or 'mod_full_brace_function'.find(filter)!=-1)
        self.namemod_full_brace_function.setVisible(filter=='' or 'mod_full_brace_function'.find(filter)!=-1)
        self.mod_full_brace_function.setVisible(filter=='' or 'mod_full_brace_function'.find(filter)!=-1)
        self.labelmod_full_brace_if.setVisible(filter=='' or 'mod_full_brace_if'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_if")!="code_mod_full_brace_if":
            self.codemod_full_brace_if.setVisible(filter=='' or 'mod_full_brace_if'.find(filter)!=-1)
        self.namemod_full_brace_if.setVisible(filter=='' or 'mod_full_brace_if'.find(filter)!=-1)
        self.mod_full_brace_if.setVisible(filter=='' or 'mod_full_brace_if'.find(filter)!=-1)
        self.labelmod_full_brace_if_chain.setVisible(filter=='' or 'mod_full_brace_if_chain'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_if_chain")!="code_mod_full_brace_if_chain":
            self.codemod_full_brace_if_chain.setVisible(filter=='' or 'mod_full_brace_if_chain'.find(filter)!=-1)
        self.namemod_full_brace_if_chain.setVisible(filter=='' or 'mod_full_brace_if_chain'.find(filter)!=-1)
        self.mod_full_brace_if_chain.setVisible(filter=='' or 'mod_full_brace_if_chain'.find(filter)!=-1)
        self.labelmod_full_brace_if_chain_only.setVisible(filter=='' or 'mod_full_brace_if_chain_only'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_if_chain_only")!="code_mod_full_brace_if_chain_only":
            self.codemod_full_brace_if_chain_only.setVisible(filter=='' or 'mod_full_brace_if_chain_only'.find(filter)!=-1)
        self.namemod_full_brace_if_chain_only.setVisible(filter=='' or 'mod_full_brace_if_chain_only'.find(filter)!=-1)
        self.mod_full_brace_if_chain_only.setVisible(filter=='' or 'mod_full_brace_if_chain_only'.find(filter)!=-1)
        self.labelmod_full_brace_while.setVisible(filter=='' or 'mod_full_brace_while'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_while")!="code_mod_full_brace_while":
            self.codemod_full_brace_while.setVisible(filter=='' or 'mod_full_brace_while'.find(filter)!=-1)
        self.namemod_full_brace_while.setVisible(filter=='' or 'mod_full_brace_while'.find(filter)!=-1)
        self.mod_full_brace_while.setVisible(filter=='' or 'mod_full_brace_while'.find(filter)!=-1)
        self.labelmod_full_brace_using.setVisible(filter=='' or 'mod_full_brace_using'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_using")!="code_mod_full_brace_using":
            self.codemod_full_brace_using.setVisible(filter=='' or 'mod_full_brace_using'.find(filter)!=-1)
        self.namemod_full_brace_using.setVisible(filter=='' or 'mod_full_brace_using'.find(filter)!=-1)
        self.mod_full_brace_using.setVisible(filter=='' or 'mod_full_brace_using'.find(filter)!=-1)
        self.labelmod_full_brace_nl.setVisible(filter=='' or 'mod_full_brace_nl'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_nl")!="code_mod_full_brace_nl":
            self.codemod_full_brace_nl.setVisible(filter=='' or 'mod_full_brace_nl'.find(filter)!=-1)
        self.namemod_full_brace_nl.setVisible(filter=='' or 'mod_full_brace_nl'.find(filter)!=-1)
        self.mod_full_brace_nl.setVisible(filter=='' or 'mod_full_brace_nl'.find(filter)!=-1)
        self.labelmod_full_brace_nl_block_rem_mlcond.setVisible(filter=='' or 'mod_full_brace_nl_block_rem_mlcond'.find(filter)!=-1)
        if self.tr("code_mod_full_brace_nl_block_rem_mlcond")!="code_mod_full_brace_nl_block_rem_mlcond":
            self.codemod_full_brace_nl_block_rem_mlcond.setVisible(filter=='' or 'mod_full_brace_nl_block_rem_mlcond'.find(filter)!=-1)
        self.namemod_full_brace_nl_block_rem_mlcond.setVisible(filter=='' or 'mod_full_brace_nl_block_rem_mlcond'.find(filter)!=-1)
        self.mod_full_brace_nl_block_rem_mlcond.setVisible(filter=='' or 'mod_full_brace_nl_block_rem_mlcond'.find(filter)!=-1)
        self.labelmod_paren_on_return.setVisible(filter=='' or 'mod_paren_on_return'.find(filter)!=-1)
        if self.tr("code_mod_paren_on_return")!="code_mod_paren_on_return":
            self.codemod_paren_on_return.setVisible(filter=='' or 'mod_paren_on_return'.find(filter)!=-1)
        self.namemod_paren_on_return.setVisible(filter=='' or 'mod_paren_on_return'.find(filter)!=-1)
        self.mod_paren_on_return.setVisible(filter=='' or 'mod_paren_on_return'.find(filter)!=-1)
        self.labelmod_pawn_semicolon.setVisible(filter=='' or 'mod_pawn_semicolon'.find(filter)!=-1)
        if self.tr("code_mod_pawn_semicolon")!="code_mod_pawn_semicolon":
            self.codemod_pawn_semicolon.setVisible(filter=='' or 'mod_pawn_semicolon'.find(filter)!=-1)
        self.namemod_pawn_semicolon.setVisible(filter=='' or 'mod_pawn_semicolon'.find(filter)!=-1)
        self.mod_pawn_semicolon.setVisible(filter=='' or 'mod_pawn_semicolon'.find(filter)!=-1)
        self.labelmod_full_paren_if_bool.setVisible(filter=='' or 'mod_full_paren_if_bool'.find(filter)!=-1)
        if self.tr("code_mod_full_paren_if_bool")!="code_mod_full_paren_if_bool":
            self.codemod_full_paren_if_bool.setVisible(filter=='' or 'mod_full_paren_if_bool'.find(filter)!=-1)
        self.namemod_full_paren_if_bool.setVisible(filter=='' or 'mod_full_paren_if_bool'.find(filter)!=-1)
        self.mod_full_paren_if_bool.setVisible(filter=='' or 'mod_full_paren_if_bool'.find(filter)!=-1)
        self.labelmod_remove_extra_semicolon.setVisible(filter=='' or 'mod_remove_extra_semicolon'.find(filter)!=-1)
        if self.tr("code_mod_remove_extra_semicolon")!="code_mod_remove_extra_semicolon":
            self.codemod_remove_extra_semicolon.setVisible(filter=='' or 'mod_remove_extra_semicolon'.find(filter)!=-1)
        self.namemod_remove_extra_semicolon.setVisible(filter=='' or 'mod_remove_extra_semicolon'.find(filter)!=-1)
        self.mod_remove_extra_semicolon.setVisible(filter=='' or 'mod_remove_extra_semicolon'.find(filter)!=-1)
        self.labelmod_add_long_function_closebrace_comment.setVisible(filter=='' or 'mod_add_long_function_closebrace_comment'.find(filter)!=-1)
        if self.tr("code_mod_add_long_function_closebrace_comment")!="code_mod_add_long_function_closebrace_comment":
            self.codemod_add_long_function_closebrace_comment.setVisible(filter=='' or 'mod_add_long_function_closebrace_comment'.find(filter)!=-1)
        self.namemod_add_long_function_closebrace_comment.setVisible(filter=='' or 'mod_add_long_function_closebrace_comment'.find(filter)!=-1)
        self.mod_add_long_function_closebrace_comment.setVisible(filter=='' or 'mod_add_long_function_closebrace_comment'.find(filter)!=-1)
        self.labelmod_add_long_namespace_closebrace_comment.setVisible(filter=='' or 'mod_add_long_namespace_closebrace_comment'.find(filter)!=-1)
        if self.tr("code_mod_add_long_namespace_closebrace_comment")!="code_mod_add_long_namespace_closebrace_comment":
            self.codemod_add_long_namespace_closebrace_comment.setVisible(filter=='' or 'mod_add_long_namespace_closebrace_comment'.find(filter)!=-1)
        self.namemod_add_long_namespace_closebrace_comment.setVisible(filter=='' or 'mod_add_long_namespace_closebrace_comment'.find(filter)!=-1)
        self.mod_add_long_namespace_closebrace_comment.setVisible(filter=='' or 'mod_add_long_namespace_closebrace_comment'.find(filter)!=-1)
        self.labelmod_add_long_class_closebrace_comment.setVisible(filter=='' or 'mod_add_long_class_closebrace_comment'.find(filter)!=-1)
        if self.tr("code_mod_add_long_class_closebrace_comment")!="code_mod_add_long_class_closebrace_comment":
            self.codemod_add_long_class_closebrace_comment.setVisible(filter=='' or 'mod_add_long_class_closebrace_comment'.find(filter)!=-1)
        self.namemod_add_long_class_closebrace_comment.setVisible(filter=='' or 'mod_add_long_class_closebrace_comment'.find(filter)!=-1)
        self.mod_add_long_class_closebrace_comment.setVisible(filter=='' or 'mod_add_long_class_closebrace_comment'.find(filter)!=-1)
        self.labelmod_add_long_switch_closebrace_comment.setVisible(filter=='' or 'mod_add_long_switch_closebrace_comment'.find(filter)!=-1)
        if self.tr("code_mod_add_long_switch_closebrace_comment")!="code_mod_add_long_switch_closebrace_comment":
            self.codemod_add_long_switch_closebrace_comment.setVisible(filter=='' or 'mod_add_long_switch_closebrace_comment'.find(filter)!=-1)
        self.namemod_add_long_switch_closebrace_comment.setVisible(filter=='' or 'mod_add_long_switch_closebrace_comment'.find(filter)!=-1)
        self.mod_add_long_switch_closebrace_comment.setVisible(filter=='' or 'mod_add_long_switch_closebrace_comment'.find(filter)!=-1)
        self.labelmod_add_long_ifdef_endif_comment.setVisible(filter=='' or 'mod_add_long_ifdef_endif_comment'.find(filter)!=-1)
        if self.tr("code_mod_add_long_ifdef_endif_comment")!="code_mod_add_long_ifdef_endif_comment":
            self.codemod_add_long_ifdef_endif_comment.setVisible(filter=='' or 'mod_add_long_ifdef_endif_comment'.find(filter)!=-1)
        self.namemod_add_long_ifdef_endif_comment.setVisible(filter=='' or 'mod_add_long_ifdef_endif_comment'.find(filter)!=-1)
        self.mod_add_long_ifdef_endif_comment.setVisible(filter=='' or 'mod_add_long_ifdef_endif_comment'.find(filter)!=-1)
        self.labelmod_add_long_ifdef_else_comment.setVisible(filter=='' or 'mod_add_long_ifdef_else_comment'.find(filter)!=-1)
        if self.tr("code_mod_add_long_ifdef_else_comment")!="code_mod_add_long_ifdef_else_comment":
            self.codemod_add_long_ifdef_else_comment.setVisible(filter=='' or 'mod_add_long_ifdef_else_comment'.find(filter)!=-1)
        self.namemod_add_long_ifdef_else_comment.setVisible(filter=='' or 'mod_add_long_ifdef_else_comment'.find(filter)!=-1)
        self.mod_add_long_ifdef_else_comment.setVisible(filter=='' or 'mod_add_long_ifdef_else_comment'.find(filter)!=-1)
        self.labelmod_sort_case_sensitive.setVisible(filter=='' or 'mod_sort_case_sensitive'.find(filter)!=-1)
        if self.tr("code_mod_sort_case_sensitive")!="code_mod_sort_case_sensitive":
            self.codemod_sort_case_sensitive.setVisible(filter=='' or 'mod_sort_case_sensitive'.find(filter)!=-1)
        self.namemod_sort_case_sensitive.setVisible(filter=='' or 'mod_sort_case_sensitive'.find(filter)!=-1)
        self.mod_sort_case_sensitive.setVisible(filter=='' or 'mod_sort_case_sensitive'.find(filter)!=-1)
        self.labelmod_sort_import.setVisible(filter=='' or 'mod_sort_import'.find(filter)!=-1)
        if self.tr("code_mod_sort_import")!="code_mod_sort_import":
            self.codemod_sort_import.setVisible(filter=='' or 'mod_sort_import'.find(filter)!=-1)
        self.namemod_sort_import.setVisible(filter=='' or 'mod_sort_import'.find(filter)!=-1)
        self.mod_sort_import.setVisible(filter=='' or 'mod_sort_import'.find(filter)!=-1)
        self.labelmod_sort_using.setVisible(filter=='' or 'mod_sort_using'.find(filter)!=-1)
        if self.tr("code_mod_sort_using")!="code_mod_sort_using":
            self.codemod_sort_using.setVisible(filter=='' or 'mod_sort_using'.find(filter)!=-1)
        self.namemod_sort_using.setVisible(filter=='' or 'mod_sort_using'.find(filter)!=-1)
        self.mod_sort_using.setVisible(filter=='' or 'mod_sort_using'.find(filter)!=-1)
        self.labelmod_sort_include.setVisible(filter=='' or 'mod_sort_include'.find(filter)!=-1)
        if self.tr("code_mod_sort_include")!="code_mod_sort_include":
            self.codemod_sort_include.setVisible(filter=='' or 'mod_sort_include'.find(filter)!=-1)
        self.namemod_sort_include.setVisible(filter=='' or 'mod_sort_include'.find(filter)!=-1)
        self.mod_sort_include.setVisible(filter=='' or 'mod_sort_include'.find(filter)!=-1)
        self.labelmod_sort_incl_import_prioritize_filename.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_filename'.find(filter)!=-1)
        if self.tr("code_mod_sort_incl_import_prioritize_filename")!="code_mod_sort_incl_import_prioritize_filename":
            self.codemod_sort_incl_import_prioritize_filename.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_filename'.find(filter)!=-1)
        self.namemod_sort_incl_import_prioritize_filename.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_filename'.find(filter)!=-1)
        self.mod_sort_incl_import_prioritize_filename.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_filename'.find(filter)!=-1)
        self.labelmod_sort_incl_import_prioritize_extensionless.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_extensionless'.find(filter)!=-1)
        if self.tr("code_mod_sort_incl_import_prioritize_extensionless")!="code_mod_sort_incl_import_prioritize_extensionless":
            self.codemod_sort_incl_import_prioritize_extensionless.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_extensionless'.find(filter)!=-1)
        self.namemod_sort_incl_import_prioritize_extensionless.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_extensionless'.find(filter)!=-1)
        self.mod_sort_incl_import_prioritize_extensionless.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_extensionless'.find(filter)!=-1)
        self.labelmod_sort_incl_import_prioritize_angle_over_quotes.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_angle_over_quotes'.find(filter)!=-1)
        if self.tr("code_mod_sort_incl_import_prioritize_angle_over_quotes")!="code_mod_sort_incl_import_prioritize_angle_over_quotes":
            self.codemod_sort_incl_import_prioritize_angle_over_quotes.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_angle_over_quotes'.find(filter)!=-1)
        self.namemod_sort_incl_import_prioritize_angle_over_quotes.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_angle_over_quotes'.find(filter)!=-1)
        self.mod_sort_incl_import_prioritize_angle_over_quotes.setVisible(filter=='' or 'mod_sort_incl_import_prioritize_angle_over_quotes'.find(filter)!=-1)
        self.labelmod_sort_incl_import_ignore_extension.setVisible(filter=='' or 'mod_sort_incl_import_ignore_extension'.find(filter)!=-1)
        if self.tr("code_mod_sort_incl_import_ignore_extension")!="code_mod_sort_incl_import_ignore_extension":
            self.codemod_sort_incl_import_ignore_extension.setVisible(filter=='' or 'mod_sort_incl_import_ignore_extension'.find(filter)!=-1)
        self.namemod_sort_incl_import_ignore_extension.setVisible(filter=='' or 'mod_sort_incl_import_ignore_extension'.find(filter)!=-1)
        self.mod_sort_incl_import_ignore_extension.setVisible(filter=='' or 'mod_sort_incl_import_ignore_extension'.find(filter)!=-1)
        self.labelmod_sort_incl_import_grouping_enabled.setVisible(filter=='' or 'mod_sort_incl_import_grouping_enabled'.find(filter)!=-1)
        if self.tr("code_mod_sort_incl_import_grouping_enabled")!="code_mod_sort_incl_import_grouping_enabled":
            self.codemod_sort_incl_import_grouping_enabled.setVisible(filter=='' or 'mod_sort_incl_import_grouping_enabled'.find(filter)!=-1)
        self.namemod_sort_incl_import_grouping_enabled.setVisible(filter=='' or 'mod_sort_incl_import_grouping_enabled'.find(filter)!=-1)
        self.mod_sort_incl_import_grouping_enabled.setVisible(filter=='' or 'mod_sort_incl_import_grouping_enabled'.find(filter)!=-1)
        self.labelmod_move_case_break.setVisible(filter=='' or 'mod_move_case_break'.find(filter)!=-1)
        if self.tr("code_mod_move_case_break")!="code_mod_move_case_break":
            self.codemod_move_case_break.setVisible(filter=='' or 'mod_move_case_break'.find(filter)!=-1)
        self.namemod_move_case_break.setVisible(filter=='' or 'mod_move_case_break'.find(filter)!=-1)
        self.mod_move_case_break.setVisible(filter=='' or 'mod_move_case_break'.find(filter)!=-1)
        self.labelmod_case_brace.setVisible(filter=='' or 'mod_case_brace'.find(filter)!=-1)
        if self.tr("code_mod_case_brace")!="code_mod_case_brace":
            self.codemod_case_brace.setVisible(filter=='' or 'mod_case_brace'.find(filter)!=-1)
        self.namemod_case_brace.setVisible(filter=='' or 'mod_case_brace'.find(filter)!=-1)
        self.mod_case_brace.setVisible(filter=='' or 'mod_case_brace'.find(filter)!=-1)
        self.labelmod_remove_empty_return.setVisible(filter=='' or 'mod_remove_empty_return'.find(filter)!=-1)
        if self.tr("code_mod_remove_empty_return")!="code_mod_remove_empty_return":
            self.codemod_remove_empty_return.setVisible(filter=='' or 'mod_remove_empty_return'.find(filter)!=-1)
        self.namemod_remove_empty_return.setVisible(filter=='' or 'mod_remove_empty_return'.find(filter)!=-1)
        self.mod_remove_empty_return.setVisible(filter=='' or 'mod_remove_empty_return'.find(filter)!=-1)
        self.labelmod_enum_last_comma.setVisible(filter=='' or 'mod_enum_last_comma'.find(filter)!=-1)
        if self.tr("code_mod_enum_last_comma")!="code_mod_enum_last_comma":
            self.codemod_enum_last_comma.setVisible(filter=='' or 'mod_enum_last_comma'.find(filter)!=-1)
        self.namemod_enum_last_comma.setVisible(filter=='' or 'mod_enum_last_comma'.find(filter)!=-1)
        self.mod_enum_last_comma.setVisible(filter=='' or 'mod_enum_last_comma'.find(filter)!=-1)
        self.labelmod_sort_oc_properties.setVisible(filter=='' or 'mod_sort_oc_properties'.find(filter)!=-1)
        if self.tr("code_mod_sort_oc_properties")!="code_mod_sort_oc_properties":
            self.codemod_sort_oc_properties.setVisible(filter=='' or 'mod_sort_oc_properties'.find(filter)!=-1)
        self.namemod_sort_oc_properties.setVisible(filter=='' or 'mod_sort_oc_properties'.find(filter)!=-1)
        self.mod_sort_oc_properties.setVisible(filter=='' or 'mod_sort_oc_properties'.find(filter)!=-1)
        self.labelmod_sort_oc_property_class_weight.setVisible(filter=='' or 'mod_sort_oc_property_class_weight'.find(filter)!=-1)
        if self.tr("code_mod_sort_oc_property_class_weight")!="code_mod_sort_oc_property_class_weight":
            self.codemod_sort_oc_property_class_weight.setVisible(filter=='' or 'mod_sort_oc_property_class_weight'.find(filter)!=-1)
        self.namemod_sort_oc_property_class_weight.setVisible(filter=='' or 'mod_sort_oc_property_class_weight'.find(filter)!=-1)
        self.mod_sort_oc_property_class_weight.setVisible(filter=='' or 'mod_sort_oc_property_class_weight'.find(filter)!=-1)
        self.labelmod_sort_oc_property_thread_safe_weight.setVisible(filter=='' or 'mod_sort_oc_property_thread_safe_weight'.find(filter)!=-1)
        if self.tr("code_mod_sort_oc_property_thread_safe_weight")!="code_mod_sort_oc_property_thread_safe_weight":
            self.codemod_sort_oc_property_thread_safe_weight.setVisible(filter=='' or 'mod_sort_oc_property_thread_safe_weight'.find(filter)!=-1)
        self.namemod_sort_oc_property_thread_safe_weight.setVisible(filter=='' or 'mod_sort_oc_property_thread_safe_weight'.find(filter)!=-1)
        self.mod_sort_oc_property_thread_safe_weight.setVisible(filter=='' or 'mod_sort_oc_property_thread_safe_weight'.find(filter)!=-1)
        self.labelmod_sort_oc_property_readwrite_weight.setVisible(filter=='' or 'mod_sort_oc_property_readwrite_weight'.find(filter)!=-1)
        if self.tr("code_mod_sort_oc_property_readwrite_weight")!="code_mod_sort_oc_property_readwrite_weight":
            self.codemod_sort_oc_property_readwrite_weight.setVisible(filter=='' or 'mod_sort_oc_property_readwrite_weight'.find(filter)!=-1)
        self.namemod_sort_oc_property_readwrite_weight.setVisible(filter=='' or 'mod_sort_oc_property_readwrite_weight'.find(filter)!=-1)
        self.mod_sort_oc_property_readwrite_weight.setVisible(filter=='' or 'mod_sort_oc_property_readwrite_weight'.find(filter)!=-1)
        self.labelmod_sort_oc_property_reference_weight.setVisible(filter=='' or 'mod_sort_oc_property_reference_weight'.find(filter)!=-1)
        if self.tr("code_mod_sort_oc_property_reference_weight")!="code_mod_sort_oc_property_reference_weight":
            self.codemod_sort_oc_property_reference_weight.setVisible(filter=='' or 'mod_sort_oc_property_reference_weight'.find(filter)!=-1)
        self.namemod_sort_oc_property_reference_weight.setVisible(filter=='' or 'mod_sort_oc_property_reference_weight'.find(filter)!=-1)
        self.mod_sort_oc_property_reference_weight.setVisible(filter=='' or 'mod_sort_oc_property_reference_weight'.find(filter)!=-1)
        self.labelmod_sort_oc_property_getter_weight.setVisible(filter=='' or 'mod_sort_oc_property_getter_weight'.find(filter)!=-1)
        if self.tr("code_mod_sort_oc_property_getter_weight")!="code_mod_sort_oc_property_getter_weight":
            self.codemod_sort_oc_property_getter_weight.setVisible(filter=='' or 'mod_sort_oc_property_getter_weight'.find(filter)!=-1)
        self.namemod_sort_oc_property_getter_weight.setVisible(filter=='' or 'mod_sort_oc_property_getter_weight'.find(filter)!=-1)
        self.mod_sort_oc_property_getter_weight.setVisible(filter=='' or 'mod_sort_oc_property_getter_weight'.find(filter)!=-1)
        self.labelmod_sort_oc_property_setter_weight.setVisible(filter=='' or 'mod_sort_oc_property_setter_weight'.find(filter)!=-1)
        if self.tr("code_mod_sort_oc_property_setter_weight")!="code_mod_sort_oc_property_setter_weight":
            self.codemod_sort_oc_property_setter_weight.setVisible(filter=='' or 'mod_sort_oc_property_setter_weight'.find(filter)!=-1)
        self.namemod_sort_oc_property_setter_weight.setVisible(filter=='' or 'mod_sort_oc_property_setter_weight'.find(filter)!=-1)
        self.mod_sort_oc_property_setter_weight.setVisible(filter=='' or 'mod_sort_oc_property_setter_weight'.find(filter)!=-1)
        self.labelmod_sort_oc_property_nullability_weight.setVisible(filter=='' or 'mod_sort_oc_property_nullability_weight'.find(filter)!=-1)
        if self.tr("code_mod_sort_oc_property_nullability_weight")!="code_mod_sort_oc_property_nullability_weight":
            self.codemod_sort_oc_property_nullability_weight.setVisible(filter=='' or 'mod_sort_oc_property_nullability_weight'.find(filter)!=-1)
        self.namemod_sort_oc_property_nullability_weight.setVisible(filter=='' or 'mod_sort_oc_property_nullability_weight'.find(filter)!=-1)
        self.mod_sort_oc_property_nullability_weight.setVisible(filter=='' or 'mod_sort_oc_property_nullability_weight'.find(filter)!=-1)
        self.labelpp_indent.setVisible(filter=='' or 'pp_indent'.find(filter)!=-1)
        if self.tr("code_pp_indent")!="code_pp_indent":
            self.codepp_indent.setVisible(filter=='' or 'pp_indent'.find(filter)!=-1)
        self.namepp_indent.setVisible(filter=='' or 'pp_indent'.find(filter)!=-1)
        self.pp_indent.setVisible(filter=='' or 'pp_indent'.find(filter)!=-1)
        self.labelpp_indent_at_level.setVisible(filter=='' or 'pp_indent_at_level'.find(filter)!=-1)
        if self.tr("code_pp_indent_at_level")!="code_pp_indent_at_level":
            self.codepp_indent_at_level.setVisible(filter=='' or 'pp_indent_at_level'.find(filter)!=-1)
        self.namepp_indent_at_level.setVisible(filter=='' or 'pp_indent_at_level'.find(filter)!=-1)
        self.pp_indent_at_level.setVisible(filter=='' or 'pp_indent_at_level'.find(filter)!=-1)
        self.labelpp_indent_count.setVisible(filter=='' or 'pp_indent_count'.find(filter)!=-1)
        if self.tr("code_pp_indent_count")!="code_pp_indent_count":
            self.codepp_indent_count.setVisible(filter=='' or 'pp_indent_count'.find(filter)!=-1)
        self.namepp_indent_count.setVisible(filter=='' or 'pp_indent_count'.find(filter)!=-1)
        self.pp_indent_count.setVisible(filter=='' or 'pp_indent_count'.find(filter)!=-1)
        self.labelpp_space.setVisible(filter=='' or 'pp_space'.find(filter)!=-1)
        if self.tr("code_pp_space")!="code_pp_space":
            self.codepp_space.setVisible(filter=='' or 'pp_space'.find(filter)!=-1)
        self.namepp_space.setVisible(filter=='' or 'pp_space'.find(filter)!=-1)
        self.pp_space.setVisible(filter=='' or 'pp_space'.find(filter)!=-1)
        self.labelpp_space_count.setVisible(filter=='' or 'pp_space_count'.find(filter)!=-1)
        if self.tr("code_pp_space_count")!="code_pp_space_count":
            self.codepp_space_count.setVisible(filter=='' or 'pp_space_count'.find(filter)!=-1)
        self.namepp_space_count.setVisible(filter=='' or 'pp_space_count'.find(filter)!=-1)
        self.pp_space_count.setVisible(filter=='' or 'pp_space_count'.find(filter)!=-1)
        self.labelpp_indent_region.setVisible(filter=='' or 'pp_indent_region'.find(filter)!=-1)
        if self.tr("code_pp_indent_region")!="code_pp_indent_region":
            self.codepp_indent_region.setVisible(filter=='' or 'pp_indent_region'.find(filter)!=-1)
        self.namepp_indent_region.setVisible(filter=='' or 'pp_indent_region'.find(filter)!=-1)
        self.pp_indent_region.setVisible(filter=='' or 'pp_indent_region'.find(filter)!=-1)
        self.labelpp_region_indent_code.setVisible(filter=='' or 'pp_region_indent_code'.find(filter)!=-1)
        if self.tr("code_pp_region_indent_code")!="code_pp_region_indent_code":
            self.codepp_region_indent_code.setVisible(filter=='' or 'pp_region_indent_code'.find(filter)!=-1)
        self.namepp_region_indent_code.setVisible(filter=='' or 'pp_region_indent_code'.find(filter)!=-1)
        self.pp_region_indent_code.setVisible(filter=='' or 'pp_region_indent_code'.find(filter)!=-1)
        self.labelpp_indent_if.setVisible(filter=='' or 'pp_indent_if'.find(filter)!=-1)
        if self.tr("code_pp_indent_if")!="code_pp_indent_if":
            self.codepp_indent_if.setVisible(filter=='' or 'pp_indent_if'.find(filter)!=-1)
        self.namepp_indent_if.setVisible(filter=='' or 'pp_indent_if'.find(filter)!=-1)
        self.pp_indent_if.setVisible(filter=='' or 'pp_indent_if'.find(filter)!=-1)
        self.labelpp_if_indent_code.setVisible(filter=='' or 'pp_if_indent_code'.find(filter)!=-1)
        if self.tr("code_pp_if_indent_code")!="code_pp_if_indent_code":
            self.codepp_if_indent_code.setVisible(filter=='' or 'pp_if_indent_code'.find(filter)!=-1)
        self.namepp_if_indent_code.setVisible(filter=='' or 'pp_if_indent_code'.find(filter)!=-1)
        self.pp_if_indent_code.setVisible(filter=='' or 'pp_if_indent_code'.find(filter)!=-1)
        self.labelpp_define_at_level.setVisible(filter=='' or 'pp_define_at_level'.find(filter)!=-1)
        if self.tr("code_pp_define_at_level")!="code_pp_define_at_level":
            self.codepp_define_at_level.setVisible(filter=='' or 'pp_define_at_level'.find(filter)!=-1)
        self.namepp_define_at_level.setVisible(filter=='' or 'pp_define_at_level'.find(filter)!=-1)
        self.pp_define_at_level.setVisible(filter=='' or 'pp_define_at_level'.find(filter)!=-1)
        self.labelpp_ignore_define_body.setVisible(filter=='' or 'pp_ignore_define_body'.find(filter)!=-1)
        if self.tr("code_pp_ignore_define_body")!="code_pp_ignore_define_body":
            self.codepp_ignore_define_body.setVisible(filter=='' or 'pp_ignore_define_body'.find(filter)!=-1)
        self.namepp_ignore_define_body.setVisible(filter=='' or 'pp_ignore_define_body'.find(filter)!=-1)
        self.pp_ignore_define_body.setVisible(filter=='' or 'pp_ignore_define_body'.find(filter)!=-1)
        self.labelpp_indent_case.setVisible(filter=='' or 'pp_indent_case'.find(filter)!=-1)
        if self.tr("code_pp_indent_case")!="code_pp_indent_case":
            self.codepp_indent_case.setVisible(filter=='' or 'pp_indent_case'.find(filter)!=-1)
        self.namepp_indent_case.setVisible(filter=='' or 'pp_indent_case'.find(filter)!=-1)
        self.pp_indent_case.setVisible(filter=='' or 'pp_indent_case'.find(filter)!=-1)
        self.labelpp_indent_func_def.setVisible(filter=='' or 'pp_indent_func_def'.find(filter)!=-1)
        if self.tr("code_pp_indent_func_def")!="code_pp_indent_func_def":
            self.codepp_indent_func_def.setVisible(filter=='' or 'pp_indent_func_def'.find(filter)!=-1)
        self.namepp_indent_func_def.setVisible(filter=='' or 'pp_indent_func_def'.find(filter)!=-1)
        self.pp_indent_func_def.setVisible(filter=='' or 'pp_indent_func_def'.find(filter)!=-1)
        self.labelpp_indent_extern.setVisible(filter=='' or 'pp_indent_extern'.find(filter)!=-1)
        if self.tr("code_pp_indent_extern")!="code_pp_indent_extern":
            self.codepp_indent_extern.setVisible(filter=='' or 'pp_indent_extern'.find(filter)!=-1)
        self.namepp_indent_extern.setVisible(filter=='' or 'pp_indent_extern'.find(filter)!=-1)
        self.pp_indent_extern.setVisible(filter=='' or 'pp_indent_extern'.find(filter)!=-1)
        self.labelpp_indent_brace.setVisible(filter=='' or 'pp_indent_brace'.find(filter)!=-1)
        if self.tr("code_pp_indent_brace")!="code_pp_indent_brace":
            self.codepp_indent_brace.setVisible(filter=='' or 'pp_indent_brace'.find(filter)!=-1)
        self.namepp_indent_brace.setVisible(filter=='' or 'pp_indent_brace'.find(filter)!=-1)
        self.pp_indent_brace.setVisible(filter=='' or 'pp_indent_brace'.find(filter)!=-1)
        self.labelinclude_category_0.setVisible(filter=='' or 'include_category_0'.find(filter)!=-1)
        if self.tr("code_include_category_0")!="code_include_category_0":
            self.codeinclude_category_0.setVisible(filter=='' or 'include_category_0'.find(filter)!=-1)
        self.nameinclude_category_0.setVisible(filter=='' or 'include_category_0'.find(filter)!=-1)
        self.include_category_0.setVisible(filter=='' or 'include_category_0'.find(filter)!=-1)
        self.labelinclude_category_1.setVisible(filter=='' or 'include_category_1'.find(filter)!=-1)
        if self.tr("code_include_category_1")!="code_include_category_1":
            self.codeinclude_category_1.setVisible(filter=='' or 'include_category_1'.find(filter)!=-1)
        self.nameinclude_category_1.setVisible(filter=='' or 'include_category_1'.find(filter)!=-1)
        self.include_category_1.setVisible(filter=='' or 'include_category_1'.find(filter)!=-1)
        self.labelinclude_category_2.setVisible(filter=='' or 'include_category_2'.find(filter)!=-1)
        if self.tr("code_include_category_2")!="code_include_category_2":
            self.codeinclude_category_2.setVisible(filter=='' or 'include_category_2'.find(filter)!=-1)
        self.nameinclude_category_2.setVisible(filter=='' or 'include_category_2'.find(filter)!=-1)
        self.include_category_2.setVisible(filter=='' or 'include_category_2'.find(filter)!=-1)
        self.labeluse_indent_func_call_param.setVisible(filter=='' or 'use_indent_func_call_param'.find(filter)!=-1)
        if self.tr("code_use_indent_func_call_param")!="code_use_indent_func_call_param":
            self.codeuse_indent_func_call_param.setVisible(filter=='' or 'use_indent_func_call_param'.find(filter)!=-1)
        self.nameuse_indent_func_call_param.setVisible(filter=='' or 'use_indent_func_call_param'.find(filter)!=-1)
        self.use_indent_func_call_param.setVisible(filter=='' or 'use_indent_func_call_param'.find(filter)!=-1)
        self.labeluse_indent_continue_only_once.setVisible(filter=='' or 'use_indent_continue_only_once'.find(filter)!=-1)
        if self.tr("code_use_indent_continue_only_once")!="code_use_indent_continue_only_once":
            self.codeuse_indent_continue_only_once.setVisible(filter=='' or 'use_indent_continue_only_once'.find(filter)!=-1)
        self.nameuse_indent_continue_only_once.setVisible(filter=='' or 'use_indent_continue_only_once'.find(filter)!=-1)
        self.use_indent_continue_only_once.setVisible(filter=='' or 'use_indent_continue_only_once'.find(filter)!=-1)
        self.labelindent_cpp_lambda_only_once.setVisible(filter=='' or 'indent_cpp_lambda_only_once'.find(filter)!=-1)
        if self.tr("code_indent_cpp_lambda_only_once")!="code_indent_cpp_lambda_only_once":
            self.codeindent_cpp_lambda_only_once.setVisible(filter=='' or 'indent_cpp_lambda_only_once'.find(filter)!=-1)
        self.nameindent_cpp_lambda_only_once.setVisible(filter=='' or 'indent_cpp_lambda_only_once'.find(filter)!=-1)
        self.indent_cpp_lambda_only_once.setVisible(filter=='' or 'indent_cpp_lambda_only_once'.find(filter)!=-1)
        self.labeluse_sp_after_angle_always.setVisible(filter=='' or 'use_sp_after_angle_always'.find(filter)!=-1)
        if self.tr("code_use_sp_after_angle_always")!="code_use_sp_after_angle_always":
            self.codeuse_sp_after_angle_always.setVisible(filter=='' or 'use_sp_after_angle_always'.find(filter)!=-1)
        self.nameuse_sp_after_angle_always.setVisible(filter=='' or 'use_sp_after_angle_always'.find(filter)!=-1)
        self.use_sp_after_angle_always.setVisible(filter=='' or 'use_sp_after_angle_always'.find(filter)!=-1)
        self.labeluse_options_overriding_for_qt_macros.setVisible(filter=='' or 'use_options_overriding_for_qt_macros'.find(filter)!=-1)
        if self.tr("code_use_options_overriding_for_qt_macros")!="code_use_options_overriding_for_qt_macros":
            self.codeuse_options_overriding_for_qt_macros.setVisible(filter=='' or 'use_options_overriding_for_qt_macros'.find(filter)!=-1)
        self.nameuse_options_overriding_for_qt_macros.setVisible(filter=='' or 'use_options_overriding_for_qt_macros'.find(filter)!=-1)
        self.use_options_overriding_for_qt_macros.setVisible(filter=='' or 'use_options_overriding_for_qt_macros'.find(filter)!=-1)
        self.labeluse_form_feed_no_more_as_whitespace_character.setVisible(filter=='' or 'use_form_feed_no_more_as_whitespace_character'.find(filter)!=-1)
        if self.tr("code_use_form_feed_no_more_as_whitespace_character")!="code_use_form_feed_no_more_as_whitespace_character":
            self.codeuse_form_feed_no_more_as_whitespace_character.setVisible(filter=='' or 'use_form_feed_no_more_as_whitespace_character'.find(filter)!=-1)
        self.nameuse_form_feed_no_more_as_whitespace_character.setVisible(filter=='' or 'use_form_feed_no_more_as_whitespace_character'.find(filter)!=-1)
        self.use_form_feed_no_more_as_whitespace_character.setVisible(filter=='' or 'use_form_feed_no_more_as_whitespace_character'.find(filter)!=-1)
        self.labelwarn_level_tabs_found_in_verbatim_string_literals.setVisible(filter=='' or 'warn_level_tabs_found_in_verbatim_string_literals'.find(filter)!=-1)
        if self.tr("code_warn_level_tabs_found_in_verbatim_string_literals")!="code_warn_level_tabs_found_in_verbatim_string_literals":
            self.codewarn_level_tabs_found_in_verbatim_string_literals.setVisible(filter=='' or 'warn_level_tabs_found_in_verbatim_string_literals'.find(filter)!=-1)
        self.namewarn_level_tabs_found_in_verbatim_string_literals.setVisible(filter=='' or 'warn_level_tabs_found_in_verbatim_string_literals'.find(filter)!=-1)
        self.warn_level_tabs_found_in_verbatim_string_literals.setVisible(filter=='' or 'warn_level_tabs_found_in_verbatim_string_literals'.find(filter)!=-1)
        self.labeldebug_max_number_of_loops.setVisible(filter=='' or 'debug_max_number_of_loops'.find(filter)!=-1)
        if self.tr("code_debug_max_number_of_loops")!="code_debug_max_number_of_loops":
            self.codedebug_max_number_of_loops.setVisible(filter=='' or 'debug_max_number_of_loops'.find(filter)!=-1)
        self.namedebug_max_number_of_loops.setVisible(filter=='' or 'debug_max_number_of_loops'.find(filter)!=-1)
        self.debug_max_number_of_loops.setVisible(filter=='' or 'debug_max_number_of_loops'.find(filter)!=-1)
        self.labeldebug_line_number_to_protocol.setVisible(filter=='' or 'debug_line_number_to_protocol'.find(filter)!=-1)
        if self.tr("code_debug_line_number_to_protocol")!="code_debug_line_number_to_protocol":
            self.codedebug_line_number_to_protocol.setVisible(filter=='' or 'debug_line_number_to_protocol'.find(filter)!=-1)
        self.namedebug_line_number_to_protocol.setVisible(filter=='' or 'debug_line_number_to_protocol'.find(filter)!=-1)
        self.debug_line_number_to_protocol.setVisible(filter=='' or 'debug_line_number_to_protocol'.find(filter)!=-1)